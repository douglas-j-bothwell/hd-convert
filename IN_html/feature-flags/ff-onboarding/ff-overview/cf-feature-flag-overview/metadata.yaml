type: article
article_id: 7n9433hkc0
user_id: vt9reb71i4
category_id: tsswat9k6o
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Feature Flags Overview
slug: cf-feature-flag-overview
description: This article shows you how to build Feature Management Feature management
  solutions enable businesses to dynamically control the availability of application
  features to end-users. In simple terms, a…
short_version: This article shows you how to build Feature Management Feature management
  solutions enable businesses to dynamically control the availability of application
  features to end-users. In simple terms, a…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-10T15:02:10.553542Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Feature Flags Overview
  description: This article shows you how to build Feature Management Feature management
    solutions enable businesses to dynamically control the availability of application
    features to end-users. In simple terms, a…
  short_version: This article shows you how to build Feature Management Feature management
    solutions enable businesses to dynamically control the availability of application
    features to end-users. In simple terms, a…
  body: '<p>Harness Feature Flags (FF) is a feature management solution that lets
    you change your software&#39;s functionality without deploying new code. It does
    this by allowing you to hide code or behavior without having to ship new versions
    of the software. A feature flag is like a powerful <code>if</code> statement.</p><pre>if(HarnessFeatureFlag[&#34;newamazingfeature&#34;]
    == true) {<br/>  renderNewAmazingFeature();<br/>}</pre><p></p><p>A Feature Flag
    is a decision point in your code that can change the behavior of your software.
    It can help you plan the following strategies:</p><ul><li>Who gets access to the
    feature first</li><li>Who can beta test the changes</li><li>Progressive rollouts
    of the feature</li><li>Turn on a feature on a specific date</li></ul><h3>Visual
    summary</h3><p>For a summary of how Harness Feature Flags works, watch the following
    video:</p><details><summary>Watch the Harness Feature Flags overview</summary><div><div
    class="hd--html"><figure><iframe src="//fast.wistia.com/embed/iframe/h6iegycy0a"
    width="560" height="315" frameborder="0" allowfullscreen=""></iframe></figure></div></div></details><h3>Blog
    posts</h3><p>You can also read our blog posts to introduce you to Feature Flags:</p><ul><li><a
    href="https://harness.io/blog/product-updates/introducing-harness-feature-flags/">Introducing
    Harness Feature Flags</a></li><li><a href="https://harness.io/blog/feature-flags/what-are-feature-flags/">Feature
    Flags: What They Are &amp; How To Use Them</a></li><li><a href="https://harness.io/blog/feature-flags/implement-your-first-feature-flag/">Implement
    Your First Feature Flag</a></li></ul><h3>Reasons to use Feature Flags</h3><p>Feature
    Flag management provides the following opportunities to the developers:</p><h4>Ship
    only when you&#39;re ready</h4><p>With the rise of continuous delivery, development
    teams ship new code to production all the time. However, this fast pace of shipping
    the code brings new kinds of risks.</p><p></p><p>Feature Flags provide the control
    to developers to ship the features only when they are ready. The teams can push
    new codes directly to users in minutes using the feature flags.</p><h4>Test in
    production</h4><p>Having an opportunity to test with real, live users in the production
    environment can provide a much more accurate understanding of the system’s behavior.
    But how do you perform testing in the production environment without worrying
    about roll‐back or redeploy in case of any roadblocks? The feature flag management
    platform comes with powerful targeting and custom rules to control access to new
    features. You can instantly turn off the access to any feature, bringing back
    the old behavior simply by toggling the Feature Flag.</p><h4>Percentage deployments</h4><p>In
    a percentage-based rollout, small numbers of users are selected to test the new
    feature. You can gradually increase or decrease that percentage over time. This
    method provides the opportunity to observe the behavior of the system under new
    changes. You can push the changes to all your user bases only when the changes
    are stable and user feedback is positive.</p><h4>User feedback</h4><p>The ability
    to release changes to a limited set of users makes it much easier to gather feedback
    about the product. You can create a beta group of users and target feature flags
    specifically to that group. Testing new features with a subset of users allows
    developers to find and address the bugs before the major release.</p><p></p>'
  slug: cf-feature-flag-overview
  tags: []
  is_live: true
