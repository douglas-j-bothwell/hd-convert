type: article
article_id: aoe0y33mut
user_id: vt9reb71i4
category_id: kkiqy1f6d7
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Apex SDK Reference
slug: apex-sdk-reference
description: This topic describes how to use the Harness Feature Flags Apex SDK for
  your Apex application. For getting started quickly, you can use our sample code
  from the Apex SDK README. You can also clone and…
short_version: This topic describes how to use the Harness Feature Flags Apex SDK
  for your Apex application. For getting started quickly, you can use our sample code
  from the Apex SDK README. You can also clone and…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-10-11T13:26:04.873915Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Apex SDK Reference
  description: This topic describes how to use the Harness Feature Flags Apex SDK
    for your Apex application. For getting started quickly, you can use our sample
    code from the Apex SDK README. You can also clone and…
  short_version: This topic describes how to use the Harness Feature Flags Apex SDK
    for your Apex application. For getting started quickly, you can use our sample
    code from the Apex SDK README. You can also clone and…
  body: '<div class="note-callout">This SDK is currently in beta. </div><p>This topic
    describes how to use the Harness Feature Flags Apex SDK for your Apex application.</p><p>For
    getting started quickly, you can use our <a href="https://github.com/harness/ff-apex-server-sdk/blob/main/README.md"
    target="_blank">sample code from the Apex SDK README</a>. You can also <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> and run a <a href="https://github.com/harness/ff-apex-server-sample"
    target="_blank">sample application</a> from the <a href="https://github.com/harness/ff-apex-server-sdk"
    target="_blank">Apex SDK GitHub Repository.</a></p><h3>Before you begin</h3><p>Make
    sure you read and understand:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview"
    target="_blank">Feature Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features"
    target="_blank">Getting Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks"
    target="_blank">Client-Side and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags"
    target="_blank">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><p>This
    SDK is currently in beta. </p><h3>Requirements</h3><p>To use this SDK, make sure
    you:  </p><ul><li>Install <a href="https://developer.salesforce.com/tools/sfdxcli"
    target="_blank">SalesForce SFDX cli</a>.</li><li><a href="https://github.com/harness/ff-apex-server-sdk"
    target="_blank">Download the SDK from our GitHub repository</a></li><li>Create
    an Apex application, or <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> our <a href="https://github.com/harness/ff-apex-server-sample"
    target="_blank">sample application</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag"
    target="_blank">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called
    harnessappdemodarkmode.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key"
    target="_blank">Create an SDK key and make a copy of it</a></li></ul><h3>Install
    the SDK</h3><p>Install the SDK by running the following command:</p><p><code>$&gt;
    sfdx force:source:deploy --targetusername=&#39;YOUR TARGET ORG&#39; --sourcepath=&#39;force-app&#39;</code></p><h3>Initialize
    the SDK</h3><p>To initialize the Apex SDK, you need to:</p><ol><li>Add your Server
    SDK key to connect to your Harness Environment.</li><li>Add a Target that you
    want to Evaluate against a Feature Flag.</li><li>(Optional) Configure the SDK.</li><li>Complete
    the initialization with the SDK using the Server SDK Key, Target, and Configuration
    parameters you set.</li></ol><h4>Add the Server SDK Key</h4><p>To connect to the
    correct Environment that you set up on the Harness Platform, you need to add the
    Server SDK Key from that Environment. Input the Server SDK Key, for example:</p><p><code>FFClient
    client = new FFClient(&#39;Your SDK Key&#39;, target, config);</code></p><h4>Add
    a Target </h4><div class="note-callout"><strong>What is a Target?</strong><br/><br/>Targets
    are used to control which users see which Variation of a Feature Flag, for example,
    if you want to do internal testing, you can enable the Flag for some users and
    not others. When creating a Target, you give it a name and a unique identifier.
    Often Targets are users but you can create a Target from anything that can be
    uniquely identified, such as an app or a machine.<br/><br/>For more information
    about Targets, see <a href="/article/xf3hmxbaji-targeting-users-with-flags" target="_blank">Targeting
    Users With Flags</a>.</div><p>To create a Target, pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p>Identifier</p></td><td><p>Unique
    ID for the Target</p></td><td><p>Required</p></td><td><p><code>.identifier(&#39;Harness&#39;)</code></p></td></tr><tr><td><p>Name</p></td><td><p>Name
    for this Target. This does not have to be unique. </p><p>Note: If you don’t provide
    a value, Harness uses the ID as the name. </p></td><td><p>Optional</p></td><td><p><code>.name(&#39;Harness&#39;)</code></p></td></tr></tbody></table><p> </p><p>For
    example:</p><p><code>FFTarget target = FFTarget.builder().identifier(&#39;Harness&#39;).name(&#39;Harness&#39;).build();</code></p><h4>Configure
    the SDK</h4><p>When initializing the SDK, you also have the option of providing
    alternative configurations by using FFConfig.Builder(). </p><p>You can configure
    the following base features of the SDK:</p><table><tbody><tr><td><p>Name</p></td><td><p>Description</p></td><td><p>Default
    value</p></td></tr><tr><td><p>baseURL</p></td><td><p>The URL used to fetch Feature
    Flag Evaluations. When using the Relay Proxy, change this to: http://localhost:7000</p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>evalExpireAfter</p></td><td><p>The
    time (in seconds) that evaluations expire. The minimum allowed is 300 seconds. </p></td><td><p><code>300</code></p></td></tr><tr><td><p>evalExpireAuth</p></td><td><p>The
    time (in seconds) that re-authentication occurs. The minimum allowed is 300 seconds. </p></td><td><p><code>300</code> </p></td></tr><tr><td><p>cache</p></td><td><p>The
    details of your cache. You must set the namespace and partition.</p></td><td><p>No
    default - you must set the namespace and partition.</p></td></tr></tbody></table><p> </p><p>For
    example: </p><pre>// set cache Namespace and Partition<br/>FFOrgCache cache =
    new FFOrgCache(&#39;local&#39;, &#39;basic&#39;);<br/>FFConfig config = new FFConfig.builder().cache(cache).build();</pre><h4>Complete
    the initialization</h4><p>To complete the initialization, create an instance of
    the FFClient and pass in the sdkKey, target data, and any configuration options
    you want to include, for example: </p><p><code>FFClient client = new FFClient(&#39;Your
    SDK Key&#39;, target, config);</code></p><h4>Sample of initializing the SDK</h4><pre>//
    Set flagKey to the feature flag key you want to evaluate.<br/>String flag = &#39;harnessappdemodarkmode&#39;;<br/><br/>//
    set cache Namespace and Partition<br/>FFOrgCache cache = new FFOrgCache(&#39;local&#39;,
    &#39;basic&#39;);<br/>FFConfig config = new FFConfig.builder().cache(cache).build(); <br/><br/>//
    Set up the target properties.<br/>FFTarget target = FFTarget.builder().identifier(&#39;Harness&#39;).name(&#39;Harness&#39;).build();<br/>FFClient
    client = new FFClient(&#39;Your SDK Key&#39;, target, config);</pre><p> </p><h3>Evaluating
    a Flag</h3><p>Evaluating a Flag is when the SDK processes all Flag rules and returns
    the correct Variation of that Flag for the Target you provide. </p><p>If a matching
    Flag can’t be found, or the SDK can’t remotely fetch flags, the default value
    is returned. </p><p>There are different methods for the different Variation types
    and for each method you need to pass in:</p><ul><li>Identifier of the Flag you
    want to evaluate</li><li>The Target object you want to evaluate against</li><li>The
    default Variation</li></ul><p>For example:</p><pre>// Bool evaluation<br/>Boolean
    value = client.evaluate(flag, false);<br/>System.debug(&#39;Feature flag &#39;
    + flag + &#39; is &#39;+ value + &#39; for this user&#39;);</pre><p> </p><h3>Test
    your app is connected to Harness</h3><p>When you receive a response showing the
    current status of your Feature Flag, go to the Harness Platform and toggle the
    Flag on and off. Then, check your app to verify if the Flag Variation displayed
    is updated with the Variation you toggled.</p><h3>Sample code for an Apex application</h3><pre>//
    Set flagKey to the feature flag key you want to evaluate.<br/>String flag = &#39;harnessappdemodarkmode&#39;;<br/> <br/>//
    set cache Namespace and Partition<br/>FFOrgCache cache = new FFOrgCache(&#39;local&#39;,
    &#39;basic&#39;);<br/>FFConfig config = new FFConfig.builder().baseUrl(“harness
    url”).evalExpireAfter(300).authExpireAfter(60*60*24).cache(cache).build();<br/> <br/>//
    Set up the target properties.<br/>FFTarget target = FFTarget.builder().identifier(&#39;HT_1&#39;).name(&#39;Harness_Target_1&#39;).build();<br/> <br/>FFClient
    client = new FFClient(&#39;Your SDK Key&#39;, target, config);<br/> <br/>// Bool
    evaluation<br/>Boolean value = client.evaluate(flag, false);<br/>System.debug(&#39;Feature
    flag &#39; + flag + &#39; is &#39;+ value + &#39; for this user&#39;);</pre><p> </p>'
  slug: apex-sdk-reference
  tags: []
  is_live: true
