type: article
article_id: mmf7cu2owg
user_id: vt9reb71i4
category_id: y1oewjcb0q
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Flutter SDK Reference
slug: flutter-sdk-reference
description: This topic explains how to use the Feature Flags (FF) (CF) SDK in your
  Flutter application.
short_version: This topic explains how to use the Feature Flags (FF) SDK in your Flutter
  application.
tags:
- flutter
- feature flag
- SDK
- Flutter SDK
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-18T19:12:50.464947Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Flutter SDK Reference
  description: This topic explains how to use the Feature Flags (FF) (CF) SDK in your
    Flutter application.
  short_version: This topic explains how to use the Feature Flags (FF) SDK in your
    Flutter application.
  body: '<p>This topic describes how to use the Harness Feature Flags SDK for your
    Flutter application. </p><p>For getting started quickly, you can use our <a href="https://github.com/harness/ff-flutter-client-sdk/blob/main/README.md"
    target="_blank">sample code from the SDK README</a>. You can also <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository">clone</a>
    and run a sample application from the <a href="https://github.com/harness/ff-flutter-client-sdk"
    target="_blank">Flutter SDK GitHub Repository.</a></p><h3>Before you begin</h3><p>You
    should read and understand the following:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview">Feature
    Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features">Getting
    Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks">Client-Side
    and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags">Communication
    Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class="note-callout">The current version of this SDK is <strong>1</strong><strong>.0.4.</strong></div><h3>Requirements</h3><p>To
    use this SDK, make sure you:</p><ul><li>Install the <a href="https://docs.flutter.dev/get-started/install"
    target="_blank">Flutter SDK, version 2.10.4 or higher</a>.</li><li>(For iOS apps)
    Install <a href="https://docs.flutter.dev/get-started/install/macos#install-xcode"
    target="_blank">Xcode</a>.</li><li>(For Android apps) Install <a href="https://developer.android.com/studio?gclid=CjwKCAjwp7eUBhBeEiwAZbHwkRqdhQkk6wroJeWGu0uGWjW9Ue3hFXc4SuB6lwYU4LOZiZ-MQ4p57BoCvF0QAvD_BwE&amp;gclsrc=aw.ds"
    target="_blank">Android Studio</a>, or install the Android SDK for Command-Line
    Interface (CLI) only.</li></ul><div class="note-callout">To check you have installed
    the prerequisites, run the <code>flutter doctor</code> command.</div><ul><li><a
    href="https://github.com/harness/ff-flutter-client-sdk" target="_blank">Download
    the SDK from our GitHub repository</a></li><li>Create a Flutter application, or
    <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> our <a href="https://github.com/harness/ff-flutter-client-sdk"
    target="_blank">sample application</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag"
    target="_blank">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called
    <code>harnessappdemodarkmode</code>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key"
    target="_blank">Create an SDK key and make a copy of it</a>.</li></ul><h3>Install
    the SDK</h3><p>To install the SDK, add the Feature Flag Flutter SDK dependency
    into the <code>pubspec.yaml</code> file, for example:</p><pre>ff_flutter_client_sdk:
    ^1.0.4</pre><p></p><p>Then import the following packages into your project:</p><pre>import
    &#39;package:ff_flutter_client_sdk/CfClient.dart&#39;;<br/>import &#39;package:ff_flutter_client_sdk/CfConfiguration.dart&#39;;<br/>import
    &#39;package:ff_flutter_client_sdk/CfTarget.dart&#39;;</pre><h3>Initialize the
    SDK</h3><p>To initialize the Flutter SDK, you need to:</p><ol><li>Add a Target
    that you want to Evaluate against a Feature Flag.</li><li>(Optional) Configure
    the SDK options.</li><li>Add your Client SDK key to connect to your Harness Environment.</li><li>Complete
    the initialization with the SDK using the Client SDK Key, Target, and Configuration
    parameters you set.</li></ol><h4>Add a Target to Evaluate</h4><div class="tip-callout"><strong>What
    is a Target?</strong><br/>Targets are used to control which users see which Variation
    of a Feature Flag, for example, if you want to do internal testing, you can enable
    the Flag for some users and not others. When creating a Target, you give it a
    name and a unique identifier. Often Targets are users but you can create a Target
    from anything that can be uniquely identified, such as an app or a machine.<br/><br/>For
    more information about Targets, go to <a href="/article/xf3hmxbaji-targeting-users-with-flags"
    target="_blank">Targeting Users With Flags</a>.</div><p>To add a Target, build
    it and pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p>identifier</p></td><td><p>Unique
    ID for the Target.</p><p>Read <strong>Regex requirements for Target names and
    identifiers</strong> below for accepted characters.</p></td><td><p>Required</p></td><td><p><code>.setIdentifier(&#34;HT_1&#34;)</code></p></td></tr><tr><td><p>name</p></td><td><p>Name
    for this Target. This does not have to be unique. </p><p><strong>Note</strong>:
    If you don’t provide a value, the name will be the same as the identifier.</p><p>Read <strong>Regex
    requirements for Target names and identifiers</strong> below for accepted characters.</p></td><td><p>Optional</p><p><strong>Note</strong>:
    If you don&#39;t want to send a name, don&#39;t send the parameter. Sending an
    empty argument will cause an error.</p></td><td><p><code>.setName(&#34;Harness_Target_1&#34;)</code></p></td></tr></tbody></table><p></p><details><summary>Regex
    requirements for Target names and identifiers</summary><div><strong>Identifier<br/></strong>Regex:
    <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/><br/>The characters can be lowercase or uppercase but cannot
    include accented letters, for example <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex:
    <code>^[\\p{L}\\d .@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/> (space)<br/><br/>The characters can be lowercase or uppercase
    and can include accented letters, for example <code>Café_123</code>.</div></details><p>For
    example:</p><pre>var target = CfTargetBuilder().setIdentifier(&#34;HT_1&#34;).setName(&#34;Harness_Target_1&#34;).build();</pre><h4>Configure
    the SDK</h4><p>You can configure the following options for the SDK:</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Configuration
    Option</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p><code>setConfigUri(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL used to fetch Feature Flag Evaluations. When using the Relay Proxy, change
    this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventsUrl</p></td><td><p><code>setEventUrl(&#34;https://events.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>pollInterval</p></td><td><p><code>setPollingInterval(60)</code></p></td><td><p>The
    interval <strong>in seconds</strong> that we poll for changes when you are using
    stream mode.</p></td><td><p><code>60</code> (seconds)</p></td></tr><tr><td><p>enableStream</p></td><td><p><code>setStreamEnabled(True)</code></p></td><td><p>Set
    to <code>true</code> to enable streaming mode.</p><p>Set to <code>false</code>
    to disable streaming mode.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>enableAnalytics</p></td><td><p><code>setAnalyticsEnabled(True)</code></p></td><td><p>Set
    to <code>true</code> to enable analytics.</p><p>Set to <code>false</code> to disable
    analytics.</p><p><strong>Note</strong>: When enabled, analytics data is posted
    every 60 seconds.</p></td><td><p><code>true</code></p></td></tr></tbody></table><p></p><p>For
    example:</p><pre>// Flutter SDK Config<br/>var conf = CfConfigurationBuilder()<br/>        .setConfigUri(&#34;https://config.ff.harness.io/api/1.0&#34;)<br/>        .setEventUrl(&#34;https://events.ff.harness.io/api/1.0&#34;)<br/>        .setPollingInterval(60)<br/>        .setStreamEnabled(true)<br/>        .setAnalyticsEnabled(true)<br/>        .build();</pre><p></p><h4>Complete
    the initialization</h4><p><code>CfClient</code>  is a base class that provides
    all the features of the SDK, which can be accessed with <code>CfClient.initialize</code>.</p><p>To
    initialize the SDK, you must pass in the following:</p><ul><li><code>apiKey</code> -
    The Client SDK Key you created when <a href="https://ngdocs.harness.io/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key">creating
    the Feature Flag</a>.</li><li>Any configuration options you want to use.</li><li>The
    Target you want to evaluate.</li></ul><h4>Sample of initializing the SDK</h4><pre>final
    conf = CfConfigurationBuilder()<br/>    .setStreamEnabled(false)<br/>    .setPollingInterval(60)<br/>    .build();<br/><br/>final
    target = CfTargetBuilder().setIdentifier(name).build();<br/><br/>final res = await
    CfClient.initialize(apiKey, conf, target);</pre><p></p><h3>Evaluate a Flag</h3><p>Evaluating
    a Flag is when the SDK processes all Flag rules and returns the correct Variation
    of that Flag for the Target you provide. </p><p>If a matching Flag can’t be found,
    or the SDK can’t remotely fetch flags, the default value is returned. </p><p>There
    are different methods for the different Variation types and for each method you
    need to pass in:</p><ul><li>Identifier of the Flag you want to evaluate</li><li>The
    default Variation</li></ul><div class="note-callout">The Flag is evaluated against
    the Target you pass in when initializing the SDK.</div><h4>Evaluate a boolean
    Variation</h4><pre>//get boolean evaluation<br/>final evaluation = await CfClient.boolVariation(&#34;demo_bool_evaluation&#34;,
    false);<br/></pre><p></p><h4>Evaluate a number Variation</h4><pre>//get number
    evaluation<br/>final numberEvaluation = await CfClient.numberVariation(&#34;demo_number_evaluation&#34;,
    0);<br/></pre><p></p><h4>Evaluate a string Variation</h4><pre>//get string evaluation<br/>final
    stringEvaluation = await CfClient.stringVariation(&#34;demo_string_evaluation&#34;,
    &#34;default&#34;);<br/></pre><p></p><h4>Evaluate a JSON Variation</h4><pre>//get
    json evaluation<br/>final jsonEvaluation = await CfClient.jsonVariation(&#34;demo_json_evaluation&#34;,
    {});<br/></pre><p></p><h3>Listen for events</h3><h4>Register the events listener</h4><p>The <code>eventsListener</code> method
    provides a way to register a listener for different events that might be triggered
    by SDK.</p><p>The possible events and their responses are outlined in the following
    table:</p><table><tbody><tr><td><p><strong>EventType</strong></p></td><td><p><strong>Response</strong></p></td></tr><tr><td><p>SSE_START</p></td><td><p>null</p></td></tr><tr><td><p>SSE_END</p></td><td><p>null</p></td></tr><tr><td><p>EVALUATION_POLLING</p></td><td><p>List&lt;EvaluationResponse&gt;</p></td></tr><tr><td><p>EVALUATION_CHANGE</p></td><td><p>EvaluationResponse</p></td></tr></tbody></table><p></p><p>To
    listen for events, register the events listener, for example:</p><pre>CfClient.registerEventsListener((EvaluationResponse,
    EventType) {<br/>     <br/>    });<br/><br/></pre><p></p><p>The triggered event
    will return one of the following types:</p><pre>enum EventType {<br/>    SSE_START,<br/>    SSE_END,<br/>    EVALUATION_POLLING,<br/>    EVALUATION_CHANGE<br/>}</pre><p></p><h4>Close
    the events listener</h4><p>To avoid unexpected behavior, when the listener isn&#39;t
    needed, turn it off by calling <code>CfClient.getInstance().unregisterEventsListener(eventsListener),</code> for
    example:</p><pre>CfClient.unregisterEventsListener(eventsListener)</pre><p></p><h3>Test
    your app is connected to Harness</h3><p>When you receive a response showing the
    current status of your Feature Flag, go to the Harness Platform and toggle the
    Flag on and off. Then, check your app to verify if the Flag Variation displayed
    is updated with the Variation you toggled.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mmf7cu2owg/1656593738339/flutter.gif"
    style="display:block;margin-left:0;margin-right:auto" alt="A gif showing the Flag
    being toggled on the Harness app, and the effect it has on the code." data-hd-align="left"/></figure><h3>Close
    the SDK</h3><p>To avoid potential memory leaks, when you no longer need the SDK,
    you should close it. For example, when the app is closed, also close the SDK.</p><p>To
    close the SDK, call this method:</p><pre>CfClient.destroy()</pre><p></p><h3>Additional
    options</h3><h4>Use our public API methods</h4><p>The Public API exposes the following
    methods that you can use:</p><pre>static Future&lt;InitializationResult&gt; initialize(String
    apiKey, CfConfiguration configuration, CfTarget target)</pre><p></p><pre>static
    Future&lt;bool&gt; boolVariation(String evaluationId, bool defaultValue)</pre><p></p><pre>static
    Future&lt;String&gt; stringVariation(String evaluationId, String defaultValue)</pre><p></p><pre>static
    Future&lt;double&gt; numberVariation(String evaluationId, double defaultValue)</pre><p></p><pre>static
    Future&lt;Map&lt;dynamic, dynamic&gt;&gt; jsonVariation(String evaluationId, Map&lt;dynamic,
    dynamic&gt; defaultValue)</pre><p></p><pre>static Future&lt;void&gt; registerEventsListener(CfEventsListener
    listener)</pre><p></p><pre>static Future&lt;void&gt; unregisterEventsListener(CfEventsListener
    listener)</pre><p></p><pre>static Future&lt;void&gt; destroy()</pre><p></p><h3>Sample
    code for a Flutter application</h3><p>Here is a sample code for using FF SDKs
    with the Flutter application.</p><pre>final conf = CfConfigurationBuilder()<br/>    .setStreamEnabled(true)<br/>    .setPollingInterval(60)
    //time in seconds (minimum value is 60)<br/>    .build();<br/>final target = CfTargetBuilder().setIdentifier(name).build();<br/><br/>final
    res = await CfClient.initialize(apiKey, conf, target);<br/><br/><br/>//get number
    evaluation<br/>final numberEvaluation = await CfClient.numberVariation(&#34;demo_number_evaluation&#34;,
    0);<br/><br/>//get string evaluaation<br/>final stringEvaluation = await CfClient.stringVariation(&#34;demo_string_evaluation&#34;,
    &#34;default&#34;);<br/><br/>//get json evaluation<br/>final jsonEvaluation =
    await CfClient.jsonVariation(&#34;demo_json_evaluation&#34;, {});<br/><br/>CfClient.registerEventsListener((responseData,
    eventType) {<br/>    _eventListener = (responseData, eventType){};<br/>    switch
    (eventType) {<br/>      case EventType.SSE_START:<br/>        print(&#34;Started
    SSE&#34;);<br/>        break;<br/>      case EventType.SSE_END:<br/>        print(&#34;SSE
    Completed&#34;);<br/>        break;<br/>      case EventType.EVALUATION_CHANGE:<br/>        String
    flag = (responseData as EvaluationResponse).flag;<br/>        dynamic value =
    (responseData as EvaluationResponse).value;<br/><br/>        break;<br/>      case
    EventType.EVALUATION_POLLING:<br/>        List pollingResult = responseData;<br/><br/>        pollingResult.forEach((element)
    {<br/>          String flag = (element as EvaluationResponse).flag;<br/>          dynamic
    value = (element as EvaluationResponse).value;<br/><br/>        });<br/>        break;<br/>    }<br/>});<br/><br/>//Shutting
    down SDK<br/>CfClient.destroy()<br/></pre><p></p>'
  slug: flutter-sdk-reference
  tags:
  - flutter
  - feature flag
  - SDK
  - Flutter SDK
  is_live: true
