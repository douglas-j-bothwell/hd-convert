type: article
article_id: k8tz6mtiut
user_id: xwmdbyp4x8
category_id: 7ljl8n7mzn
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: Clone and Process Multiple Codebases in the Same Pipeline
slug: clone-and-process-multiple-codebases-in-the-same-pipeline
description: 'You can clone multiple codebases in the same Pipeline and then build
  artifacts from multiple repositories. This enables use cases such as: You use Packer
  and Ansible to build artifacts automatically.…'
short_version: 'You can clone multiple codebases in the same Pipeline and then build
  artifacts from multiple repositories. This enables use cases such as: You use Packer
  and Ansible to build artifacts automatically.…'
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-04-27T16:16:34.841375Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Clone and Process Multiple Codebases in the Same Pipeline
  description: ""
  short_version: ""
  body: '<p>You can clone multiple codebases in the same Pipeline and then build artifacts
    from multiple repositories. This enables use cases such as:</p><ul><li>You use
    Packer and Ansible to build artifacts automatically. Your organization maintains
    separate repos for Packer, Ansible, and code. You set up a Run Step that clones
    all three repos and then builds artifacts from a common workspace.</li><li>Your
    code files are in one repo managed by the Engineering team. Your Docker files
    are in a separate repo managed by the Security team. Your Pipeline clones both
    repos and then builds a Docker image from a common workspace.</li></ul><p>This
    topic uses the second use case to illustrate how to clone and combine multiple
    repos into one workspace. The example Pipeline works as follows:</p><ul><li>The
    Build Stage specifies the code repo as the default Codebase. The Build setup process
    clones this repo into the build workspace automatically.</li><li>A Run Step clones
    the Docker repo into the workspace.</li><li>A Build Step builds and pushes an
    image using files from both repos in the build workspace.</li></ul><h3>Before
    You Begin</h3><p>To go through this workflow, you need the following:</p><ul><li>A
    familiarity with basic Harness CI concepts:<ul><li><a href="https://ngdocs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li></ul></li><li>A familiarity with Build Stage
    settings:<ul><li><a href="https://ngdocs.harness.io/article/yn4x8vzw3q">CI Build
    Stage Settings</a></li></ul></li><li>A familiarity with how Pipelines use Codebases:<ul><li><a
    href="https://ngdocs.harness.io/article/mozd8b49td" target="_blank">Create and
    Configure a Codebase</a></li></ul></li></ul><h3>Step 1: Set Up the Build Stage</h3><p>In
    the first Build Stage of your Pipeline, do the following:</p><ol><li>Configure
    the default Codebase.<br/>You set up the Codebase when you create the first Build
    Stage in your Pipeline. To edit a Codebase after you create it, click <strong>Codebase</strong>
    on the right side of the Pipeline Studio. See <a href="https://newdocs.helpdocs.io/article/mozd8b49td"
    target="_blank">Create and Configure a Codebase</a>.</li><li>In the Overview tab,
    verify that <strong>Clone Codebase</strong> is selected.<br/>With this option
    selected (the default), a Build clones the default codebase into its workspace
    as part of the setup process. You can clone additional codebases into the  workspace,
    as described below.</li></ol><h3>Step 2: Define the Build Farm Infrastructure</h3><p>In
    the CI stage Infrastructure, define the build farm for the codebase. See <a href="/category/rg8mrhqm95-set-up-build-infrastructure"
    target="_blank">Set Up Build Infrastructure</a>.</p><h3>Step 4: Add Run Steps
    to Clone Additional Repos</h3><p>You can create one or more Run Steps to clone
    additional repos into the build workspace. Note the following:</p><ul><li>Depending
    on the image you use for the Run Step, you might need to install Git before you
    clone any repos.</li><li>You might want to define Stage Variables for the names
    and URLs of the codebases that you clone into the workspace. These variables are
    accessible across all Steps in the Stage.</li></ul><p>Here&#39;s some example
    code that installs git, verifies that it&#39;s working, and clones the repo with
    the Dockerfile needed to build an image:</p><pre class="hljs bash">apk add git<br/>git
    --version<br/>git clone https://github.com/$GITHUB_USERNAME/$DOCKER_REPO</pre><p></p><h3>Step
    5: Move Files and Folders as Needed</h3><p>You now have your default Codebase
    and additional codebases cloned into the same workspace. Note that the default
    Codebase files are in the root folder, while other codebase files are in subfolders.
    If you run a <code>find</code> or a  recursive <code>ls</code> in the Run step
    after you clone your codebases, you see something like this:</p><pre># Files from
    default codebase:<br/>87 info 4/26/2022 10:43:31 AM ./setup-be-service.sh<br/>88
    info 4/26/2022 10:43:31 AM ./default-be-template.json<br/>89 info 4/26/2022 10:43:31
    AM ./core/<br/>90 info 4/26/2022 10:43:31 AM ./core/src/<br/>...<br/># Files from
    $DOCKER_REPO codebase:<br/>146 info 4/26/2022 10:43:31 AM ./myDockerRepo/myBackendService<br/>147
    info 4/26/2022 10:43:31 AM ./myDockerRepo/myBackendService/Dockerfile</pre><p></p><p>In
    this example workflow, you need to copy the Dockerfile for the back-end service
    into the root workspace folder:</p><pre class="hljs bash"># This assumes that
    Dockerfiles are arranged by app-repo name in the Docker repo:<br/>cp $DOCKER_REPO/$APP_REPO/Dockerfile
    .</pre><p></p><p>Now the Dockerfile is in the correct location to build the image:</p><pre
    class="hljs bash">./setup-backend-service.sh<br/>./default-be-template.json<br/>./Dockerfile<br/>./core/<br/>...</pre><h3>Step
    5: Add a Build and Push Step</h3><p>Now that the files from your repos are in
    one common workspace, you can add a Build Step (in this case, Build and Push an
    Image to Docker Registry) to your Stage.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/k8tz6mtiut/1651013481363/clone-multiple-codebases.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><h3>Step
    5: Run the Pipeline</h3><p>Now you can run your Pipeline.</p><ol><li>Click <strong>Save</strong>.</li><li>Click
    <strong>Run</strong>.</li><li>If prompted, specify a Git branch, tag, or PR number.</li><li>Click
    <strong>Run Pipeline</strong> and check the console output to verify that the
    Pipeline runs as intended.</li></ol><h3>Configure As Code: YAML</h3><p>To configure
    your pipeline as YAML in CI, go to Harness <strong>Pipeline Studio</strong>, click
    <strong>YAML</strong>. Here’s a working example of the use case described in this
    topic. Modify the YAML attributes such as name, identifiers, codebase, connector
    refs, and variables as needed.</p><pre>pipeline:<br/>    name: build-from-multiple-repos-example<br/>    identifier:
    buildfrommultiplereposexample<br/>    allowStageExecutions: false<br/>    projectIdentifier:
    docexampleproject<br/>    orgIdentifier: wtd<br/>    description: Git clone, copy
    Dockerfile from myDockerRepo to workspace root, build image<br/>    tags: {}<br/>    properties:<br/>        ci:<br/>            codebase:<br/>                connectorRef:
    mygithubconnector<br/>                repoName: myBackendService<br/>                build:
    &lt;+input&gt;<br/>    stages:<br/>        - stage:<br/>              name: Build
    myBackendService<br/>              identifier: Build_Test_and_Push<br/>              type:
    CI<br/>              spec:<br/>                  cloneCodebase: true<br/>                  infrastructure:<br/>                      type:
    KubernetesDirect<br/>                      spec:<br/>                          connectorRef:
    mydelegateconnector<br/>                          namespace: harness-delegate-ng<br/>                          automountServiceAccountToken:
    true<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: Run<br/>                                name:
    git-clone-and-copy-dockerfile<br/>                                identifier:
    echotriggervarscustom<br/>                                spec:<br/>                                    connectorRef:
    mydockerhubconnector<br/>                                    image: alpine:latest<br/>                                    shell:
    Sh<br/>                                    command: |+<br/>                                        #
    Clone Codebase is enabled, which copies all<br/>                                        #
    files and folders to the current folder.<br/>                                        #
    Before we can build an image, we need to clone the <br/>                                        #
    Docker repo and copy the corresponding Dockerfile<br/>                                        #
    to the current folder <br/><br/>                                        apk add
    git<br/>                                        git --version<br/>                                        git
    clone https://github.com/$GITHUB_USERNAME/$DOCKER_REPO<br/><br/>                                        #
    We now have Docker repo at the current folder:<br/>                                        find
    .<br/><br/>                                        # Copy Dockerfile to current
    folder, where the Docker Build<br/>                                        # step
    can find it:<br/>                                        cp $DOCKER_REPO/$APP_REPO/Dockerfile
    .<br/><br/>                                    privileged: true<br/>                          -
    step:<br/>                                type: BuildAndPushDockerRegistry<br/>                                name:
    build-my-backend-service<br/>                                identifier: buildmybackendservice<br/>                                spec:<br/>                                    connectorRef:
    mydockerhubconnector<br/>                                    repo: &lt;+input&gt;<br/>                                    tags:<br/>                                        -
    &lt;+pipeline.sequenceId&gt;<br/>                                        - latest<br/>                                    optimize:
    true<br/>              variables:<br/>                  - name: GITHUB_USERNAME<br/>                    type:
    Secret<br/>                    value: msharmadgithubuname<br/>                  -
    name: APP_REPO<br/>                    type: String<br/>                    value:
    myBackendService<br/>                  - name: DOCKER_REPO<br/>                    type:
    String<br/>                    value: myDockerRepo<br/>              failureStrategies:
    []</pre><h3>See Also</h3><ul><li><a href="https://newdocs.helpdocs.io/article/mozd8b49td"
    target="_blank">Create and Configure a Codebase</a></li><li><a href="https://ngdocs.harness.io/article/1i1ttvftm4"
    target="_blank">CI Run Step Settings</a></li><li><a href="https://newdocs.helpdocs.io/article/yn4x8vzw3q">CI
    Build Stage Settings</a></li><li><a href="https://newdocs.helpdocs.io/article/8l31vtr4hi"
    target="_blank">Build and Push an Artifact</a></li></ul><p></p><p></p>'
  slug: clone-and-process-multiple-codebases-in-the-same-pipeline
  tags: []
  is_live: true
