type: article
article_id: j83j25bpnf
user_id: xwmdbyp4x8
category_id: ei5fgqxb0j
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: DRAFT DOC-1470 Run Plugin in a CI Pipeline
slug: draft-doc-1470-run-a-drone-plugin-in-a-ci-pipeline
description: A plugin is a Docker container that performs a predefined task. Plugins
  are essentially templated scripts that can be written in any programming language.
  The Drone community maintains an extensive l…
short_version: A plugin is a Docker container that performs a predefined task. Plugins
  are essentially templated scripts that can be written in any programming language.
  The Drone community maintains an extensive l…
tags: []
show_toc: true
is_private: false
is_published: false
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-03-30T12:40:52.415825Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: DRAFT DOC-1470 Run Plugin in a CI Pipeline
  description: ""
  short_version: ""
  body: '<p>A plugin is a Docker container that performs a predefined task. Plugins
    are essentially templated scripts that can be written in any programming language.
    The Drone community maintains an <a href="https://plugins.drone.io/" target="_blank">extensive
    library</a> of plugins for specific CI workflows. You can customize and extend
    your build processes using existing plugins or <a href="https://harness.io/blog/continuous-integration/write-first-plugin-for-cie/"
    target="_blank">write your own</a>.</p><p>This topic describes how to set up and
    run plugins in your CI Pipelines.</p><h3>Before You Begin</h3><p>To install and
    run a plugin, you need the following:</p><ul><li>A familiarity with basic Harness
    CI concepts:<ul><li><a href="https://ngdocs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li></ul></li><li>A build infrastructure and Delegate
    to run builds:<ul><li><a href="https://ngdocs.harness.io/category/rg8mrhqm95-set-up-build-infrastructure">Set
    Up Build Infrastructure</a></li><li><a href="https://ngdocs.harness.io/article/f9bd10b3nj-install-a-kubernetes-delegate">Install
    a Kubernetes Delegate</a> <em>or</em> <a href="https://ngdocs.harness.io/article/cya29w2b99-install-a-docker-delegate">Install
    a Docker Delegate</a></li></ul></li><li>A CI Pipeline with a Build Stage to run
    the plugin:<ul><li><a href="https://ngdocs.harness.io/article/yn4x8vzw3q-ci-stage-settings">CI
    Stage Settings</a></li></ul></li></ul><h3>Important Notes</h3><ul><li><span style="background-color:#fcdc00"
    data-hd-highlight="#fcdc00"><strong>TBD</strong> Any limitations on what we support?
    Warnings or notes that users should keep in mind before they get started?</span>
    </li><li><span style="background-color:#fcdc00" data-hd-highlight="#fcdc00"><strong>TBD</strong>
    Ping #sme-ci for tips, tricks, gotchas, and best practices</span></li></ul><h3>Visual
    Summary</h3><p><span style="background-color:#fcdc00" data-hd-highlight="#fcdc00"><strong>TBD</strong>
    create video, diagram, or animated gif</span></p><h3>Workflow Description</h3><p>The
    following steps describe the high-level workflow:</p><ol><li>Go to the Pipeline
    and open the Build step where you want to run the plugin.</li><li>In the Execution
    tab, click <strong>Add step</strong> and select <strong>Plugin</strong>.</li><li>Enter
    the following:<ol><li><strong>Name:</strong> A unique, descriptive name.</li><li><strong>Container
    Registry:</strong> A Connector to the image registry (such as Docker Hub) of the
    plugin image.</li><li><strong>Image:</strong> The full image name, such as<code>dockerhubusername/my-plugin:2.3.1</code>.
    The Step uses the latest image if you don&#39;t specify a tag.</li><li>Under Optional
    Configuration &gt; Settings, add any other settings that are required as specified
    in the docs for the specific plugin.</li></ol></li><li>Click <strong>Apply Changes</strong>
    to apply your Stage settings, then <strong>Save</strong> to save the updated Pipeline</li><li>Run
    the updated Pipeline and check the log output to verify that the Plugin Step works
    as intended. </li></ol><h3>Simple Example: Clone a Repo and Generate a Log Entry</h3><p><a
    href="https://harness.io/blog/continuous-integration/write-first-plugin-for-cie/"
    target="_blank">This blog post</a> describes a simple end-to-end workflow for
    writing and running a plugin. The plugin runs a simple <code>clone.sh</code> script
    that clones a repo and then outputs a log message with the last commit. This script
    uses three variables: the URL of the repo to clone (<code>PLUGIN_REPO_URL</code>),
    the target path (<code>PLUGIN_PATH</code>), and the branch to check out after
    cloning (<code>PLUGIN_BRANCH</code>).</p><p>To run this script, you need to do
    the following:</p><ol><li>Go to the Build Stage in a CI Pipeline. In the Execute
    tab, add a <strong>Plugin</strong> step.</li><li>Configure the Step as follows.<div
    class="note-callout">For each custom variable required by the plugin, you need
    to declare the variable name and value under <strong>Settings (optional)</strong>.
    Note that the CI Pipeline and the plugin code reference the same variable differently:
    <code>varname</code> in the Pipeline, <code>PLUGIN_REPO_VARNAME</code> in the
    code.</div><table><tbody><tr><td><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/j83j25bpnf/1648315976990/plugin-config-basic-final.png"/></figure></td><td><p></p><ol><li><strong>Name:</strong>
    A unique, descriptive name.</li><li><strong>Container Registry:</strong> A Connector
    to the Docker Hub registry.</li><li><strong>Image:</strong> The plugin image --in
    this case, <code>shubham149/git-plugin</code></li><li><code>path</code> = The
    local target for the cloned repo.</li><li><code>repo_url</code> = The URL of the
    repo to clone. You can clone any repo that your <a href="/article/mozd8b49td-create-and-configure-a-codebase"
    target="_blank">Codebase Connector</a> can access.</li><li><code>branch</code>
    = The branch to check out after cloning.</li></ol></td></tr></tbody></table></li><li>Click
    <strong>Apply Changes</strong> to return to the Pipeline editor, <strong>Save</strong>
    to save your updated Pipeline, and then <strong>Run</strong> to verify that the
    plugin works as intended. In this example, the build log should show that the
    Step cloned the report successfully and generated a log with the last commit.<details><summary>Log
    Output (example minus timestamp)</summary><div><pre>+ path=codebase<br/>+ mkdir
    -p codebase<br/>+ cd codebase<br/>+ git clone <a href="https://github.com/wings-software/harness-docs.git"
    target="_blank">https://github.com/wings-software/harness-docs.git</a> .<br/>Cloning
    into &#39;.&#39;<br/>+ git checkout main<br/>Already on &#39;main&#39;<br/>Your
    branch is up to date with &#39;origin/main&#39;.<br/>+ git log -1 --stat<br/>commit
    2ac2f1200ef0aea56b022048f851b2bed30df08d11<br/>Author: michaelcretzman &lt;58786311+michaelcretzman@users.noreply.github.com&gt;<br/>Date:
    Thu Mar 10 13:04:08 2022 -080013 <br/> <br/>Update manifest.yml<br/><br/>pcf/manifest.yml
    | 5 ++++-17info3/26/2022 10:10:01 AM <br/>1 file changed, 4 insertions(+), 1 deletion(-)</pre></div></details></li></ol><h3>Advanced
    Example: SonarQube</h3><p>This example illustrates how to run the <a href="https://plugins.drone.io/aosapps/drone-sonar-plugin/"
    target="_blank">SonarQube plugin</a> in a CI Pipeline. This plugin analyzes the
    code quality in your repo, blocks the build if the SonarQube quality check fails,
    and posts the results to a SonarQube server.</p><div class="note-callout">This
    example assumes that you have set up the following:<br/> - A Sonar server<br/>
    - A Sonar API token<br/> - A Sonar project and project key<br/>See the <a href="https://docs.sonarqube.org/latest/">SonarQube
    documentation</a>.</div><p>To use this plugin, you need to add two plugins:</p><ol><li>A
    Plugin Step to analyze your code</li><li>A Run step to post the results to your
    SonarQube server.</li></ol><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/j83j25bpnf/1648325789056/sonarqube-plugin-setu.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p></p><h4>
    Plugin Step</h4><ol><li>Go to the Build Stage in a CI Pipeline. In the Execute
    tab, add a <strong>Plugin</strong> step.</li><li>Configure the Step as follows.<details><summary>Required
    Settings</summary><div><table><tbody><tr><td><ol><li><strong>Name:</strong> A
    unique, descriptive name.</li><li><strong>Container Registry:</strong> A Connector
    to the Docker Hub registry.</li><li><strong>Image:</strong> <code>diegokoala/harness-cie-sonarqube-scanner:latest</code></li><li><code>sonar_host</code>
    = The URL for your SonarQube server.</li><li><code>sonar_token</code> = The user
    used to post the analysis report to your SonarQube Server.</li><li><code>sonar_name</code>
    = The SonarQube project name.</li><li><code>sonar_key</code> = The SonarQube project
    key.</li></ol></td></tr></tbody></table></div></details><span style="background-color:#fcdc00"
    data-hd-highlight="#fcdc00"><strong>TBD</strong> do we want to include all these
    optional settings in the public docs? I would argue No. This is provided as a
    general example of how to set up a Plugin Step. It&#39;s not intended as an in-depth
    reference on the plugin itself. If enhancing the plugin description is a priority,
    there&#39;s probably other stuff in </span><a href="https://harness.atlassian.net/wiki/spaces/SE/pages/1980104755/Sonar+Qube+-+CIE+Plugin"
    target="_blank"><span style="background-color:#fcdc00" data-hd-highlight="#fcdc00">Diego&#39;s
    internal Confluence page</span></a><span style="background-color:#fcdc00" data-hd-highlight="#fcdc00">
    that could be included. We don&#39;t strictly &#34;support&#34; the SonarQube
    plugin do we? (&#34;Supported,&#34; in my mind, means &#34;If you have a problem
    getting any of these settings to work, you can call Support and Support is required
    to help you resolve it.&#34;</span><span style="background-color:#fcdc00" data-hd-highlight="#fcdc00">)</span><details><summary>Optional
    Settings</summary><div><table><tbody><tr><td><ul><li><code>sonar_qualitygate_timeout</code>:
    Timeout in seconds for Sonar Scan.</li><li><code>artifact_file</code>: Timeout
    in seconds for Sonar Scan.</li><li><code>sonar_quality_enabled</code>: Set to
    true to block the Pipeline if your codebase does not pass the Sonar Quality Gate..</li><li><code>branch</code>:
    The Git branch in your codebase to analyze.</li><li><code>build_number</code>:
    Build Version.</li><li><code>ver</code>: Code version, Default value <code>DRONE_BUILD_NUMBER</code>.</li><li><code>timeout</code>:
    Default seconds <code>60</code>.</li><li><code>sources</code>: A comma-separated
    list of paths to directories containing source files to analyze.</li><li><code>inclusions</code>:
    A comma-separated list of regexes for files to include in the SonarQube analysis.
    When set, SonarQube analyses only files whose paths/names match these patterns.</li><li><code>exclusions</code>:
    A comma-separated list of regexes for files to exclude from analysis. Example: <code>**/static/**/*,**/dist/**/*.js</code>.</li><li><code>level</code>:
    Control the quantity / level of logs produced during an analysis. Default is <code>INFO</code>.<ul><li><code>DEBUG</code>:
    Display INFO logs + more details at DEBUG level.</li><li>TRACE: Display DEBUG
    logs + the timings of all ElasticSearch queries and Web API calls executed by
    the SonarQube Scanner.</li></ul></li><li><code>showProfiling</code>: Display logs
    to see where the analyzer spends time. Default is <code>false</code>.</li><li><code>branchAnalysis</code>:
    Pass currently analysed branch to SonarQube. Default is <code>false</code>. Do
    NOT enable this setting for the intial scan.</li><li><code>usingProperties</code>:
    Using the <code>sonar-project.properties</code> file in root directory as sonar
    parameter. Do NOT include <code>sonar_host</code> and <code>sonar_token</code>.
    Default is <code>false</code>.</li></ul></td></tr></tbody></table></div></details></li><li>Click
    <strong>Apply Changes</strong>.</li></ol><h4>Run Step</h4><ol><li>In the Pipeline
    Editor, add a <strong>Run</strong> Step immediately after the SonarQube Plugin
    Step and configure it as follows.</li><li><details><summary>Run Settings</summary><div><table><tbody><tr><td><p><strong>Step
    Parameters</strong> tab:</p><ol><li><strong>Name:</strong> A unique, descriptive
    name.</li><li><strong>Container Registry:</strong> A Connector to the Docker Hub
    registry.</li><li><strong>Image:</strong> You can use any image you want, such
    as <code>alpine:latest</code>.</li><li><strong>Command:</strong><pre class="hljs
    bash">ls -ltra<br/>du -sh *</pre></li><li>Optional Configuration &gt; <strong>Report
    Paths</strong> = <code>sonarResults.xml</code></li></ol><p><strong>Advanced</strong>
    tag:</p><ol><li>Conditional Execution = <strong>Always execute this step</strong></li></ol></td></tr></tbody></table></div></details></li><li>Click
    <strong>Apply Changes</strong> to return to the Pipeline editor, <strong>Save</strong>
    to save your updated Pipeline, and then <strong>Run</strong> to verify that the
    plugin works as intended.</li></ol><h3>See Also</h3><ul><li><a href="https://plugins.drone.io/">Drone
    Community Plugins</a></li><li><a href="/article/7kb90dkxw0-run-a-git-hub-action-in-cie"
    target="_blank">Run a GitHub Action in CIE</a></li><li><a href="/article/8r5c3yvb8k-plugin-step-settings-reference"
    target="_blank">Plugin Step Settings</a></li></ul><p></p>'
  slug: draft-doc-1470-run-a-drone-plugin-in-a-ci-pipeline
  tags: []
  is_live: true
