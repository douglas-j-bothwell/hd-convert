type: article
article_id: mwzlb0x2mt
user_id: xwmdbyp4x8
category_id: rg8mrhqm95
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: Define a MacOS Build Infrastructure in AWS
slug: define-a-macos-build-infrastructure
description: This topic describes how to set up a build infrastructure using VMs on
  an MacOS EC2.  Once you set up this infrastructure, your Harness Pipelines can use
  these VMs to build your software and run your tests safely and at scale.
short_version: This topic describes how to set up a build infrastructure using VMs
  on an MacOS EC2.  Once you set up this infrastructure, your Harness Pipelines can
  use these VMs to build your software and run your tests safely and at scale.
tags:
- MacOS
- OSX
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-11T13:46:19.680058Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Define a MacOS Build Infrastructure in AWS
  description: This topic describes how to set up a build infrastructure using VMs
    on an MacOS EC2.  Once you set up this infrastructure, your Harness Pipelines
    can use these VMs to build your software and run your tests safely and at scale.
  short_version: This topic describes how to set up a build infrastructure using VMs
    on an MacOS EC2.  Once you set up this infrastructure, your Harness Pipelines
    can use these VMs to build your software and run your tests safely and at scale.
  body: '<div class="note-callout">Currently, this feature is behind the Feature Flag
    <code>CI_VM_INFRASTRUCTURE</code> Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>This topic
    describes how to set up a build infrastructure using VMs on an MacOS EC2. Once
    you set up this infrastructure, your Harness Pipelines can use these VMs to build
    your software and run your tests safely and at scale. You can also <a href="https://docs.harness.io/article/d79v3d2uwv">define
    MacOS build infrastructures on hardware devices such as MacBook Pros and Mac minis</a>.
    </p><p>The following diagram shows the architecture of a CI build infrastructure
    on MacOS. The Delegate receives build requests from your Harness Manager. Then
    it forwards the requests to a Runner VM that starts, runs, and terminates the
    build VMs as needed.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mwzlb0x2mt/1655831247874/ci-build-infra-on-macos-v-2.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><h3>Before
    You Begin</h3><p>This topic assumes you&#39;re familiar with the following:</p><ul><li><a
    href="https://ngdocs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="https://ngdocs.harness.io/article/2k7lnc7lvl-delegates-overview">Delegates
    Overview</a></li><li><a href="https://ngdocs.harness.io/article/yn4x8vzw3q-ci-stage-settings">CI
    Stage Settings</a></li><li><a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li><li><a href="https://docs.drone.io/runner/vm/overview/"
    target="_blank">VM Runner</a></li></ul><h3>Step 1: Set up the MacOS EC2 Instance</h3><h4>AWS
    EC2 Requirements</h4><ul><li>Each MacOS EC2 instance requires a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated
    Host</a> fully dedicated to that EC2. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html">Amazon
    EC2 Mac Instances</a> in the AWS docs for pricing information, additional requirements,
    and best practices.</li><li>EC2 instance type = <strong>mac1.metal</strong></li><li>While
    not required, enabling <strong>Instance auto-placement</strong> can be useful
    if you have multiple available hosts and don’t want to explicitly specify the
    host for each EC2.</li><li>Minimum requirements for the root volume of your EC2:<ul><li>Type:
    <strong>gp3</strong></li><li>Size: <strong>500GB</strong></li><li>IOPS: <strong>6000</strong></li><li>Throughput:
    <strong>256</strong></li></ul></li><li>The EC2 should have TCP ports <strong>22,</strong>
    <strong>5900</strong>, and <strong>9079</strong> open to inbound connections from
    hosts that interact with the EC2.</li><li>This workflow uses <a href="https://docs.veertu.com/anka/intel/">Anka
    software</a> by <a href="https://veertu.com/">Veertu</a> to create and manage
    VMs on the EC2. Anka is <a href="https://docs.veertu.com/anka/licensing/">licensed</a>
    software and requires a license key to activate. For a trial license, go to: <a
    href="https://veertu.com/anka-build-trial/">https://veertu.com/anka-build-trial/</a><br/>Veertu
    maintains a set of Anka Community AMIs in AWS. These AMIs are preconfigured with
    all required hardware and software to create and manage VMs using Anka. You can
    use Marketplace AMIs with an hourly billing option, in which case a license key
    is not required.<br/>See <a href="https://docs.veertu.com/anka/intel/getting-started/aws-ec2-mac/">Running
    on AWS EC2 Mac</a> in the Anka docs for more useful information.</li></ul><h4>Set
    Up the EC2</h4><p>If you want to use a standard MacOS AMI, rather than an Anka
    Community AMI, do the following:</p><ul><li>Launch a new EC2 based on the hardware
    and software requirements above.</li><li>SSH into the EC2.</li><li>Download and
    install the Anka software on the EC2:</li><li><pre>FULL_FILE_NAME=&#34;$(curl
    -Ls -r 0-1 -o /dev/null -w %{url_effective} https://veertu.com/downloads/anka-virtualization-latest
    | cut -d/ -f5)&#34; curl -S -L -o ./$FULL_FILE_NAME https://veertu.com/downloads/anka-virtualization-latest
    sudo installer -pkg $FULL_FILE_NAME -tgt /</pre></li></ul><p></p><p>The following
    steps are required for all EC2s, regardless of the AMI type, except as noted.
    Run these commands on the EC2 unless otherwise specified.</p><ul><li>In some cases,
    your EC2&#39;s disk might be split into multiple volumes. Make sure that your
    EC2 can access all the storage in its attached volume. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html#mac-instance-increase-volume"
    target="_blank">Increase the size of an EBS volume on your Mac instance</a> in
    the AWS docs.</li><li>Make sure your software is up to date:<pre class="hljs bash">#
    get the list of installers<br/>softwareupdate --list-full-installers<br/><br/>#
    install the latest version, such as 12.4, 12.3.1, etc.<br/>softwareupdate --fetch-full-installer
    --full-installer-version {LATEST_VERSION}</pre></li><li>Change the AWS EC2 password:<pre
    class="hljs bash"># To find the default password, search for &#34;/usr/bin/dscl&#34;
    in the install script output<br/>sudo /usr/bin/dscl . -passwd /Users/ec2-user
    {DEFAULT_PASSWORD} {NEW_PASSWORD}</pre></li><li>Go to a separate terminal window
    (i.e., not SSH’d with your EC2). Then VNC into the EC2 with your new password:<pre
    class="hljs bash">open vnc://ec2-user:{NEW_PASSWORD}@{EC2_IP}</pre>Leave this
    window open. You will use it to install Docker Desktop and the Drone Runner in
    a later step.</li><li>Activate your license key. Return to your SSH session with
    the EC2, activate your Anka license, and accept the EULA. Here&#39;s an example
    session.<pre class="hljs bash">sudo anka license activate {LICENSE}<br/># License
    activated. The fulfillment ID: {FULFILLMENT_ID}</pre></li><li>Save the fulfillment
    ID that gets returned. Veertu will request this if your EC2  gets terminated unexpectedly.
    See <a href="https://docs.veertu.com/anka/licensing/">Licensing</a> in the Veertu
    docs.</li><li><h3>Step 2: Create a VM on the EC2</h3></li></ul><p>In this step,
    you will create the VM that the Harness Runner will use to create new VMs. See
    also <a href="https://docs.veertu.com/anka/intel/getting-started/">Getting Started</a>
    in the Anka 2.5.x docs.</p><p>Note the following before you create this VM:</p><ul><li>For
    the <code>--ram-size</code>, Harness recommends that you specify half the physical
    RAM on the host so it can run two VMs at once with reasonable performance. The
    following example assumes that the physical host has 16GB of RAM.</li><li>To determine
    the path to your MacOS installer:<ul><li>Go to the Mac UI &gt; Finder &gt; Applications
    folder. You should see an installer such as <strong>Install MacOS Monterey</strong>
    in the list. </li><li>Right-click on the Installer and choose <strong>New Terminal
    at Folder</strong>.</li><li>In the terminal, enter <code>pwd</code>. Include the
    output as the <code>--app</code> argument value and include quotes if the path
    has spaces. For example: <code>--app &#34;/Applications/Install macOS Monterey.app&#34;</code></li></ul></li></ul><p>To
    create the master VM, open a CLI window in the Mac UI and enter the following:</p><pre
    class="hljs bash">anka --debug  create {VM_NAME} --ram-size 8G --cpu-count 4 --disk-size
    100G --app {PATH_TO_MACOS_INSTALLER}</pre><div class="note-callout">This process
    can take an hour or more. There will be extended periods where the script doesn&#39;t
    generate any messages or notifications. Be patient and do not kill the process.
    To verify that the create process is still running, open a new SSH session on
    the EC2 and enter <code>ps</code>.</div><p>When the script finishes, enter <code>anka
    list</code> and <code>anka show {VM_UUID}</code> to confirm that the VM was created
    and is running. To start a VM, enter <code>anka start {VM_NAME}</code>. Here&#39;s
    an example session:</p><pre class="hljs bash">anka list<br/>+---------------------+--------------------------------------+----------------------+---------+<br/>|
    name                | uuid                                 | creation_date        |
    status  |<br/>+---------------------+--------------------------------------+----------------------+---------+<br/>|
    harness-delegate-vm | bc7210af-8fe8-48cd-82af-a994f5cf1bea | Jun 13 14:07:18 2022
    | running |<br/>+---------------------+--------------------------------------+----------------------+---------+<br/><br/>#
    use the uuid shown in the ‘anka list’ output<br/><br/>anka show bc7210af-8fe8-48cd-82af-a994f5cf1bea<br/>+---------+-----------------------------------------+<br/>|
    uuid    | bc7210af-8fe8-48cd-82af-a994f5cf1bea    |<br/>+---------+-----------------------------------------+<br/>|
    name    | harness-delegate-vm                     |<br/>+---------+-----------------------------------------+<br/>|
    created | Jun 13 14:07:18 2022                    |<br/>+---------+-----------------------------------------+<br/>|
    vcpu    | 4 - sys:0.2%, usr:0.1%, idle:99.7%      |<br/>+---------+-----------------------------------------+<br/>|
    memory  | 8G                                      |<br/>+---------+-----------------------------------------+<br/>|
    display | 1024x768 vnc://:admin@172.31.41.30:5901 |<br/>+---------+-----------------------------------------+<br/>|
    disk    | 100GiB (22.16GiB on disk)               |<br/>+---------+-----------------------------------------+<br/>|
    addons  | 2.5.5.143                               |<br/>+---------+-----------------------------------------+<br/>|
    network | shared 192.168.64.2                     |<br/>+---------+-----------------------------------------+<br/>|
    status  | running since Jun 13 16:17:43 2022      |<br/>+---------+-----------------------------------------+<br/></pre><h3>Step
    3: Set Up the VM on the EC2</h3><p>Return to the VNC window you opened previously.
    If you closed it, open a CLI on your local host (not SSH’d into the EC2) and enter: <code>open
    vnc://ec2-user:{NEW_PASSWORD}@{EC2_IP}</code></p><p>In the VNC window, click the
    Launchpad button in the Dock (bottom). Then search for Anka (top) and click the
    Anka icon. The Welcome to Anka screen appears.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mwzlb0x2mt/1655253313885/vm-setup-1-open-anka.png"
    style="max-height:25%;max-width:25%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="25%" data-hd-width="25%" data-hd-align="left"/></figure><p></p><p>In
    the Welcome to Anka screen, click the button for the VM you just created on the
    right. This opens a second VNC window, for the VM, within the VNC window for the
    EC2.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mwzlb0x2mt/1655253795901/vm-setup-2-select-delegate.png"
    style="max-height:25%;max-width:25%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="25%" data-hd-width="25%" data-hd-align="left"/></figure><p>In
    the new VNC window, do the following:</p><ul><li>Open a CLI and install Homebrew
    and wget on the VM:<pre>/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;
    <br/>brew install wget</pre></li><li>Open a browser window in the UI, go to the
    Docker website, and download Docker Desktop for Mac Intel Chip: <a href="https://docs.docker.com/desktop/mac/install/">https://docs.docker.com/desktop/mac/install/</a></li><li>Run
    the Docker installer and accept the EULA that appears at the end of the install
    process.<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mwzlb0x2mt/1655253835324/vm-setup-3-accept-docker-eula.png"
    style="max-height:25%;max-width:25%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="25%" data-hd-width="25%" data-hd-align="left"/></figure></li><li>In
    a CLI, enter the following to make sure that Docker is running correctly: <code>docker
    run hello-world</code></li><li>Install any additional tools that will be used
    by your builds on the VM, such xcode.</li><li>Harness recommends that you suspend
    the master VM after you set it up. This will speed up the creation of new VMs.<ul><li>On
    the VM, do this:<ul><li>Quit Docker Desktop.</li><li>Open a CLI window and run
    the following:<br/><code>docker kill $(docker ps -q)</code><br/><code>docker stop</code></li><li>On
    the host, run the following: <code>anka suspend {VM_NAME}</code></li></ul></li></ul></li><li>Close
    the VM VNC window <em>but leave the EC2 VNC window open</em>. You will use this
    window in the next step.</li></ul><h3>Step 4: Install Docker Desktop and the Drone
    Runner on the EC2</h3><p>In the EC2 VNC window, open a browser window in the UI,
    go to the Docker website, and download <strong>Docker Desktop for Mac Intel Chip</strong>:
    <a href="https://docs.docker.com/desktop/mac/install/">https://docs.docker.com/desktop/mac/install/</a></p><p>Run
    the installer and accept the Docker EULA that appears at the end of the install
    process.</p><p>Open a CLI and enter the following to make sure that Docker is
    installed and running: <code>docker run hello-world</code></p><p>In the CLI, install
    tmux: <code>brew install tmux</code> </p><p>In the browser window, go to the following
    page: <a href="https://github.com/drone-runners/drone-runner-aws/releases" target="_blank">https://github.com/drone-runners/drone-runner-aws/releases</a></p><p> Download
    the latest <strong>drone-runner-aws-darwin-amd64</strong> executable:</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/mwzlb0x2mt/1655254499504/ec-2-setup-download-drone-runner-in-browser.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure><p>Copy
    the binary from the Downloads folder and make sure it has the correct permissions
    to run. In a CLI, run the following:</p><pre class="hljs bash">mkdir ~/runner<br/>cd
    ~/runner<br/>cp ~/Downloads/drone-runner-aws-darwin-amd64 .<br/>chmod +x drone-runner-aws-darwin-amd64</pre><h3>Step
    5: Set Up Your Drone Environment on the EC2</h3><p>To start the Drone Runner,
    you need to specify your environment variables (<code>.env</code> file) and your
    runner pool definition (<code>pool.yml</code> file). You should save these in
    your <code>~/runner</code> folder.</p><h4>Environment File</h4><p>Your <code>.env</code>
    file should look like this:</p><pre class="hljs bash">DRONE_RUNNER_HOST=drone.runner.host<br/>DRONE_RUNNER_NAME=droneRunnerName<br/>DRONE_RUNNER_SECRET=bea26a2221fd8090ea38720fc445eca6<br/>DRONE_DEBUG=true<br/>DRONE_TRACE=true</pre><p><code>DRONE_DEBUG</code>
    and <code>DRONE_DEBUG</code> are optional. You can define the other settings as
    needed. The <code>DRONE_RUNNER_SECRET</code> is the <a href="https://docs.drone.io/runner/vm/configuration/reference/drone-rpc-secret/">default
    secret</a> used by the Drone server to authenticate http requests.</p><h4>Pool
    File</h4><p>Your <code>pool.yml</code> file should look like this:</p><pre class="hljs
    yaml">version: &#34;1&#34;<br/>instances:<br/>- name: osx-anka<br/>  default:
    true<br/>  type: anka   <br/>  pool: 2    <br/>  limit: 100  <br/>  platform:<br/>    os:
    darwin<br/>    arch: amd64<br/>  spec:<br/>    account:<br/>      username: {ANKA_VM_USERNAME}<br/>      password:
    {ANKA_VM_PASSWORD}<br/>    vm_id: {VM_NAME}<br/></pre><p>You can leave all fields
    at their defaults except for <code>username</code>, <code>password</code>, and
    <code>vm_id</code>. Note the <code>name</code> field: you will specify this name
    when you set up your Harness Pipeline.</p><h3>Step 6: Start the Drone Runner on
    the EC2</h3><p>In a CLI window, enter the following:</p><pre class="hljs bash">cd
    ~/runner<br/>brew install tmux<br/>tmux new -d &#39;./drone-runner-aws-darwin-amd64
    delegate --envfile=.env --pool=pool.yml |&amp; tee runner.log&#39;</pre><p></p><p>The
    Runner might take a few minutes before it is completely up and running. When it
    is ready, you will see output like this:</p><pre>DEBU[4334] got IP 192.168.64.5
    cloud=anka name=droneRunnerName--4037200794235010051 pool=osx-anka<br/>INFO[4335]
    Running script in VM cloud=anka name=droneRunnerName--4037200794235010051 pool=osx-anka</pre><p></p><h3>Step
    7: Install the Harness Delegate on the EC2</h3><p>In the Harness UI, go to the
    project where you want to install the Delegate.</p><p>Choose <strong>Project Setup</strong>
    &gt; <strong>Delegate</strong> on the left. </p><p>In the Project Delegates page,
    click <strong>+New Delegate</strong>.</p><p>Select <strong>Docker</strong> for
    the Delegate type. Click Continue. </p><p>Enter a <strong>Delegate Name</strong>
    (must be unique). Click Continue.</p><p>Download the <code>docker-compose.yml</code>
    file.</p><p>Add the <code>extra-hosts</code> attribute and <code>RUNNER_URL</code>
    environment setting as follows:</p><pre class="hljs yaml">version: &#34;3.7&#34;<br/>services:<br/>  harness-ng-delegate:<br/>    restart:
    unless-stopped<br/>    deploy:<br/>      resources:<br/>        limits:<br/>          cpus:
    &#34;0.5&#34;<br/>          memory: 2048M<br/>    image: harness/delegate:latest<br/>    #
    —---------------------------------------<br/>    extra_hosts:<br/>      - &#34;host.docker.internal:host-gateway&#34;<br/>    #
    ----------------------------------------<br/>    environment:<br/>      - ACCOUNT_ID=XXXXXXXXXXXXXXXX<br/>      -
    DELEGATE_TOKEN=XXXXXXXXXXXXXXXX<br/>      - MANAGER_HOST_AND_PORT=https://app.harness.io<br/>      -
    WATCHER_STORAGE_URL=https://app.harness.io/public/prod/premium/watchers<br/>      -
    WATCHER_CHECK_LOCATION=current.version<br/>      - DELEGATE_STORAGE_URL=https://app.harness.io<br/>      -
    DELEGATE_CHECK_LOCATION=delegateprod.txt<br/>      - CDN_URL=https://app.harness.io<br/>      -
    REMOTE_WATCHER_URL_CDN=https://app.harness.io/public/shared/watchers/builds<br/>      -
    DEPLOY_MODE=KUBERNETES<br/>        # —-----------------------------------------<br/>      -
    RUNNER_URL=http://host.docker.internal:3000/<br/>        # ---------------------
    --------------------<br/>      - DELEGATE_NAME=osx-delegate<br/>      - NEXT_GEN=true<br/>      -
    DELEGATE_DESCRIPTION=<br/>      - DELEGATE_TYPE=DOCKER<br/>      - DELEGATE_TAGS=<br/>      -
    PROXY_MANAGER=true<br/>      - INIT_SCRIPT=echo &#34;Docker delegate init script
    executed.&#34;<br/></pre><p>Upload the modified <code>docker-compose.yml</code>
    file to your EC2 and move it to your <code>~/runner</code> folder.</p><p>Start
    the Delegate in the EC2. Run the following in the <code>/runner</code> folder:</p><pre
    class="hljs bash">docker-compose -f docker-compose.yml up -d</pre><p> </p><p>In
    the Harness UI &gt; Delegate Setup wizard, click <strong>Continue</strong> and
    wait for your Harness instance to connect to the Delegate. It might take a few
    minutes to verify the Delegate.</p><p>Once it is verified, close the wizard.</p><h3>Step
    7: Specify the Delegate in the Pipeline</h3><p>In your Harness Project, go to
    a Pipeline that includes a Build Stage.</p><p>In the Infrastructure tab of the
    Build Stage, define your infrastructure as follows:</p><ul><li>Type = <strong>AWS
    VMs</strong></li><li>Pool Name = The <code>name</code> field in your <code>pool.yml</code>
    file.</li><li>OS = <strong>MacOS</strong></li></ul><p>Your MacOS build infrastructure
    is set up. You can now run your Build Stages on MacOS VMs. </p><p></p><p></p><p></p><p></p>'
  slug: define-a-macos-build-infrastructure
  tags:
  - MacOS
  - OSX
  is_live: true
