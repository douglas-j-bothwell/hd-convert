type: article
article_id: xqwgfd191z
user_id: xwmdbyp4x8
category_id: rg8mrhqm95
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: BACKUP DOC-1512 2022-04-14 Define an AWS VM Build Infrastructure
slug: backup-2022-04-14-define-an-aws-vm-build-infrastructure
description: REMOVED.SSH STEPS FROM PUBLIC DOC PER DOC-1512. MADE THIS BACKUP COPY
  TO RETAIN THIS CONTENT. Currently, this feature is behind the Feature Flag CI_VM_INFRASTRUCTURE.
  Contact Harness Support to enabl…
short_version: REMOVED.SSH STEPS FROM PUBLIC DOC PER DOC-1512. MADE THIS BACKUP COPY
  TO RETAIN THIS CONTENT. Currently, this feature is behind the Feature Flag CI_VM_INFRASTRUCTURE.
  Contact Harness Support to enabl…
tags: []
show_toc: false
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-10-01T17:08:11.266659Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: BACKUP DOC-1512 2022-04-14 Define an AWS VM Build Infrastructure
  description: ""
  short_version: ""
  body: '<h3>REMOVED .SSH STEPS FROM PUBLIC DOC PER DOC-1512. MADE THIS BACKUP COPY
    TO RETAIN THIS CONTENT.</h3><div class="note-callout">Currently, this feature
    is behind the Feature Flag <code>CI_VM_INFRASTRUCTURE</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>The codebase
    and tests you add to a Harness CI Stage are built and run using a build infrastructure
    (build farm) in your environment.</p><p>Some CI providers use in-house orchestration
    systems for build farms like Docker Machine (<a href="https://docs.docker.com/machine/"
    target="_blank">deprecated since 2019</a>). With these systems, outage and backlogs
    can occur in their infrastructure. Often, the backlogs occur because they do not
    have enough capacity to cover the backlog that accrued during the outage.</p><p>Harness
    build farms are run on <u>your</u> infrastructure using battle-tested platforms
    for large container workloads (Kubernetes, AWS VMs). Harness uses this method
    to ensure there are no outages and you can scale on demand.</p><p>This topic describes
    how to set up and use AWS Linux and Windows VMs as build infrastructures for running
    builds and tests in a CI Stage. Once set up, the AWS VMs used by your Harness
    Pipelines repeatedly and automatically build your software and run your tests
    safely and at scale.</p><div class="note-callout">For information on using Kubernetes
    as a build farm, see <a href="/article/x7aedul8qs-kubernetes-cluster-build-infrastructure-setup">Define
    Kubernetes Cluster Build Infrastructure</a>.</div><p>In this topic:</p><ul><li><a
    href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#before_you_begin">Before
    You Begin</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#review_set_up_the_build_infrastructure_using_terraform">Review:
    Set Up the Build Infrastructure using Terraform</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#review_prerequisites">Review:
    Prerequisites</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#step_1_prepare_the_vm_instance_for_harness_docker_delegate_and_aws_runner_installation">Step
    1: Prepare the VM Instance for Harness Docker Delegate and AWS Runner Installation</a><ul><li><a
    href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#launch_your_vm_instance">Launch
    Your VM Instance</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#configure_aws_runner_on_the_vm_instance">Configure
    AWS Runner on the VM Instance</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#configure_env_file_on_aws_vm">Configure
    .env File on AWS VM </a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#configure_the_drone_pool_yml_file_on_the_aws_vm">Configure
    the .drone_pool.yml File on the AWS VM</a></li></ul></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#step_2_create_a_docker_delegate_in_harness_manager">Step
    2: Create a Docker Delegate in Harness Manager</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#step_3_configure_the_docker_compose_file">Step
    3: Configure the Docker Compose File</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#step_4_install_harness_delegate_and_aws_drone_runner_on_the_vm_instance">Step
    4: Install Harness Delegate and AWS Drone Runner on the VM Instance</a></li><li><a
    href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#step_5_use_aws_vm_in_the_pipeline_build_infrastructure">Step
    5: Use AWS VM in the Pipeline Build Infrastructure</a></li><li><a href="https://ngdocs.harness.io/article/z56wmnris8-set-up-an-aws-vm-build-infrastructure#see_also">See
    Also</a></li></ul><h3>Before You Begin</h3><ul><li><a href="https://ngdocs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="https://ngdocs.harness.io/article/2k7lnc7lvl-delegates-overview">Delegates
    Overview</a></li><li><a href="https://ngdocs.harness.io/article/yn4x8vzw3q-ci-stage-settings">CI
    Stage Settings</a></li><li><a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li><li><a href="https://github.com/drone-runners/drone-runner-aws#aws-runner">AWS
    Runner</a></li></ul><h3>Review: Set Up the Build Infrastructure using Terraform</h3><p>This
    topic walks through setting up an AWS build infrastructure using Harness Manager
    and the AWS console.</p><p>You can also use Terraform to set up an AWS build infrastructure.</p><p>For
    steps on using Terraform, see the Harness GitHub repo <a href="https://github.com/harness/cie-vm-delegate"
    target="_blank">cie-vm-delegate</a>.</p><h3>Review: Prerequisites</h3><ul><li>AWS
    EC2 configuration:<ul><li>EC2 instance for the Delegate and Runner. A t2.medium
    is sufficient.</li><li>While the Delegate and Runner must run on the same EC2
    instance, the build VM can be Linux or Windows. Any Linux instance will work.
    Windows 2019 is the minimum OS version.</li><li>Set up an access key and access
    secret (<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey">AWS
    secret</a>) for configuration of the Runner.<ul><li>For Windows instances, you
    need to add the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html">AdministratorAccess
    policy</a> to the IAM role associated with the access key and access secret <a
    href="https://console.aws.amazon.com/iamv2/home#/users">IAM</a>.</li></ul></li><li>Setup
    VPC firewall rules for the build instances on EC2.<ul><li>For information on creating
    a Security Group, refer to the AWS doc <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html">Authorize
    inbound traffic for your Linux instances</a>.</li><li>You also need to allow ingress
    access to ports 22 and 9079. Once completed, you will have a Security Group ID,
    which is needed for the configuration of the Runner.</li></ul></li><li><strong>Optional:</strong>
    Enable RDP port 3389 for Windows VM for RDP access.</li></ul></li></ul><p>To set
    up your AWS VM infrastructure you need to install:</p><ul><li><a href="/article/cya29w2b99-install-a-docker-delegate">​Harness
    Docker Delegate</a>: the Harness Delegate is a worker process you run on your
    AWS instance that receives the CI Pipeline steps from the <a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts#harness-architecture">Harness
    Manager</a>, and dispatches the instructions to the Runner.</li><li><a href="https://docs.drone.io/runner/aws/overview/">AWS
    Runner</a>: used to communicate with AWS and provision VM instances for builds.
    The Runner runs on the same instance as the Delegate. It executes the Pipelines
    steps on the target VM instance and cleans up the instance after the <a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts#stages">Harness
    Stage</a> execution. Similarly, for each subsequent Harness Stage in a Pipeline,
    a new VM instance is created and terminated after the Stage execution.</li></ul><h3>Step
    1: Prepare the VM Instance for Harness Docker Delegate and AWS Runner Installation</h3><p>The
    Delegate and Runner must run on the same EC2 instance.</p><p>The following sections
    help you set up the instance and configure the Runner on it. Later steps cover
    adding the Harness Delegate to the instance.</p><h4>Launch Your VM Instance</h4><p>Log
    into <a href="https://console.aws.amazon.com/ec2/">EC2 Console</a> and launch
    the VM instance where the Harness Delegate will be installed.</p><p>Notes:</p><ul><li>Ensure
    you have Docker installed on your VM instance. For installation steps, refer to
    the AWS doc <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker">Installing
    Docker in AWS EC2</a>.</li><li>Ensure you have <a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-37">Docker
    Compose version 3.7</a> or above installed on your VM instance. For installation
    steps, see <a href="https://docs.docker.com/compose/install/">Install Docker Compose</a>.</li></ul><h4>Configure
    AWS Runner on the VM Instance</h4><p>The <a href="https://docs.drone.io/runner/aws/overview/">AWS
    Runner</a> is packaged as a minimal Docker image distributed on <a href="https://hub.docker.com/r/drone/drone-runner-aws">DockerHub</a>.
    It is responsible for authenticating and running commands on the AWS VM. </p><p>The
    AWS Runner requires two input files: </p><ul><li><strong>.env:</strong> contains
    information on how to connect to the AWS instance.</li><li><strong>.drone_pool.yml:</strong>
    used to define the VM spec and pool size for the VM instances used to run the
    Pipeline.</li></ul><h4>Configure .env File on AWS VM </h4><p>Create a directory
    on your VM to store the Runner configuration file.</p><p>To create a directory,
    run the following command:</p><pre>mkdir /runner<br/>cd runner</pre><p></p><p>A
    directory named <strong>runner</strong> is created on your VM.</p><p>Run the following
    ssh-keygen command:</p><pre>ssh-keygen -f .ssh/id-rsa</pre><p></p><p>This generates
    a public and private key file for the Runner configuration in the <strong>.env</strong>
    file. </p><p>Configure the following fields in the <strong>.env</strong> file
    to allow Runner to access and launch your AWS VM.</p><p></p><table><tbody><tr><td><p><strong>Fields</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Value</strong></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_ACCESS_KEY_ID</p></td><td><p>Enter
    your AWS Access Key ID.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_ACCESS_KEY_SECRET</p></td><td><p>Enter
    your AWS access key secret.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_REGION</p></td><td><p>Enter
    your AWS region.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_REUSE_POOL</p></td><td><p>Reuse
    existing EC2 instances on restart of the Runner.</p></td><td><p><code>false</code></p></td></tr><tr><td><p>DRONE_SETTINGS_PRIVATE_KEY_FILE</p></td><td><p>Private
    key file for the EC2 instances. You can generate a public and private key using
    <a href="https://ssh.com/ssh/keygen">ssh-keygen</a>.</p></td><td><p><code>.ssh/id_rsa</code></p></td></tr><tr><td><p>DRONE_SETTINGS_PUBLIC_KEY_FILE</p></td><td><p>Public
    key file for the EC2 instances.</p></td><td><p><code>.ssh/id_rsa.pub</code></p></td></tr><tr><td><p>DRONE_SETTINGS_LITE_ENGINE_PATH</p></td><td><p>This
    variable contains the release information for the Lite Engine. The Lite Engine
    is a binary that is injected into the VMs with which the Runner interacts. It
    is responsible for coordinating the execution of the steps.</p></td><td><p><code>https://github.com/harness/lite-engine/releases/download/v0.0.1.12</code></p></td></tr><tr><td><p>DRONE_TRACE</p></td><td><p>Optional
    boolean value. Enables trace-level logging.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>DRONE_DEBUG</p></td><td><p>Optional
    boolean value. Enables debug-level logging.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>DRONE_SETTINGS_KEY_PAIR_NAME</p></td><td><p>Enter
    the name of the key pair.</p><p>The Runner allows you to specify a key pair to
    use in case you want to connect to your Windows VM via RDP.</p><p>This is highly
    recommended for troubleshooting.</p><p>SSH is installed via a cloud-init script,
    so in case something goes wrong, connecting via RDP will always be possible.</p><p>For
    details, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">AWS
    EC2 Key pairs</a>. </p></td><td><p></p></td></tr></tbody></table><p></p><p>Here’s
    a sample <strong>.env</strong> file:</p><pre>DRONE_SETTINGS_AWS_ACCESS_KEY_ID=&#34;&lt;access_key&gt;&#34;<br/>DRONE_SETTINGS_AWS_ACCESS_KEY_SECRET=&#34;&lt;secret_key&gt;&#34;<br/>DRONE_SETTINGS_AWS_REGION=&#34;us-east-2&#34;<br/>DRONE_SETTINGS_REUSE_POOL=false<br/>DRONE_SETTINGS_PRIVATE_KEY_FILE=.ssh/id_rsa<br/>DRONE_SETTINGS_PUBLIC_KEY_FILE=.ssh/id_rsa.pub<br/>DRONE_SETTINGS_LITE_ENGINE_PATH=https://github.com/harness/lite-engine/releases/download/v0.0.1.12<br/>DRONE_DEBUG=true<br/>DRONE_TRACE=true<br/>DRONE_SETTINGS_KEY_PAIR_NAME=&#34;&lt;name_of_key_pair&gt;&#34;</pre><p></p><h4>Configure
    the .drone_pool.yml File on the AWS VM</h4><p>The <strong>.drone_pool.yml</strong>
    defines the VM spec and pool size for the VM instances used to run the Pipeline.</p><p>A
    pool is a group of hot VM instances that are instantiated and ready to use so
    Harness Pipelines can immediately acquire VM instances rather than waiting for
    new instances to be provisioned.</p><p>Steps to configure <strong>.drone_pool.yml</strong>
    file: </p><ul><li>In the Runner folder, create a new <strong>.drone_pool.yml</strong>
    file.</li><li>Configure the fields in the <strong>.drone_pool.yml</strong> file.
    For information on the list of configurable fields, refer to the following table.</li></ul><p>The
    following table provides the list of fields supported in the <a href="https://docs.drone.io/runner/aws/configuration/pool/"
    target="_blank">.drone_pool.yml file</a>: </p><table><tbody><tr><td><p>Fields</p></td><td><p>Subfields
    | Examples</p></td><td><p>Description</p></td></tr><tr><td><p><code>name</code>
    (String)</p></td><td><p>NA | <code>name: windows_pool</code></p></td><td><p>Unique
    identifier of the pool. You will be referencing this pool name in the Harness
    Manager in later steps while setting up the CI Stage Infrastructure.</p></td></tr><tr><td><p><code>min_pool_size</code>
    (Integer)</p></td><td><p>NA | <code>min_pool_size: 1</code></p></td><td><p>Minimum
    pool size number. Denotes the minimum number of cached VMs in ready state to be
    used by the Runner.</p></td></tr><tr><td><p><code>max_pool_size</code> (Integer)</p></td><td><p>NA
    | <code>max_pool_size: 3</code></p></td><td><p>Maximum pool size number. Denotes
    the maximum number of cached VMs in ready state to be used by the Runner.</p></td></tr><tr><td><p><code>platform</code></p></td><td><p>os
    (String) |</p><p> <code>platform: os: windows</code></p><p>arch (String) |</p><p><code>platform:
    arch:</code>  </p><p>variant (String) |</p><p><code>platform: variant:</code> </p><p>version
    (String) |</p><p><code>platform: version:</code> </p></td><td><p>Configure the
    details of your VM platform. By default, the platform is set to Linux OS and AMD64
    architecture.</p></td></tr><tr><td><p><code>instance</code></p></td><td><p>ami
    (String) |</p><pre>instance:<br/>  ami: ami-092f63f22143765a3</pre><p>tags (String)
    |</p><pre>instance:<br/>  tags: 285</pre><p>type (String) |</p><pre>instance:<br/>  type:
    t2.micro</pre><p>disk </p><ul><li>size (Integer)</li></ul><pre>disk:<br/>  size:</pre><ul><li>type
    (String)</li></ul><pre>disk:<br/>  type:</pre><ul><li>iops (String)</li></ul><pre>disk:<br/> 
    iops:</pre><p>Network</p><ul><li>vpc (Integer) |</li></ul><pre>network:<br/>  vpc:</pre><ul><li>vpc_security_groups
    ([ ] String) |</li></ul><pre>network:<br/>  vpc_security_groups:<br/>  - sg-0ad8xxxx511b0</pre><ul><li>security_groups
    ([ ] String) |</li></ul><pre>network:<br/>  security_groups:<br/>    - sg-06dcxxxx9811b0</pre><ul><li>Subnet_id
    (String) |</li></ul><pre>network:<br/>  subnet_id:<br/>  subnet-0ab15xxxx07b53</pre><ul><li>private_ip
    (boolean) |</li></ul><pre>network:<br/>  private_ip:</pre></td><td><p>Configure
    the settings of your AWS instance.</p><p>Disk contains AWS block information.</p><p>Network
    contains AWS network information.</p><p>For more information on these attributes,
    refer to the AWS doc <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-a-base-security-group">Create
    a security group</a>.</p></td></tr></tbody></table><p></p><div class="note-callout">Later,
    you will reference the pool identifier in the Harness Manager to map the pool
    with a Stage Infrastructure in a CI Pipeline. This is described later in this
    topic.</div><p>Here’s a sample <strong>.drone_pool.yml</strong> file. The following
    YAML contains specifications for two pools (Windows and Ubuntu):</p><pre>name:
    windows_pool<br/>min_pool_size: 1<br/>max_pool_size: 3<br/><br/>platform:<br/>
    os: windows<br/><br/><br/>instance:<br/>  ami: ami-092f63f22143765a3<br/>  type:
    t2.medium<br/>  network:<br/>    security_groups:<br/>      - sg-06dc8xxx11b0<br/>    subnet_id:
    subnet-0ab1xxx5407b53<br/>--<br/><br/>name: ubuntu_pool<br/>min_pool_size: 3<br/>max_pool_size:
    3<br/><br/>account:<br/>  region: us-east-2<br/><br/>instance:<br/>  ami: ami-0051xxxf42285<br/>  type:
    t2.micro<br/>  network:<br/>    security_groups:<br/>      - sg-06dc83xxx811b0<br/>    subnet_id:
    subnet-0ab15xxx7b53</pre><p></p><h3>Step 2: Create a Docker Delegate in Harness
    Manager</h3><p>The Delegate can be installed at the Harness account, Organization,
    or Project level.</p><p>Once you have selected New Delegate on a Delegates page
    or as part of setting up a Connector, the Delegates selection page appears.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759320805/clean-shot-2022-02-01-at-15-48-31.png"/></figure><p>Follow
    the steps in <a href="/article/cya29w2b99-install-a-docker-delegate">Install the
    Docker Delegate</a> to complete the Delegate YAML download.</p><p>The <strong>docker-compose.yaml</strong>
    file is downloaded on your local machine.</p><h3>Step 3: Configure the Docker
    Compose File</h3><p>The Harness Delegate and Runner run on the same VM. The Runner
    communicates with the Harness Delegate on localhost and port 3000 of your VM. </p><p>In
    this step, you need to manually append the Runner spec to the Delegate&#39;s Docker
    Compose file. </p><p>In your VM, copy the Delegate <strong>docker-compose.yaml</strong>
    file downloaded in the previous step.</p><p>Append the following Drone Runner
    spec to the Docker Compose file.</p><pre>drone-runner-aws:<br/>    restart: unless-stopped<br/>    image:
    drone/drone-runner-aws:1.0.0-rc.2<br/>    volumes:<br/>      - ./runner:/runner<br/>    entrypoint:
    [&#34;/bin/drone-runner-aws&#34;, &#34;delegate&#34;]<br/>    working_dir: /runner<br/>    ports:<br/>      -
    &#34;3000:3000&#34;</pre><p></p><p>In the <strong>docker-compose.yaml</strong>
    file, add the following field under <code>services: harness-ng-delegate: restart:
    unless-stopped</code>:</p><pre>network_mode: &#34;host&#34;</pre><p></p><p>Your
    Docker Compose file now looks something like this:</p><pre>version: &#34;3.7&#34;<br/>services:<br/>  harness-ng-delegate:<br/>    restart:
    unless-stopped<br/>    network_mode: &#34;host&#34;<br/>    deploy:<br/>      resources:<br/>        limits:<br/>          cpus:
    &#34;0.5&#34;<br/>          memory: 2048M<br/>    image: harness/delegate:latest<br/>    environment:<br/>      -
    ACCOUNT_ID=XICOBxxxmVbWOx-cQ<br/>      - ACCOUNT_SECRET=5058c29exxxea2452bfffeb<br/>      -
    MANAGER_HOST_AND_PORT=https://qa.harness.io<br/>      - WATCHER_STORAGE_URL=https://app.harness.io/public/qa/premium/watchers<br/>      -
    WATCHER_CHECK_LOCATION=current.version<br/>      - REMOTE_WATCHER_URL_CDN=https://app.harness.io/public/shared/watchers/builds<br/>      -
    DELEGATE_STORAGE_URL=https://app.harness.io<br/>      - DELEGATE_CHECK_LOCATION=delegateqa.txt<br/>      -
    USE_CDN=true<br/>      - CDN_URL=https://app.harness.io<br/>      - DEPLOY_MODE=KUBERNETES<br/>      -
    DELEGATE_NAME=qwerty<br/>      - NEXT_GEN=true<br/>      - DELEGATE_DESCRIPTION=<br/>      -
    DELEGATE_TYPE=DOCKER<br/>      - DELEGATE_TAGS=<br/>      - DELEGATE_TASK_LIMIT=50<br/>      -
    DELEGATE_ORG_IDENTIFIER=<br/>      - DELEGATE_PROJECT_IDENTIFIER=<br/>      -
    PROXY_MANAGER=true<br/>      - VERSION_CHECK_DISABLED=false<br/>      - INIT_SCRIPT=echo
    &#34;Docker delegate init script executed.&#34;<br/>  drone-runner-aws:<br/>    restart:
    unless-stopped<br/>    image: drone/drone-runner-aws:1.0.0-rc.2<br/>    volumes:<br/>      -
    .:/runner<br/>    entrypoint: [&#34;/bin/drone-runner-aws&#34;, &#34;delegate&#34;]<br/>    working_dir:
    /runner<br/>    ports:<br/>      - &#34;3000:3000&#34;</pre><p></p><h3>Step 4:
    Install Harness Delegate and AWS Drone Runner on the VM Instance</h3><p>Perform
    the following steps to install the Delegate and AWS Runner.</p><p>Log into your
    <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html"
    target="_blank">AWS VM using SSH</a>.</p><p>Navigate to the Runner directory you
    created earlier by running the following command:</p><pre>cd /runner</pre><p></p><p>Install
    the Delegate and Runner by running the following command:</p><pre>docker-compose
    -f &lt;path_to_docker-compose.yaml&gt; up -d</pre><p></p><p>Verify that both containers
    are running by running the following command (this can take a few minutes):</p><pre>docker
    ps</pre><p></p><p>Your output will look something like this:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759631502/clean-shot-2022-02-01-at-15-53-33.png"/></figure><p>Verify
    the logs of both the Harness Delegate and the Drone Runner by running the following
    command:</p><pre>docker logs &lt;container_id&gt;</pre><p></p><p>Next, verify
    that the Delegate registers with Harness and appears on the Delegates list. It
    can take 2-3 minutes for the Delegate to register.</p><p>You will see <strong>Connected</strong>
    next to the Delegate listing.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643917936569/clean-shot-2022-02-03-at-11-51-24.png"/></figure><p>If
    there is a connectivity error, you will see <strong>Not Connected</strong>. If
    there&#39;s an error, ensure the Docker host can connect to <strong>https://app.harness.io</strong>.</p><p>The
    Delegate and Runner have now been successfully installed, registered, and connected.</p><div
    class="note-callout">For details on the environment variables of the Harness Docker
    Delegate, see <a href="https://ngdocs.harness.io/article/cya29w2b99-install-a-docker-delegate#harness_docker_delegate_environment_variables">Harness
    Docker Delegate Environment Variables</a>.</div><h3>Step 5: Use AWS VM in the
    Pipeline Build Infrastructure</h3><p>In the Harness CI Stage, in <strong>Infrastructure</strong>,
    select <strong>AWS VMs</strong>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759775208/clean-shot-2022-02-01-at-15-56-02.png"/></figure><p>In
    the <strong>Pool ID</strong>, enter the pool name <code>&lt;pool_id&gt;</code>
    that you added in <a href="#step_1_prepare_the_vm_instance_for_harness_docker_delegate_and_aws_runner_installation">Step
    1</a>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759913082/clean-shot-2022-02-01-at-15-58-24.png"/></figure><p>Your
    AWS build infrastructure is now set up. You can now run your Build Stages on AWS
    VMs.</p><h3>See Also</h3><ul><li><a href="/article/ia5dwx5ya8-set-up-a-kubernetes-cluster-build-infrastructure">Set
    Up a Kubernetes Cluster Build Infrastructure</a></li><li>For more details on AWS
    Runner, visit this <a href="https://github.com/drone-runners/drone-runner-aws">GitHub</a>
    page.</li></ul><p></p>'
  slug: backup-2022-04-14-define-an-aws-vm-build-infrastructure
  tags: []
  is_live: true
