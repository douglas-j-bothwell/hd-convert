type: article
article_id: kddyd0f33o
user_id: xwmdbyp4x8
category_id: 4xo13zdnfx
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: Background Step Settings
slug: background-step-settings
description: Background steps are useful for running services that need to run for
  the entire lifetime of a build. Use cases include running services for a local,
  multi-service app.
short_version: Background steps are useful for running services that need to run for
  the entire lifetime of a build. Use cases include running services for a local,
  multi-service app.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-10-05T13:22:17.312854Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Background Step Settings
  description: Background steps are useful for running services that need to run for
    the entire lifetime of a build. Use cases include running services for a local,
    multi-service app.
  short_version: Background steps are useful for running services that need to run
    for the entire lifetime of a build. Use cases include running services for a local,
    multi-service app.
  body: '<p>Background steps are useful for running services that need to run for
    the entire lifetime of a Build stage. For example, you can set up your pipeline
    to run multiple background services that implement a local, multi-service app.
    </p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/kddyd0f33o/1663632006151/ci-background-steps.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><h3>Important
    Notes</h3><ul><li>Background steps do not support failure strategies or output
    variables.</li><li>A Background step starts a service and then proceeds. For any
    later step that relies on the service, it is good practice to verify that the
    service is running before sending requests.</li><li>If the pipeline runs on a
    VM build infrastructure, you can run the background service directly on the VM
    rather than in a container. To do this, leave the <strong>Container Registry</strong>
    and <strong>Image</strong> fields blank.</li></ul><h3>Container Registry</h3><p>The
    Harness Connector for a container registry. This is the container registry for
    the image Harness will use to run build commands on, such as DockerHub.</p><h3>Image</h3><p>The
    container image to use for the background service. The image name should include
    the tag and will default to the latest tag if unspecified. You can use any Docker
    image from any Docker registry, including Docker images from private registries.</p><p>Different
    container registries require different name formats:</p><ul><li><strong>Docker
    Registry:</strong> enter the name of the artifact you want to deploy, such as <strong>library/tomcat</strong>.
    Wildcards are not supported.</li><li><strong>GCR:</strong> enter the FQN (fully-qualified
    name) of the artifact you want to deploy. Images in repos need to reference a
    path, for example: <strong>us.gcr.io/playground-123/quickstart-image:latest</strong>.</li></ul><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1628031232587/clean-shot-2021-08-03-at-15-53-30.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><ul><li><strong>ECR:</strong>
    enter the FQN (fully-qualified name) of the artifact you want to deploy. Images
    in repos need to reference a path, for example: <strong>40000005317.dkr.ecr.us-east-1.amazonaws.com/todolist:0.2</strong>.</li></ul><h3>Shell</h3><p>Select
    the shell script. If the step includes commands that aren’t supported for the
    selected shell type, the build will fail.</p><p>You can run PowerShell Core (<code>pwsh</code>)
    commands in pods or containers that have <code>pwsh</code> installed. You can
    run PowerShell commands on Windows VMs running in AWS build farms.</p><h3>Entry
    Point</h3><p>The entry point takes precedence over any commands in the <strong>Command</strong>
    field.</p><h3>Command</h3><p><a href="https://www.grymoire.com/Unix/Sh.html" target="_blank">POSIX</a>
    shell script commands (beyond the entry point) executed inside the container.</p><h3>Additional
    Configuration</h3><h4>Privileged</h4><p>Enable this option to run the container
    with escalated privileges. This is the equivalent of running a container with
    the Docker <code>--privileged</code> flag.</p><h4>Report Paths</h4><p>The path
    to the file(s) that store results in the JUnit XML format. Regex is supported.</p><div
    class="note-callout">This variable must be set for the background step to publish
    test results.</div><h4>Environment Variables</h4><p>You can inject environment
    variables into a container and use them in the <strong>Command</strong> script.
    You need to enter a <strong>Name</strong> and <strong>Value</strong> for each
    variable.</p><p>You can also reference environment variables in the script by
    their name. For example, in Bash, this would be ( <code>$var_name</code> or <code>${var_name}</code>).
    In Windows PowerShell, the reference would be (<code>$Env:varName</code>).</p><p>For
    <strong>Value</strong>, you may enter <a href="/article/f6yobn7iq0-runtime-inputs">Fixed
    Values, Runtime Inputs, and Expressions</a>. For example, you can set <strong>Value</strong>
    as an expression and reference the value of some other setting in the stage or
    pipeline.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1644602120778/clean-shot-2022-02-11-at-09-55-12.png"/></figure><h4>Image
    Pull Policy</h4><p>If the service is running in a container, you can select an
    option to set the pull policy for the image.</p><ul><li><strong>Always</strong>:
    the kubelet queries the container image registry to resolve the name to an image
    digest every time the kubelet launches a container. If the kubelet encounters
    an exact digest cached locally, it uses its cached image; otherwise, the kubelet
    downloads (pulls) the image with the resolved digest, and uses that image to launch
    the container.</li><li><strong>If Not Present</strong>: the image is pulled only
    if it is not already present locally.</li><li><strong>Never</strong>: the image
    is assumed to exist locally. No attempt is made to pull the image.</li></ul><h4>Run
    as User</h4><p>If the service is running in a container, you can set the value
    to specify the user ID for all processes in the pod. For more information about
    how to set the value, see <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod">Set
    the security context for a pod</a>.</p><h4>Set Container Resources</h4><p>The
    maximum memory that the container can use. You can express memory as a plain integer
    or as a fixed-point number using the suffixes <code>G</code> or <code>M</code>.
    You may also use the power-of-two equivalents <code>Gi</code> and <code>Mi</code>.</p><h5
    id="undefined">Limit CPU</h5><p>The maximum number of cores that the container
    can use. CPU limits are measured in cpu units. Fractional requests are allowed;
    you can specify one hundred millicpu as <code>0.1</code> or <code>100m</code>.
    For more information, see <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes"
    target="_blank">Resource units in Kubernetes</a>.</p><p></p>'
  slug: background-step-settings
  tags: []
  is_live: true
