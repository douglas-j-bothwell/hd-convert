type: article
article_id: q6fr5bj63w
user_id: mfr0nxh4be
category_id: 4xo13zdnfx
author:
  name: Michael Cretzman
  email: michael.cretzman@harness.io
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Build and Push an Image to Docker Registry Step Settings
slug: build-and-push-to-docker-hub-step-settings
description: This topic provides settings you will need to build and push an Image
  to Docker Registry step, which creates a Docker image from a Dockerfile and pushes
  it to a Docker registry. You may also use this…
short_version: This topic provides settings you will need to build and push an Image
  to Docker Registry step, which creates a Docker image from a Dockerfile and pushes
  it to a Docker registry. You may also use this…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-23T03:16:12.872099Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Build and Push an Image to Docker Registry Step Settings
  description: ""
  short_version: ""
  body: '<p>This topic provides settings you will need to build and push an Image
    to Docker Registry step, which creates a Docker image from a <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile</a>
    and pushes it to a Docker registry.</p><div class="note-callout">You may also
    use this step to push to an Azure Container Registry (ACR)</div><p>This step is
    the equivalent to the <a href="https://docs.docker.com/engine/reference/commandline/build/">docker
    build command</a>.</p><h3>Name</h3><p>The unique name for this step.</p><h3>Docker
    Connector</h3><p>The Harness Docker Registry Connector to use for uploading the
    image. See <a href="/article/u9bsd77g5a-docker-registry-connector-settings-reference">Docker
    Connector Settings Reference</a>.</p><h3>Docker Repository</h3><p>The name of
    the Repository. For example, <code>&lt;hub-user&gt;/&lt;repo-name&gt;</code>.</p><div
    class="note-callout">When using private Docker registries, use a fully qualified
    repo name.</div><h3>Tags</h3><p><a href="https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t">Docker
    build tag</a> (<code>-t</code>).</p><p>Add each tag separately.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/q6fr5bj63w/1646943687916/ci-build-tags.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><h3
    id="undefined">Optional Configurations</h3><h4>Optimize</h4><p>Enables this option
    to redo snapshot mode.</p><h4>Dockerfile</h4><p>The name of the Dockerfile. If
    you don&#39;t provide a name, Harness assumes that the Dockerfile is in the root
    folder of the codebase.</p><h4>Context</h4><p>Context represents a directory containing
    a Dockerfile which kaniko will use to build your image. For example, a<code>COPY</code> command
    in your Dockerfile should refer to a file in the build context.</p><div class="note-callout">Kaniko
    requires root access to build the docker image. If you have not already enabled
    root access, you will receive the following error:<br/><br/><code>failed to create
    docker config file: open/kaniko/ .docker/config.json: permission denied</code></div><p></p><h4>Labels</h4><p><a
    href="https://docs.docker.com/config/labels-custom-metadata/" target="_blank">Docker
    object labels</a> to add metadata to the Docker image.</p><h4>Build Arguments</h4><p>The
    <a href="https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg"
    target="_blank">Docker build-time variables</a> (<code>--build-arg</code>).</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/q6fr5bj63w/1610058088594/image.png"/></figure><h4>Target</h4><p>The
    <a href="https://docs.docker.com/engine/reference/commandline/build/#specifying-target-build-stage---target"
    target="_blank">Docker target build stage</a> (<code>--target</code>).</p><p>For
    example, <code>build-env</code>.</p><h4>Remote Cache Repository</h4><p>Harness
    enables remote Docker Layer Caching where each Docker layer is uploaded as an
    image to a Docker repo you identify. If the same layer is used in subsequent builds,
    Harness downloads the layer from the Docker repo.</p><p>This is different from
    other CI vendors that are limited to local caching and persistent volumes.</p><p>You
    can also specify the same Docker repo for multiple Build and Push steps, enabling
    them to share the same remote cache.</p><p>Remote Docker Layer Caching can dramatically
    improve build time by sharing layers across Pipelines, Stages, and steps.</p><p>The
    remote cache repository needs to be created in the same host and project as the
    build image. The repository will be automatically created if it doesn’t exist.</p><p>Enter
    the name of the remote cache repo where the cached image layers will be stored.</p><div
    class="note-callout">The Remote Cache Repository must be in the same account and
    organization as the build image. For caching to work, the entered image name must
    exist.</div><h4 id="undefined">Run as User</h4><p>Set the value to specify the
    user id for all processes in the pod, running in containers. See <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod">Set
    the security context for a pod</a>.</p><h4 id="undefined">Set container resources</h4><p>Maximum
    resources limit values for the resources used by the container at runtime.</p><h5
    id="undefined">Limit Memory</h5><p>Maximum memory that the container can use.
    You can express memory as a plain integer or as a fixed-point number using the
    suffixes <code>G</code> or <code>M</code>. You can also use the power-of-two equivalents <code>Gi</code> and <code>Mi</code>.</p><h5
    id="undefined">Limit CPU</h5><p>The maximum number of cores that the container
    can use. CPU limits are measured in cpu units. Fractional requests are allowed:
    you can specify one hundred millicpu as <code>0.1</code> or <code>100m</code>.
    See <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes"
    target="_blank">Resource units in Kubernetes</a>.</p><h5 id="undefined">Timeout</h5><p>Timeout
    for the step. Once the timeout is reached, the step fails, and the Pipeline execution
    continues.</p><h3>See Also</h3><ul><li><a href="/article/i36ibenkq2-step-skip-condition-settings">Step
    Skip Condition Settings</a></li><li><a href="/article/htrur23poj-step-failure-strategy-settings">Step
    Failure Strategy Settings</a></li></ul><p></p><p></p>'
  slug: build-and-push-to-docker-hub-step-settings
  tags: []
  is_live: true
