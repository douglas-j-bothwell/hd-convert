type: article
article_id: 576gjpak61
user_id: c5pqxi9gu9
category_id: 4xo13zdnfx
author:
  name: Manish Jaiswal
  email: manish.jaiswal@harness.io
  profile_image: https://www.gravatar.com/avatar/a690002c3812e556fec2f79f91e5715e?d=mm&s=150
title: Built-in CI Codebase Variables Reference
slug: built-in-cie-codebase-variables-reference
description: In Harness, you set up your Codebase through a Harness connector to a
  Git repo to clone the code you want to build and test in your Pipeline. Once a Pipeline
  is executed, Harness also fetches your Gi…
short_version: In Harness, you set up your Codebase through a Harness connector to
  a Git repo to clone the code you want to build and test in your Pipeline. Once a
  Pipeline is executed, Harness also fetches your Gi…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-21T17:10:37.070826Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Built-in CI Codebase Variables Reference
  description: ""
  short_version: ""
  body: '<p>In Harness, you set up your <a href="/article/6vks5ym7sq-edit-a-ci-pipeline-codebase-configuration">Codebase</a>
    through a <a href="/article/zbhehjzsnv-connect-to-code-repo" target="_blank">Harness
    connector</a> to a Git repo to clone the code you want to build and test in your
    Pipeline. Once a Pipeline is executed, Harness also fetches your Git details and
    displays them in your <strong>Build</strong>. You can reference the various attributes
    of your Codebase in Harness stages using Harness built-in expressions. These variables
    are available for GitHub, Bitbucket, and GitLab codebases.</p><p>This topic describes
    the default built-in Harness expressions to refer to your Codebase attributes.</p><div
    class="note-callout">For the list of all Harness built-in expressions, see <a
    href="/article/lml71vhsim-harness-variables">Built-in and Custom Harness Variables
    Reference</a>.</div><h3>How and When Codebase Variables Get Resolved</h3><p>If
    you want to use Codebase variables in your Pipelines, you need to be aware of
    how and when these variables get resolved. </p><p>Codebase variables are based
    on the Codebase defined for the Pipeline and the information in the Triggers and
    Input Sets used to start a Build. A Codebase variable is resolved only if the
    Build has the relevant information. For example, a variable like <code>&lt;+codebase.prNumber&gt;</code>
    gets resolved only if there is a Pull Request associated with the Build. </p><div
    class="note-callout">To return codebase variables to Harness, the Connector must
    use the Enable API access option and Username and Token authentication. See <a
    href="https://ngdocs.harness.io/article/zbhehjzsnv">Connect to a Git Repo</a>.</div><div
    class="note-callout">Codebase variables are local to the Stage that ran the Build.
    Thus if your Pipeline includes a CI Build Stage and a CD Deploy Stage, the Codebase
    variables are accessible in the CI Stage only.  </div><p></p><p>The following
    use cases specify which Codebase variables get resolved and when.</p><h4>Manual
    Builds</h4><p>When a user starts a Build manually using an Input Set, the variables
    are based on the Input Set defined for the Trigger: </p><ul><li>Branch: <a href="#manual_branch_build">Manual
    Branch Build</a> variables only.</li><li>Tag: <a href="#manual_tag_build">Manual
    Tag Build</a> variables only.</li><li>Pull Request: <a href="#manual_pull_request_build">Manual
    Pull Request</a> variables only. </li></ul><h4>Builds from Git Webhook Triggers</h4><p>The
    most common use case for triggering CI Builds is in response to a Git event. When
    the Pipeline receives a webhook payload that matches a Trigger, it starts a Build.
    The Build maps the Trigger variables in the payload to the Codebase variables
    in the Build. The variables that get resolved are based on the event type and
    the payload:</p><ul><li>Pull Request event: <a href="#pull_request_webhook_event">Pull
    Request Webhook Event</a> variables only.</li><li>Push event: <a href="#push_webhook_event">Push
    Webhook Event</a> variables only.</li></ul><h4>Builds Cannot Always Use Webhook
    Payloads to Set Codebase Variables</h4><div class="note-callout">A Build cannot
    always use webhook payloads to set Codebase variables. These Builds are considered
    manual. Thus you&#39;ll get <a href="#manual_branch_build">Manual Branch Build</a>,
    <a href="#manual_tag_build">Manual Tag Build</a>, or <a href="#manual_pull_request_build">Manual
    Pull Request</a> variables, based on the Input Set defined for the Trigger. </div><p>Here
    are some examples of when this might happen:</p><ul><li>You can set up a Cron
    Trigger to start a new Build every night at midnight. In this case, the incoming
    payload has no information about a specific Git event. </li><li>You have a Run
    Step that clones a repo, then builds and pushes an image using Docker-in-Docker
    commands. This repo is not specified in the Codebase for the Build Stage. In this
    case, the Codebase variables will not apply to this repo. If a Git event arrives
    from this repo and triggers a build, the <a href="https://ngdocs.harness.io/article/rset0jry8q">Trigger
    variables</a> will describe this build. </li></ul><h3>Expression Example</h3><p>Here
    is a simple example of a Shell Script step echoing some common Codebase variable
    expressions:</p><pre>echo &lt;+codebase.commitSha&gt;<br/>echo &lt;+codebase.targetBranch&gt;<br/>echo
    &lt;+codebase.sourceBranch&gt;<br/>echo &lt;+codebase.prNumber&gt;<br/>echo &lt;+codebase.prTitle&gt;<br/>echo
    &lt;+codebase.commitRef&gt;<br/>echo &lt;+codebase.repoUrl&gt;<br/>echo &lt;+codebase.gitUserId&gt;<br/>echo
    &lt;+codebase.gitUserEmail&gt;<br/>echo &lt;+codebase.gitUser&gt;<br/>echo &lt;+codebase.gitUserAvatar&gt;<br/>echo
    &lt;+codebase.pullRequestLink&gt;<br/>echo &lt;+codebase.pullRequestBody&gt;<br/>echo
    &lt;+codebase.state&gt;</pre><p></p><p>Here&#39;s the output of the example expressions:</p><pre>+
    echo 85116fa2f04858cd5e946d69f24d7359205a0737<br/>85116fa2f04858cd5e946d69f24d7359205a0737<br/>+
    echo main<br/>main<br/>+ echo **************-patch-5-1<br/>**************-patch-5-1<br/>+
    echo 8<br/>8<br/>+ echo Update README.md<br/>Update README.md<br/>+ echo https://github.com/**************/CI-How-Tos<br/>https://github.com/**************/CI-How-Tos<br/>+
    echo **************<br/>**************<br/>+ echo<br/><br/>+ echo<br/><br/>+ echo
    &#39;https://avatars.githubusercontent.com/u/89968129?v=4&#39;<br/>https://avatars.githubusercontent.com/u/89968129?v=4<br/>+
    echo https://github.com/**************/CI-How-Tos/pull/8<br/>https://github.com/**************/CI-How-Tos/pull/8<br/>+
    echo open<br/>Open</pre><p></p><p>Here&#39;s the output in the Harness UI:</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/576gjpak61/1637901976200/ty-1-ql-tfzzv-0-l-y-4-qpp-ai-rcpmu-f-9-v-5-aud-f-2-gi-s-7-ud-6-g-i-ny-2-gz-xcff-nh-7-izvjl-kv-bhc-cpwz-b-6-etz-lpsiedd-2-v-p-3-x-l-ms-iym-1-z-cn-bk-ry-ufcb-76-p-i-8-jx-9-z-qjg-ljcab-1-k-nw-dk-y-hu"
    style="max-height:70%;max-width:70%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="70%" data-hd-width="70%" data-hd-align="left"/></figure><p></p><h3
    id="manual_tag_build">Manual Tag Build</h3><p>Manual Tag Builds are the builds
    that occur when you manually run your Harness Pipeline from the Harness UI and
    select your Codebase as <strong>Git Tag</strong>. Harness will look for the source
    code attached to the <strong>Git Tag</strong> that you specify in your <strong>Codebase</strong>
    and will clone that specific source code for the build.</p><p>You can refer to
    the Manual Tag Builds in Harness with the expression <code>&lt;+codebase.build.type&gt;
    == “tag”</code>.</p><p>Use the following expressions in Harness Stages to refer
    to the following Git attributes for manual tag builds.</p><h4>&lt;+codebase.tag&gt;</h4><p>Git
    tag of the build.</p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git commit Id of the
    build.</p><h3 id="manual_branch_build">Manual Branch Build</h3><p>Manual Branch
    Builds are the builds that occur when you manually run your Pipeline in the Harness
    UI and select your Codebase as <strong>Git</strong> <strong>Branch</strong>. Harness
    looks for the source code attached to the <strong>Git Branch</strong> that you
    specify in your <strong>Codebase</strong> and clones that specific source code
    for the build.</p><p>You can refer to the manual branch builds in Harness with
    the expression<code>&lt;+codebase.build.type&gt; == “branch”</code>.</p><p>Use
    the following expressions in Harness to refer to the various Git attributes for
    manual branch builds.</p><h4>&lt;+codebase.branch&gt;</h4><p>Git branch name of
    the build.</p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git commit id of the build.</p><h3
    id="manual_pull_request_build">Manual Pull Request Build</h3><p>Manual Pull Request
    Builds are the builds that occur when you manually run your Pipeline in the Harness
    UI and select your Codebase as <strong>Git Pull Request Number</strong>. Harness
    looks for the source code attached to the <strong>Git Pull Request Number</strong>
    that you specify in your <strong>Codebase</strong> and clones that specific source
    code for the build.</p><p>You can refer to the manual pull request builds in Harness
    with the expression<code>&lt;+codebase.build.type&gt; == “PR”</code>.</p><p>Use
    the following expressions in Harness to refer to the various Git attributes for
    manual pull request builds.</p><h4>&lt;+codebase.branch&gt;</h4><p>Git branch
    name of the pull request.</p><h4>&lt;+codebase.tag&gt;</h4><p>Git tag of the build. </p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git
    commit id of the build. </p><h4>&lt;+codebase.targetBranch&gt;</h4><p>Git Target
    branch of the build.</p><h4>&lt;+codebase.sourceBranch&gt;</h4><p>Git Source branch
    of the build.</p><h4>&lt;+codebase.prNumber&gt;</h4><p>Git pull request number. </p><h4>&lt;+codebase.prTitle&gt;</h4><p>Git
    pull request description. </p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git commit
    id of the build. </p><h4>&lt;+codebase.baseCommitSha&gt;</h4><p>Git base commit
    id of the build.</p><h4>&lt;+codebase.commitRef&gt;</h4><p>Git Commit ID Reference.</p><h4>&lt;+codebase.repoUrl&gt;</h4><p>Git
    repo url of the build. </p><h4>&lt;+codebase.gitUserId&gt;</h4><p>User id of the
    Git account.</p><h4>&lt;+codebase.gitUserEmail&gt;</h4><p>User email of the Git
    account.</p><h4>&lt;+codebase.gitUser&gt;</h4><p>User name of the Git account.</p><h4>&lt;+codebase.gitUserAvatar&gt;</h4><p>User
    avatar of the Git account.</p><h4>&lt;+codebase.pullRequestLink&gt;</h4><p>Git
    pull request link.</p><h4>&lt;+codebase.pullRequestBody&gt;</h4><p>Git pull request
    body.</p><h4>&lt;+codebase.state&gt;</h4><p>State of the Git working directory.</p><h3
    id="pull_request_webhook_event">Pull Request Webhook Event</h3><p>You can configure
    <a href="/category/oya6qhmmaw-trigger-category" target="_blank">Triggers</a> in
    Harness for events in your Git repo. Harness automatically triggers a build whenever
    there&#39;s a new action on your Git repo. A <strong>Pull Request Webhook Event</strong>
    is when your build is automatically triggered in Harness due to a new pull event
    on your Git repo. See <a href="/article/hndnde8usz-triggering-pipelines" target="_blank">Trigger
    Pipelines using Git Events</a> to set up a <strong>Trigger</strong> in Harness.</p><p>You
    can refer to the webhook pull request in Harness with the expression<code>&lt;+codebase.build.type&gt;
    == “PR”</code>.</p><p>Use the following expressions in Harness to refer to the
    following Git attributes for webhook-triggered pull request events.</p><h4>&lt;+codebase.branch&gt;</h4><p>Git
    branch name of the pull request.</p><h4>&lt;+codebase.tag&gt;</h4><p>Git tag of
    the build. </p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git commit id of the build. </p><h4>&lt;+codebase.targetBranch&gt;</h4><p>Git
    Target branch of the build.</p><h4>&lt;+codebase.sourceBranch&gt;</h4><p>Git Source
    branch of the build.</p><h4>&lt;+codebase.prNumber&gt;</h4><p>Git pull request
    number. </p><h4>&lt;+codebase.prTitle&gt;</h4><p>Git pull request description. </p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git
    commit id of the build. </p><h4>&lt;+codebase.baseCommitSha&gt;</h4><p>Git base
    commit id of the build.</p><h4>&lt;+codebase.commitRef&gt;</h4><p>Git Commit ID
    Reference.</p><h4>&lt;+codebase.repoUrl&gt;</h4><p>Git repo url of the build. </p><h4>&lt;+codebase.gitUserId&gt;</h4><p>User
    id of the Git account.</p><h4>&lt;+codebase.gitUserEmail&gt;</h4><p>User email
    of the Git account.</p><h4>&lt;+codebase.gitUser&gt;</h4><p>User name of the Git
    account.</p><h4>&lt;+codebase.gitUserAvatar&gt;</h4><p>User avatar of the Git
    account.</p><h4>&lt;+codebase.pullRequestLink&gt;</h4><p>Git pull request link.</p><h4>&lt;+codebase.pullRequestBody&gt;</h4><p>Git
    pull request body.</p><h4>&lt;+codebase.state&gt;</h4><p>State of the Git working
    directory.</p><h3 id="push_webhook_event">Push Webhook Event</h3><p>You can configure
    <a href="/category/oya6qhmmaw-trigger-category" target="_blank">Trigger</a> in
    Harness for an event on your Git repo, and Harness will automatically trigger
    a build whenever there is a new action on your Git repo. A <strong>Push Webhook
    Event</strong> is when your build is automatically triggered in Harness due to
    a new push action on your Git repo. See <a href="/article/hndnde8usz-triggering-pipelines"
    target="_blank">Trigger Pipelines using Git Events</a> to set up a <strong>Trigger</strong>
    in Harness.</p><p>You can refer to the webhook pull request in Harness with the
    expression<code>&lt;+codebase.build.type&gt; == “Push”</code>.</p><p>Use the following
    expressions in Harness to refer to the following Git attributes for webhook-triggered
    push request events.</p><h4>&lt;+codebase.branch&gt;</h4><p>Git branch name of
    the Push webhook event. </p><h4>&lt;+codebase.tag&gt;</h4><p>Git tag of the build
    for the Push webhook event.</p><h4>&lt;+codebase.commitSha&gt;</h4><p>Git commit
    ID of the build for the Push webhook event.</p><h4>&lt;+codebase.targetBranch&gt;</h4><p>Git
    Target branch of the build for the Push webhook event.</p><h4>&lt;+codebase.repoUrl&gt;</h4><p>Git
    repo URL of the build for the Push webhook event.</p><h4>&lt;+codebase.gitUserId&gt;</h4><p>User
    Id of the Git account for the Push webhook event.</p><h4>&lt;+codebase.gitUserEmail&gt;</h4><p>User
    email of the Git account for the Push webhook event.</p><h4>&lt;+codebase.gitUser&gt;</h4><p>User
    name of the Git account for the Push webhook event. </p><h4>&lt;+codebase.gitUserAvatar&gt;</h4><p>User
    avatar of the Git account for the Push webhook event.</p><div class="note-callout">For Bitbucket
    PR builds (whether by Trigger, Manual, or PR Number), the variable <code>&lt;+codebase.commitSha&gt;</code>
    returns a short sha. This is due to the Bitbucket webhook payload only sending
    short sha.</div><h3>See Also</h3><p><a href="/article/rset0jry8q-triggers-reference#built_in_git_trigger_and_payload_expressions">Built-in
    Git Trigger Reference</a></p><p></p>'
  slug: built-in-cie-codebase-variables-reference
  tags: []
  is_live: true
