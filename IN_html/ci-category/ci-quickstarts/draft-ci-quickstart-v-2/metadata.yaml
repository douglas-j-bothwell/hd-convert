type: article
article_id: b35bxktz1i
user_id: xwmdbyp4x8
category_id: pjovrkldfq
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: DRAFT CI Quickstart v2
slug: draft-ci-quickstart-v-2
description: This quickstart shows you how to build a simple, two-stage CI Pipeline
  in Harness. Setting up and running the Pipeline will take about 30 minutes. The
  Pipeline will build and run a unit test on a cod…
short_version: This quickstart shows you how to build a simple, two-stage CI Pipeline
  in Harness. Setting up and running the Pipeline will take about 30 minutes. The
  Pipeline will build and run a unit test on a cod…
tags: []
show_toc: true
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-05T16:07:13.1318Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: DRAFT CI Quickstart v2
  description: ""
  short_version: ""
  body: '<p>This quickstart shows you how to build a simple, two-stage CI Pipeline
    in Harness. Setting up and running the Pipeline will take about 30 minutes.</p><p>The
    Pipeline will build and run a unit test on a codebase, upload the artifact to
    Docker Hub, and then run integration tests.</p><p>You will use publicly-available
    code, images, and your Github and Docker Hub accounts.</p><h3>Objectives</h3><p>You&#39;ll
    learn how to create a CI Pipeline that does the following:</p><ol><li>Clone a
    code repo for an app.</li><li>Use a Kubernetes cluster build farm.</li><li>Build
    the code and run unit tests in the build farm.</li><li>Package the app as a Docker
    image and upload it to Docker Hub.</li><li>Pull the uploaded image to the build
    farm as a service dependency.</li><li>Run an integration test against the app.</li></ol><p></p><h3>Before
    You Begin</h3><p>Make sure you have the following set up before you begin this
    quickstart:</p><ul><li><strong>Github account:</strong> This quickstart clones
    a codebase from a Github repo. You will need a Github account so Harness can connect
    to Github.</li><li><strong>Docker Hub account and repo:</strong> You will need
    to push and pull the image you build to Docker Hub. You can use any repo you want,
    or create a new one for this quickstart.</li><li><strong>Kubernetes cluster for
    Harness Delegate and build farm:</strong><ul><li>You&#39;ll need a Kubernetes
    cluster for Harness to use for the Harness Delegate and as a build farm. Ensure
    you have a cluster that meets the following requirements:<ul><li><strong>Number
    of pods:</strong> 3 (two pods for the Harness Delegate, the remaining pod for
    the build farm).</li><li><strong>Machine type:</strong> 4vCPU</li><li><strong>Memory:</strong> 16GB
    RAM. The build farm and Delegate requirements are low but the remaining memory
    is for Kubernetes, the Docker container, and other default services.</li><li><strong>Networking:</strong> Outbound
    HTTPS for the Harness connection, and to connect to Docker Hub. Allow TCP port
    22 for SSH.</li><li><strong>Namespace:</strong> When you install the Harness Delegate,
    it will create the <code>harness-delegate</code> namespace. You&#39;ll use the
    same namespace for the build farm.</li></ul></li></ul></li></ul><div class="note-callout">Google
    Kubernetes Engine (GKE) <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview"
    target="_blank">Autopilot</a> is not supported at this time.</div><ul><li>A <strong>Kubernetes
    service account</strong> with permission to create entities in the target namespace
    is required. The set of permissions should include <code>list</code>, <code>get</code>,
    <code>create</code>, and <code>delete</code> permissions. In general, the cluster-admin
    permission or namespace admin permission is enough.<br/>For more information,
    see <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles"
    target="_blank">User-Facing Roles</a> from Kubernetes.</li></ul><p></p><h3>Visual
    Summary</h3><p>Here&#39;s an architecture diagram of the very simple setup we
    use for Harness CI:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611599684642/image.png"/></figure><p>You
    will install the Harness Delegate in the same cluster you use for the build farm.
    The Delegate will create the namespace <code>harness-delegate</code>. You&#39;ll
    use that namespace for both the Delegate and build farm. You can change it if
    you like.</p><h4>Video Overview</h4><p>Here&#39;s a quick video that provides
    an overview of Harness CI Enterprise:</p><p></p><div class="hd--embed" data-provider="Wistia"
    data-thumbnail=""><iframe src="//fast.wistia.net/embed/iframe/fsc2b05uxz" allowtransparency="true"
    frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" allowfullscreen=""
    mozallowfullscreen="" webkitallowfullscreen="" oallowfullscreen="" msallowfullscreen=""
    width="620" height="349"></iframe><script src="//fast.wistia.net/assets/external/E-v1.js"
    async=""></script></div><h3>Option: Clone the Codebase Repo</h3><p>For this quickstart,
    we use a codebase located at:</p><p><code>https://github.com/keen-software/goHelloWorldServer</code></p><p>You
    can use this repo for the quickstart or clone it and use the clone. You will connect
    Harness to the repo or the clone.</p><p>You can use your own code repo instead.
    All the steps in this quickstart will work with any code repo in Git.</p><h3>Step
    1: Start a New Pipeline</h3><p>Pipelines are a collection of one or more stages.
    They manage and automate builds, testing, deployments, and other important build
    and release stages.</p><p>In Harness, click <strong>Projects</strong>.</p><p>Click
    <strong>+ Project</strong> to start a new Project.</p><p>Enter the following settings
    and then save:</p><p></p><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611005781585/image.png"/></figure></td><td><ul><li><strong>Name:</strong>
    CI Quickstart</li><li><strong>Organization:</strong> default</li><li><strong>Invite
    People to Collaborate:</strong> You do not need to add yourself.</li></ul></td></tr></tbody></table><p></p><p>Your
    new project is listed.</p><p>Click the new Project.</p><p>In <strong>Enable More
    Modules</strong>, in <strong>Continuous Integration</strong>, click <strong>Enable</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611006611023/image.png"/></figure><p>The
    module is added.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611007435549/image.png"/></figure><p>In
    the module, click <strong>Create New Pipeline</strong>. Pipeline Studio appears.</p><p>Enter
    the name <strong>CI Pipeline</strong> and click <strong>Start</strong>.</p><div
    class="note-callout">As you enter a name for the Pipeline, the ID for the Pipeline
    is created. A Pipeline name can change, but an ID is permanent. The ID is how
    you can reference subordinate elements of a Pipeline, such as the names of variables
    within the Pipeline.</div><p>Next, we&#39;ll add a stage to the Pipeline to clone
    a codebase.</p><h3>Step 2: Clone the Codebase</h3><p>In this step we&#39;ll do
    the following as part of cloning the codebase:</p><ul><li>Install the Harness
    Delegate.</li><li>Create the GitHub Connector.</li><li>Connect Harness to the
    GitHub repo with the codebase.</li></ul><p>In Pipeline Studio, click <strong>Add
    Stage</strong>, and then click <strong>Build</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625179435663/clean-shot-2021-07-01-at-15-43-48.png"/></figure><p>In
    <strong>Stage Name</strong>, enter <strong>Build Test and Push</strong>.</p><p>In
    <strong>Configure Codebase</strong>, in <strong>Connector</strong>, click <strong>Select</strong>.</p><p>Click
    <strong>New Connector</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625179632451/clean-shot-2021-07-01-at-15-47-05.png"/></figure><p>Click
    <strong>GitHub Connector</strong>.</p><p>In <strong>GitHub Connector</strong>,
    in <strong>Name</strong>, enter the name <strong>CI Quickstart</strong>, and then
    click <strong>Continue</strong>.</p><p>Enter the following settings and click
    <strong>Continue</strong> through each step.</p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625179882590/clean-shot-2021-07-01-at-15-51-15.png"/></figure></td><td><ul><li><strong>URL
    Type:</strong> Repository</li><li><strong>Connection Type:</strong> HTTP</li><li><strong>GitHub
    Account URL:</strong><br/><code>https://github.com/keen-software/goHelloWorldServer.git</code></li></ul></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625179914600/clean-shot-2021-07-01-at-15-51-48.png"/></figure></td><td><ul><li><strong>Username
    and Password:</strong></li></ul><p>Enter the username and password for your GitHub
    account.</p><p>You&#39;ll need to create a Harness Secret for the password. Harness
    secrets are safe. They are stored in the <a href="/article/hngrlb7rd6-harness-secret-manager-overview">Harness
    Secret Manager</a>.</p><p>You can always use your own Secret Manager with Harness.</p></td></tr></tbody></table><p></p><p>In
    <strong>Set Up Delegates</strong>, click <strong>Install new Delegate</strong>.</p><p>The
    Delegate wizard appears.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625182376199/clean-shot-2021-07-01-at-16-32-36.png"/></figure><p>Click <strong>Kubernetes</strong>,
    and then click <strong>Continue</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625182388998/clean-shot-2021-07-01-at-16-33-00.png"/></figure><p>Enter
    a name for the Delegate, like <strong>quickstart</strong>, click the <strong>Small</strong> size.</p><p>In
    <strong>Delegate Configurations</strong>, select <strong>Primary Configuration</strong>.
    This is simply a default. In the future, you can add Delegate Configuration to
    run scripts on your Delegates and scope them to different Environments.</p><p>Click <strong>Continue</strong>.</p><p>Click <strong>Download
    Script</strong>. The YAML file for the Kubernetes Delegate will download to your
    computer as an archive.</p><p>Open a terminal and navigate to where the Delegate
    file is located.</p><p>You will connect to your cluster using the terminal so
    you can simply run the YAML file on the cluster.</p><p>In the same terminal, log
    into your Kubernetes cluster. In most platforms, you select the cluster, click <strong>Connect</strong>,
    and copy the access command.</p><p>Next, install the Harness Delegate using the <strong>harness-delegate.yaml</strong> file
    you just downloaded. In the terminal connected to your cluster, run this command:</p><pre
    class="hljs cs">kubectl apply -f harness-delegate.yaml</pre><p></p><p>You can
    find this command in the Delegate wizard:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1625006899148/clean-shot-2021-06-29-at-15-48-13.png"/></figure><p>The
    successful output is something like this:</p><pre class="hljs cpp">% kubectl apply
    -f harness-delegate.yaml<br/>namespace/harness-delegate unchanged<br/>clusterrolebinding.rbac.authorization.k8s.io/harness-delegate-cluster-admin
    unchanged<br/>secret/k8s-quickstart-proxy unchanged<br/>statefulset.apps/k8s-quickstart-sngxpn
    created<br/>service/delegate-service unchanged</pre><p></p><p>In Harness, click
    <strong>Verify</strong>. It will take a few minutes to verify the Delegate. Once
    it is verified, close the wizard.</p><p>Back in <strong>Set Up Delegates</strong>,
    you can select the new Delegate.</p><p>In the list of Delegates, you can see your
    new Delegate and its tags.</p><p>Select the <strong>Connect using Delegates with
    the following Tags</strong> option.</p><p>Enter the tag of the new Delegate and
    click <strong>Save and Continue</strong>.</p><p>When you are done, the Connector
    is tested.</p><p>Select the new Connector and click <strong>Apply Selected</strong>.</p><p>Back
    in <strong>About Your Stage</strong>, the Connector and repo are displayed.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625180234470/clean-shot-2021-07-01-at-15-57-04.png"/></figure><p>Click
    <strong>Set Up Stage</strong>. The new stage is added to the Pipeline.</p><h3>Step
    3: Define the Build Farm Infrastructure</h3><p>Here you&#39;ll define the build
    farm infrastructure and the stage steps.</p><p>In the <strong>Build Test and Push</strong>
    stage, click <strong>Infrastructure</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625180326375/clean-shot-2021-07-01-at-15-58-38.png"/></figure><p>In
    <strong>Select a Kubernetes Cluster</strong>, click <strong>Select</strong>.</p><p>Click
    <strong>New Connector</strong>.</p><p>Name the Connector <strong>cidelegate</strong>,
    and click <strong>Continue</strong>.</p><p>In <strong>Details</strong>, select
    <strong>Use the credentials of a specific Harness Delegate</strong>. We will add
    this Delegate next.</p><p>Click <strong>Continue</strong>.</p><p>Select the Kubernetes
    Delegate you added earlier using its Tags, and then click <strong>Save and Continue</strong>.</p><p>Harness
    verifies the Connector.</p><p>Click <strong>Finish</strong>.</p><p>The new Connector
    is added to <strong>Select a Kubernetes Cluster</strong>.</p><p>In <strong>Namespace</strong>,
    enter the namespace <code>harness-delegate</code>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625180534562/clean-shot-2021-07-01-at-16-02-01.png"/></figure><p>Click
    <strong>Next</strong>.</p><p>You can ignore the <strong>Dependencies</strong>
    step for this stage.</p><p>Now that the build farm infrastructure is set up, you
    can run unit tests against your code.</p><h3>Step 4: Build and Run Unit Tests</h3><p>Next,
    we&#39;ll add a Run step to the stage that will build the code and run a unit
    test.</p><p>Click <strong>Add step</strong>, and then click <strong>Run</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611090977275/image.png"/></figure><p>The
    <strong>Run</strong> step executes one or more commands on a container image.</p><p>In
    <strong>Name</strong>, enter <strong>Run Unit Tests</strong>.</p><p>In <strong>Container
    Registry</strong>, click <strong>Select</strong>.</p><p>Click <strong>New Connector</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625180626550/clean-shot-2021-07-01-at-16-03-35.png"/></figure><p>Select
    <strong>Docker Registry</strong>.</p><p>In <strong>Name</strong>, enter <strong>Docker
    Quickstart</strong>.</p><p>Enter the following settings and click <strong>Continue</strong>.</p><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611620642568/image.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Docker Quickstart.</li><li><strong>Docker Registry URL:</strong> https://index.docker.io/v1/</li><li><strong>Provider
    Type:</strong> Docker Hub</li><li><strong>Username and password:</strong><br/>Enter
    the username and password for your Docker Hub account.</li><li>You cannot use
    Anonymous because you will push to Docker Hub.</li></ul><p></p></td></tr></tbody></table><p></p><p>Back
    in <strong>Set Up Delegates</strong>, you can select the new Delegate you added
    earlier.</p><p>In the list of Delegates, you can see your new Delegate and its
    tags.</p><p>Select the <strong>Connect using Delegates with the following Tags</strong>
    option.</p><p>Enter the tag of the new Delegate and click <strong>Save and Continue</strong>.</p><p>When
    you are done, the Connector is tested.</p><p>Click <strong>Finish</strong>.</p><p>Select
    the new Connector and click <strong>Apply Selected</strong>. The new Connector
    is in the Run step <strong>Container Registry</strong> setting.</p><p>In the <strong>Run</strong>
    step, enter the following and click <strong>Apply Changes</strong>.</p><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611100391778/image.png"/></figure></td><td><ul><li><strong>Image:</strong>
    golang:1.15</li><li><strong>Command:</strong></li></ul><pre>go get gotest.tools/gotestsum<br/>gotestsum
    --format=standard-verbose --junitfile unit-tests.xml || true<br/>CGO_ENABLED=0
    GOOS=linux GOARCH=amd64 go build -a -tags netgo</pre><ul><li><strong>Report Paths
    (Optional Configuration):</strong> *.xml</li></ul></td></tr></tbody></table><p></p><p>This
    <strong>Run</strong> step will intentionally fail the test. It will be useful
    to see how a test failure is recorded in Harness.</p><p>The last line contains
    the <code>go build</code> command to compile the package, along with its dependencies.</p><h3>Step
    5: Build and Push Image to Docker Hub</h3><p>Next, we&#39;ll add a step to build
    our container and push it to your Docker Hub repo. You&#39;ll need a repo in your
    Docker Hub account to receive the artifact.</p><p>Click <strong>Add step</strong>,
    and then click <strong>Build and Push an Image to Docker Registry</strong>.</p><p>Enter
    the following settings and click <strong>Apply Changes</strong>.</p><p>Replace
    <code>&lt;your_repo&gt;</code> with the name of the Docker Hub repo you are using
    for this quickstart.</p><table><tbody><tr><td><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611615458227/image.png"/></figure></td><td><ul><li><strong>Step
    Name:</strong> Build and push image to Docker Hub</li><li><strong>Docker Hub Registry:</strong>
    The Docker Hub Connector you set up earlier.</li><li><strong>Repository:</strong>
    <code>&lt;your_repo&gt;/ciquickstart</code></li><li><strong>Tags:</strong> <code>&lt;+pipeline.sequenceId&gt;</code></li></ul></td></tr></tbody></table><p></p><p>The
    <code>&lt;+pipeline.sequenceId&gt;</code> you added as an image tag is used to
    identify this image in the next stage.</p><p>In the <a href="/article/vo4sjbd09g-configure-service-dependency-step-settings">Configure
    Service Dependency</a> step in the next stage, you identify the image location
    using <code>&lt;+pipeline.sequenceId&gt;</code>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/8l31vtr4hi/1613427622397/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>The
    <code>&lt;+pipeline.sequenceId&gt;</code> is a built-in Harness variable that
    represents the <strong>Build ID</strong> number, for example <code>Build ID: 9</code>.</p><p>When
    the Pipeline is run you will see a Build ID:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611614713927/image.png"/></figure><p>And
    this Build ID will be used to tag the image you push in stage 1 of your Pipeline,
    and pull in stage 2 of your Pipeline.</p><p>Click <strong>Save</strong> to save
    the Pipeline. You can run the Pipeline now, or you can continue and add the Integration
    Test stage.</p><h3>Step 6: Create the Integration Test Stage</h3><p>Now we have
    a stage to clone, test, build, containerize, and then push our image to Docker
    Hub.</p><p>Next, we&#39;ll add a stage to pull that image, run it in a container,
    and run integration tests on it.</p><p>Click <strong>Add Stage</strong>, and select
    <strong>Build</strong>.</p><p>Enter the name <strong>Run Integration Test</strong>,
    <u>disable</u> <strong>Clone Codebase</strong>, and then click <strong>Set Up
    Stage</strong>.</p><h4>Define Stage Infrastructure</h4><p>We&#39;ll define the
    stage&#39;s infrastructure the same way we did in stage 1.</p><p>Click <strong>Infrastructure</strong>.</p><p>Select
    <strong>Propagate from an existing stage</strong>.</p><p>Select the previous stage.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625181360738/clean-shot-2021-07-01-at-16-15-54.png"/></figure><p>This
    will use the same Kubernetes cluster and namespace as the first stage.</p><p>Click
    <strong>Next</strong>.</p><h4>Add Built Image from Stage 1 as a Service Dependency</h4><p>In
    stage 1, we built our code and pushed our built image to Docker Hub.</p><p>Now,
    in stage 2, we will identify the image as a Service Dependency for our test stage.</p><p>Harness
    will pull the image onto the container in the stage 2 infrastructure. Next, it
    will start the Hello World Server in the image.</p><p>Click <strong>Add service
    dependency</strong>.</p><p>Enter the following settings and click <strong>Apply
    Changes</strong>.</p><p>Replace <code>&lt;your_repo&gt;</code> with the name of
    the Docker Hub repo you are using for this quickstart.</p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611615284975/image.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Run Hello World Server</li><li><strong>Container Registry:</strong> The same Docker
    Hub Connector you used in stage 1.</li><li><strong>Image:</strong></li></ul><pre>&lt;your_repo&gt;/ciquickstart:&lt;+pipeline.sequenceId&gt;</pre></td></tr></tbody></table><p></p><p>Notice
    we use the same expression <code>&lt;+pipeline.sequenceId&gt;</code> in <strong>Image</strong>
    that we used the <strong>Tags</strong> setting of stage 1&#39;s <strong>Build
    and Push to Docker Hub</strong> step.</p><p>This tells Harness to pull the image
    with the same tag as the image we pushed in stage 1&#39;s <strong>Build and Push
    to Docker Hub</strong> step. Here&#39;s an example:</p><p></p><table><tbody><tr><td><p><strong>Build
    and Push</strong> step from stage one</p></td><td><p><strong>Configure Service
    Dependency</strong> step from stage two</p></td></tr><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611615488921/image.png"/></figure></td><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611615399438/image.png"/></figure></td></tr></tbody></table><h4>Add
    Integration Test Step</h4><p>Next, we can run an integration test. We&#39;ll simply
    test the connection to the server.</p><p>Click <strong>Add Step</strong>, and
    then click <strong>Run</strong>.</p><p>Enter the following settings and click
    <strong>Apply Changes</strong>.</p><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611357219234/image.png"/></figure></td><td><ul><li><strong>Name:</strong>
    test connection to server</li><li><strong>Container Registry:</strong> The Docker
    Hub Connector you&#39;ve been using.</li><li><strong>Image:</strong> <code>curlimages/curl:7.73.0</code></li><li><strong>Command:</strong></li></ul><pre>sleep
    10<br/>curl localhost:8080<br/>curl localhost:8080?Hello!_I_am_a_nice_demo!</pre></td></tr></tbody></table><p></p><p>The
    Build Pipeline is complete. You can now run it.</p><h3>Step 7: Run the Pipeline</h3><p>Now
    you can run your Pipeline.</p><p>Click <strong>Save and Publish</strong>.</p><p>Click
    <strong>Run</strong>. The Pipeline Inputs settings appear.</p><p>In <strong>CI
    Codebase</strong>, click <strong>Git branch</strong>.</p><p>In <strong>Git Branch</strong>,
    enter the name of the branch where the codebase is, such as <strong>main</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1625182206482/clean-shot-2021-07-01-at-16-29-57.png"/></figure><p>Click
    Run <strong>Pipeline</strong>.</p><h3>Step 8: View the Results</h3><p>Click each
    stage&#39;s steps to see the logs in real-time.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611617833286/image.png"/></figure><p>Click
    <strong>Console View</strong> to see more details.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611617876213/image.png"/></figure><p>You
    can see the build number in the <strong>Build and push image to Docker Hub</strong>
    step used as an image tag. For example, 11:</p><pre>--destination=myrepo/ciquickstart:11</pre><p></p><p>In
    the Initialize step of the <strong>Run Integration Test</strong> stage, you can
    see the image with the same tag pulled from your Docker Hub repo:</p><pre>   8
    Pulling image &#34;myrepo/ciquickstart:11&#34;<br/>   9 Successfully pulled image
    &#34;myrepo/ciquickstart:11&#34;</pre><p></p><p>Now look in your Docker Hub repo.
    You can see the image and tag:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611618576440/image.png"/></figure><p>Click
    <strong>Tests</strong>.</p><p>You can see the failed test from stage 1.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611618619341/image.png"/></figure><p>Click
    <strong>Builds</strong>. Your build appears.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611618681950/image.png"/></figure><p></p><p>Congratulations!
    You have a CI Pipeline that builds and tests your code.</p><h3>Using YAML</h3><p>The
    entire Pipeline is available as YAML, also.</p><p>In <strong>Builds</strong>,
    click more options (︙) and select <strong>Edit Pipeline</strong>.</p><p>Click
    <strong>YAML</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/x0d77ktjw8/1611618862882/image.png"/></figure><p>You
    can see the entire Pipeline as YAML. You can edit anything in the Pipeline and
    run it again.</p><p></p>'
  slug: draft-ci-quickstart-v-2
  tags: []
  is_live: true
