type: article
article_id: 9ulc3vrpf2
user_id: aira2g6l6r
category_id: 2d7y1cr09y
author:
  name: Lavanya Mandavilli
  profile_image: https://www.gravatar.com/avatar/63349f0ac17fcc0d20247e1cac23e461?d=mm&s=150
title: Adding Custom Approval Stages and Steps
slug: custom-approvals
description: Use a Custom Approval stage and Custom Approval step to approve or reject
  a Pipeline or stage at any point in its execution
short_version: Use a Custom Approval stage and Custom Approval step to approve or
  reject a Pipeline or stage at any point in its execution
tags: []
show_toc: true
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-03T14:44:04.699644Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Adding Custom Approval Stages and Steps
  description: Use a Custom Approval stage and Custom Approval step to approve or
    reject a Pipeline or stage at any point in its execution
  short_version: Use a Custom Approval stage and Custom Approval step to approve or
    reject a Pipeline or stage at any point in its execution
  body: '<p></p><div class="note-callout">Currently, this feature is behind the feature
    flag <code>NG_CUSTOM_APPROVAL</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>Harness has
    first class support for <a href="/article/2lhfk506r8-adding-jira-approval-stages">Jira</a>
    and <a href="/article/h1so82u9ub-service-now-approvals">ServiceNow</a> approval
    stages and steps, and Harness has a built-in <a href="/article/fkvso46bok-adding-harness-approval-stages">Manual</a>
    approval stages and steps.</p><p>In some cases, you might have a custom shell
    script ticketing system or prefer to script your approvals. You can use the Custom
    Approval stage and step with these methods.</p><p>A Custom Approval stage and
    step can approve or reject a Pipeline or stage at any point in their execution.
    You add a script to a Custom Approval step and use the script results as approval
    and rejection criteria.</p><p>This topic describes how to add Custom Approval
    stages and steps.</p><h3>Before You Begin</h3><ul><li><a href="/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li><li><a href="/article/2chyf1acil-add-a-stage">Add
    a Stage</a></li></ul><h3>Requirements and Limitations</h3><ul><li>A Custom Approval
    stage can be added to any Pipeline created in any module, such as in Continuous
    Delivery (CD), Continuous Integration (CI), or Feature Flags.</li><li>A Custom
    Approval <u>step</u> can be added to a Custom Approval stage, CD Build stage,
    or Feature Flags stage.</li><li>A Custom Approval step is not available in the
    the CI stage currently.</li><li>The Custom Approval step must have at least one
    Approval criteria. Rejection criteria is optional.</li></ul><h3>Review: Custom
    Approval Stages and Steps</h3><p>When you add a Custom Approval stage, a Custom
    Approval step is added to the stage automatically. You can also add a Custom Approval
    step to a Continuous Delivery (CD) Deploy or Feature Flags stage.</p><p>In the
    Custom Approval step, you enter a script that is executed at Pipeline runtime.</p><p>If
    the script fails, the step fails and the step or stage <a href="/article/htrur23poj-step-failure-strategy-settings">Failure
    Strategy</a> is initiated.</p><p>You must set approval criteria. Approval criteria
    can use the results of the script or other Harness features such as <a href="/article/lml71vhsim-harness-variables">Harness
    built-in or custom variables</a>.</p><p>Rejection criteria is optional.</p><p>Criteria
    can be the following:</p><ul><li>Evaluating a script output.<ul><li>For example,
    you set a value for a variable in your script, output that variable from the script,
    and then use that variable in the approval/rejection criteria of the Custom Approval
    step.</li><li>When an evaluation results in a Boolean <u>true</u>, the approval
    criteria is met.</li></ul></li><li>Evaluating a JEXL Expression.<ul><li>Harness
    supports JEXL expressions and you can use these with script outputs or Harness
    variables to create expressions.</li><li>If the resolved JEXL expression is a
    Boolean <u>true</u>, the approval criteria is met.</li><li>For example, you could
    evaluate the output from a previous <a href="/article/k5lu0u6i1i-using-shell-scripts">Shell
    Script</a> step named <strong>test</strong> by referencing its output in a JEXL
    expression and comparing it to the value <code>Approved</code>: <code>&lt;+execution.steps.test.output.outputVariables.status&gt;==&#34;Approved&#34;</code>.</li><li>See
    <a href="/article/lml71vhsim-harness-variables">Built-in and Custom Harness Variables
    Reference</a> and <a href="/article/91bhqk7t4q-extracting-characters-from-harness-variable-expressions">Extracting
    Characters from Harness Variable Expressions</a>.</li></ul></li></ul><h3>Step
    1: Add a Custom Approval Stage</h3><p>A Custom Approval stage contains a Custom
    Approval step, but you can also add a Custom Approval step to other Approval stages,
    as well as CD Build and Feature Flags stages.</p><p>Let&#39;s add a Custom Approval
    stage and see the Custom Approval step added automatically.</p><p>In a Pipeline,
    click <strong>Add Stage.</strong></p><p>In <strong>Select Stage Type</strong>,
    click <strong>Approval</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9ulc3vrpf2/1659109437720/approval-stage.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p>In
    <strong>About your Stage</strong>, enter a name for this stage, select <strong>Custom</strong>,
    and click <strong>Set Up Stage</strong>. The Approval Stage is set up.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9ulc3vrpf2/1659109560561/approval-about-your-stage.png"/></figure><p>Click
    the <strong>Custom Approval</strong> step to set up your <strong>Step Parameters</strong>.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9ulc3vrpf2/1659109612565/custom-approval-stage.png"/></figure><div
    class="note-callout">If you were adding a Custom Approval step to a different
    type of stage, you would simply click <strong>Add Step</strong> in that stage&#39;s
    <strong>Execution</strong> and select <strong>Custom Approval</strong>.</div><h3>Step
    2: Set up a Custom Approval Step</h3><p>The Custom Approval step has the following
    settings.</p><h4>Script</h4><p>In <strong>Name</strong>, enter a name for the
    step.</p><p>In <strong>Script</strong>, enter your script.</p><p>The script is
    executed on the host of the Harness Delegate that runs the step. The script is
    not executed on the deployment target host(s).</p><p>You can select one or more
    specific Delegates using the <a href="/article/nnuf8yv13o">Delegate Selector</a>
    setting in the step&#39;s <strong>Advanced</strong> settings.</p><h4>Timeout,
    Retry Interval, and Script Timeout</h4><p>It&#39;s important to understand how
    the Timeout, Retry Interval, and Script Timeout settings relate to each other.</p><p>In <strong>Timeout</strong>,
    enter how long you want Harness to try to complete the <u>step</u> before failing
    (and initiating the stage or step <a href="/article/0zvnn5s1ph-define-a-failure-strategy-on-stages-and-steps">Failure
    Strategy</a>).</p><p>You can use <code><strong>w</strong></code>  for week, <code><strong>d</strong></code>  for
    day, <code><strong>h</strong></code>  for hour, <code><strong>m</strong></code>  for
    minutes, <code><strong>s</strong></code>  for seconds and <code><strong>ms</strong></code> for
    milliseconds. For example, <code>1d</code> for one day.</p><p>In <strong>Script
    Timeout</strong>, set how long the step should wait for the <u>script</u> to complete
    before timing out.</p><p>In <strong>Retry Interval</strong>, set how long the
    step should wait to run the script again if the Approval or Rejection criteria
    evaluate to <strong>false</strong>.</p><p>For example, if the <strong>Step Timeout</strong>
    is set as <code>10m</code>, <strong>Script Timeout</strong> is set to <code>2m</code>,
    and <strong>Retry Interval</strong> is set to <code>30s</code>, then the <u>script</u>
    will be executed at least 4 times.</p><div class="note-callout">How many times
    a script executes within the <strong>Script Timeout</strong> depends on how fast
    the script executes.</div><p></p><h3>Option: Script Output Variables</h3><p>You
    can output variables from the script to be used in subsequent Pipeline steps or
    in the acceptance and rejection criteria.</p><h4>Exporting Variables</h4><p>To
    export variables from the script to the acceptance and rejection criteria or other
    steps in the stage, you use the <strong>Script Output Variables</strong> option.</p><p>Let&#39;s
    look at a simple example of a script that exports the variable <strong>name</strong>:</p><pre
    class="hljs routeros">export name=123</pre><p></p><p>The <code>name</code> variable
    cannot be used outside the script unless you use <strong>Script Output Variables</strong>.</p><div
    class="note-callout">You do not need to export the variables with <code>export</code>
    to use them with <strong>Script Output Variables</strong>. You can simply declare
    them, like <code>name=&#34;123&#34;</code>. The <code>export</code> command is
    for using the variables in child processes within the script.</div><p>In <strong>Script
    Output Variables</strong>, in <strong>Value</strong>, you enter the name of the
    script variable you want to output (for example, <code>name</code>).</p><p>In <strong>Name</strong>,
    enter a name to use in other steps that will reference this variable. This is
    the <u>output variable name</u> that will be used in a Harness expression for
    referencing the output variable.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/9ulc3vrpf2/1656455512385/image.png"/></figure><p>The
    format to reference the output variable is <code>&lt;+steps.[step_id].output.outputVariables.[output_variable_name]&gt;</code>.</p><p>Here&#39;s
    an example showing how the <strong>Script Output Variables</strong> references
    the exported variable <strong>test</strong>, and how you reference the output
    variable Name <strong>var1</strong> in a subsequent Shell Script step to get that
    value:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/9ulc3vrpf2/1656456113515/clean-shot-2022-06-28-at-15-41-39-2-x.png"/></figure><p>To
    find the expression to reference your output variables, execute the Pipeline,
    locate the step, and click its <strong>Output</strong> tab. You can copy the Output
    variable there.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9ulc3vrpf2/1659124468168/custom-approval-output-variable.png"/></figure><h4>Using
    Variables in Approval or Rejection Criteria</h4><p>You can use script variables
    in your approval or rejection criteria by use them in <strong>Script Output Variables</strong>.</p><p>First,
    you create the variable in <strong>Script</strong>, then create a variable in
    <strong>Script Output Variables</strong> that references that variable, and then
    use the <strong>Script Output Variables</strong> variable and the <strong>Script</strong>
    variable&#39;s value in the <strong>Approval Criteria</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/9ulc3vrpf2/1656457122457/clean-shot-2022-06-28-at-15-58-29-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><h3>Step
    3: Set Approval Criteria</h3><p>The <strong>Approval Criteria</strong> in the
    step determines if the Pipeline or stage is approved.</p><p><strong>Approval Criteria</strong>
    is mandatory, but you can also set <strong>Rejection Criteria</strong>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/h1so82u9ub/1640003318519/screenshot-2021-12-20-at-5-58-11-pm.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><div
    class="note-callout">Whether the Pipeline/stage stops executing depends on the
    stage or step <a href="/article/0zvnn5s1ph-define-a-failure-strategy-on-stages-and-steps">Failure
    Strategy</a>.</div><p>You can specify criteria using <strong>Conditions</strong> and/or <strong>JEXL
    Expression</strong>. If you use them in combination, they both must evaluate to
    a Boolean <code>True</code> for the step to be approved.</p><p>In <strong>Conditions</strong>,
    you can define approval criteria using outputs from the step script, <a href="/article/lml71vhsim-harness-variables">Harness
    expressions</a>, or your custom ticketing system.</p><p>If you use Harness expressions,
    ensure that the expression can be resolved at runtime.</p><p>If you use custom
    variable expressions that reference information from subsequent steps, ensure
    that those custom variable expressions will be resolved.</p><p>In <strong>JEXL
    Expression</strong>, you can use <a href="https://commons.apache.org/proper/commons-jexl/reference/syntax.html"
    target="_blank">JEXL expressions</a>. You can use a JEXL expression if the field
    is set to <strong>Fixed value</strong> or <strong>Expression</strong>.</p><h3>Option:
    Script Input Variables</h3><p>While you can simply declare a variable in your
    script using a Harness expression or string for its value, using Input Variables
    provides some additional benefits:</p><ul><li>You can easily identify and manage
    the Harness expressions used in your script.</li><li>You can template your script.</li></ul><p>You
    can declare the variable using <strong>Name</strong> and <strong>Value</strong> in <strong>Script
    Input Variables</strong> and then reference the variable in the script just as
    you would any other variable: <code>$var_name</code>.</p><p>You can also use expressions
    in <strong>Value</strong>. For example, if you have an Output Variable from a
    previous Custom Approval or Shell Script step, you can copy it from the executed
    step <strong>Outputs</strong>.</p><p>In <strong>Script Input Variables</strong>,
    you simply select <strong>Expression</strong> and paste the expression in <strong>Value</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/9ulc3vrpf2/1656533787984/image.png"/></figure><p>In
    <strong>Script</strong>, you declare the variable using the <strong>Name</strong> value:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/9ulc3vrpf2/1656533812106/image.png"/></figure><p></p><p>At
    deployment runtime, Harness will evaluate the expression and the variable will
    contain its output.</p><h3>Option: Set Rejection Criteria</h3><p>In <strong>Optional
    Configuration</strong>, in <strong>Rejection Criteria</strong>, you can define
    criteria for rejecting the approval.</p><p>If you add rejection criteria it is
    used <u>in addition</u> to the settings in <strong>Approval Criteria</strong>.
    Both <strong>Rejection Criteria</strong> and <strong>Approval Criteria</strong>
    must evaluate to a Boolean <u>true</u> for the step to be successful.</p><h3>Option:
    Harness Expressions in Variables</h3><p>You can use <a href="/article/lml71vhsim-harness-variables">Harness
    variable expressions</a> in your scripts and in the <strong>Script Input Variables</strong> and <strong>Script
    Output Variables</strong>.</p><p>For <strong>Script Input Variables</strong> and <strong>Script
    Output Variables</strong>, you simply select <strong>Expression</strong>, and
    then paste in the Harness variable expression.</p><h3>Option: Advanced Settings</h3><p>In
    <strong>Advanced</strong>, you can use the following options:</p><ul><li><a href="/article/nnuf8yv13o-select-delegates-with-selectors#option_select_a_delegate_for_a_step_using_tags">Delegate
    Selector</a></li><li><a href="https://ngdocs.harness.io/article/i36ibenkq2-step-skip-condition-settings">Step
    Skip Condition Settings</a></li><li><a href="https://ngdocs.harness.io/article/htrur23poj-step-failure-strategy-settings">Step
    Failure Strategy Settings</a></li></ul><h3>Step 3: Apply and Test</h3><p>Click <strong>Apply
    Changes</strong>. The Custom Approval step is added to the stage.</p><p>Run the
    Pipeline.</p><p>When the Custom Approval step is reached, you can see its approval
    and rejection criteria.</p><h3>YAML Example</h3><p>Here&#39;s the YAML for a Pipeline
    that demonstrates how to set up a Custom Approval stage and step.</p><p>You can
    paste this YAML into a new Pipeline and simply update the <code>pipeline</code>
    settings (<code>name</code>, <code>identifier</code>, <code>projectIdentifier</code>,
    <code>orgIdentifier</code>) if needed.</p><pre>pipeline:<br/>    name: Example<br/>    identifier:
    Example<br/>    projectIdentifier: myproject<br/>    orgIdentifier: default<br/>    tags:
    {}<br/>    stages:<br/>        - stage:<br/>              name: test1<br/>              identifier:
    test1<br/>              description: &#34;&#34;<br/>              type: Approval<br/>              spec:<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: CustomApproval<br/>                                name:
    custom approval<br/>                                identifier: custapprove<br/>                                timeout:
    1d<br/>                                spec:<br/>                                    shell:
    Bash<br/>                                    retryInterval: 10s<br/>                                    scriptTimeout:
    10m<br/>                                    source:<br/>                                        type:
    Inline<br/>                                        spec:<br/>                                            script:
    test=&#34;Approved&#34;<br/>                                    environmentVariables:
    []<br/>                                    delegateSelectors: []<br/>                                    approvalCriteria:<br/>                                        type:
    KeyValues<br/>                                        spec:<br/>                                            matchAnyCondition:
    false<br/>                                            conditions:<br/>                                                -
    key: var1<br/>                                                  operator: equals<br/>                                                  value:
    Approved<br/>                                    rejectionCriteria:<br/>                                        type:
    KeyValues<br/>                                        spec:<br/>                                            matchAnyCondition:
    false<br/>                                            conditions: []<br/>                                    onDelegate:
    true<br/>                                    outputVariables:<br/>                                        -
    name: var1<br/>                                          type: String<br/>                                          value:
    test<br/>                          - step:<br/>                                type:
    ShellScript<br/>                                name: vars<br/>                                identifier:
    vars<br/>                                spec:<br/>                                    shell:
    Bash<br/>                                    onDelegate: true<br/>                                    source:<br/>                                        type:
    Inline<br/>                                        spec:<br/>                                            script:
    |-<br/>                                                echo &#34;output var: &#34;&lt;+steps.custapprove.output.outputVariables.var1&gt;<br/><br/>                                                test=&lt;+steps.custapprove.output.outputVariables.var1&gt;<br/>                                    environmentVariables:
    []<br/>                                    outputVariables:<br/>                                        -
    name: foo<br/>                                          type: String<br/>                                          value:
    test<br/>                                    executionTarget: {}<br/>                                timeout:
    10m<br/>              tags: {}<br/></pre><p></p><h3>Notes</h3><h4>Stopping Scripts
    After Failures</h4><p>The Custom Approval command will continue to process through
    the script even if a script step fails. To prevent this, you can simply include
    instructions to stop on failure in your script. For example:</p><ul><li><code>set
    -e</code> - Exit immediately when a command fails.</li><li><code>set -o pipefail</code>
    - Sets the exit code of a pipeline to that of the rightmost command to exit with
    a non-zero status, or to a zero status if all commands of the pipeline exit successfully.</li><li><code>set
    -u</code> - Treat unset variables as an error and exit immediately.</li></ul><p>For
    more information, see this article: <a href="https://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing
    Robust Bash Shell Scripts</a>.</p><h4 id="undefined">Published Variables Not Available</h4><p>This
    error happens when you are publishing output via the <strong>Script Output Variables</strong> setting
    and your Custom Approval step exits early from its script.</p><p>There are many
    errors that can result from this situation. For example, you might see an error
    such as:</p><pre class="hljs nginx">FileNotFoundException inside shell script
    execution task</pre><p></p><p>If you exit from the script (<code>exit 0</code>),
    values for the context cannot be read.</p><p>Instead, if you publish output variables
    in your Custom Approval command, structure your script with <code>if...else</code> blocks
    to ensure it always runs to the end of the script.</p><h4>Using Secrets in Scripts</h4><p>You
    can use Harness secrets in your Custom Approval steps.</p><p>See <a href="/article/osfw70e59c-add-use-text-secrets">Add
    Text Secrets</a>.</p><p>Basically, you use <code>&lt;+secrets.getValue(&#34;secret_Id&#34;)&gt;</code>
    to refer to the secret Id.</p><h4 id="undefined">Shell Scripts and Security</h4><p>Harness
    assumes that you trust your Harness users to add safe scripts to your Custom Approval
    steps.</p><p>Please ensure that users adding scripts, as well as executing deployments
    that run the scripts, are trusted.</p><h3>See Also</h3><ul><li><a href="/article/o60eizonnn-add-a-custom-stage">Add
    a Custom Stage</a></li><li><a href="/article/fkvso46bok-adding-harness-approval-stages">Using
    Manual Harness Approval Stages</a></li><li><a href="/article/43pzzhrcbv-using-harness-approval-steps-in-cd-stages">Using
    Manual Harness Approval Steps in CD Stages</a></li></ul><p></p>'
  slug: custom-approvals
  tags: []
  is_live: true
