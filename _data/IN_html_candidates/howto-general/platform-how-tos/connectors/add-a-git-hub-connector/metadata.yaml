type: article
article_id: jd77qvieuw
user_id: 2te4j9f9g7
category_id: o1zhrfo8n5
author:
  name: Rashmi Nanda Sahoo
  profile_image: https://www.gravatar.com/avatar/b7bfd905f8714099535f2ff657fa3975?d=mm&s=150
title: Add a GitHub Connector
slug: add-a-git-hub-connector
description: This topic describes how to add a GitHub Code Repo Connector.
short_version: This topic describes how to add a GitHub Code Repo Connector.
tags:
- Github
- Connectors
- Platform
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-15T04:35:16.139975Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add a GitHub Connector
  description: This topic describes how to add a GitHub Code Repo Connector.
  short_version: This topic describes how to add a GitHub Code Repo Connector.
  body: '<p>Harness Code Repository Connectors connect your Harness account with your
    Git platform. Connectors are used to pull important files, such as Helm charts,
    Kubernetes manifests, and Terraform scripts.</p><h3>Before You Begin</h3><ul><li><a
    href="/article/hv2758ro4e-learn-harness-key-concepts">Learn Harness&#39; Key Concepts</a></li></ul><h3>Step
    1: Add a GitHub Code Repo Connector</h3><p>This topic assumes you have a Harness
    Project set up. If not, see <a href="/article/36fw2u92i4-create-an-organization">Create
    Organizations and Projects</a>.</p><p>You can add a Connector from any module
    in your Project in Project setup, or in your Organization, or Account Resources.</p><p>This
    topic shows you how to add a ServiceNow Connector to your Project.</p><p>In <strong>Project
    Setup</strong>, click <strong>Connectors</strong>.</p><p>Click <strong>New Connector</strong>,
    and then click <strong>GitHub</strong>. The GitHub Connector settings appear.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639398087195/screenshot-2021-12-13-at-5-50-51-pm.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>Enter a
    name for this Connector.</p><p>You can choose to update the <strong>ID</strong> or
    let it be the same as your ServiceNow Connector&#39;s name. For more information,
    see <a href="/article/li0my8tcz3-entity-identifier-reference">Entity Identifier
    Reference</a>.</p><p>Enter <strong>Description</strong> and <strong>Tags</strong>
    for your Connector.</p><p>Click <strong>Continue</strong>.</p><p>For details on
    each setting, see <a href="/article/v9sigwjlgo-git-hub-connector-settings-reference">GitHub
    Connector Settings Reference</a>.</p><h3>Step 2: Details</h3><p>Select <strong>Account</strong> or <strong>Repository</strong> in <strong>URL
    Type</strong>.</p><p>Select <strong>Connection Type</strong> as <strong>HTTP</strong> or <strong>SSH</strong>.</p><p>Enter
    your <strong>GitHub Account URL</strong>.</p><p>In <strong>Test Repository</strong>,
    enter your repository name to test the connection.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639720921121/screenshot-2021-12-17-at-10-35-23-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>Click <strong>Continue</strong>.</p><div
    class="note-callout">For SSH, ensure that the key is not OpenSSH, but rather PEM
    format. To generate an SSHv2 key, use: <code>ssh-keygen -t ecdsa -b 256 -m PEM</code> The <code>-m
    PEM</code> ensure that the key is PEM. Next, follow the prompts to create the
    PEM key. For more information, see the <a href="https://linux.die.net/man/1/ssh-keygen"
    target="_blank">ssh-keygen man page</a> and <a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"
    target="_blank">Connecting to GitHub with SSH</a>.</div><h3>Step 3: Credentials</h3><p>In <strong>Credentials,</strong> enter
    your <strong>Username</strong>.</p><p>You can either create a new <a href="/article/osfw70e59c-add-text-secrets">Encrypted
    Text</a> or use an existing one.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639720498752/screenshot-2021-12-17-at-10-34-56-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>In
    <strong>Personal Access Token</strong>, either create a new <a href="/article/osfw70e59c-add-text-secrets">Encrypted
    Text</a> or use an existing one that has your Git token. Harness requires the
    token for API access. Generate the token in your account on the Git provider and
    add it to Harness as a Secret.</p><div class="note-callout">To use a personal
    access token with a GitHub organization that uses SAML single sign-on (SSO), you
    must first authorize the token. See <a href="https://docs.github.com/en/enterprise-cloud@latest/authentication/authenticating-with-saml-single-sign-on/authorizing-a-personal-access-token-for-use-with-saml-single-sign-on"
    target="_blank">Authorizing a personal access token for use with SAML single sign-on</a>
    from GitHub.</div><ul><li>The GitHub user account used to create the Personal
    Access Token must have admin permissions on the repo.</li><li>GitHub doesn&#39;t
    provide a way of scoping a PAT for read-only access to repos. You must select
    the following permissions:</li></ul><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1651604405645/image.png"/></figure><p>If
    you selected <strong>SSH</strong> as the connection protocol, you must add the <strong>SSH
    Key</strong> to use with the connection as a <a href="https://ngdocs.harness.io/article/osfw70e59c-add-text-secrets">Harness
    Encrypted Text secret</a>. For detailed steps to create an SSH Key, see <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Add
    new SSH Key</a> from GitHub.</p><p>Make sure the <strong>Username</strong> for
    your <strong>SSH Credential</strong> is <code>git</code> for the Test Connection
    to be successful.<br/></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jd77qvieuw/1663216456319/screenshot-2022-09-15-at-9-58-48-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>Harness
    also supports <a href="https://docs.github.com/en/developers/overview/managing-deploy-keys#deploy-keys"
    target="_blank">GitHub deploy keys</a>. Deploy keys grant access to a single repo.
    Using a deploy key ensures that the Connector only works with the specific repo
    you selected in <strong>URL Type</strong>.</p><h4 id="undefined">Enable API access</h4><p>This
    option is required for using Git-based triggers, Webhooks management, and updating
    Git statuses.</p><p>You can use the same token you used in <strong>Personal Access
    Token</strong>.</p><p>Click <strong>Continue</strong>.</p><h3>Step 4: Connect
    to the Provider</h3><p>In <strong>Select Connectivity Mode</strong>, you have
    two options:</p><ul><li><strong>Connect Through Harness Platform:</strong> Harness
    SaaS will connect to your Git repo whenever it needs to pull code or a file or
    sync.</li><li><strong>Connect Through a Harness Delegate:</strong> Harness will
    make all connections using the Harness Delegate. This option is used for Harness
    Self-Managed Enterprise Edition Overview often, but it is also used for Harness
    SaaS. See <a href="/article/tb4e039h8x-harness-on-premise-overview">Harness Self-Managed
    Enterprise Edition Overview</a>.<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639717985269/screenshot-2021-12-17-at-10-36-53-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure></li></ul><div
    class="note-callout"><strong>Secrets:</strong> if you select <strong>Connect Through
    Harness Platform</strong>, the Harness Manager exchanges a key pair with the Secrets
    Manager configured in Harness using an encrypted connection. Next, the Harness
    Manager uses the encrypted key and the encrypted secret and then discards them.
    The keys never leave the Harness Manager. Secrets are always encrypted in transit,
    in memory, and in the Harness database.</div><p>If you select <strong>Connect
    Through</strong> <strong>Harness Platform</strong>, click <strong>Save and Continue</strong>.</p><p>If
    you select <strong>Connect Through a Harness Delegate</strong>, click <strong>Continue</strong>
    and then select/add the Delegate you want to use in <strong>Delegates Setup</strong>.
    See <a href="/article/re8kk0ex4k-delegate-installation-overview">Delegate Installation
    Overview</a>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639718062223/screenshot-2021-12-17-at-10-43-38-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>Click
    <strong>Save and Continue</strong>.</p><p>Harness tests the connection. Click
    <strong>Finish</strong> once the verification is successful.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/jd77qvieuw/1639718725927/screenshot-2021-12-17-at-10-46-54-am.png"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure><p>The
    GitHub connector is listed in Connectors.</p>'
  slug: add-a-git-hub-connector
  tags:
  - Github
  - Connectors
  - Platform
  is_live: true
