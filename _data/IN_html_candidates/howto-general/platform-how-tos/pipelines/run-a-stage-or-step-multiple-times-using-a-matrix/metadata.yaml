type: article
article_id: kay7z1bi01
user_id: xwmdbyp4x8
category_id: kncngmy17o
author:
  name: Doug Bothwell
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: Run a Stage or Step Multiple Times using a Matrix
slug: run-a-stage-or-step-multiple-times-using-a-matrix
description: A matrix enables you to run the same Stage or Step multiple times with
  different parameters.  Matrix strategies also make your Pipelines more readable,
  clean, and easy to maintain.
short_version: A matrix enables you to run the same Stage or Step multiple times with
  different parameters.  Matrix strategies also make your Pipelines more readable,
  clean, and easy to maintain.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-16T13:28:18.151444Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Run a Stage or Step Multiple Times using a Matrix
  description: A matrix enables you to run the same Stage or Step multiple times with
    different parameters.  Matrix strategies also make your Pipelines more readable,
    clean, and easy to maintain.
  short_version: A matrix enables you to run the same Stage or Step multiple times
    with different parameters.  Matrix strategies also make your Pipelines more readable,
    clean, and easy to maintain.
  body: '<div class="note-callout">Currently, this feature is a Feature Flag. Contact <a
    href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable
    the feature.</div><p>A matrix enables you to run the same Stage or Step multiple
    times with different parameters. Matrix strategies eliminate the need to copy
    the same stage or step with different inputs for each variation. Matrix strategies
    also make your Pipelines more readable, clean, and easy to maintain. You can easily
    define matrix strategies to support workflows such as:</p><ul><li>A Run Step that
    load-tests a UI feature in 4 different browsers and 3 different platforms. </li><li>A
    Build Stage that builds artifacts for 10 different JDK versions.</li><li>A Deploy
    Stage that deploys 3 different services to 4 different environments.</li></ul><h3>Before
    You Begin</h3><p>You can apply matrix strategies to both CI and CD workflows.
    This topic assumes that you are familiar with the following:</p><ul><li><a href="/article/cqgeblt4uh-cd-pipeline-basics">CD
    Pipeline Basics</a> and <a href="/article/3amcd8hn53-ci-pipeline-basics">CI Pipeline
    Basics</a></li><li><a href="https://docs.harness.io/article/eh4azj73m4" target="_blank">Looping
    Strategies Overview</a></li><li><a href="https://docs.harness.io/article/q7i0saqgw4">Best
    Practices for Looping Strategies</a></li></ul><h3>Important Notes </h3><ul><li>There
    is no limit on the number of dimensions you can include in a matrix or the number
    of looping strategies you define in a Pipeline.</li><li>You should avoid complex
    looping scenarios unless you clearly understand the resources that your scenario
    will require. See <a href="https://docs.harness.io/article/q7i0saqgw4" target="_blank">Best
    Practices for Looping Strategies</a>.</li></ul><h3>Add a Matrix Strategy to a
    Stage or Step</h3><ol><li>In the Pipeline Studio, go to the <strong>Advanced</strong>
    tab of the Stage or Step where you want to apply the Looping strategy.</li><li>Under
    Looping Strategies, select <strong>Matrix</strong>.<div class="note-callout">You
    can also use a Loop strategy to iterate through a simple list. See <a href="https://docs.harness.io/article/eh4azj73m4"
    target="_blank">Looping Strategies Overview: Matrix, Repeat, and Parallelism</a>.</div></li><li>Enter
    the YAML definition for your strategy as illustrated in the following examples.</li></ol><h3>CI
    Example: Run an App in <code>[browser]</code> on <code>[os]</code></h3><p>Suppose
    you have a Pipeline that builds an app in Go. You want to test the app on three
    different platforms and three different browsers. In the Stage where you test
    the app, you can define a matrix like this. </p><pre class="hljs yaml">matrix:<br/>    browser:
    [chrome, safari, firefox ]<br/>    os: [ macos, windows, linux ]<br/>maxConcurrency:
    3 </pre><p> </p><p>In this example, <code>os</code> and <code>browser</code> are
    user-defined tags. You can specify any tag in a matrix:  <code>jdk</code>, <code>platform</code>,
    <code>node-version</code>, and so on.</p><p>You can use the <code>maxConcurrency</code>
    keyword to run multiple jobs concurrently. In this case, the effective matrix
    has 9 combinations. With <code>maxConcurrency</code> set to 3, the Pipeline runs
    3 Build Stages concurrently and load-balances the combinations between them.</p><h3>Excluding
    Combinations from a Matrix</h3><p>You can use the <code>exclude</code> keyword
    to exclude certain combinations from being run. Suppose you don’t want to run
    the app in Safari on Windows. In this case, you can exclude this combination from
    the run matrix: </p><pre class="hljs yaml">matrix:<br/>    browser: [chrome, safari,
    firefox ]<br/>    os: [ macos, windows, linux ]<br/>    exclude:             <br/>        -
    browser: safari<br/>          os: windows<br/>maxConcurrency: 3 # test the app
    across 3 Stages running concurrently</pre><p></p><p>You can also exclude all combinations
    based on just one value. If you want to exclude all combinations with MacOS, for
    example, you can do the following: </p><pre class="hljs yaml">matrix:<br/>    browser:
    [chrome, safari, firefox ]<br/>    os: [ macos, windows, linux ]<br/>    exclude:             <br/>      -
    os: macos<br/>maxConcurrency: 4 # test the app across 4 Stages running concurrently</pre><p></p><h3>CD
    Matrix Example: Deploy <code>[service]</code> to  <code>[environment]</code></h3><p>You
    can easily set up a Deploy Stage to deploy multiple services to multiple environments
    by defining  a matrix like this:</p><pre class="hljs yaml">matrix:<br/>  service:     [
    svc1, svc2, svc3 ]<br/>  environment: [ env1, env2       ]<br/>  exclude:<br/>  -
    service: svc1<br/>    environment: env1<br/>maxConcurrency: 2</pre><p>  </p><h3>Simple
    List Example: Build App <code>[items]</code></h3><p>You can also use the <code>repeat</code>
    and <code>items</code> keywords to iterate through a simple list. Suppose you
    want to build a Java app for multiple JDKs. Under Looping Strategy, select <strong>For
    Loop</strong> and  enter the following:</p><pre class="hljs yaml">repeat:<br/>  items:
    [ &#34;18&#34;, &#34;17&#34;, &#34;16&#34;, &#34;15&#34;, &#34;14&#34;, &#34;13&#34;,
    &#34;12&#34;, &#34;11&#34;, &#34;10&#34;, &#34;9&#34; ]<br/>maxConcurrency: 2</pre><p></p><p>Note
    that a this example is simply an alternative way of defining a one-dimensional
    matrix with the <code>items</code> keyword as the key. You can define the same
    basic strategy like this:</p><pre class="hljs yaml">matrix:<br/>    jdk: [ &#34;18&#34;,
    &#34;17&#34;, &#34;16&#34;, &#34;15&#34;, &#34;14&#34;, &#34;13&#34;, &#34;12&#34;,
    &#34;11&#34;, &#34;10&#34;, &#34;9&#34; ]<br/>maxConcurrency: 2</pre><p></p><h3>Using
    Matrix Variables in Your Pipeline</h3><p>You can reference matrix values in your
    Stages and Steps using <code>&lt;+matrix.</code><em><code>tag</code></em><code>&gt;</code>.
    Here are some examples.</p><p>Given the CI example above, you can enter the following
    in a Run Step to output the current run:</p><pre class="hljs bash">echo “Testing
    app in &lt;+matrix.browser&gt; on &lt;+matrix.os&gt;”</pre><p> </p><p>Suppose
    you have a matrix in a Stage and another in a member Step. The Stage matrix has
    tags <code>browser</code> and <code>os</code>. The Step matrix has tags <code>browser</code>
    and <code>os</code>. You can reference both sets of tags from within the Step
    like this:</p><pre class="hljs bash">echo &#34;stage values (parent):&#34;<br/>echo
    &#34;Current service for stage: &lt;+stage.matrix.browser&gt;&#34;<br/>echo &#34;Current
    os for stage: &lt;+stage.matrix.os&gt;&#34;<br/>echo &#34;step values (local):&#34;<br/>echo
    &#34;Current browser for step: &lt;+matrix.browser&gt;&#34;<br/>echo &#34;Current
    os for step: &lt;+matrix.os&gt;&#34;</pre><p></p><p>Given the CD example above,
    you can go to the Service tab of the Deploy Stage and specify the service using 
    <code>&lt;+matrix.service&gt;</code>.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/kay7z1bi01/1658007795862/matrix-service-in-cd-stage.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p>The
    following variables are also supported:</p><ul><li><code>&lt;+strategy.iteration&gt;</code>
    — The current iteration. </li><li><code>&lt;+strategy.iterations&gt;</code> —
    The total number of iterations.</li><li><code>&lt;+repeat.item&gt;</code> - The
    value of the item when iterating through a list using the <code>repeat</code>
    and <code>items</code> keywords.</li></ul><h3>YAML Pipeline Example</h3><p>The
    following example illustrates how you can define matrix strategies in a pipeline.</p><details><summary>matrix-pipeline-example.yml</summary><div><pre
    class="hljs yaml">    pipeline:<br/>    name: matrix-example-2<br/>    identifier:
    matrixexample2<br/>    projectIdentifier: myproject<br/>    orgIdentifier: myorg<br/>    tags:
    {}<br/>    stages:<br/>        - stage:<br/>              name: echoMatrixSettings<br/>              identifier:
    echoMatrixSettings<br/>              description: &#34;&#34;<br/>              type:
    Custom<br/>              spec:<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: ShellScript<br/>                                name:
    echo<br/>                                identifier: echo<br/>                                spec:<br/>                                    shell:
    Bash<br/>                                    onDelegate: true<br/>                                    source:<br/>                                        type:
    Inline<br/>                                        spec:<br/>                                            script:
    |-<br/>                                                echo &#34;iteration index
    = &lt;+strategy.iteration&gt;&#34;<br/>                                                echo
    &#34;total iterations = &lt;+strategy.iterations&gt;&#34;<br/>                                                echo
    &#34;stage values (parent):&#34;<br/>                                                echo
    &#34;Current version for stage: &lt;+stage.matrix.service&gt;&#34;<br/>                                                echo
    &#34;Current environment for stage: &lt;+stage.matrix.environment&gt;&#34;<br/>                                                echo
    &#34;step values (local):&#34;<br/>                                                echo
    &#34;Current item (version): &lt;+repeat.item&gt;&#34;<br/>                                    environmentVariables:
    []<br/>                                    outputVariables: []<br/>                                    executionTarget:
    {}<br/>                                timeout: 10m<br/>                                failureStrategies:
    []<br/>                                strategy:<br/>                                    repeat:<br/>                                        items:<br/>                                            -
    &#34;18&#34;<br/>                                            - &#34;17&#34;<br/>                                            -
    &#34;16&#34;<br/>                                            - &#34;15&#34;<br/>                                            -
    &#34;14&#34;<br/>                                            - &#34;13&#34;<br/>                                            -
    &#34;12&#34;<br/>                                            - &#34;11&#34;<br/>                                            -
    &#34;10&#34;<br/>                                            - &#34;9&#34;<br/>                                    maxConcurrency:
    2<br/>              tags: {}<br/>              strategy:<br/>                  matrix:<br/>                      service:<br/>                          -
    svc1<br/>                          - svc2<br/>                          - svc3<br/>                      environment:<br/>                          -
    env1<br/>                          - env2<br/>                      exclude:<br/>                          -
    service: svc1<br/>                            environment: env1<br/>                  maxConcurrency:
    2</pre></div></details><h3>See Also</h3><ul><li><a href="https://docs.harness.io/article/q7i0saqgw4"
    target="_blank">Best Practices for Looping Strategies</a></li><li><a href="https://docs.harness.io/article/eh4azj73m4"
    target="_blank">Looping Strategies Overview: Matrix, Repeat, and Parallelism</a></li><li><a
    href="https://docs.harness.io/article/kce8mgionj" target="_blank">Speed Up CI
    Test Pipelines Using Parallelism</a></li></ul><p></p><p></p>'
  slug: run-a-stage-or-step-multiple-times-using-a-matrix
  tags: []
  is_live: true
