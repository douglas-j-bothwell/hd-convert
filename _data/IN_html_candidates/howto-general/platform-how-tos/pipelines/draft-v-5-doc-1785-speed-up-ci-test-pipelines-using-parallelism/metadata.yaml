type: article
article_id: smx0bijd90
user_id: xwmdbyp4x8
category_id: kncngmy17o
author:
  name: Doug Bothwell
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: DRAFT v5 DOC-1785 Speed Up CI Test Pipelines Using Parallelism
slug: draft-v-5-doc-1785-speed-up-ci-test-pipelines-using-parallelism
description: Currently, this feature is behind a Feature Flag. Contact Harness Support
  to enable the feature. The more tests you run, the longer it takes for them to complete
  if run sequentially. To reduce test c…
short_version: Currently, this feature is behind a Feature Flag. Contact Harness Support
  to enable the feature. The more tests you run, the longer it takes for them to complete
  if run sequentially. To reduce test c…
tags: []
show_toc: true
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-14T15:03:13.354334Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: DRAFT v5 DOC-1785 Speed Up CI Test Pipelines Using Parallelism
  description: ""
  short_version: ""
  body: '<p></p><div class="note-callout">Currently, this feature is behind a Feature
    Flag. Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to
    enable the feature.</div><p>The more tests you run, the longer it takes for them
    to complete if run sequentially. To reduce test cycle time, you can split your
    tests and run them across multiple groups run in parallel. </p><p>Use <em>parallelism</em>
    to to run the test groups in parallel. This is one of the <a href="https://docs.harness.io/article/eh4azj73m4">looping
    strategies</a> available in Harness pipelines. Parallelism is useful whenever
    there is a need to run a step or a stage multiple times in parallel. </p><p>Parallelism
    is one of the <a href="https://docs.harness.io/article/g3m7pjq79y" target="_blank">available
    methods</a> you can use to speed up your CI builds.</p><p>The following figure
    illustrates how parallelism can speed up your CI pipelines. The first time you
    build a pipeline with parallelism enabled, Harness collects timing data for all
    your tests. You can then split your tests by time and reduce your build times
    even further. </p><p><strong>Figure 1: Parallelism and Build Times</strong></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/smx0bijd90/1660395447158/parallelism-and-build-times.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><h3>YAML
    Example</h3><pre class="hljs yaml">- step:<br/># Use &#34;run&#34; step type<br/>      type:
    Run    <br/>      name: Run Pytests<br/>      identifier: Run_Pytests<br/># Enable
    parallelism strategy and specify number of runs<br/>      strategy:           
    <br/>          parallelism: 4   <br/>      spec:<br/>          connectorRef: $dockerhub_connector<br/>          image:
    python:latest<br/>          shell: Sh<br/># Define environment variables<br/>          envVariables:  <br/>              HARNESS_NODE_INDEX:
    &lt;+strategy.iteration&gt;  # index of current run<br/>              HARNESS_NODE_TOTAL:
    &lt;+strategy.iterations&gt; # total runs<br/>          command: |-<br/>              pip
    install -r requirements.txt<br/># Define splitting strategy<br/>              FILES=`/addon/bin/split_tests
    --glob &#34;**/test_*.py&#34; --split-by file_size --split-index ${HARNESS_NODE_INDEX}
    --split-total=${HARNESS_NODE_TOTAL}`<br/>              echo $FILES<br/>              pytest
    -v --junitxml=&#34;result_&lt;+strategy.iteration&gt;.xml&#34; $FILES<br/># Publish
    JUnit test reports to Harness <br/>         reports:  <br/>              type:
    JUnit <br/>              spec:<br/>                  paths:<br/>                      -
    &#34;**/result_&lt;+strategy.iteration&gt;.xml&#34;<br/>      failureStrategies:
    []</pre><h3>Important Notes </h3><ul><li>The number of concurrent jobs you can
    run in your account depends on your Harness plan, as indicated below. If exceeded,
    any additional jobs are queued.<ul><li>Free – 5</li><li>Team – 10</li><li>Enterprise
    – 100</li></ul></li><li>Please consider any resource constraints in your build
    infrastructure when using parallelism. To learn more, go to <a href="https://docs.harness.io/article/q7i0saqgw4"
    target="_blank">Best Practices for Looping Strategies</a>.</li><li>If you are
    implementing parallelism in a step rather than a stage, you need to make sure
    that each test-group step generates a report with a unique filename to avoid conflicts.<br/>You
    can do this using the <code>&lt;+strategy.iteration&gt;</code> variable, which
    is the index of the current test group run. This index is in the range of <code>0</code>
    to <code>parallelism- 1</code>.<br/>For more information, go to <a href="https://docs.harness.io/article/smx0bijd90-#step_2_define_environment_attributes"
    target="_blank">Define Environment Attributes</a> below.</li><li>If you want to
    publish your test results, you must ensure that your output files are in <a href="https://junit.org/junit5/"
    target="_blank">JUnit</a> XML format. How you publish your test results depends
    on the specific language, test runner, and formatter used in your repo.</li></ul><h3>The
    <code>split_tests</code> command</h3><p>The <code>split_tests</code> command creates
    a new set of test files that is ordered based on your splitting criteria. This
    command takes the following as inputs:</p><ul><li>The set of all the tests you
    want to run (<code>--glob</code> argument).</li><li>The algorithm used to split
    the tests into groups (<code>--split-by</code> argument).</li></ul><h4>Test Splitting
    Strategies</h4><p>Harness supports the following options:</p><ul><li><code>--split-by
    file_size</code> — Split files into groups based on individual file sizes.<br/><code>--split-by
    file_timing</code> — Split files into groups based on the test times of individual
    files.</li><li><code>--split-by class_timing</code> — Split test classes into
    groups based on times from the previous run.</li><li><code>--split-by testcase_timing</code>
    — Split test cases into groups based on times from the previous run.</li><li><code>--split-by
    suite_timing</code> — Split test suites into groups based on times from the previous
    run.</li></ul><p>Whatever the time-based splitting option you choose, the Pipeline
    splits your tests to ensure that all parallel Steps finish at approximately the
    same time.</p><div class="note-callout">You need to run the Pipeline at least
    once with <code>--split-by file_size</code>, to collect timing data for your tests,
    before you can use one of the time-based splitting options.<br/><br/>Splitting
    your tests by time is more effective than splitting them by file size. It is good
    practice to specify a time-based splitting strategy after you run your Pipeline
    for the first time.</div><h3>Workflow Description</h3><h4>Step 1: Specify the
    <code>parallelism</code> value</h4><p>The <code>parallelism</code> value defines
    how many steps you want to run in parallel. In general, a higher value means a
    faster completion time for all tests. The primary restraint is the resource availability
    in your build infrastructure. The YAML definition looks like this:</p><pre>- step:<br/>      ...<br/>      strategy:<br/>        parallelism:
    4</pre><p></p><h4>Defining <code>parallelism</code> in the UI</h4><p>You can also
    configure parallelism in the Pipeline Studio:</p><ol><li>In the Pipeline Studio,
    open the Step or Stage where you run your Tests and click the <strong>Advanced</strong>
    tab.</li><li>Under <strong>Looping Strategies</strong>, select <strong>Parallelism</strong>
    and define your strategy.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/kce8mgionj/1658586760649/parallelism-yaml-no-max-c.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure></li></ol><p>You
    can also use a For Loop to define your parallelism strategy. The following definition
    is functionally equivalent to the previous one:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/kce8mgionj/1658586791217/for-loop-yaml-no-max-c.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><h4>Step
    2: Define Environment Attributes</h4><p>You need to define the following environment
    attributes in your pipeline:</p><ul><li><code>HARNESS_NODE_TOTAL</code> = <code>&lt;+strategy.iterations&gt;</code>
    — The total number of iterations in the current Stage or Step.</li><li><code>HARNESS_NODE_INDEX</code>
    = <code>&lt;+strategy.iterations&gt;</code> — The index of the current test run.
    This index is in the range of <code>0</code> to <code>parallelism</code><code>-
    1</code>.</li></ul><p>This snippet shows how you can define and use these variables
    in the YAML editor:</p><pre>- step:   <br/>     ....<br/>     envVariables:  
        <br/>          HARNESS_NODE_INDEX: &lt;+strategy.iteration&gt; #   store the
    current index     <br/>          HARNESS_NODE_TOTAL: &lt;+strategy.iterations&gt;
    #  store the total number of runs     <br/>     command: |-       <br/>          pip
    install -r requirements.txt       <br/>          FILES=`/addon/bin/split_tests
    --glob &#34;**/test_*.py&#34; --split-by file_timing`       <br/>          echo
    $FILES       <br/>          pytest -v --junitxml=&#34;result_${HARNESS_NODE_INDEX}.xml&#34;
    $FILES <br/>          echo &#34;$HARNESS_NODE_TOTAL runs using file list $FILES&#34;
    </pre><p></p><p>To define these attributes in the Pipeline Studio, go to the stage
    that implements the parallelism strategy. Then go to <strong>Optional Configuration</strong>
    &gt; <strong>Environment Variables</strong>.</p><h4>Step 3: Split Your Tests into
    groups</h4><p>You use the <code>split_tests</code> CLI command to define the set
    of tests you want to run. In the <strong>Command</strong> field of the Step where
    you run your tests, you can include code like this:</p><pre># generates a new
    set of grouped test files <br/># and outputs the file list to a string:<br/><br/>FILES=`/addon/bin/split_tests
    --glob &#34;**/test_*.py&#34; --split-index ${HARNESS_NODE_INDEX} --split-total=${HARNESS_NODE_TOTAL}
    --split-by file_size `<br/><br/># echo $FILES<br/># example output: test_api_2.py
    test_api_4.py test_api_6.py</pre><p></p><p>The <code>split_tests</code> command
    creates a new set of test files that reflect your splitting criteria. This command
    takes the following as inputs:</p><ul><li>The <code>parallelism</code> value you
    specified previously.</li><li>The set of all the tests you want to run (<code>--glob</code>
    argument).</li><li>The run index and total number of runs. You should set these
    to the environment attributes you defined previously (<code>--split-index ${HARNESS_NODE_INDEX}</code>
    and <code>--split-total=${HARNESS_NODE_TOTAL}</code>)</li><li>The algorithm used
    to split the tests into groups (<code>--split-by</code> argument). In this example,
    we use the default <code>file_size</code> setting, which splits the tests based
    on file size.<div class="note-callout">You can also choose to split groups based
    on timing criteria, but you need to run the Pipeline at least once to collect
    timing data for your tests. These splitting options are discussed below.</div></li></ul><h4>Step
    4: Define Your Report Files</h4><p>The <code>report</code> section defines how
    the Pipeline publishes your test results. Here&#39;s an example:</p><pre class="hljs
    yaml">reports: <br/>   type: JUnit <br/>      spec: <br/>         paths: - &#34;**/result_&lt;+strategy.iteration&gt;.xml&#34;</pre><p></p><p>If
    you want to publish your test results, you need to do the following:</p><ul><li>Set
    up your test runner and formatter to publish your test reports in <a href="https://junit.org/junit5/"
    target="_blank">JUnit</a> XML format and to include filenames in the XML output.
    For example: If you are using <a href="https://docs.pytest.org/" target="_blank">pytest</a>,
    for example, you can configure the report format by adding a line in the pytest.ini
    file:<br/><code>junit_family=xunit1</code><br/>Publishing setup and configurations
    depend on the specific test runner. Go to the documentation to determine how to
    publish your reports in the correct format.</li><li>If you are implementing parallelism
    in a step rather than a stage, you need to make sure that each test-group step
    generates a report with a unique filename.<br/>You can do this using the <code>&lt;+strategy.iteration&gt;</code>variable,
    which is the index of the current test run. This index is in the range of <code>0</code>
    to <code>parallelism</code><code>- 1</code>. See also <a href="https://docs.harness.io/article/qojpse1baq#using_parallelism_variables_in_your_pipeline"
    target="_blank">Using Parallelism Variables in your Pipeline</a> below.</li></ul><p>You
    can configure your test reporting options in the pipeline YAML, as shown above,
    or in the Pipeline Studio. Go to the Run or Run Tests Step and configure the <strong>Report
    Paths</strong> field under Optional Configuration.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/kce8mgionj/1658587230180/report-paths-field.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p></p><h4>Step
    5: Run the Pipeline</h4><p>Run your Pipeline to make sure all your Steps complete
    successfully. You can see the parallel copies of your Step running in the Build
    UI.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/smx0bijd90/1660250471764/first-run-build.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h4>Step
    6: View Results</h4><p>When the build finishes, go to the Tests tab and view your
    results. You can view results for each parallel step using the pull-down.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/smx0bijd90/1660250515845/first-run-test-results.png"/></figure><h4>Step
    7: Split your Tests by Time</h4><p>Harness supports splitting your tests based
    on timing criteria. These options require that you run the Pipeline at least once
    to collect timing data for your individual test. Now that you have run your Pipeline,
    you can specify other splitting options besides the default <code>file_size</code>
    setting.</p><p>You can update the split_tests command as follows:</p><pre class="hljs
    yaml"># First run:<br/># TESTS=`./split_tests --glob &#34;**/test_*.py --split-by
    file_size&#34;`<br/><br/># Now that you have collected timing info, you can use
    a time-based splitting option:<br/>TESTS=`./split_tests --glob &#34;**/test_*.py
    --split-by class_timing&#34;`</pre><div class="note-callout">Splitting your tests
    by time is more effective than splitting them by file size. It is good practice
    to specify a time-based splitting strategy after you run your Pipeline for the
    first time.</div><p>Harness supports the following time-based splitting options:</p><ul><li><code>--split-by
    file_timing</code> — Split files into groups based on the test times of individual
    files.</li><li><code>--split-by class_timing</code> — Split test classes into
    groups based on times from the previous run.</li><li><code>--split-by testcase_timing</code>
    — Split test cases into groups based on times from the previous run.</li><li><code>--split-by
    suite_timing</code> — Split test suites into groups based on times from the previous
    run.</li></ul><p>Whatever the time-based splitting option you choose, the Pipeline
    splits your tests to ensure that all parallel Steps finish at approximately the
    same time.</p><h3>See Also</h3><ul><li><a href="https://harness.helpdocs.io/article/g3m7pjq79y"
    target="_blank">Optimizing CI Build Times</a></li><li><a href="https://harness.helpdocs.io/article/eh4azj73m4"
    target="_blank">Looping Strategies Overview: Matrix, For Loop, and Parallelism</a></li><li><a
    href="https://docs.harness.io/article/q7i0saqgw4">Best Practices for Looping Strategies</a></li><li><a
    href="https://docs.harness.io/article/kay7z1bi01" target="_blank">Run a Stage
    or Step Multiple Times using a Matrix and Parameters</a></li></ul><p></p>'
  slug: draft-v-5-doc-1785-speed-up-ci-test-pipelines-using-parallelism
  tags: []
  is_live: true
