type: article
article_id: 5nz7j3e1yc
user_id: xwmdbyp4x8
category_id: rv2jo2hoiy
author:
  name: Doug Bothwell
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: Manage a Harness Pipeline Repo Using Git Experience
slug: manage-a-harness-pipeline-repo-using-git-experience
description: With Git Experience, you can manage your Harness PIpeline and configs
  in Git. This topic describes how to set up a central repo for all your Harness configs
  and how to synchronize each Pipeline with the corresponding codebase.
short_version: |-
  Git Experience enables you to store and manage your Harness Pipelines and configs in your Git repos. You can store your Harness configs in the same repo with your code. You can also store your Harness configs in a separate repo from your codebase.

  With Git Experience, you can manage your Harness PIpeline and configs in Git. This topic describes how to set up a central repo for all your Harness configs and how to synchronize each Pipeline with the corresponding codebase.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-25T08:37:19.925426Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Manage a Harness Pipeline Repo Using Git Experience
  description: With Git Experience, you can manage your Harness PIpeline and configs
    in Git. This topic describes how to set up a central repo for all your Harness
    configs and how to synchronize each Pipeline with the corresponding codebase.
  short_version: |-
    Git Experience enables you to store and manage your Harness Pipelines and configs in your Git repos. You can store your Harness configs in the same repo with your code. You can also store your Harness configs in a separate repo from your codebase.

    With Git Experience, you can manage your Harness PIpeline and configs in Git. This topic describes how to set up a central repo for all your Harness configs and how to synchronize each Pipeline with the corresponding codebase.
  body: "<p>Git Experience enables you to store and manage your Harness Pipelines
    and Input Sets as YAML definition files in your Git repos. You can store your
    Harness definitions in the same repo with your code. You can also store your Harness
    definitions in a separate repo from your codebase.</p><p>This topic describes
    the second workflow. We start with two code repos in Git, for a front-end service
    and a back-end service. Then we create Pipelines, Input Sets, and Triggers for
    the two codebases in a separate Harness repo.</p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/5nz7j3e1yc/1655820188789/00-create-harness-repo.png\"
    style=\"max-height:100%;max-width:100%\" data-hd-height=\"100%\" data-hd-width=\"100%\"/></figure><h3>Before
    You Begin</h3><p>This topic assumes that you are familiar with the following:</p><ul><li>How
    to create a Pipeline using Git Experience. See <a href=\"https://ngdocs.harness.io/article/grfeel98am\">Harness
    Git Experience QuickStart</a>.</li><li>How to create Input Sets and Triggers using
    Git Experience. See <a href=\"https://ngdocs.harness.io/article/8tdwp6ntwz\">Manage
    Input Sets and Triggers in Git Experience</a>.</li><li>A basic understanding of
    how Pipelines, Input Sets, and Triggers work together:<ul><li><a href=\"https://ngdocs.harness.io/article/gfk52g74xt-run-pipelines-using-input-sets-and-overlays\">Run
    Pipelines using Input Sets and Overlays</a></li><li><a href=\"https://ngdocs.harness.io/article/10y3mvkdvk-trigger-pipelines-using-custom-payload-conditions\">Trigger
    Pipelines using Git Event Payloads</a></li></ul></li></ul><p>This topic also assumes
    you have a Git repo with the codebase you want to build and at least one branch.</p><h3>Step
    1: Create the Harness Repo</h3><p>Log in to your Git provider and create a new
    repo. In this workflow we call it <strong>myHarnessConfigs</strong>.</p><h3>Step
    2: Create a New Pipeline</h3><p>In the Harness Pipeline Studio, go to your CI
    project and then click <strong>Pipelines</strong> &gt; <strong>+New Pipeline</strong>.
    The <strong>Create New Pipeline</strong> window appears.</p><p>Enter a name that
    corresponds to the code repo for the Pipeline. In this case we use the same name
    as the repo: <strong>myFrontEndService</strong>. Under <strong>How do you want
    to set up your pipeline</strong>, select <strong>Remote</strong>.</p><p>Select
    the Git Connector and the Git repo where you want to save the Pipeline. In this
    case, we select <strong>myHarnessConfigs</strong>.</p><p>For the YAML path, enter
    <strong>.harness/{</strong><em><strong>PIPELINE_SUBFOLDER</strong></em><strong>}/{PIPELINE_NAME}.yml</strong>.
    The root folder <strong>.harness</strong> is required. The <strong>{</strong><em><strong>PIPELINE_SUBFOLDER</strong></em><strong>}</strong>
    is not required, but it is good practice if you want to store multiple Pipelines
    in the same repo. This makes it much easier to manage all of your Harness definitions.</p><p>In
    this case, we save the Pipeline YAML as <code>./harness/myFrontEndService/myFrontEndService.yaml</code>.</p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655581570689/01-create-new-pipeline.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>Click
    <strong>Start</strong>. You can now set up your Pipeline.</p><h3>Step 3: Set Up
    Your Build Stage and Codebase</h3><p>In the Pipeline Studio, click <strong>Add
    Stage</strong> and select <strong>Build</strong> for the stage type.</p><p>In
    About your Stage, select the Git repo with the codebase that you want the Pipeline
    to build. Click <strong>Set Up Stage</strong>.</p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655581508123/02-setup-build-stage.png\"
    style=\"max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto\"
    data-hd-height=\"50%\" data-hd-width=\"50%\" data-hd-align=\"left\"/></figure><p>Set
    up your Build Stage in the Pipeline Studio: define the build infrastructure and
    add at least one Step. Click <strong>Save</strong>. The <strong>Save Pipelines
    to Git</strong> window appears.</p><p>Select the branch where you want to save
    the Pipeline and click <strong>Save</strong>. You generally want to save it to
    the default branch on the first save. You can then create different branches in
    the Harness repo if you want to create different versions of your Pipeline.</p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655582268304/03-save-pipelines-to-git.png\"
    style=\"max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto\"
    data-hd-height=\"50%\" data-hd-width=\"50%\" data-hd-align=\"left\"/></figure><h3>Step
    4: Create an Input Set</h3><p>With Git Experience enabled, any Input Sets you
    create get stored in the same repo and branch as the Pipeline definition. In this
    step, you will create a simple Input Set and save it with your Pipeline.</p><p>Click
    <strong>Run</strong>. The <strong>Run Pipeline</strong> screen appears.</p><p>Under
    <strong>Build Type</strong>, select <strong>Git Branch</strong>.</p><p>For the
    <strong>Branch Name</strong>, select <strong>Expression</strong> and enter <code>&lt;+trigger.targetBranch&gt;</code>
    as a runtime expression.</p><p>Click <strong>Save as Input Set</strong>. The Save
    InputSets to Git screen appears.</p><p>Select <strong>Commit to an existing branch</strong>.</p><p>Enter
    the name and YAML path for the Input Set. For the YAML path, use the same format
    as you did with the Pipeline: <code>.harness</code> root folder, Pipeline subfolder,
    filename. In this example, we enter <code>.harness/myFrontEndService/trigger-target-branch.yaml</code>.</p><p>Click
    <strong>Save</strong> and save the Input Set into the default branch in your Harness
    repo.</p><div class=\"note-callout\">Every Input Set is associated with a specific
    Pipeline, which is specified by the <code>pipeline : identifier</code> element
    in the Input Set YAML.</div><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655585378971/04-pipeline-id-in-input-set-yaml.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><h3>Step
    5: Create a Trigger</h3><p>Now that you have a Pipeline and Input Set in your
    default branch, you create a Trigger that uses the Input Set you just created.</p><div
    class=\"note-callout\"><strong>Create Input Set before Creating Trigger:</strong>
    If you want to use an Input Set as part of a Trigger, create and sync the Input
    Set before creating the Trigger.</div><p>In the Pipeline Studio, click <strong>Triggers</strong>
    and create a new Trigger. Note the following:</p><ul><li>In the <strong>Configuration</strong>
    tab &gt; <strong>Repository Name</strong> field, make sure you specify the codebase
    repo and not the Harness repo.</li><li>In the <strong>Pipeline Input Repo</strong>
    &gt; <strong>Pipeline Input</strong>, select the Input Set you just created.</li><li>In
    the <strong>Pipeline Input Repo</strong> &gt; <strong>Pipeline Reference Branch</strong>
    field, specify the default branch in the Harness repo where you initially saved
    the Pipeline. When the Trigger receives a payload, it looks in the repo where
    you store your Harness definitions. Then it uses the Pipeline in the branch specified
    by this field.<div class=\"note-callout\">The default setting for the Pipeline
    Reference Branch field is <code>&lt;+trigger.branch&gt;</code>. This is a reasonable
    default the Trigger is webhook-based AND your code and Harness configs are in
    the same repo. The second condition does not apply in this case. Therefore, you
    must set this field manually.</div></li><li>For information on other fields, <a
    href=\"https://ngdocs.harness.io/article/10y3mvkdvk\" target=\"_blank\">Trigger
    Pipelines using Git Event Payload Conditions</a>.</li></ul><p>In the Pipeline
    Input tab, select the Input Set you just created and click <strong>Create Trigger</strong>.</p><p>You
    now have a Pipeline, Input Set, and Trigger that you can use in new branches that
    you create from the default branch.</p><div class=\"note-callout\">Unlike Pipelines
    and Input Sets, Trigger definitions are saved in the Harness database and not
    in your Git repo. Each Trigger is associated with a specific Pipeline, which is
    specified by the <code>pipelineIdentifier</code> element in the Trigger YAML.</div><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655587541331/05-pipeline-id-in-trigger-yaml.png\"
    style=\"max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto\"
    data-hd-height=\"50%\" data-hd-width=\"50%\" data-hd-align=\"left\"/></figure><p></p><h3>Next
    Steps</h3><p>You now have a Pipeline, Input Set, and Trigger for your codebase.
    The Pipeline and Input Set are in one repo, <code>myHarnessConfigs</code>. The
    code is in another repo, <code>myFrontEndService</code>. Note that both repos
    have the same default branch, <code>main</code>. When your Trigger receives a
    matching payload, it starts a build using the Pipeline in <code>myHarnessConfigs</code>.
    The Trigger uses its <code>pipelineBranchName</code> element in its YAML definition
    and uses the Pipeline in this branch (<code>main</code>) to run the build.</p><h4>Set
    up More Pipelines</h4><p>Follow the previous workflow for each additional codebase
    you want to build in Harness. When saving multiple Pipelines in the same repo,
    remember to save your Pipelines and Input Sets in separate subfolders. In this
    example, we&#39;ve added a Pipeline and Input Set for our <code>myBackEndService</code>
    codebase:</p><pre>% pwd<br/>~/myHarnessConfigs/.harness<br/>% ls -aR  <br/>.\t..\tmyBackEndService\tmyFrontEndService<br/>./myBackEndService:<br/>.\t..\tmyBackEndService.yaml\ttrigger-target-branch.yaml<br/>./myFrontEndService:<br/>.\t..\tmyFrontEndService.yaml\ttrigger-target-branch.yaml</pre><p></p><h4>Create
    Branch-Specific Pipelines</h4><p>You might find that you can use the default Pipeline,
    Input Set, and Trigger you just created for most of your builds, regardless of
    which codebase branch gets updated. The codebase sends a payload; the payload
    includes the updated branch; the Trigger builds from this branch using the runtime
    expression <code>&lt;+trigger.targetBranch&gt;</code>.</p><p>Git Experience enables
    you to create branches in your Harness repo so you can create different versions
    of the same Pipeline for different use cases. For example, suppose you want your
    Pipeline to push to different registries depending on the updated branch. Updates
    to <code>main</code> push to a public registry; updates to all other branches
    push to a private registry. To implement this, do the following:</p><ol><li>Customize
    your default Pipeline and click Enter.</li><li>Select <strong>Commit to a new
    branch</strong> and enter the branch name. In this case, we save the Pipeline
    in a new branch <code>push-to-private</code>:<figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655594074579/06-select-branch-to-commit.png\"
    style=\"max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto\"
    data-hd-height=\"50%\" data-hd-width=\"50%\" data-hd-align=\"left\"/></figure></li><li>Customize
    the Input Sets and Triggers for the new Pipeline as needed. For this specific
    use case, you would add a condition to the Trigger so it uses the Pipeline in
    <code>push-to-private</code> when it receives a payload from any branch except
    <code>main</code>.<figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655594443308/07-add-conditio.png\"/></figure></li><li>In
    the Trigger editor &gt; Pipeline Input field, make sure that the Pipeline Reference
    Branch field references the new branch:<figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/tvbxoeiuux/1655594707716/08-update-pipeline-reference-branch.png\"
    style=\"max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto\"
    data-hd-height=\"50%\" data-hd-width=\"50%\" data-hd-align=\"left\"/></figure></li></ol><p></p>"
  slug: manage-a-harness-pipeline-repo-using-git-experience
  tags: []
  is_live: true
