type: article
article_id: osfw70e59c
user_id: 2te4j9f9g7
category_id: 48wnu4u0tj
author:
  name: Rashmi Nanda Sahoo
  profile_image: https://www.gravatar.com/avatar/b7bfd905f8714099535f2ff657fa3975?d=mm&s=150
title: Add and Reference Text Secrets
slug: add-use-text-secrets
description: This topic shows how to create a text secret and reference it in your
  resources.
short_version: This topic shows how to create a text secret and reference it in Harness
  Application entities.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-14T09:51:08.417863Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add and Reference Text Secrets
  description: This topic shows how to create a text secret and reference it in your
    resources.
  short_version: This topic shows how to create a text secret and reference it in
    Harness Application entities.
  body: '<p>You can add a text secret to the Secret Manager and use them in your resources
    like Pipelines and Connectors.</p><p>This topic describes how to add a text secret
    in Harness.</p><h3>Before You Begin</h3><ul><li> <a href="/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness Key Concepts</a></li><li><a href="https://ngdocs.harness.io/article/hngrlb7rd6-harness-secret-manager-overview">Harness
    Secret Manager Overview</a></li><li><a href="/article/bo4qbrcggv-add-secrets-manager">Add
    a Secret Manager</a></li></ul><h3>Step 1: Add Text Secret</h3><p>This topic assumes
    you have a Harness Project set up. If not, see <a href="https://ngdocs.harness.io/article/36fw2u92i4-create-an-organization">Create
    Organizations and Projects</a>.</p><p>Secrets can be added inline while setting
    up a Connector or other setting, and they can also be set up in the Account/Organization/Project
    resources.</p><p>These steps are for setting up a secret in the Account/Organization/Project
    resources. To do this, go to Project setup, Organization, or Account Resources.</p><p>Click
    <strong>Secrets</strong>.</p><p>Click <strong>Secret</strong> and select <strong>Text.</strong></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1627450167939/screenshot-2021-07-28-at-10-58-14-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    <strong>Add new Encrypted Text</strong> settings appear.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/osfw70e59c/1658124419929/screenshot-2022-07-18-at-11-36-24-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Select
    the <strong>Secret Manager</strong> you will use to encrypt this secret.</p><p>In
    <strong>Secret Name</strong>, enter a name for the encrypted text. This is the
    name you will use to reference the text elsewhere in your resources.</p><h4>Option:
    Inline Secret Value</h4><p>In <strong>Inline Secret</strong> <strong>Value</strong>,
    enter a value for the encrypted text.</p><h4>Option: Reference Secret</h4><p>You
    can create a Harness secret that refers to an existing secret by selecting <strong>Reference</strong>
    <strong>Secret</strong> and using that secret&#39;s name.</p><p>You can reference
    existing secrets in the following types of Secret Managers:</p><ul><li>Azure Key
    Vault</li><li>Hashicorp Vault</li></ul><p></p><p>Enter <strong>Description</strong>
    for your secret.</p><p>Enter <strong>Tags</strong> for your secret.</p><p>Click
    <strong>Save.</strong></p><h3>Step 2: Use the Encrypted Text in Connectors</h3><p>All
    of the passwords and keys used in Harness Connectors are stored as Encrypted Text
    secrets in Harness.</p><p>You can either create the Encrypted Text secret first
    and then select it in the Connector or you can create/select it from the Connector
    by clicking <strong>Create or Select a Secret</strong>:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1618812254692/screenshot-2021-04-19-at-11-31-10-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1618812282235/screenshot-2021-04-19-at-11-33-13-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    can also edit it in the Connector.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1618812596840/screenshot-2021-04-19-at-11-38-59-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h3>Step
    3: Reference the Encrypted Text by Identifier</h3><p>For an Encrypted Text secret
    that&#39;s been scoped to a Project, you reference the secret in using the secret
    <u>identifier</u> in the expression: <code>&lt;+secrets.getValue(&#34;your_secret_Id&#34;)&gt;</code>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1646177108158/clean-shot-2022-03-01-at-15-24-04.png"/></figure><div
    class="note-callout">Always reference a secret in an expression using its <u>identifier</u>.
    Names will not work.</div><p>For example, if you have a text secret with the identifier
    <code>doc-secret</code>, you can reference it in a Shell Script step like this:</p><pre
    class="hljs bash">echo &#34;text secret is: &#34; &lt;+secrets.getValue(&#34;doc-secret&#34;)&gt;</pre><p></p><p>You
    can reference a secret at the Org scope using an expression with <code>org</code>:</p><pre>&lt;+secrets.getValue(&#34;org.your-secret-Id&#34;)&gt;​</pre><p></p><p>You
    can reference a secret at the Account scope using an expression with <code>account</code>:</p><pre>&lt;+secrets.getValue(&#34;account.your-secret-Id&#34;)&gt;​​</pre><div
    class="warning-callout">Avoid using <code>$</code> in your secret value. If your
    secret value includes <code>$</code>, you must use single quotes when you use
    the expression in a script.<br/>For example, if your secret in the Project scope
    has a value <code>&#39;my$secret&#39;</code>, and identifier <code>doc-secret</code>,
    to echo, use single quotes:<br/><code>echo &#39;&lt;+secrets.getValue(&#34;doc-secret&#34;)&gt;&#39;</code></div><p></p><h3>Review:
    Invalid Characters in Secret Names</h3><p>The following characters aren&#39;t
    allowed in the names of secrets:</p><pre class="hljs nohighlight"> ~ ! @ # $ %
    ^ &amp; * &#39; &#34; ? / &lt; &gt; , ;</pre><p></p><h3>Review: Secrets in Outputs</h3><p>When
    a secret is displayed in an output, Harness substitutes the secret value with
    asterisks so that the secret value is masked. Harness replaces each character
    in the name with an asterisk (*).</p><p>For example, here the secret values referenced
    in a Shell Script step are replaced with <code>*****</code>:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1618913494624/screenshot-2021-04-20-at-2-59-18-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>If
    you accidentally use a very common value in your secret, like whitespace, the <code>*</code> substitution
    might appear in multiple places in the output.</p><p>If you see an output like
    this, review your secret and fix the error.</p><h3>Review: Secret Scope</h3><p>When
    creating secrets, it&#39;s important to understand their scope in your Harness
    account.</p><p>A user can only create a secret according to the scope set by its
    Harness User permissions.</p><p>For example, when you create a new project or
    a new organization, a Harness Secret Manager is automatically scoped to that level.</p><h3>Review:
    Line breaks and Shell-Interpreted Characters</h3><p>A text secret can be referenced
    in a script and written to a file as well. For example, here is a secret decoded
    from <a href="https://linux.die.net/man/1/base64" target="_blank">base64</a> and
    written to a file:</p><p><code>echo &lt;+secrets.getValue(&#34;my_secret&#34;)&gt;
    | base64 -d &gt; /path/to/file.txt</code></p><p>If you have line breaks in your
    secret value, you can encode the value, add it to a secret, and then decode it
    when you use it in a Harness step.</p><p>The previous example uses base64, but
    you can also write a secret to a file without it:</p><p><code>echo &#39;&lt;+secrets.getValue(&#34;long_secret&#34;)&gt;&#39;
    &gt; /tmp/secretvalue.txt</code></p><p>If you do not use base64 and the secret
    value contains any character that are interpreted by the shell, it might cause
    issues.</p><p>In this case, you can use a special-purpose code block:</p><pre
    class="hljs ruby">cat &gt;/harness/secret_exporter/values.txt &lt;&lt; &#39;EOF&#39;<br/>MySecret:&lt;+secrets.getValue(&#34;test&#34;)&gt;<br/>EOF</pre><p></p><h4>Sanitization</h4><p>Sanitization
    only looks for an exact match of what is stored. So if you stored a base64 encoded
    value then only the base64 encoded value is sanitized.</p><p>For example, let
    say I have this multiline secret:</p><pre>line 1<br/>line 2<br/>line 3</pre><p></p><p>When
    it is base64 encoded, it results in <code>bGluZSAxCmxpbmUgMgpsaW5lIDM=</code>.</p><p>We
    can add this to a Harness secret named <strong>linebreaks</strong> and then decode
    the secret like this:</p><pre>echo &lt;+secrets.getValue(&#34;linebreaks&#34;)&gt;
    | base64 -d</pre><p></p><p>The result loses any secret sanitization.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/osfw70e59c/1652308084680/image.png"/></figure><p></p>'
  slug: add-use-text-secrets
  tags: []
  is_live: true
