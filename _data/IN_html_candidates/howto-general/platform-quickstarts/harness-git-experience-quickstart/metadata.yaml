type: article
article_id: dm69dkv34g
user_id: mfr0nxh4be
category_id: w6r9f17pk3
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Harness Git Experience Quickstart (Deprecated)
slug: harness-git-experience-quickstart
description: This quickstart shows you how to enable and use Harness Git Experience.
short_version: This quickstart shows you how to enable and use Harness Git Experience.
tags:
- 2-way sync to github
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T16:57:24.880666Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Harness Git Experience Quickstart (Deprecated)
  description: This quickstart shows you how to enable and use Harness Git Experience.
  short_version: This quickstart shows you how to enable and use Harness Git Experience.
  body: '<div class="note-callout">This version of Harness Git Experience has been
    deprecated. To try out the latest version of Git Experience, see <a href="/article/grfeel98am">Harness
    Git Experience Quickstart</a>.</div><p>This quickstart shows you how to enable
    and use Harness Git Experience.</p><p>Harness Git Experience integrates your Harness
    Projects, Pipelines, and resources with your Git repos. You can manage and run
    your Harness Pipelines and resources entirely from Git or use a hybrid method.
    With Harness Git Experience, your Git repos are always the single source of truth.</p><div
    class="note-callout">See also: <a href="/article/soavr3jh0i-git-experience-how-tos">Git
    Experience How-tos</a>, <a href="/article/utikdyxgfz-harness-git-experience-overview">Harness
    Git Experience Overview</a>.</div><h3>Objectives</h3><p>You&#39;ll learn how to:</p><ol><li>Connect
    your SCM to Harness.</li><li>Enable Harness Git Experience in a new Project.</li><li>Create
    and sync a new Pipeline with your Git repo.</li></ol><h3>Before You Begin</h3><p>You&#39;ll
    need a Git repo with at least one branch and a Personal Access Token (PAT) for
    your account. Harness needs the PAT to use the Git platform APIs. The PAT is encrypted
    using a <a href="/article/hngrlb7rd6-harness-secret-manager-overview">Harness
    Secret Manager</a>. Your Git Personal Access Token is stored in your Harness secret
    and is a private key to which only you have access. This secret cannot be accessed
    or referenced by any other user.</p><div class="note-callout">Make sure your repo
    has at least one branch, such as main or master. For most Git providers, you simply
    add a README file to the repo and the branch in created.</div><h3>Step 1: Add
    a Source Code Manager</h3><p>A Harness Source Code Manager (SCM) contains your
    personal account for a Git provider such as GitHub or AWS CodeCommit. You can
    add one SCM to your account for each provider.</p><p>In Harness, click your account
    profile at the bottom of the navigation.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/p92awqts2x/1623783902526/clean-shot-2021-06-15-at-12-04-43-2-x.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p></p><p>In
    <strong>My Source Code Managers</strong>, click <strong>Add Source Code Manager</strong>.</p><p>In
    <strong>Add a Source Code Manager</strong>, enter a name for the SCM.</p><p>Select
    the SCM type, such as GitHub.</p><p>Enter the authentication credentials.</p><p>We&#39;ll
    use GitHub in this example, but you can find the settings for all of the SCMs
    in <a href="/article/kqik8km5eb-source-code-manager-settings">Source Code Manager
    Settings</a>.</p><p>Here&#39;s a GitHub example:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/p92awqts2x/1623784292600/clean-shot-2021-06-15-at-12-10-59-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Add</strong>. The new SCM is listed under <strong>My Source Code Managers</strong>.</p><h3>Step
    2: Enable Git Experience in a Project</h3><p>In the Git provider, you want to
    use for syncing your Project, create a repo(s) for the Project.</p><p>In the repo,
    add a folder named <strong>projects</strong>.</p><div class="note-callout">You
    can use multiple repos in the Harness Git Experience for a Project. For example,
    you could add Pipelines to one repo and Connectors to another.</div><p>For this
    example, we&#39;ll use one repo and the folder named <strong>projects</strong>.</p><p>Here&#39;s
    a new GitHub repo named <strong>GitExpDocExample</strong>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623794233271/clean-shot-2021-06-15-at-14-56-29-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div
    class="note-callout">You do not need all of the resources used by your Pipelines
    to be synched to your repo. For example, you could use account-level resources
    such as Delegate or Docker Registry Connectors. These will work fine.</div><p>In
    Harness, create a new Project. See <a href="/article/36fw2u92i4-create-an-organization">Create
    Organizations and Projects</a>.</p><p>Here&#39;s a new Project named <strong>GitExp
    Doc Example</strong>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647342072279/screenshot-2022-03-15-at-4-28-44-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>When
    you&#39;re done you&#39;ll have a new Project containing the modules according
    to your license.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647342537679/screenshot-2022-03-15-at-4-38-04-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>In
    your <strong>Project</strong> select a module such as CI or CD.</p><p>Click <strong>Project
    Setup</strong>, and then click <strong>Git Management</strong>.</p><p><strong>Enable
    Git Experience</strong> appears.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647342992807/screenshot-2022-03-15-at-4-43-35-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Enable Git Experience</strong>.</p><p>The <strong>Configure Harness Folder</strong>
    settings appear.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647343278827/screenshot-2022-03-15-at-4-49-54-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Repository name</strong>, enter a name for the repo. It doesn&#39;t have
    to be the same as the Git repo name. The name you enter here will appear in Harness
    only. It&#39;ll identify the Project repo.</p><p>For example, here&#39;s the <strong>Repository
    name</strong> <code>GitExpDocExample</code> <u>after</u> Harness Git Experience
    is enabled:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623967133658/clean-shot-2021-06-17-at-14-58-35.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Select Connector</strong>, select or create a Git Connector to the repo
    for your Project. For steps, see <a href="https://ngdocs.harness.io/category/xyexvcc206-ref-source-repo-provider">Code
    Repo Connectors</a>.</p><details><summary>Important: Connector must use the Enable
    API access option and Token</summary><div><p><strong>Important:</strong> the Connector
    must use the <strong>Enable API access</strong> option and Username and <strong>Token</strong>
    authentication. Harness needs the PAT to access the Git platform APIs. Generate
    the token in your account on the Git provider and add it to Harness as a Secret.
    Next, use the token in the credentials for the Git Connector. For details on source
    code manager settings, see <a href="/article/kqik8km5eb-source-code-manager-settings">Source
    Code Manager Settings</a>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1650406956245/image.png"/></figure><p>For
    GitHub, the token must have the following scopes:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1650406964275/image.png"/></figure><p>For
    other Git providers, see <a href="https://ngdocs.harness.io/category/xyexvcc206-ref-source-repo-provider">Code
    Repo Connectors</a>.</p></div></details><p>Here&#39;s an example of a GitHub Connector
    that has the correct settings:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647343548488/git-hub-connector.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Once
    you add a Connector, in <strong>Repository URL</strong>, you should see the repo
    URL.</p><p>Click <strong>Test Connection</strong>. Once Harness verifies the connection,
    you will see <strong>Connection Successful</strong>.</p><p>In <strong>Select Harness
    Folder</strong>, enter the name of a folder at the repo root or the name of a
    subfolder in the repo.</p><div class="note-callout"><u>The folder must already
    exist in the repo.</u> You will also need to add a readme file to that folder
    as Git providers typically don&#39;t let you create empty folders.</div><p>When
    you complete Harness Git Experience setup, Harness will create the <u>a special
    folder</u> inside the folder you entered. The special folder is called the <u>Harness
    Folder</u> and all files are stored there.</p><p>The Harness Folder is named <strong>.harness</strong>.
    This allows you to identify Harness Project YAML files in your repos.</p><p>Later,
    when you add Pipelines and resources to this Project, you can specify their default
    folders.</p><p>When a Pipeline in one repo needs to access a Connector/Secret/etc
    in another repo at runtime, the Pipeline will always use the Connector/Secret/etc
    in their default branch and folder.</p><p><strong>Root or Subfolder?</strong>
    You can specify the repo root or a subfolder in <strong>Select Harness Folder</strong>.</p><details><summary>Using
    a subfolder?</summary><div><p>If you want to use a subfolder, create the subfolder
    in your repo before entering it in <strong>Select Harness Folder</strong>. Harness
    does not create the folder for you.</p><p>You will also need to add a <u>readme
    file</u> to that subfolder as Git providers typically don&#39;t let you create
    empty folders.</p><p>Once you have the subfolder, you will enter the name of the
    subfolder in <strong>Select Harness Folder</strong>.</p><p>For example, here is
    the subfolder <strong>subfolder_example</strong> in a repo and how it is added
    to the <strong>Select Harness Folder</strong> setting:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1650406742320/clean-shot-2022-04-19-at-15-18-23.png"/></figure></div></details><p>In
    <strong>Select Default Branch</strong>, select the branch that you want to use,
    such as <strong>main</strong>.</p><p>Here&#39;s an example of the Configure Harness
    Folder settings for a repo and root folder:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623798416979/clean-shot-2021-06-15-at-16-06-05-2-x.png"/></figure><p>When
    you&#39;re ready, click <strong>Save</strong>.</p><p>In <strong>Select Connectivity
    Mode</strong>, you have two options:</p><ul><li><strong>Connect Through Manager:</strong>
    Harness SaaS will connect to your Git repo whenever you make a change and Git
    and Harness sync.</li><li><strong>Connect Through Delegate:</strong> Harness will
    make all connections using the Harness Delegate. This option is used for <a href="/article/tb4e039h8x-harness-on-premise-overview">Harness
    On-Prem</a> frequently, but it is also used for Harness SaaS.<div class="note-callout">Secrets:
    if you select <strong>Connect Through Manager</strong>, the Harness Manager decrypts
    the secrets you have set up in the Harness Secrets Manager. This is different
    than <strong>Connect Through Delegate</strong> where only the Harness Delegate,
    which sits in your private network, has access to your key management system.
    See Harness Secrets Manager Overview.</div>For this quickstart, select <strong>Connect
    Through Manager</strong>, and then click <strong>Save and Continue.</strong><br/>Harness
    Git Experience is enabled and the new repo and folder are listed:<figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647343744139/git-management.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li></ul><h3>Step
    3: Review the Harness Git Experience in your Project</h3><p>Harness does not automatically
    add a folder to your repo until you create a Pipeline or resource like a Connector
    in your Project.</p><p>You can see the repo setting in your Project before creating
    Pipelines and resources.</p><p>In your Project, click one of your modules. In
    this example, we&#39;ll use <strong>Builds</strong>.</p><p>Click <strong>Pipelines</strong>.</p><p>At
    the top of the page, you can see <strong>All Repositories</strong>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623967095819/clean-shot-2021-06-17-at-14-58-04.png"/></figure><p>Click
    <strong>All Repositories</strong> and select the name of the repo you entered
    in <strong>Repository name</strong> earlier.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623967195652/clean-shot-2021-06-17-at-14-58-35.png"/></figure><p>You
    can now select any branch from the repo.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hzajxmb3oj/1623967244297/clean-shot-2021-06-17-at-15-00-25.png"/></figure><p>Harness
    Git Experience is enabled!</p><h3>Step 4: Add a Pipeline</h3><p>Now you can create
    Pipelines and resources and store their YAML files in your Git repo&#39;s branches
    and folders.</p><p>Git is the single source of truth. The Pipelines and resources
    are stored in the repo first and then synced with Harness.</p><p>In your Harness
    Project, click <strong>Builds</strong>. If you don&#39;t have the <strong>Builds</strong>
    module, use another module.</p><p>In <strong>Builds</strong>, click <strong>Pipelines</strong>.</p><p>At
    the top of the page is <strong>All Repositories</strong>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/77xsb39287/1623969465388/clean-shot-2021-06-17-at-15-37-38.png"/></figure><p>You
    select the repo and branch here to display the Pipelines stored in them. It does
    not affect the repo and branch where you create a new Pipeline. You will select
    that repo and branch in the <strong>Create New Pipeline</strong> settings next.</p><p>Click
    <strong>+Pipelines</strong> to create a new Pipeline. The <strong>Create New Pipeline</strong>
    settings appear.</p><p>Give the Pipeline a name such as <strong>Example</strong>.</p><p>In
    <strong>Git Repository Details</strong>, select the repo and branch where you
    want to store the Pipeline YAML file. You will select a folder in that repo and
    branch later.</p><p>Click <strong>Start</strong>.</p><p>We&#39;re simply demonstrating
    Harness Git Experience, so we&#39;ll create a very simple Pipeline.</p><p>Click
    <strong>Add Stage</strong> and then click <strong>Build</strong>.</p><p>In <strong>About
    Your Stage</strong>, enter the name <strong>helloworld</strong>.</p><p>Enable
    <strong>Clone Codebase</strong>.</p><p>In <strong>Connector</strong>, select or
    create a Git Connector to the repo for your Project. For steps, see <a href="https://ngdocs.harness.io/category/xyexvcc206-ref-source-repo-provider">Code
    Repo Connectors</a>.</p><p>Click <strong>Set Up Stage</strong>.</p><p>Next, you
    can just paste the following YAML into the Pipeline to create a very simple Pipeline.</p><p>Click
    <strong>YAML</strong> and then paste in the following YAML.</p><pre>pipeline:<br/>    name:
    Example<br/>    identifier: Example<br/>    allowStageExecutions: false<br/>    projectIdentifier:
    DocGitSync<br/>    orgIdentifier: default<br/>    tags: {}<br/>    properties:<br/>        ci:<br/>            codebase:<br/>                connectorRef:
    DocRepo<br/>                build: &lt;+input&gt;<br/>    stages:<br/>        -
    stage:<br/>              name: helloworld<br/>              identifier: helloworld<br/>              description:
    &#34;&#34;<br/>              type: CI<br/>              spec:<br/>                  cloneCodebase:
    true<br/>                  infrastructure:<br/>                      type: KubernetesDirect<br/>                      spec:<br/>                          connectorRef:
    examplek8<br/>                          namespace: example-delegate-new<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: Run<br/>                                name:
    example<br/>                                identifier: example<br/>                                spec:<br/>                                    connectorRef:
    exampledocker<br/>                                    image: sample<br/>                                    command:
    echo test</pre><p>Replace <code>projectIdentifier: GitExp_Doc_Example</code> with
    the identifier of your Project.</p><p>You can see the Project ID right after <code>projects</code>
    in the URL of the page:</p><p><code>https://app.harness.io/.../projects/GitExp_Doc_Example/...</code></p><p>Click
    <strong>Save</strong>. The <strong>Save Pipeline to Git</strong> settings appear.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/dm69dkv34g/1647258842569/screenshot-2022-03-14-at-5-15-21-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Save</strong>. The Pipeline is ready. Now we can save it to Git.</p><h3>Step
    5: Save the Pipeline to Git</h3><p>When you click <strong>Save</strong>, the <strong>Save
    Pipelines to Git</strong> settings appear.</p><p>In <strong>Harness Folder</strong>,
    select one of the folders set up in the Project&#39;s Git Experience settings.</p><p>The
    YAML file for the Pipeline will be saved to this folder. But you can add subfolders
    in <strong>File Path</strong>.</p><p>In <strong>File Path</strong>, enter a name
    for the YAML file, such as <code>Example.yaml</code>. Harness will generate one
    automatically from the Pipeline name, but you can add your own.</p><p>To enter
    a subfolder of the Harness Folder you selected, enter the folder name in front
    of the file name like <code>mybuilds/Example.yaml</code>.</p><p>In this example,
    we use <code>mybuilds/Example.yaml</code>.</p><p>In <strong>Commit Details</strong>,
    enter a message.</p><p>In <strong>Select Branch to Commit</strong>, commit to
    an existing or new branch.</p><ul><li><strong>Existing branch:</strong> you can
    start a pull request if you like.</li><li><strong>New branch:</strong> enter the
    new branch name. You can start a pull request if you like.</li></ul><p>Here&#39;s
    a simple example:</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/77xsb39287/1623972190240/clean-shot-2021-06-17-at-16-23-01.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Save</strong>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/77xsb39287/1623973042485/clean-shot-2021-06-17-at-16-37-14.png"/></figure><p></p><p>The
    Pipeline is saved to the repo branch and folder.</p><h3>Step 6: View the Pipeline
    in Git and Harness Git Experience</h3><p>In your Git repo, locate the branch,
    folder, and file.</p><p>Harness created a <strong>.harness</strong> folder under
    the folder you selected in <strong>Harness Folder.</strong></p><p>If you added
    a folder to <strong>File Path</strong>, open that folder.</p><p>Click the YAML
    file for your Pipeline. The YAML is displayed.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/77xsb39287/1623973191351/clean-shot-2021-06-17-at-16-39-31.png"/></figure><p>In
    your Harness Project, click <strong>Project Setup</strong>, and then click <strong>Git
    Management</strong>.</p><p>In <strong>Git Management</strong>, click <strong>Entities</strong>.</p><p>In
    <strong>Entities by repositories</strong>, expand the Project name.</p><p>The
    Pipeline is listed along with its file path in the repo.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/77xsb39287/1623973642993/clean-shot-2021-06-17-at-16-47-11.png"/></figure><p>Now
    you have a Pipeline stored in Git.</p><h3>Next Steps</h3><p>Congratulations! You
    now have Harness Git Experience set up, synced with your Git repo, and storing
    a new Pipeline.</p><p>Next, explore other Harness features:</p><ul><li><a href="/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    CD Quickstart</a></li><li><a href="/article/soavr3jh0i-git-experience-how-tos">Git
    Experience How-tos</a></li></ul><p></p>'
  slug: harness-git-experience-quickstart
  tags:
  - 2-way sync to github
  is_live: true
