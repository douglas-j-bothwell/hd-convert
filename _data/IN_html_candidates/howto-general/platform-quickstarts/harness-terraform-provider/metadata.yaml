type: article
article_id: 7cude5tvzh
user_id: 2te4j9f9g7
category_id: w6r9f17pk3
author:
  name: Rashmi Nanda Sahoo
  profile_image: https://www.gravatar.com/avatar/b7bfd905f8714099535f2ff657fa3975?d=mm&s=150
title: Harness Terraform Provider Quickstart
slug: harness-terraform-provider
description: This topic shows how to get started with the Harness Terraform Provider.
short_version: This topic shows how to get started with the Harness Terraform Provider.
tags:
- Terraform Provider
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-29T14:33:18.475713Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Harness Terraform Provider Quickstart
  description: This topic shows how to get started with the Harness Terraform Provider.
  short_version: This topic shows how to get started with the Harness Terraform Provider.
  body: '<p>Terraform is an infrastructure as code (IaC) tool that allows you to build,
    change, and version infrastructure safely and efficiently.​</p><p>Harness Terraform
    Provider is a library that you can use to create Harness Infrastructure. You can
    administer and use Harness functionality from within your Terraform setup using
    Harness Terraform Provider.</p><p>This quickstart shows you how to write your
    configurations in Terraform and provision your Harness resources using the Harness
    Terraform Provider.</p><h3>Before You begin</h3><ul><li><a href="https://www.terraform.io/intro">Introduction
    to Terraform</a></li><li><a href="https://www.terraform.io/registry">Terraform
    Registry</a></li><li><a href="https://www.terraform.io/language">Terraform Configuration
    Language</a></li></ul><h3>Prerequisites</h3><ul><li>You must have a Harness Account.</li><li>You
    must have an admin setup for your Harness Account.</li><li>You must have a Personal
    Access Token (PAT).<br/>For detailed steps on how to generate a PAT, see <a href="/article/tdoad7xrh9-add-and-manage-api-keys#create_personal_access_token">Create
    a Personal Access Token</a>.</li></ul><h3>Important</h3><ul><li>Harness Terraform
    Provider lets you provision the following:<ul><li>Organizations</li><li>Projects</li><li>Permissions
    setup</li><li>Connectors</li><li>Secrets</li><li>Pipelines</li></ul></li><li>You
    cannot provision users using Harness Terraform Provider.<br/>You can provision
    users through SCIM using <a href="/article/umv2xdnofv-provision-users-with-okta-scim">Okta</a>,
    <a href="/article/y402mpkrxq-provision-users-and-groups-with-one-login-scim">OneLogin</a>
    or <a href="/article/6r8hin2z20-provision-users-and-groups-using-azure-ad-scim">Azure
    AD</a>.</li><li>You cannot run or monitor your Pipelines using Harness Terraform
    Provider.</li></ul><h3>Why use Harness Terraform Provider?</h3><p>Harness Terraform
    Provider lets you use Terraform scripts to configure Harness. Through scripts,
    it supports the creation of all the key Harness objects, including Projects, Pipelines,
    Connectors, and Secrets.</p><p>It thus lets you create a repeatable and scalable
    structure of Harness infrastructure.​​</p><h3>Visual summary</h3><p>Here is a
    quick overview of Harness Terraform Provider:</p><ul><li>You write your Terraform
    Configuration in <code>.tf</code> file.<br/>You declare all the resources that
    represent your infrastructure objects in this file.<br/>For more details, see
    <a href="https://www.terraform.io/language">Configuration Language</a>.</li><li>Next,
    you initialize, plan, and apply your resources using the following commands:<ul><li><code>Terraform
    init</code></li><li><code>Terraform plan</code></li><li><code>Terraform apply</code></li></ul></li><li>Once
    you confirm Terraform apply, a state file .statetf is generated.</li><li>Your
    resources are provisioned successfully.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7cude5tvzh/1661408655691/screenshot-2022-08-25-at-11-35-51-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li></ul><h3>Install
    Harness Terraform Provider</h3><p>To install the Harness Terraform Provider, copy,
    and paste the following code into your Terraform configuration.</p><p>Enter your
    Harness Account Id in <code>account_id</code>.</p><p>The account Id is in every
    URL when using Harness:</p><p><code>https://app.harness.io/ng/#/account/</code><code><strong>{accountid}</strong></code><code>/home/get-started​</code></p><p>Enter
    your Personal Access Token (PAT) in <code>platform_api_key</code>.</p><p>For detailed
    steps on how to generate a PAT, see <a href="/article/tdoad7xrh9-add-and-manage-api-keys#create_personal_access_token">Create
    a Personal Access Token</a>.​</p><pre>terraform {<br/>    required_providers {<br/>        harness
    = {<br/>            source = &#34;harness/harness&#34;<br/>            version
    = &#34;&lt;version_number&gt;&#34;<br/>           }<br/>        }<br/>    }<br/>provider
    &#34;harness&#34; {<br/>    endpoint   = &#34;https://app.harness.io/gateway&#34;<br/>    account_id
    = &#34;&lt;your_harness_accountid&#34;<br/>    platform_api_key    = &#34;your_pat&#34;<br/>   }</pre><h3>Add
    Harness Resource configurations to Terraform files</h3><p>Before you start provisioning
    Harness Resources, make sure you have written your Terraform Configuration as
    declarative scripts as a<code>.tf</code> file.</p><p>The <code>.tf</code> Terraform
    file will contain the Harness infrastructure details that you want to provision.</p><p>Let
    us see examples of adding the following resources to your Terraform Configuration:</p><ul><li>Organization</li><li>Project</li><li>Encrypted
    Text Secret within a Project</li></ul><h4>Add Organization details</h4><pre>resource
    &#34;harness_platform_organization&#34; &#34;org&#34; {​<br/>    name      = &#34;Terraform
    Example Org&#34;<br/>    identifier = &#34;terraform_example_org&#34;<br/>    description
    = &#34;Demo Organization, created through Terraform&#34;<br/>}</pre><p></p><p>Your
    Organization now appears in the list of Organizations within the scope of your
    Harness Account.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7cude5tvzh/1661498703407/terraform-or.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    try it out, see <a href="https://registry.terraform.io/providers/harness/harness/latest/docs/resources/platform_organization">Harness
    Organization</a>.</p><h4>Add Project details</h4><pre>resource &#34;harness_platform_project&#34;
    &#34;project&#34; {<br/>    name      = &#34;Terraform Test Project&#34;<br/>    identifier
    = &#34;terraform_test_project&#34;<br/>    org_id    = &#34;terraform_example_org&#34;<br/>}</pre><p></p><p>Your
    Project now appears in the list of Projects within the scope of your Organization.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/7cude5tvzh/1661498760510/terraform-project.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    try it out, see <a href="https://registry.terraform.io/providers/harness/harness/latest/docs/resources/platform_project">Harness
    Project</a>.</p><h4>Add Encrypted Text Secret details</h4><pre>resource &#34;harness_platform_secret_text&#34;
    &#34;textsecret&#34; {​<br/>    identifier  = &#34;terraform_example_secret&#34;<br/>    name        =
    &#34;Terraform Example Secret&#34;<br/>    description = &#34;This is a text Secret,
    generated through Terraform&#34;<br/>    org_id      = &#34;terraform_example_org&#34;<br/>    project_id  =
    &#34;terraform_test_project&#34;<br/>    tags        = [&#34;example:tags&#34;]<br/><br/>    secret_manager_identifier
    = &#34;harnessSecretManager&#34;<br/>    value_type                = &#34;Inline&#34;<br/>    value                     =
    &#34;secret&#34;<br/>    lifecycle {<br/>        ignore_changes = [<br/>            value,<br/>        ]<br/>    }<br/>}</pre><p></p><p>Your
    Text Secret now appears in the list of Secrets within the scope of your Project.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/7cude5tvzh/1661498847758/terraform-secret.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    try it out, see <a href="https://registry.terraform.io/providers/harness/harness/latest/docs/resources/platform_secret_text">Harness
    Text Secret</a>.</p><div class="note-callout">If you do not provide the <code>org_id</code>
    and the <code>project_id</code> in the configuration, the Secret is created at
    the Account scope.</div><h4>Add Pipeline details</h4><pre>resource &#34;harness_platform_pipeline&#34;
    &#34;approval_pipeline&#34; {<br/>    identifier  = &#34;approval_pipeline&#34;<br/>    name        =
    &#34;Approval Pipeline&#34;<br/>    description = &#34;Simple Approval Stage pipeline
    generated through Terraform&#34;<br/>    project_id  = &#34;terraform_test_project&#34;<br/>    org_id      =
    &#34;terraform_example_org&#34;<br/><br/>    yaml        = &lt;&lt;PIPETEXT<br/>    pipeline:<br/>        name:
    &#34;Approval Pipeline&#34;<br/>        identifier: &#34;Approval_Pipeline&#34;<br/>        projectIdentifier:
    &#34;terraform_test_project&#34;<br/>        orgIdentifier: &#34;terraform_example_org&#34;<br/>        tags:
    {}<br/>        stages:<br/>             - stage:<br/>                name: Approval<br/>                identifier:
    Approval<br/>                description: &#34;&#34;<br/>                type:
    Approval<br/>                spec:<br/>                    execution:<br/>                        steps:<br/>                            -
    step:<br/>                                name: Approval Step<br/>                                identifier:
    Approval_Step<br/>                                type: HarnessApproval<br/>                                timeout:
    1d<br/>                                spec:<br/>                                    approvalMessage:
    Please review the following information and approve the pipeline progression<br/><br/>includePipelineExecutionHistory:
    true<br/>                                    approvers:<br/>                                        minimumCount:
    1<br/>disallowPipelineExecutor: false<br/>                                        userGroups:<br/>                                            -
    account.testmv<br/>                                    approverInputs: []<br/>                    tags:
    {}<br/>PIPETEXT<br/>}</pre><p></p><p>Your Pipeline now appears in the list of
    Pipelines within the scope of your Project.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7cude5tvzh/1661498920030/terraform-pipeline-1.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    try it out, see <a href="https://registry.terraform.io/providers/harness/harness/latest/docs/resources/platform_pipeline">Harness
    Pipeline</a>.</p><h3>Provision Harness infrastructure</h3><p>You can create the
    Harness infrastructure by performing the following steps:</p><ol><li><strong>Initialize</strong>:
    run the following command to initialize a working directory and set up the correct
    version of the Harness Terraform Provider.<pre>terraform init</pre>This command
    also creates a <code>.terraform</code> directory and downloads specific plugins.</li><li><strong>Plan</strong>:
    run the following command to add desired resources.<pre>terraform plan</pre>This
    command creates an execution plan.</li><li><strong>Apply</strong>: run the following
    command to apply the plan you just created.<pre>terraform apply</pre>This command
    executes your plan.<br/>Once you confirm the execution plan, Terraform generates
    a state file named terraform.tfstate to track the state of all the resources it
    manages.<br/>This file is used to detect differences during the plan and detect
    configuration drift.​<br/>For more details, see <a href="https://www.terraform.io/language/state">State</a>.</li></ol><h3>Terraform
    import</h3><p>You can provision existing resources that you have created and bring
    them under Terraform management.</p><p>To do this, use the following command:</p><pre>terraform
    import</pre><p></p><p>To learn more about the life cycle of a Terraform resource,
    see <a href="https://freecontent.manning.com/the-lifecycle-of-a-terraform-resource/">Lifecycle
    of a Terraform Resource</a>.</p><p>To try out Harness Terraform provider, see
    <a href="https://registry.terraform.io/providers/harness/harness/latest/docs">Harness
    Provider</a>.</p><h3>Next steps</h3><ul><li><a href="https://www.terraform.io/language/values">Customize
    Terraform Configuration with Variables</a></li><li><a href="https://www.terraform.io/language/modules">Reuse
    Configuration with Modules</a></li></ul><p></p>'
  slug: harness-terraform-provider
  tags:
  - Terraform Provider
  is_live: true
