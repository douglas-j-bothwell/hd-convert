type: article
article_id: m5vkql35ca
user_id: mfr0nxh4be
category_id: 1ehb4tcksy
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: AWS Connector Settings Reference
slug: aws-connector-settings-reference
description: This topic provides settings and permissions for the AWS Connector.
short_version: This topic provides settings and permissions for the AWS Connector.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-07T19:56:13.800486Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: AWS Connector Settings Reference
  description: This topic provides settings and permissions for the AWS Connector.
  short_version: This topic provides settings and permissions for the AWS Connector.
  body: '<p>AWS is used as a Harness Connector for activities such as obtaining artifacts,
    building and deploying services, and verifying deployments.</p><p>This topic provides
    settings and permissions for the AWS Connector.</p><div class="warning-callout">The
    <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target or build infrastructures.</div><p></p><h3>AWS
    Permissions</h3><div class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target or build infrastructure.</div><p></p><p>The
    AWS role policy requirements depend on what AWS services you are using for your
    artifacts and target infrastructure.</p><p>Here are the user and access type requirements
    that you need to consider.</p><p><strong>User:</strong> Harness requires the IAM
    user be able to make API requests to AWS. For more information, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html"
    target="_blank">Creating an IAM User in Your AWS Account</a> from AWS.</p><p><strong>User
    Access Type:</strong> <strong>Programmatic access</strong>. This enables an access
    key ID and secret access key for the AWS API, CLI, SDK, and other development
    tools.</p><p>As described below, <code>DescribeRegions</code> is required for
    all AWS Cloud Provider connections.</p><h3>All AWS Connectors: DescribeRegions
    Required</h3><div class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target or build infrastructure.</div><p></p><p>Harness
    needs a policy with the <code>DescribeRegions</code> action so that it can list
    the available regions for you when you define your target architecture.</p><p>Create
    a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#customer-managed-policies">Customer
    Managed Policy</a>, add the <code>DescribeRegions</code> action to list those
    regions, and add that to any role used by the Connector.</p><pre class="hljs json">{<br/>    &#34;Version&#34;:
    &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;: [<br/>        {<br/>            &#34;Sid&#34;:
    &#34;VisualEditor0&#34;,<br/>            &#34;Effect&#34;: &#34;Allow&#34;,<br/>            &#34;Action&#34;:
    &#34;ec2:DescribeRegions&#34;,<br/>            &#34;Resource&#34;: &#34;*&#34;<br/>        }<br/>    ]<br/>}</pre><p></p><h3>AWS
    Policies Required</h3><div class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target or build infrastructure.</div><p></p><h3>AWS
    S3</h3><h4>Reading from AWS S3</h4><p>There are two policies required:</p><ul><li>The
    Managed Policy <strong>AmazonS3ReadOnlyAccess</strong>.</li><li>The <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#customer-managed-policies">Customer
    Managed Policy</a> you create using <code>ec2:DescribeRegions</code>.</li></ul><div
    class="note-callout">The AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">IAM
    Policy Simulator</a> is a useful tool for evaluating policies and access.</div><p><strong>Policy
    Name</strong>: <code>AmazonS3ReadOnlyAccess</code>.</p><p><strong>Policy ARN:</strong> <code>arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess</code>.</p><p><strong>Description:</strong> Provides
    read-only access to all buckets via the AWS Management Console.</p><p><strong>Policy
    JSON:</strong></p><pre class="hljs json">{<br/>  &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>  &#34;Statement&#34;:
    [<br/>    {<br/>      &#34;Effect&#34;: &#34;Allow&#34;,<br/>      &#34;Action&#34;:
    [<br/>        &#34;s3:Get*&#34;,<br/>        &#34;s3:List*&#34;<br/>      ],<br/>      &#34;Resource&#34;:
    &#34;*&#34;<br/>    }<br/>  ]<br/>}</pre><p><strong>Policy Name:</strong> <code>HarnessS3</code>.</p><p><strong>Description:</strong> Harness
    S3 policy that uses EC2 permissions. This is a customer-managed policy you must
    create. In this example we have named it <code>HarnessS3</code>.</p><p><strong>Policy
    JSON:</strong></p><pre class="hljs json">{<br/>    &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;:
    [<br/>        {<br/>            &#34;Sid&#34;: &#34;VisualEditor0&#34;,<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Action&#34;: &#34;ec2:DescribeRegions&#34;,<br/>            &#34;Resource&#34;:
    &#34;*&#34;<br/>        }<br/>    ]<br/>}</pre><div class="note-callout">If you
    want to use an S3 bucket that is in a separate account than the account used to
    set up the AWS Cloud Provider, you can grant cross-account bucket access. For
    more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-walkthroughs-managing-access-example2.html"
    target="_blank">Bucket Owner Granting Cross-Account Bucket Permissions</a> from
    AWS.</div><h4>Writing to AWS S3</h4><p>There are two policies required:</p><ul><li>The
    <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#customer-managed-policies">Customer
    Managed Policy</a> you create, for example <strong>HarnessS3Write</strong>.</li><li>The
    Customer Managed Policy you create using <code>ec2:DescribeRegions</code>.</li></ul><p><strong>Policy
    Name</strong>:<code>HarnessS3Write</code>.</p><p><strong>Description:</strong> Custom
    policy for pushing to S3.</p><p><strong>Policy JSON:</strong></p><pre>{<br/>    &#34;Version&#34;:
    &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;: [<br/>        {<br/>            &#34;Sid&#34;:
    &#34;AllObjectActions&#34;,<br/>            &#34;Effect&#34;: &#34;Allow&#34;,<br/>            &#34;Action&#34;:
    &#34;s3:*Object&#34;,<br/>            &#34;Resource&#34;: [&#34;arn:aws:s3:::bucket-name/*&#34;]<br/>        }<br/>    ]<br/>}</pre><p><strong>Policy
    Name:</strong> <code>HarnessS3</code>.</p><p><strong>Description:</strong> Harness
    S3 policy that uses EC2 permissions. This is a customer-managed policy you must
    create. In this example we have named it <code>HarnessS3</code>.</p><p><strong>Policy
    JSON:</strong></p><pre class="hljs json">{<br/>    &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;:
    [<br/>        {<br/>            &#34;Sid&#34;: &#34;VisualEditor0&#34;,<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Action&#34;: &#34;ec2:DescribeRegions&#34;,<br/>            &#34;Resource&#34;:
    &#34;*&#34;<br/>        }<br/>    ]<br/>}</pre><div class="note-callout">If you
    want to use an S3 bucket that is in a separate account than the account used to
    set up the AWS Cloud Provider, you can grant cross-account bucket access. For
    more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/example-walkthroughs-managing-access-example2.html"
    target="_blank">Bucket Owner Granting Cross-Account Bucket Permissions</a> from
    AWS.</div><h4>Read and Write to AWS S3</h4><p>You can have a single policy that
    reads and writes with an S3 bucket.</p><p>See <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket.html"
    target="_blank">Allows read and write access to objects in an S3 Bucket</a> and
    <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket-console.html"
    target="_blank">Allows read and write access to objects in an S3 Bucket, programmatically
    and in the console</a> from AWS.</p><p>Here is an example that includes AWS console
    access:</p><pre>{<br/>    &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;:
    [<br/>        {<br/>            &#34;Sid&#34;: &#34;ConsoleAccess&#34;,<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Action&#34;: [<br/>                &#34;s3:GetAccountPublicAccessBlock&#34;,<br/>                &#34;s3:GetBucketAcl&#34;,<br/>                &#34;s3:GetBucketLocation&#34;,<br/>                &#34;s3:GetBucketPolicyStatus&#34;,<br/>                &#34;s3:GetBucketPublicAccessBlock&#34;,<br/>                &#34;s3:ListAllMyBuckets&#34;<br/>            ],<br/>            &#34;Resource&#34;:
    &#34;*&#34;<br/>        },<br/>        {<br/>            &#34;Sid&#34;: &#34;ListObjectsInBucket&#34;,<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Action&#34;: &#34;s3:ListBucket&#34;,<br/>            &#34;Resource&#34;:
    [&#34;arn:aws:s3:::bucket-name&#34;]<br/>        },<br/>        {<br/>            &#34;Sid&#34;:
    &#34;AllObjectActions&#34;,<br/>            &#34;Effect&#34;: &#34;Allow&#34;,<br/>            &#34;Action&#34;:
    &#34;s3:*Object&#34;,<br/>            &#34;Resource&#34;: [&#34;arn:aws:s3:::bucket-name/*&#34;]<br/>        }<br/>    ]<br/>}</pre><h3>AWS
    Elastic Container Registry (ECR)</h3><h4>Pulling from ECR</h4><p><strong>Policy
    Name</strong>:<code>AmazonEC2ContainerRegistryReadOnly</code>.</p><p><strong>Policy
    ARN:</strong> <code>arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly</code>.</p><p><strong>Description:</strong> Provides
    read-only access to Amazon EC2 Container Registry repositories.</p><p><strong>Policy
    JSON:</strong></p><pre class="hljs json">{<br/>  &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>  &#34;Statement&#34;:
    [<br/>      {<br/>              &#34;Effect&#34;: &#34;Allow&#34;,<br/>              &#34;Action&#34;:
    [<br/>                  &#34;ecr:GetAuthorizationToken&#34;,<br/>                  &#34;ecr:BatchCheckLayerAvailability&#34;,<br/>                  &#34;ecr:GetDownloadUrlForLayer&#34;,<br/>                  &#34;ecr:GetRepositoryPolicy&#34;,<br/>                  &#34;ecr:DescribeRepositories&#34;,<br/>                  &#34;ecr:ListImages&#34;,<br/>                  &#34;ecr:DescribeImages&#34;,<br/>                  &#34;ecr:BatchGetImage&#34;<br/>              ],<br/>              &#34;Resource&#34;:
    &#34;*&#34;<br/>      }<br/>  ]<br/>}</pre><h4>Pushing to ECR</h4><p><strong>Policy
    Name</strong>: <code>AmazonEC2ContainerRegistryFullAccess</code>.</p><p><strong>Policy
    ARN:</strong> <code>arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess</code>.
    See <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/security-iam-awsmanpol.html"
    target="_blank">AWS managed policies for Amazon Elastic Container Registry</a>
    from AWS.</p><p><strong>Policy JSON Example:</strong></p><pre>{<br/>    &#34;Version&#34;:
    &#34;2012-10-17&#34;,<br/>    &#34;Statement&#34;: [<br/>        {<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Action&#34;: [<br/>                &#34;ecr:*&#34;,<br/>                &#34;cloudtrail:LookupEvents&#34;<br/>            ],<br/>            &#34;Resource&#34;:
    &#34;*&#34;<br/>        },<br/>        {<br/>            &#34;Effect&#34;: &#34;Allow&#34;,<br/>            &#34;Action&#34;:
    [<br/>                &#34;iam:CreateServiceLinkedRole&#34;<br/>            ],<br/>            &#34;Resource&#34;:
    &#34;*&#34;,<br/>            &#34;Condition&#34;: {<br/>                &#34;StringEquals&#34;:
    {<br/>                    &#34;iam:AWSServiceName&#34;: [<br/>                        &#34;replication.ecr.amazonaws.com&#34;<br/>                    ]<br/>                }<br/>            }<br/>        }<br/>    ]<br/>}</pre><p></p><h3>AWS
    CloudFormation</h3><p>The credentials required for provisioning depend on what
    you are provisioning.</p><p>For example, if you wanted to give full access to
    create and manage EKS clusters, you could use a policy like this:</p><pre class="hljs
    json">{<br/>     &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>     &#34;Statement&#34;:
    [<br/>         {<br/>             &#34;Effect&#34;: &#34;Allow&#34;,<br/>             &#34;Action&#34;:
    [<br/>                 &#34;autoscaling:*&#34;,<br/>                 &#34;cloudformation:*&#34;,<br/>                 &#34;ec2:*&#34;,<br/>                 &#34;eks:*&#34;,<br/>                 &#34;iam:*&#34;,<br/>                 &#34;ssm:*&#34;<br/>             ],<br/>             &#34;Resource&#34;:
    &#34;*&#34;<br/>         }<br/>     ]<br/> }</pre><p></p><p>If you wanted to provide
    limited permissions for EKS clusters, you might use a policy like this:</p><pre
    class="hljs json"> {<br/>     &#34;Version&#34;: &#34;2012-10-17&#34;,<br/>     &#34;Statement&#34;:
    [<br/>         {<br/>             &#34;Effect&#34;: &#34;Allow&#34;,<br/>             &#34;Action&#34;:
    [<br/>                 &#34;autoscaling:CreateAutoScalingGroup&#34;,<br/>                 &#34;autoscaling:DescribeAutoScalingGroups&#34;,<br/>                 &#34;autoscaling:DescribeScalingActivities&#34;,<br/>                 &#34;autoscaling:UpdateAutoScalingGroup&#34;,<br/>                 &#34;autoscaling:CreateLaunchConfiguration&#34;,<br/>                 &#34;autoscaling:DescribeLaunchConfigurations&#34;,<br/>                 &#34;cloudformation:CreateStack&#34;,<br/>                 &#34;cloudformation:DescribeStacks&#34;,<br/>                 &#34;ec2:AuthorizeSecurityGroupEgress&#34;,<br/>                 &#34;ec2:AuthorizeSecurityGroupIngress&#34;,<br/>                 &#34;ec2:RevokeSecurityGroupEgress&#34;,<br/>                 &#34;ec2:RevokeSecurityGroupIngress&#34;,<br/>                 &#34;ec2:CreateSecurityGroup&#34;,<br/>                 &#34;ec2:createTags&#34;,<br/>                 &#34;ec2:DescribeImages&#34;,<br/>                 &#34;ec2:DescribeKeyPairs&#34;,<br/>                 &#34;ec2:DescribeRegions&#34;,<br/>                 &#34;ec2:DescribeSecurityGroups&#34;,<br/>                 &#34;ec2:DescribeSubnets&#34;,<br/>                 &#34;ec2:DescribeVpcs&#34;,<br/>                 &#34;eks:CreateCluster&#34;,<br/>                 &#34;eks:DescribeCluster&#34;,<br/>                 &#34;iam:AddRoleToInstanceProfile&#34;,<br/>                 &#34;iam:AttachRolePolicy&#34;,<br/>                 &#34;iam:CreateRole&#34;,<br/>                 &#34;iam:CreateInstanceProfile&#34;,<br/>                 &#34;iam:CreateServiceLinkedRole&#34;,<br/>                 &#34;iam:GetRole&#34;,<br/>                 &#34;iam:ListRoles&#34;,<br/>                 &#34;iam:PassRole&#34;,<br/>                 &#34;ssm:GetParameters&#34;<br/>             ],<br/>             &#34;Resource&#34;:
    &#34;*&#34;<br/>         }<br/>     ]<br/> }</pre><h3>Use Kubernetes Cluster Connector
    for EKS</h3><p>If you want to connect Harness to Elastic Kubernetes Service (Amazon
    EKS), use the platform-agnostic <a href="/article/sjjik49xww-kubernetes-cluster-connector-settings-reference">Kubernetes
    Cluster Connector</a>.</p><h3>AWS Serverless Lambda</h3><p>There are three authentication
    options for the AWS Connector when used for AWS ECS images for AWS Serverless
    Lambda deployments:</p><ul><li><a href="#aws_access_key">AWS Access Key</a></li><li><a
    href="#assume_iam_role_on_delegate">Assume IAM Role on Delegate</a></li><li><a
    href="#use_irsa_iam_roles_for_service_accounts">Use IRSA</a></li><li><a href="#enable_cross_account_access_sts_role">Enable
    cross-account access (STS Role)</a><ul><li>Requires that the AWS CLI is installed
    on the Delegate. See <a href="#serverless_and_enable_cross_account_access_sts_role">Serverless
    and ​Enable cross-account access (STS Role)</a>.</li></ul></li></ul><p>For steps
    on Serverless Lambda deployments, see <a href="/article/5fnx4hgwsa-serverless-lambda-cd-quickstart">Serverless
    Lambda CD Quickstart</a>.</p><div class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target or build infrastructure.</div><h4>Permissions</h4><p>All
    authentication methods for Serverless deployments require an AWS User with specific
    AWS permissions, as described in <a href="https://www.serverless.com/framework/docs/providers/aws/guide/credentials"
    target="_blank">AWS Credentials</a> from Serverless. To create the AWS User, do
    the following:</p><ul><li>Log into your AWS account and go to the Identity &amp;
    Access Management (IAM) page.</li><li>Click <strong>Users</strong>, and then <strong>Add
    user</strong>. Enter a name. Enable <strong>Programmatic access</strong> by clicking
    the checkbox. Click <strong>Next</strong> to go to the <strong>Permissions</strong> page.
    Do one of the following:<ul><li><strong>Full Admin Access:</strong> click on <strong>Attach
    existing policies directly</strong>. Search for and select <strong>AdministratorAccess</strong> then
    click <strong>Next: Review</strong>. Check to make sure everything looks good
    and click <strong>Create user</strong>.</li><li><strong>Limited Access:</strong> click
    on <strong>Create policy</strong>. Select the <strong>JSON</strong> tab, and add
    the JSON using the following code from the <a href="https://gist.github.com/ServerlessBot/7618156b8671840a539f405dea2704c8"
    target="_blank">Serverless gist</a>:</li></ul></li></ul><details><summary>IAMCredentials.json</summary><div><pre
    class="hljs json">{<br/>    &#34;Statement&#34;: [<br/>        {<br/>            &#34;Action&#34;:
    [<br/>                &#34;apigateway:*&#34;,<br/>                &#34;cloudformation:CancelUpdateStack&#34;,<br/>                &#34;cloudformation:ContinueUpdateRollback&#34;,<br/>                &#34;cloudformation:CreateChangeSet&#34;,<br/>                &#34;cloudformation:CreateStack&#34;,<br/>                &#34;cloudformation:CreateUploadBucket&#34;,<br/>                &#34;cloudformation:DeleteStack&#34;,<br/>                &#34;cloudformation:Describe*&#34;,<br/>                &#34;cloudformation:EstimateTemplateCost&#34;,<br/>                &#34;cloudformation:ExecuteChangeSet&#34;,<br/>                &#34;cloudformation:Get*&#34;,<br/>                &#34;cloudformation:List*&#34;,<br/>                &#34;cloudformation:UpdateStack&#34;,<br/>                &#34;cloudformation:UpdateTerminationProtection&#34;,<br/>                &#34;cloudformation:ValidateTemplate&#34;,<br/>                &#34;dynamodb:CreateTable&#34;,<br/>                &#34;dynamodb:DeleteTable&#34;,<br/>                &#34;dynamodb:DescribeTable&#34;,<br/>                &#34;dynamodb:DescribeTimeToLive&#34;,<br/>                &#34;dynamodb:UpdateTimeToLive&#34;,<br/>                &#34;ec2:AttachInternetGateway&#34;,<br/>                &#34;ec2:AuthorizeSecurityGroupIngress&#34;,<br/>                &#34;ec2:CreateInternetGateway&#34;,<br/>                &#34;ec2:CreateNetworkAcl&#34;,<br/>                &#34;ec2:CreateNetworkAclEntry&#34;,<br/>                &#34;ec2:CreateRouteTable&#34;,<br/>                &#34;ec2:CreateSecurityGroup&#34;,<br/>                &#34;ec2:CreateSubnet&#34;,<br/>                &#34;ec2:CreateTags&#34;,<br/>                &#34;ec2:CreateVpc&#34;,<br/>                &#34;ec2:DeleteInternetGateway&#34;,<br/>                &#34;ec2:DeleteNetworkAcl&#34;,<br/>                &#34;ec2:DeleteNetworkAclEntry&#34;,<br/>                &#34;ec2:DeleteRouteTable&#34;,<br/>                &#34;ec2:DeleteSecurityGroup&#34;,<br/>                &#34;ec2:DeleteSubnet&#34;,<br/>                &#34;ec2:DeleteVpc&#34;,<br/>                &#34;ec2:Describe*&#34;,<br/>                &#34;ec2:DetachInternetGateway&#34;,<br/>                &#34;ec2:ModifyVpcAttribute&#34;,<br/>                &#34;events:DeleteRule&#34;,<br/>                &#34;events:DescribeRule&#34;,<br/>                &#34;events:ListRuleNamesByTarget&#34;,<br/>                &#34;events:ListRules&#34;,<br/>                &#34;events:ListTargetsByRule&#34;,<br/>                &#34;events:PutRule&#34;,<br/>                &#34;events:PutTargets&#34;,<br/>                &#34;events:RemoveTargets&#34;,<br/>                &#34;iam:AttachRolePolicy&#34;,<br/>                &#34;iam:CreateRole&#34;,<br/>                &#34;iam:DeleteRole&#34;,<br/>                &#34;iam:DeleteRolePolicy&#34;,<br/>                &#34;iam:DetachRolePolicy&#34;,<br/>                &#34;iam:GetRole&#34;,<br/>                &#34;iam:PassRole&#34;,<br/>                &#34;iam:PutRolePolicy&#34;,<br/>                &#34;iot:CreateTopicRule&#34;,<br/>                &#34;iot:DeleteTopicRule&#34;,<br/>                &#34;iot:DisableTopicRule&#34;,<br/>                &#34;iot:EnableTopicRule&#34;,<br/>                &#34;iot:ReplaceTopicRule&#34;,<br/>                &#34;kinesis:CreateStream&#34;,<br/>                &#34;kinesis:DeleteStream&#34;,<br/>                &#34;kinesis:DescribeStream&#34;,<br/>                &#34;lambda:*&#34;,<br/>                &#34;logs:CreateLogGroup&#34;,<br/>                &#34;logs:DeleteLogGroup&#34;,<br/>                &#34;logs:DescribeLogGroups&#34;,<br/>                &#34;logs:DescribeLogStreams&#34;,<br/>                &#34;logs:FilterLogEvents&#34;,<br/>                &#34;logs:GetLogEvents&#34;,<br/>                &#34;logs:PutSubscriptionFilter&#34;,<br/>                &#34;s3:CreateBucket&#34;,<br/>                &#34;s3:DeleteBucket&#34;,<br/>                &#34;s3:DeleteBucketPolicy&#34;,<br/>                &#34;s3:DeleteObject&#34;,<br/>                &#34;s3:DeleteObjectVersion&#34;,<br/>                &#34;s3:GetObject&#34;,<br/>                &#34;s3:GetObjectVersion&#34;,<br/>                &#34;s3:ListAllMyBuckets&#34;,<br/>                &#34;s3:ListBucket&#34;,<br/>                &#34;s3:PutBucketNotification&#34;,<br/>                &#34;s3:PutBucketPolicy&#34;,<br/>                &#34;s3:PutBucketTagging&#34;,<br/>                &#34;s3:PutBucketWebsite&#34;,<br/>                &#34;s3:PutEncryptionConfiguration&#34;,<br/>                &#34;s3:PutObject&#34;,<br/>                &#34;sns:CreateTopic&#34;,<br/>                &#34;sns:DeleteTopic&#34;,<br/>                &#34;sns:GetSubscriptionAttributes&#34;,<br/>                &#34;sns:GetTopicAttributes&#34;,<br/>                &#34;sns:ListSubscriptions&#34;,<br/>                &#34;sns:ListSubscriptionsByTopic&#34;,<br/>                &#34;sns:ListTopics&#34;,<br/>                &#34;sns:SetSubscriptionAttributes&#34;,<br/>                &#34;sns:SetTopicAttributes&#34;,<br/>                &#34;sns:Subscribe&#34;,<br/>                &#34;sns:Unsubscribe&#34;,<br/>                &#34;states:CreateStateMachine&#34;,<br/>                &#34;states:DeleteStateMachine&#34;<br/>            ],<br/>            &#34;Effect&#34;:
    &#34;Allow&#34;,<br/>            &#34;Resource&#34;: &#34;*&#34;<br/>        }<br/>    ],<br/>    &#34;Version&#34;:
    &#34;2012-10-17&#34;<br/>}</pre></div></details><p></p><ul><li>View and copy the
    API Key and Secret to a temporary place. You&#39;ll need them when setting up
    the Harness AWS Connector later in this quickstart.</li></ul><h4 id="undefined">Installing
    Serverless on the Delegate</h4><p>The Delegate(s) used by the AWS Connector must
    have Serverless installed.</p><p>To install Serverless on a Kubernetes Delegate,
    edit the Delegate YAML to install Serverless when the Delegate pods are created.</p><p>Open
    the Delegate YAML in a text editor.</p><p>Locate the Environment variable <code>INIT_SCRIPT</code> in
    the <code>StatefulSet</code>.</p><pre class="hljs python">...<br/>        - name:
    INIT_SCRIPT<br/>          value: &#34;&#34;<br/>...</pre><p>Replace the value
    with the follow Serverless installation script.</p><pre class="hljs bash">...<br/>        -
    name: INIT_SCRIPT<br/>          value: |-<br/>            #!/bin/bash<br/>            echo
    &#34;Start&#34;<br/>            export DEBIAN_FRONTEND=noninteractive<br/>            echo
    &#34;non-inte&#34;<br/>            apt-get update<br/>            echo &#34;updagte&#34;<br/>            apt
    install -yq npm<br/>            echo &#34;npm&#34;<br/>            npm install
    -g serverless@v2.50.0<br/>            echo &#34;Done&#34;<br/>...</pre><div class="note-callout">In
    rare cases when the Delegate OS does not support <code>apt</code> (like Red Hat
    Linux), you can can edit this script to install <code>npm</code>. The rest of
    the code should remain the same.</div><p>Save the YAML file as <strong>harness-delegate.yml</strong>.</p><p>You
    can now apply the Delegate YAML: <code>kubectl apply -f harness-delegate.yml</code>.</p><h4>Serverless
    and ​Enable cross-account access (STS Role)</h4><p>If you use the ​<strong>Enable
    cross-account access (STS Role)</strong> option in the AWS Connector for a Serverless
    Lambda deployment, the Delegate that is used by the Connector must have the AWS
    CLI installed.</p><p>The AWS CLI is not required for the other authentication
    methods.</p><p>For steps on installing software with the Delegate, see <a href="/article/yte6x6cyhn-run-scripts-on-delegates">Run
    Initialization Scripts on Delegates</a>.</p><h3>Switching Policies</h3><p>If the
    IAM role used by your AWS Connector does not have the policies required by the
    AWS service you want to access, you can modify or switch the role.</p><p>This
    entails changing the role assigned to the AWS account or Harness Delegate your
    AWS Connector is using.</p><p>When you switch or modify the IAM role used by the
    Connector, it might take up to 5 minutes to take effect.</p><h3>AWS Connector
    Settings</h3><p>The AWS Connector settings are described below.</p><h4>Name</h4><p>The
    unique name for this Connector.</p><h4>ID</h4><p>See <a href="https://newdocs.helpdocs.io/article/li0my8tcz3-entity-identifier-reference">Entity
    Identifier Reference</a>.</p><h4>Description</h4><p>Text string.</p><h4>Tags</h4><p>See
    <a href="https://newdocs.helpdocs.io/article/i8t053o0sq-tags-reference">Tags Reference</a>.</p><h4>Credentials</h4><div
    class="note-callout">Ensure that the AWS IAM roles applied to the credentials
    you use (the Harness Delegate or the access key) includes the policies needed
    by Harness to deploy to the target AWS service.</div><div class="warning-callout">The
    <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target infrastructure.</div><p></p><p>Credentials
    that enable Harness to connect your AWS account.</p><p>There are three options:</p><ul><li>Assume
    IAM Role on Delegate</li><li>AWS Access Keys manually</li><li>Use IRSA</li></ul><p>The
    settings for each option are described below.</p><h3>Assume IAM Role on Delegate</h3><div
    class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target infrastructure.</div><p></p><p>This
    is often the simplest method for connecting Harness to your AWS account and services.</p><p>Once
    you select this option, you can select a Delegate in the next step of the AWS
    Connector.</p><p>Typically, the Delegate(s) is running in the target infrastructure.</p><h3>AWS
    Access Key</h3><p>The access key and your secret key of the IAM Role to use for
    the AWS account.</p><p>You can use Harness secrets for both. See <a href="/article/osfw70e59c-add-use-text-secrets">Add
    Text Secrets</a>.</p><h4>Access and Secret Keys</h4><p>See <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"
    target="_blank">Access Keys (Access Key ID and Secret Access Key)</a> from AWS.</p><h3>Use
    IRSA (IAM roles for service accounts)</h3><p>Select <strong>Use IRSA</strong>
    if you want to have the Harness Kubernetes Delegate in AWS EKS use a specific
    IAM role when making authenticated requests to resources.</p><p>By default, the
    Harness Kubernetes Delegate uses a ClusterRoleBinding to the <strong>default</strong>
    service account. Instead, you can use AWS IAM roles for service accounts (IRSA)
    to associate a specific IAM role with the service account used by the Harness
    Kubernetes Delegate.</p><div class="note-callout">See <a href="https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html"
    target="_blank">IAM roles for service accounts</a> from AWS.</div><p>Setting up
    this feature requires a few more steps than other methods, but it is a simple
    process.</p><div class="note-callout">The following steps are for a new Delegate
    installation and new AWS Connector. If you updating an existing Delegate and AWS
    Connector, you can simply edit the Delegate YAML for your existing Delegate as
    described below, and select the <strong>Use IRSA</strong> option in your AWS Connector.</div><p>Create
    the IAM role with the policies you want the Delegate to use. The policies you
    select with depend on what AWS resources you are deploying via the Delegate. See
    the different <a href="#aws_policies_required">AWS Policies Required</a> sections
    in this document.</p><p>In the cluster where the Delegate will be installed, create
    a service account and attach the IAM role to it.</p><p>Here is an example of how
    to create a new service account in the cluster where you will install the Delegate
    and attach the IAM policy to it:</p><pre>eksctl create iamserviceaccount \<br/>    --name=cdp-admin
    \<br/>    --namespace=default \<br/>    --cluster=test-eks \<br/>    --attach-policy-arn=&lt;policy-arn&gt;
    \<br/>    --approve \<br/>    --override-existing-serviceaccounts —region=us-east-1</pre><p></p><p>In
    Harness, download the Harness Kubernetes Delegate YAML file. See <a href="/article/f9bd10b3nj-install-a-kubernetes-delegate">Install
    a Kubernetes Delegate</a>.</p><p>Open the Delegate YAML file in text editor.</p><p>Add
    service account with access to IAM role to Delegate YAML.</p><p>There are two
    sections in the Delegate YAML that you must update.</p><p>First, update the <code>ClusterRoleBinding</code>
    by adding replacing the subject name <code>default</code> with the name of the
    service account with the attached IAM role.</p><p></p><table><tbody><tr><td><p>Old
    <code>ClusterRoleBinding</code>:</p></td><td><p>New <code>ClusterRoleBinding</code>
    (for example, using the name <code>iamserviceaccount</code>):</p></td></tr><tr><td><pre>---<br/>apiVersion:
    rbac.authorization.k8s.io/v1beta1<br/>kind: ClusterRoleBinding<br/>metadata:<br/>  name:
    harness-delegate-cluster-admin<br/>subjects:<br/>  - kind: ServiceAccount<br/>    name:
    default<br/>    namespace: harness-delegate-ng<br/>roleRef:<br/>  kind: ClusterRole<br/>  name:
    cluster-admin<br/>  apiGroup: rbac.authorization.k8s.io<br/>---</pre></td><td><pre>---<br/>apiVersion:
    rbac.authorization.k8s.io/v1beta1<br/>kind: ClusterRoleBinding<br/>metadata:<br/>  name:
    harness-delegate-cluster-admin<br/>subjects:<br/>  - kind: ServiceAccount<br/>    name:
    iamserviceaccount<br/>    namespace: harness-delegate-ng<br/>roleRef:<br/>  kind:
    ClusterRole<br/>  name: cluster-admin<br/>  apiGroup: rbac.authorization.k8s.io<br/>---</pre></td></tr></tbody></table><p></p><p>Next,
    update StatefulSet spec with the new <code>serviceAccountName</code>.</p><p></p><table><tbody><tr><td><p>Old
    StatefulSet spec <code>serviceAccountName</code>:</p></td><td><p>New StatefulSet
    spec serviceAccountName (for example, using the name <code>iamserviceaccount</code>):</p></td></tr><tr><td><pre>...<br/>    spec:<br/>      containers:<br/>      -
    image: harness/delegate:latest<br/>        imagePullPolicy: Always<br/>        name:
    harness-delegate-instance<br/>        ports:<br/>          - containerPort: 8080<br/>...</pre></td><td><pre>...<br/>    spec:<br/>      serviceAccountName:
    iamserviceaccount<br/>      containers:<br/>      - image: harness/delegate:latest<br/>        imagePullPolicy:
    Always<br/>        name: harness-delegate-instance<br/>        ports:<br/>          -
    containerPort: 8080<br/>...</pre></td></tr></tbody></table><p></p><p>Save the
    Delegate YAML file.</p><p>Install the Delegate in your EKS cluster and register
    the Delegate with Harness. See <a href="/article/f9bd10b3nj-install-a-kubernetes-delegate">Install
    a Kubernetes Delegate</a>.</p><div class="note-callout">When you install the Delegate
    in the cluster, the serviceAccount you added is used and the environment variables
    <code>AWS_ROLE_ARN</code> and <code>AWS_WEB_IDENTITY_TOKEN_FILE</code> are added
    automatically by EKS.</div><p>Create a new AWS Connector.</p><p>In <strong>Credentials</strong>,
    select <strong>Use IRSA</strong>.</p><p>In <strong>Set up</strong> <strong>Delegates</strong>,
    select the Delegate you used.</p><p>Click <strong>Save and Continue</strong> to
    verify the Delegate credentials.</p><h3>Enable cross-account access (STS Role)</h3><div
    class="note-callout">Assume STS Role is supported for EC2 and ECS. It is supported
    for EKS if you use the IRSA option, described above.</div><div class="warning-callout">The
    <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target infrastructure.</div><p></p><p>If
    you want to use one AWS account for the connection, but you want to deploy in
    a different AWS account, use the <strong>Assume STS Role</strong> option.</p><p>This
    option uses the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html"
    target="_blank">AWS Security Token Service</a> (STS) feature.</p><p>In this scenario,
    the AWS account used for AWS access in <strong>Credentials</strong> will assume
    the IAM role you specify in <strong>Role ARN</strong> setting.</p><div class="note-callout">The
    Harness Delegate(s) always runs in the account you specify in <strong>Credentials</strong> via <strong>Access/Secret
    Key</strong> or <strong>Assume IAM Role on Delegate</strong>.</div><p>To assume
    the role in <strong>Role ARN</strong>, the AWS account in <strong>Credentials</strong> must
    be trusted by the role. The trust relationship is defined in the <strong>Role
    ARN</strong> role&#39;s trust policy when the role is created. That trust policy
    states which accounts are allowed to give that access to users in the account.</p><div
    class="note-callout">You can use <strong>Assume STS Role</strong> to establish
    trust between roles in the same account, but cross-account trust is more common.</div><h4>Role
    ARN</h4><p>The Amazon Resource Name (ARN) of the role that you want to assume.
    This is an IAM role in the target deployment AWS account.</p><p>The assumed role
    in <strong>Role ARN</strong> must have all the IAM policies required to perform
    your Harness deployment, such as Amazon S3, ECS (Existing Cluster), and AWS EC2 policies.
    For more information, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html"
    target="_blank">Assuming an IAM Role in the AWS CLI</a> from AWS.</p><h4>External
    ID</h4><p>If the administrator of the account to which the role belongs provided
    you with an external ID, then enter that value.</p><p>For more information, see
    <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html">How
    to Use an External ID When Granting Access to Your AWS Resources to a Third Party</a> from
    AWS.</p><div class="note-callout">The AWS <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">IAM
    Policy Simulator</a> is a useful tool for evaluating policies and access.</div><p></p><h3>Test
    Region and AWS GovCloud Support</h3><p>By default, Harness uses the <strong>us-east-1</strong>
    region to test the credentials for this Connector.</p><p>If you want to use an
    AWS GovCloud account for this Connector, select it in <strong>Test Region</strong>.</p><p>GovCloud
    is used by organizations such as government agencies at the federal, state, and
    local level, as well as contractors, educational institutions. It is also used
    for regulatory compliance with these organizations.</p><h4>Restrictions</h4><p>You
    can access AWS GovCloud with AWS GovCloud credentials (AWS GovCloud account access
    key and AWS GovCloud IAM user credentials).</p><p>You cannot access AWS GovCloud
    with standard AWS credentials. Likewise, you cannot access standard AWS regions
    using AWS GovCloud credentials.</p><h3>Troubleshooting</h3><p>See <a href="/article/jzklic4y2j-troubleshooting">Troubleshooting
    Harness</a>.</p><div class="warning-callout">The <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
    target="_blank">DescribeRegions</a> action is required for all AWS Connectors
    regardless of what AWS service you are using for your target infrastructure.</div><h3>See
    Also</h3><ul><li><a href="/article/yykfduond6-gcs-connector-settings-reference">Google
    Cloud Platform (GCP) Connector Settings Reference</a></li><li><a href="/article/sjjik49xww-kubernetes-cluster-connector-settings-reference">Kubernetes
    Cluster Connector Settings Reference</a></li></ul><p></p>'
  slug: aws-connector-settings-reference
  tags: []
  is_live: true
