type: article
article_id: cbj5uuzpbu
user_id: 2c4rk0cied
category_id: c40ko6e87n
author:
  name: Renu Bhaskaran
  profile_image: https://www.gravatar.com/avatar/7d21186ef4e85110a0bd60a931c90361?d=mm&s=150
title: Error Tracking in SRM
slug: error-tracking-in-srm
description: This topic walks you through the steps to add an Error Tracking Health
  Source in SRM
short_version: This topic walks you through the steps to add an Error Tracking Health
  Source in SRM
tags:
- error tracking
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-01T22:05:41.537551Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Error Tracking in SRM
  description: This topic walks you through the steps to add an Error Tracking Health
    Source in SRM
  short_version: This topic walks you through the steps to add an Error Tracking Health
    Source in SRM
  body: '<p>Error Tracking in the Harness <a href="/article/l8up27c7rn-service-reliability-management-basics#sort=relevancy&amp;f:@commonsource=[NextGen%20Docs]">Service
    Reliability Management (SRM)</a> module is a continuous reliability solution that
    enables you to identify, triage, and resolve errors in your Service. This helps
    to implement rapid code changes by ensuring that the code is always in a deployable
    state.</p><p>This topic walks you through the steps to add an Error Tracking Health
    Source in SRM to identify and detect errors in your Service.</p><h3>Why Do You
    Need Error Tracking?</h3><p>As release velocity increases so does the risk to
    code quality. Using Harness Error Tracking you can:</p><ul><li>Identify and detect
    critical issues during each release, such as errors and slowdowns.</li><li>Get
    to the root of errors and exceptions in production and staging environments.</li><li>Get
    code-level visibility into your Java applications in testing and production.</li><li>Automate
    issue root-cause analysis at runtime, eliminating the need to scan logs to identify
    critical errors.</li><li>Analyze and determine the root cause of detected issues
    using the <a href="/article/cbj5uuzpbu-error-tracking-in-srm#step_3_view_automated_root_cause_arc_screen">Automated
    Root Cause (ARC)</a> screen.</li><li>Reduce mean time to resolution.</li></ul><h3
    id="undefined">Prerequisites</h3><p>The Harness Error Tracking Agent is installed
    on a Java application to capture application code and variables. </p><p><strong>You
    must install an Error Tracking Agent to use Harness Error Tracking for your application
    or Service.</strong> </p><p>Review the following to make sure that you have met
    the requirements to use Harness Error Tracking.</p><ul><li><a href="/article/nx99xfcoxz-install-the-error-tracking-agent#compatibility_and_requirements">Compatibility
    and Requirements</a>.</li><li><a href="/article/nx99xfcoxz-install-the-error-tracking-agent">Install
    an Error Tracking Agent</a>.</li></ul><h3>Step 1: Add a Monitored Service</h3><p>In
    the Harness Project with the Service, you want to monitor, navigate to the <strong>Service
    Reliability Management</strong> module.</p><p>Click <strong>Monitored Services.</strong></p><figure><a
    href="https://files.helpdocs.io/i5nl071jo5/articles/trlszsj5lh/1647404699590/screenshot-2022-03-16-at-9-54-38-am.png"><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/trlszsj5lh/1647404699590/screenshot-2022-03-16-at-9-54-38-am.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></a></figure><p>Click <strong>New
    Monitored Service</strong>. The <strong>Add New Monitored Service</strong> settings
    appear.</p><figure><a href="https://files.helpdocs.io/i5nl071jo5/articles/rvneg74vmk/1634045442446/screenshot-2021-10-12-at-7-00-22-pm.png"><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/rvneg74vmk/1634045442446/screenshot-2021-10-12-at-7-00-22-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></a></figure><p>In
    <strong>Overview</strong>, <strong>Application</strong> is selected by default
    in the <strong>Type</strong> field. In <strong>Create or select a Service</strong>,
    choose the Harness Service to be monitored from the list. Click <strong>Add New</strong>
    to create a new Service. A Service represents your microservices and other workloads.</p><p>In <strong>Create
    or select an Environment</strong>, choose the Environment where the Harness Service
    is deployed from the list. Click <strong>Add New</strong> to create a new Environment.
    Environment represents your deployment targets logically (QA, Prod, etc).</p><p>The <strong>Monitored
    Service Name</strong> field auto-populates the concatenation of the Service and
    Environment names.</p><p>Click <strong>Save</strong>.</p><h3>Step 2: Add a Health
    Source</h3><p>Click <strong>Add New Health Source</strong> in the <strong>Add
    New Monitored Service</strong> settings.</p><p>The <strong>Add New Health Source</strong> settings
    appear.</p><figure><a href="https://files.helpdocs.io/i5nl071jo5/articles/trlszsj5lh/1647411716886/screenshot-2022-03-16-at-11-51-40-am.png"><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/trlszsj5lh/1647411716886/screenshot-2022-03-16-at-11-51-40-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></a></figure><p>In <strong>Select
    Health Source type</strong>, select Error Tracking.</p><p>In <strong>Health Source
    Name</strong>, enter a name for the Health Source.</p><p>Click <strong>Select
    Connector</strong>. In the <strong>Connector</strong> settings, you can select
    an existing Connector or click <strong>New Connector</strong>. Harness uses Connectors
    to authenticate and perform operations with third-party tools. Connectors contain
    the information necessary to integrate and work with 3rd party tools. For more
    details, see <a href="/category/o1zhrfo8n5-connectors#sort=relevancy&amp;f:@commonsource=[NextGen%20Docs]">Connectors</a>.</p><p>Click
    <strong>New Connector</strong>.</p><p>In <strong>Name</strong>, enter a name for
    the Connector. For example Quickstart.</p><p>Click <strong>Continue</strong>.</p><p>In
    <strong>URL</strong>, enter the URL needed for Error Tracking. For example, https://qa.harness.io/prod1/et
    for prod1.</p><p>In <strong>Encrypted Key</strong>, click <strong>Create or Select
    a Secret</strong>. You can either select an existing API Key or create a new Secret
    by clicking <strong>New Secret Text</strong>. Harness includes a built-in Secret
    Management feature that enables you to store encrypted secrets, such as access
    keys, and use them in your Harness Connectors and Pipelines. You can choose to
    use your own secrets management solution, or the built-in Harness Secrets Manager. 
    For more details, see <a href="/article/hngrlb7rd6-harness-secret-manager-overview#sort=relevancy&amp;f:@commonsource=[NextGen%20Docs]">Secret
    Management Overview</a>.</p><p>Click <strong>New Secret Text</strong>.</p><p>In
    <strong>Secret Name</strong>, enter a name for the encrypted text.</p><p>In <strong>Secret
    Value</strong>, enter a value for the encrypted text. You can <a href="/article/tdoad7xrh9-add-and-manage-api-keys#create_personal_access_token">create</a>
    and <a href="/article/tdoad7xrh9-add-and-manage-api-keys#generate_personal_access_token">generate</a>
    an API Token from your user profile that allows you to make authorized API calls
    to Harness.</p><p>Click <strong>Apply Selected</strong>. The Connector is added
    to the Health Source.</p><p>Click <strong>Next</strong>.</p><h3>Step 3: Setup
    Delegates</h3><p>The Harness Delegate is a service you run in your own environment,
    such as your local network, VPC, or cluster. The Delegate connects all of your
    artifact, infrastructure, collaboration, verification, and other providers with
    the Harness Manager. For more details, see <a href="/category/9i5thr0ot2-delegates#sort=relevancy&amp;f:@commonsource=[NextGen%20Docs]">Delegates</a>.</p><p>In
    <strong>Delegates Setup</strong>, you can either select <strong>Connect via any
    available Delegate</strong> or <strong>Connect only via Delegates with all of
    the following tags</strong> and choose an option from the list.</p><p>Click <strong>Save
    and Continue</strong>.</p><p>Once the verification is complete, click <strong>Finish</strong>.</p><p>The
    newly added Health Source is now listed under Health Sources.</p><p>Click <strong>Save</strong>
    to save this configuration.</p><h3>Step 4: Install an Error Tracking Agent</h3><p>The
    Harness Error Tracking Agent is installed on a Java application to capture application
    code and variables. You must install an Error Tracking Agent to use Harness Error
    Tracking for your application or Service.</p><p>See <a href="/article/nx99xfcoxz-install-the-error-tracking-agent">Install
    an Error Tracking Agent</a>.</p><h3>Step 5: View Automated Root Cause (ARC) Screen</h3><p>Once
    the Error Tracking Health Source is added, you can view the identified errors
    on the <strong>Overall Health Score</strong> timeline, in the <a href="/article/lwi37ku94x-change-impact-analysis-quickstart#step_4_view_service_health">Service
    Health dashboard</a>.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/cbj5uuzpbu/1650346941490/image-1.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><ol><li>Scroll
    up on the <strong>Service Health</strong> dashboard, till you see <strong>Errors</strong>,
    listing all the identified errors.<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/cbj5uuzpbu/1650347030576/image-2.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure></li><li>Click
    any listed error to access the <strong>Automated Root Cause</strong> (ARC) screen.
    The ARC screen offers a powerful mechanism to get to the root of errors and exceptions
    in production and staging environments.</li></ol><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/cbj5uuzpbu/1649847041684/screenshot-2022-04-06-at-7-03-48-pm.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p></p><p>The
    ARC screen provides the following details:</p><ul><li>Origin of the error and
    the error message it throws.</li><li>Date on which the error was first identified
    and the number of times it appeared.</li><li><strong>Code</strong> tab displays
    the complete stack trace and associated source code, causing the issue.</li><li>Highlights
    the line of code in the source code where the error occurred.</li><li><strong>Recorded
    Variables</strong> displays the complete variable state from the moment the error
    occurred.</li><li><strong>Log</strong> tab displays the log statements.</li><li><strong>Environment</strong>
    tab displays the internal environment state at the moment when the error occurred,
    including memory usage (heap and non-heap), basic system information, CPU usage,
    and more.</li></ul><p></p>'
  slug: error-tracking-in-srm
  tags:
  - error tracking
  is_live: true
