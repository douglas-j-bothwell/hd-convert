type: article
article_id: hv2758ro4e
user_id: znazf3hcp9
category_id: kx4hs8bn38
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/77114bb5eef5503c5a09ad7655120b17?d=mm&s=150
title: Key concepts
slug: learn-harness-key-concepts
description: Before you begin using Harness modules, you should be familiar with the
  the key concepts. Account. A Harness account is the top-level entity under which
  everything is organized. Within an account you…
short_version: Before you begin using Harness modules, you should be familiar with
  the the key concepts. Account. A Harness account is the top-level entity under which
  everything is organized. Within an account you…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-09T14:24:26.078996Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Key concepts
  description: ""
  short_version: ""
  body: '<p>Before you begin using Harness modules, you should be familiar with the
    the key concepts.</p><h3>Account</h3><p>A Harness account is the top-level entity
    under which everything is organized.</p><p>Within an account you have organizations,
    and within organizations you have projects. You can add resources at the account
    level, and also at the organization and project levels.</p><p>All organizations
    and projects in the account can use the account&#39;s resources.</p><p>All projects
    in the organization can use the org&#39;s resources.</p><div class="note-callout"><strong>Why
    is this great?</strong> Each team can manage its resources within its project
    and not have to bother account admins every time they want to add a Connector
    or a secret. Projects make teams independent. This is part of Harness&#39; democratization
    goals for developers.</div><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611687744214/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure></div></details><h3>Organizations
    and Projects</h3><p>Harness Organizations (Orgs) allow you to group projects that
    share the same goal. For example, all projects for a business unit or division.</p><p>Within
    each Org you can add several Harness Projects.</p><p></p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611688513091/image.png"/></figure></div></details><p>A
    Harness Project contains Harness Pipelines, users, and resources that share the
    same goal. For example, a Project could represent a business unit, division, or
    simply a development project for an app.</p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611688702436/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></div></details><p>Think
    of Projects as a common space for managing teams working on similar technologies.
    A space where the team can work independently and not need to bother account admins
    or even org admins when new entities like Connectors, Delegates, or secrets are
    needed.</p><p>Much like account-level roles, project members can be assigned Project
    Admin, Member, and Viewer roles.</p><p></p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1612379940876/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></div></details><p>Project
    users have at least view access to all configuration and runtime data of a Project
    and share the same assets (Environments, Services, Infrastructure, etc).</p><p>See
    <a href="/article/7fibxie636-projects-and-organizations">Projects and Organizations</a>.</p><h3>Product
    Modules</h3><p>Your project can add Harness products as modules, such as Continuous
    Integration or Continuous Delivery.</p><p></p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1612380125850/image.png"/></figure></div></details><h3>Pipelines</h3><p>Typically,
    a Pipeline is an end-to-end process that delivers a new version of your software.
    But a Pipeline can be much more: a Pipeline can be a cyclical process that includes
    integration, delivery, operations, testing, deployment, real-time changes, and
    monitoring.</p><p></p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1612380258171/image.png"/></figure></div></details><p>For
    example, a Pipeline can use the CI module to build, test, and push code, and then
    a CD module to deploy the artifact to your production infrastructure.</p><h3>Pipeline
    Studio</h3><p>You build Pipelines in Pipeline Studio.</p><p>You can create Pipelines
    visually or using code, and switch back and forth as needed.</p><p></p><details><summary>See
    a visual example</summary><div><table><tbody><tr><td><p><strong>Visual</strong></p></td><td><p><strong>YAML</strong></p></td></tr><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611690037204/image.png"/></figure></td><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611690095876/image.png"/></figure></td></tr></tbody></table></div></details><p>See
    <a href="/article/1eishcolt3-harness-yaml-quickstart">Harness YAML Quickstart</a>.</p><p>Pipeline
    Studio guides you in setting up and running your Pipelines with ready-to-use steps.</p><p></p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1611690468651/image.png"/></figure></div></details><h3>Stages</h3><p>A
    Stage is a subset of a Pipeline that contains the logic to perform one major segment
    of the Pipeline process. Stages are based on the different milestones of your
    Pipeline, such as building, approving, and delivering.</p><p></p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631831083396/clean-shot-2021-09-16-at-15-24-27.png"/></figure></div></details><p>Some
    stages, like a Deploy stage, use strategies that automatically add the necessary
    steps.</p><p></p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631831244086/clean-shot-2021-09-16-at-15-26-57.png"/></figure></div></details><p>See
    <a href="/article/2chyf1acil-add-a-stage">Add a Stage</a>.</p><h3>Steps and Step
    Groups</h3><p>A step is an individual operation in a stage.</p><p>Steps can be
    run in sequential and parallel order.</p><p>A Step Group is a collection of steps
    that share the same logic such as the same rollback strategy.</p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631831278507/clean-shot-2021-09-16-at-15-27-44.png"/></figure></div></details><p>See
    <a href="/article/ihnuhrtxe3-run-steps-in-parallel-using-a-step-group">Run Steps
    in a Step Group</a>.</p><h3>Services</h3><p>A Service represents your microservices
    and other workloads logically.</p><p>A Service is a logical entity to be deployed,
    monitored, or changed independently.</p><p></p><details><summary>See a visual
    example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631831584874/image.png"/></figure></div></details><h4>Service
    Instance</h4><p>Service Instances represent the dynamic instantiation of a service
    you deploy via Harness.</p><p>For example, for a service representing a Docker
    image, Service Instances are the number of pods running with the Docker image.</p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1642186360777/image.png"/></figure></div></details><p></p><h4>Service
    Definitions</h4><p>When a Service is added to the stage in a Pipeline, you define
    its Service Definition. Service Definitions represent the real artifacts, manifests,
    and variables of a Service. They are the actual files and variable values.</p><p>You
    can also propagate and override a Service in subsequent stages by selecting its
    name in that stage&#39;s Service settings.</p><details><summary>See a visual example</summary><div><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631831865846/clean-shot-2021-09-16-at-15-37-17.png"/></figure></div></details><p>See
    <a href="/article/phiv0zaoex-monitor-cd-deployments">Monitor Deployments and Services
    in CD Dashboards</a>.</p><h3>Environments</h3><p>Environments represent your deployment
    targets logically (QA, Prod, etc). You can add the same Environment to as many
    Stages as you need.</p><h4>Infrastructure Definition</h4><p>Infrastructure Definitions
    represent an Environment&#39;s infrastructure physically. They are the actual
    clusters, hosts, etc.</p><h3>Connectors</h3><p>Connectors contain the information
    necessary to integrate and work with 3rd party tools.</p><p>Harness uses Connectors
    at Pipeline runtime to authenticate and perform operations with a 3rd party tool.</p><p>For
    example, a GitHub Connector authenticates with a GitHub account and repo and fetches
    files as part of a build or deploy Stage in a Pipeline.</p><p>See <a href="/category/o1zhrfo8n5">Connectors
    How-tos</a>.</p><h3>Secrets Management</h3><p>Harness includes built-in Secrets
    Management to store your encrypted secrets, such as access keys, and use them
    in your Harness account. Harness integrates with all popular Secrets Managers.</p><p></p><details><summary>See
    a visual example</summary><div><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/hv2758ro4e/1631832069852/image.png"/></figure></div></details><p>See
    <a href="/article/hngrlb7rd6-harness-secret-manager-overview">Harness Secrets
    Management Overview</a>.</p><h3>YAML and Git</h3><p>You can sync your Harness
    account, orgs, and projects with your Git repo to manage Harness entirely from
    Git.</p><p>Harness can respond to Git events to trigger Pipelines and pass in
    event data.</p><p>See <a href="/article/utikdyxgfz-harness-git-experience-overview">Harness
    Git Experience Overview</a>.</p><h3>Recap</h3><p>What you&#39;ve seen is how Harness
    integrates with your resources and tools, and how you can build Pipelines.</p><p>Harness
    helps you to model any kind of software development and delivery process in minutes.</p><p>It
    allows for flexibility while making best practices easy to follow and poor practices
    difficult to implement.</p><p>Most importantly, it takes away the pain points
    of software development, delivery, verification, etc, and gives you confidence
    in their management and success.</p><p><strong>What&#39;s next?</strong> <a href="https://app.harness.io/auth/#/signup/"
    target="_blank">Sign up for Harness</a> and then try a <a href="/article/u8lgzsi7b3-quickstarts">quickstart</a>.</p><p></p>'
  slug: learn-harness-key-concepts
  tags: []
  is_live: true
