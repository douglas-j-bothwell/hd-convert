type: article
article_id: 2oo63r9rwb
user_id: mfr0nxh4be
category_id: f6rh2cdvx9
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: IIS (.NET) Quickstart
slug: iis-net-quickstart
description: Deploy an IIS website to a Windows Server using Harness.
short_version: Deploy an IIS website to a Windows Server using Harness.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T17:18:49.959869Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: IIS (.NET) Quickstart
  description: Deploy an IIS website to a Windows Server using Harness.
  short_version: Deploy an IIS website to a Windows Server using Harness.
  body: "<p>This quickstart shows you how to deploy an IIS website to an AWS EC2 Windows
    instance using Harness. We will pull a publicly-available IIS Website zip file
    from Artifactory and deploy it to an EC2 Windows instance in your AWS account.</p><p>Harness
    connects to your target Windows instances using the Windows Remote Management
    (WinRM) protocol and executes PowerShell commands to deploy your IIS websites.
    We&#39;ll show you how to set up and use both for your IIS deployments.</p><div
    class=\"note-callout\">We&#39;ll only be deploying an IIS Website, but you can
    follow the same steps for Harness IIS Application and IIS Virtual Directory deployments.
    IIS requires that an IIS Website already exists on the target host(s) before deploying
    an IIS Application and IIS Virtual Directory. For information about IIS sites,
    applications, and virtual directories, see <a href=\"https://docs.microsoft.com/en-us/iis/get-started/planning-your-iis-architecture/understanding-sites-applications-and-virtual-directories-on-iis\"
    target=\"_blank\">Understanding Sites, Applications, and Virtual Directories on
    IIS 7</a>.</div><h3 id=\"objectives\">Objectives</h3><p>You&#39;ll learn how to:</p><ul><li>Install
    and run the Harness Shell Script Delegate on an EC2 host.</li><li>Connect Harness
    with your AWS account.</li><li>Connect Harness with Artifactory.</li><li>Connect
    Harness with your target host(s) over WinRM.</li><li>Specify the IIS Website files
    and Windows settings to use.</li><li>Specify the target Windows host(s) in AWS
    EC2.</li><li>Create and deploy an IIS Website Basic Workflow.</li><li>Verify deployment
    in Windows Server.</li></ul><h3>Before You Begin</h3><ul><li>Review <a href=\"/article/4o7oqwih6h-harness-key-concepts\">Harness
    Key Concepts</a> to establish a general understanding of Harness.</li><li><strong>AWS
    security group for EC2 instances</strong> — Ensure the AWS security group used
    for the Harness Delegate ECS host and target EC2 Windows instances has the following
    port settings:<ul><li><strong>Outbound rules for Harness —</strong> SSH port 22,
    HTTP 80, HTTPS port 443.</li><li><strong>Inbound/outbound rules for Harness WinRM
    connection</strong> — WINRM-HTTP port 5985, WINRM-HTTPS port 5986.</li></ul></li><li><strong>EC2
    Windows Instance for target host</strong> — In this quickstart we use:<ul><li><strong>AMI:</strong>
    Free tier Microsoft Windows Server 2019 Base (ami-0ed87187d8ca91f34).</li><li><strong>Instance
    type:</strong> t2.large.</li><li><strong>Tags:</strong> Give the target host the
    Tag <strong>Name:WinRM</strong>. This will help us select it later.</li></ul></li><li><strong>IIS
    Web Server Role on target host</strong> — Before deploying the IIS website (or
    IIS application or virtual directory) to your Windows instance, there must be
    an existing IIS Web Server Role on the instance. For steps on installation, see
    <a href=\"https://docs.microsoft.com/en-us/iis/web-hosting/web-server-for-shared-hosting/installing-the-web-server-role\"
    target=\"_blank\">Installing the Web Server Role</a> from Microsoft.</li><li><strong>WinRM
    configured on target host</strong> — When you set up your EC2 Windows instance,
    add the following PowerShell script in <strong>Step 3: Configure Instance Details</strong>
    &gt; <strong>User data</strong>:</li></ul><p></p><div class=\"hd--md\" data-hd-markdown=\"&lt;details&gt;\n
    \ &lt;summary style=&#34;font-size: 16px;outline: none;border: none; color: #000000;
    margin-bottom:20px; text-indent:40px&#34;&gt;WinRM PowerShell Script:&lt;/summary&gt;\n&lt;pre
    style=&#34;margin-left:40px&#34;&gt;&amp;lt;powershell&amp;gt;\nInvoke-Expression
    ((New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&#39;))
    \n&amp;lt;/powershell&amp;gt;&lt;/pre&gt;\n&lt;p style=&#34;margin-left:40px&#34;&gt;Here
    is an example of the script added in User data:&lt;/p&gt;\n&lt;img style=&#34;margin-left:40px&#34;
    width=&#34;70%&#34; height=&#34;70%&#34; src=&#34;https://files.helpdocs.io/kw8ldg1itf/articles/tr8ddfm4lz/1542157419725/image.png&#34;&gt;\n&lt;p
    style=&#34;margin-left:40px&#34;&gt;To verify that WinRM is running on your Windows
    instance, log into your Windows instance and run this command:&lt;/p&gt;\n&lt;pre
    style=&#34;margin-left:40px&#34;&gt;winrm e winrm/config/listener&lt;/pre&gt;\n&lt;/details&gt;\"><details>\n
    \ <summary style=\"font-size: 16px;outline: none;border: none; color: #000000;
    margin-bottom:20px; text-indent:40px\">WinRM PowerShell Script:</summary>\n<pre
    style=\"margin-left:40px\">&lt;powershell&gt;<br/>\nInvoke-Expression ((New-Object
    System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1&#39;))
    <br/>\n&lt;/powershell&gt;</pre>\n<p style=\"margin-left:40px\">Here is an example
    of the script added in User data:</p>\n<img style=\"margin-left:40px\" width=\"70%\"
    height=\"70%\" src=\"https://files.helpdocs.io/kw8ldg1itf/articles/tr8ddfm4lz/1542157419725/image.png\"/>\n<p
    style=\"margin-left:40px\">To verify that WinRM is running on your Windows instance,
    log into your Windows instance and run this command:</p>\n<pre style=\"margin-left:40px\">winrm
    e winrm/config/listener</pre>\n</details></div><ul><li><strong>EC2 Linux Instance
    for Harness Shell Script Delegate</strong> - The EC2 Linux instance for the Harness
    Delegate must meet the following requirements:<ul><li>Linux/UNIX server.</li><li>​Minimum
    1 CPU.</li><li>Minimum 8GB RAM. For example, an AWS EC2 instance type such as
    m5a.xlarge has 16GB of RAM, 8 for the Delegate and 8 for the remaining operations.</li><li>Minimum
    6GB Disk space.</li><li>Outbound Access: HTTP, HTTPS, SSH. This enables the Delegate
    to communicate with Harness and Artifactory.</li><li>IAM role: AmazonEC2FullAccess.
    This role is not needed for the target EC2 Windows host(s).</li></ul></li></ul><p>Setting
    up the AWS roles, networking, and instances takes the most time. Once you&#39;re
    done, creating your Harness deployment is quick and easy.</p><h3>Visual Summary</h3><p>The
    following diagram shows the very simple topology for this tutorial:</p><p></p><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583955591627/image.png\"/></figure><p>You
    will install the Harness Shell Script Delegate on an EC2 instance in your AWS
    account and connect Harness to AWS and Artifactory. Next, you&#39;ll set up your
    IIS website artifact, deployment specs, and target host in Harness. Lastly, you&#39;ll
    create a Basic Workflow and deploy the IIS website to the target host.</p><h3>Step
    1: Install and Launch the Shell Script Delegate</h3><p>First we&#39;ll install
    the Harness Shell Script Delegate on the EC2 instance you set up. Ensure that
    the EC2 instance meets requirements in <a href=\"#before_you_begin\">Before You
    Begin</a>.</p><p>To install the Delegate on your EC2 instance:</p><ol><li>Sign
    into the Harness Manager.</li><li>Click <strong>Setup</strong>, and then click <strong>Harness
    Delegates</strong>.</li><li>Click <strong>Download Delegate</strong>, and then
    click <strong>Shell Script</strong>.</li><li>Enter a name for the Delegate, and
    select the <strong>Primary</strong> Profile.</li><li>Click <strong>Copy Download
    Link</strong>.<br/>  <figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/wfk9o0tsjb/1589494626430/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure></li><li>Log
    into your EC2 instance, paste the Shell Script Delegate command, and hit <strong>Enter</strong>.</li><li>Once
    the Delegate is downloaded, unzip it (<code>tar -zxvf harness-delegate.tar.gz</code>),
    change directories into the <strong>harness-delegate</strong> folder and run the
    start command: <code>./start.sh</code>. Ignore any warning about the ulimit.</li></ol><p>The
    Delegate will start and in a few moments you will see it listed in the <strong>Harness
    Delegates</strong> page.</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583877354906/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p><strong>Delegate
    Selector</strong> — As a best practice, add a Delegate Selector to the Delegate
    so you can quickly identify it.</p><ol><li>In the Delegate listing on the <strong>Harness
    Delegates</strong> page, click <strong>Edit</strong> next to <strong>Selectors</strong>.</li><li>Type
    in <strong>iis-tutorial</strong>, press <strong>Enter</strong>, and then click <strong>Submit</strong>.<br/>The
    Selector is added to the Delegate.</li></ol><p>Next we need to add a Harness AWS
    Cloud Provider to connect Harness to your AWS account. We will use the Delegate
    you installed to obtain credentials for the AWS Cloud Provider.</p><h3>Step 2:
    Add a AWS Cloud Provider</h3><p>Next we&#39;ll add a Harness AWS Cloud Provider
    to your Harness account to connect to AWS.</p><div class=\"tip-callout\">As Harness
    provides first-class support for <a href=\"/article/q6ti811nck-cloud-watch-verification-overview\">CloudWatch</a>,
    you can also use the same AWS Cloud Provider for your CloudWatch connection.</div><p
    id=\"permissions\"><strong>Permissions:</strong> The AWS Cloud Provider will assume
    the IAM Role associated with the Delegate you installed in your VPC.</p><ol><li>In
    the Harness Manager, click <strong>Setup</strong>, and then click <strong>Cloud
    Providers</strong>.</li><li>Click <strong>Add Cloud Provider</strong>. The <strong>Cloud
    Provider</strong> dialog appears. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1585932361978/image.png\"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Amazon Web Services</strong>.</li><li><strong>Display Name:</strong>
    Enter <strong>IIS-Tutorial</strong>.</li><li><strong>Credentials:</strong> Select
    <strong>Assume IAM Role on Delegate</strong>.</li><li><strong>Delegate Selector:</strong>
    Select the Delegate Selector you added to your Delegate, <strong>iis-tutorial</strong>.</li></ul></td></tr></tbody></table><ol><li
    style=\"counter-increment:li 2\" start=\"3\">Click <strong>Test</strong> and then
    <strong>Submit</strong>.</li></ol><p></p><h3>Step 3: Add the Artifactory Artifact
    Server</h3><p>For this tutorial, we&#39;ll use a Todo List IIS website artifact,
    todolist-v3.0.zip, available in a public Harness Artifactory repo.</p><ol><li>In
    Harness, click <strong>Setup,</strong> and then click <strong>Connectors</strong>.</li><li>Click <strong>Artifact
    Servers</strong>, and then click <strong>Add Artifact Server</strong>. Enter the
    following settings:</li></ol><p></p><table><tbody><tr><td><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580511889935/image.png\"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Artifactory</strong>.</li><li><strong>Display Name:</strong> Enter
    <strong>Artifactory Public</strong>.</li><li><strong>Artifactory URL</strong>:
    Enter <strong>https://harness.jfrog.io/harness</strong>.</li><li><strong>Username/password:</strong>
    Leave these settings empty.</li></ul></td></tr></tbody></table><ol><li style=\"counter-increment:li
    2\" start=\"3\">Click <strong>Test</strong> and the <strong>Submit</strong>. If
    the test fails, that means the Delegate can&#39;t connect to https://harness.jfrog.io/harness.
    Make sure that the EC2 instance hosting the Delegate can make outbound connections
    to https://harness.jfrog.io/harness.</li></ol><h3>Step 4: Add the WinRM Connection</h3><p>WinRM
    is the management protocol used by Windows to remotely communicate with another
    server, in our case, Harness. WinRM communicates over HTTP (5985)/HTTPS (5986),
    and is included in all recent Windows operating systems.</p><div class=\"tip-callout\">See
    <a href=\"/article/2oo63r9rwb-iis-net-quickstart#before_you_begin\">Before You
    Begin</a> for the WinRM requirements and setup for this quickstart.</div><p>To
    connect the Harness Delegate with your target hosts and perform deployment operations,
    you add a WinRM connection in Harness:</p><ol><li>Select <strong>Continuous Security</strong>,
    and then click <strong>Secrets Management</strong>. The Secrets Management settings
    appear.</li><li>Under <strong>Executions Credentials</strong>, click <strong>WinRM
    Connection</strong>. Click <strong>Add WinRM Connection</strong>. The WinRM Connection
    settings appear.</li><li>Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583882482882/image.png\"/></figure></td><td><ul><li><strong>Display
    Name:</strong> Enter <strong>IIS Tutorial</strong>.</li><li><strong>Auth Scheme:</strong>
    Select <strong>NTLM</strong>.</li><li><strong>Domain:</strong> Leave this empty.
    If you receive an error when you submit, simply add and remove an empty space
    and click <strong>Submit</strong> again.</li><li><strong>User Name:</strong> Enter
    <strong>Administrator</strong>.</li><li><strong>Password:</strong> Enter the Administrator
    password for the Windows target host. For EC2, select the EC2 instance in the
    EC2 console and click Connect. Follow the instructions to get the password.</li><li><strong>Use
    SSL</strong> and <strong>Skip Cert Check:</strong> Select these options.</li><li><strong>WinRM
    Port:</strong> Enter <strong>5986</strong>. Ensure that the security group rules
    for your target host have HTTP-WINRM (5985) and HTTPS-WINRM (5986) open, as described
    in <a href=\"/article/2oo63r9rwb-iis-net-quickstart#before_you_begin\">Before
    You Begin</a>.</li></ul></td></tr></tbody></table><ol><li>Click <strong>Test</strong>.
    The <strong>WinRM Connectivity Test</strong> appears.<figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583882954949/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure></li><li>Enter
    the Public DNS (IPv4) of the target EC2 host and click <strong>RUN</strong>. The
    test will display: <strong>The test was successful.</strong> If the test fails,
    check that you have the WinRM setup and settings correct.</li><li>Click <strong>Submit</strong>.</li></ol><p>All
    of your Harness connections are complete. Now we can add the IIS website and define
    the deployment.</p><h3>Step 5: Define the IIS Website</h3><p>A Harness Application
    represents your IIS website, its deployment pipelines, and all the building blocks
    for those pipelines.</p><p>First, we&#39;ll create a Harness Application and Service,
    and look at the default IIS website setup.</p><ol><li>In Harness, click <strong>Setup</strong>,
    and then click <strong>Add Application</strong>. The Application settings appear.</li><li>Enter
    the name <strong>IIS Tutorial</strong>, and click <strong>Submit</strong>. Your
    new Application appears.</li></ol><p>We won&#39;t cover all of the Application
    entities in this tutorial. We assume you&#39;ve read <a href=\"/article/4o7oqwih6h-harness-key-concepts\">Harness
    Key Concepts</a>.</p><p>To add your IIS website zip and settings, you create a
    Harness Service. Services represent your IIS websites, applications, and virtual
    directories. You define the source of the IIS website artifact and your IIS specs,
    such as application pool identity.</p><ol><li>In your Harness Application, click <strong>Services</strong>.
    On the <strong>Services</strong> page, click <strong>Add Service</strong>. The <strong>Service</strong> dialog
    appears. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583879571725/image.png\"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>IIS-Website</strong>.</li><li><strong>Deployment Type:</strong>
    Select <strong>Windows Remote Management (WinRM)</strong>.</li><li><strong>Artifact
    Type:</strong> Select <strong>IIS Website</strong>.</li></ul></td></tr></tbody></table><p>Click
    <strong>Submit</strong>. The new Service is added.</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583880305156/image.png\"/></figure><p>Next,
    we will add the IIS website zip file artifact to the Service.</p><p>In your Service,
    click <strong>Add Artifact Source</strong>, and select the <strong>Artifactory</strong>
    artifact source. Enter the following settings:</p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583880588052/image.png\"/></figure></td><td><ul><li><strong>Display
    Name:</strong> Enter <strong>Todo List</strong>.</li><li><strong>Source Server:</strong>
    Select the Artifact Server you created earlier, <strong>Artifactory Public</strong>.</li><li><strong>Repository:</strong>
    Select <strong>iis-website</strong>.</li><li><strong>Artifact Path/File Filter:</strong>
    Enter <strong>todolist-v3.0.zip</strong>.</li><li><strong>Metadata Only:</strong>
    Select this option.</li></ul></td></tr></tbody></table><p>Click <strong>Submit</strong>.
    The artifact is added to the Service. </p><p>Look at the <strong>Script</strong>
    in <strong>Deployment Specification</strong>. You can see the steps that Harness
    will perform on the target host during deployment.</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583949454644/image.png\"/></figure><p>When
    Harness deploys your website, it downloads your IIS website artifact to your target
    host, expands it, creates the application pool, and then the website.</p><p>Next
    we&#39;ll change the default SitePort variable to ensure that your deployment
    doesn&#39;t have any port conflicts with other services running on your target
    host.</p><p>Click <strong>Variables</strong>. Locate the <strong>SitePort</strong>
    variable and change its value to <code>8080</code>, like this:</p><p></p><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583880752738/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>Click
    <strong>Submit</strong>. The variable is now changed and will be used when you
    deploy.</p><p>Now that we have our IIS website and specs, we can pick our target
    host.</p><h3>Step 6: Specify the Target Windows Host</h3><p>Harness uses Environments
    to represent one or more of your deployment infrastructures, such as Dev, QA,
    Stage, Production, etc.</p><p>In each Environment, you define Infrastructure Definitions
    to describe your target IIS hosts. A single Infrastructure Definition can be used
    by multiple Harness Services.</p><ol><li>Use the breadcrumb navigation to jump
    to <strong>Environments</strong>.<figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583881728868/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure></li><li>Click
    <strong>Add Environment</strong>. The <strong>Environment</strong> settings appear.
    Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583881790948/image.png\"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>IIS Tutorial</strong>.</li><li><strong>Environment Type:</strong>
    Select <strong>Non-Production</strong>.</li></ul></td></tr></tbody></table><p></p><ol><li
    style=\"counter-increment:li 2\" start=\"3\">Click <strong>Submit</strong>. The
    new Environment appears. Next we will add an Infrastructure Definition to identify
    the ECS Windows target host.</li><li>On your <strong>Environment</strong> page,
    click <strong>Add Infrastructure Definition</strong>. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583881959445/image.png\"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>Target Windows Instance</strong>.</li><li><strong>Cloud Provider
    Type:</strong> Select <strong>Amazon Web Services</strong>.</li><li><strong>Cloud
    Provider Type:</strong> Select <strong>Windows Remote Management (WinRM)</strong>.</li><li><strong>Use
    Already Provisioned Infrastructure:</strong> Select this option.</li><li><strong>Cloud
    Provider:</strong> Select the AWS Cloud Provider we added earlier, <strong>IIS-Tutorial</strong>.</li><li><strong>Region:</strong>
    Select the AWS region where your target host is running.</li><li><strong>Load
    Balancer:</strong> Leave this empty.</li><li><strong>Connection Attribute:</strong>
    Select the WinRM Connection you created earlier, <strong>IIS Tutorial</strong>.</li><li><strong>Host
    Name Convention:</strong> Leave the default.</li><li><strong>Use AWS Instance
    Filter:</strong> Select this option.</li><li><strong>VPC:</strong> Select the
    VPC where the target host is running.</li><li><strong>Tags:</strong> Enter an
    EC2 instance Tag to identify the target host. See below.</li><li><strong>Host
    Connection Type:</strong> Leave <strong>Private DNS</strong>.</li></ul></td></tr></tbody></table><p>For
    the <strong>Tags</strong> setting, enter an EC2 instance Tag that will identify
    the target host:</p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583884187938/image.png\"/></figure><div
    class=\"note-callout\">For this quickstart, we are deploying to a single target
    host. You can deploy to multiple target hosts by using Tags to identify them.
    When you use multiple targets, you can use deployment strategies such as Canary
    to deploy to a count/percentage of the hosts in phases.</div><p>Click <strong>Submit</strong>.
    The new Infrastructure Definition is added to your Environment.</p><p>You will
    select this Environment and Infrastructure Definition when you create your Harness
    Workflow next.</p><h3>Step 7: Set up a IIS Website Basic Workflow</h3><p>A Basic
    Workflow simply takes your Harness Service and deploys it to your Infrastructure
    Definition. It runs the commands in the Service Script section to expand the IIS
    website artifact, copy configs, create the application pool, and then create the
    website.</p><ol><li>Use the breadcrumb navigation to jump to <strong>Workflows</strong>,
    and then click <strong>Add Workflow</strong>. The Workflow settings appear.</li><li>Enter
    the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583949592108/image.png\"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>IIS-Website</strong>.</li><li><strong>Workflow Type:</strong> Select
    <strong>Basic Deployment</strong>.</li><li><strong>Environment:</strong> Select
    the Environment we created earlier, <strong>IIS Tutorial</strong>.</li><li><strong>Service:</strong>
    Select the Service we created earlier, <strong>IIS-Website</strong>.</li><li><strong>Infrastructure
    Definition:</strong> Select the Infrastructure Definition we created earlier,
    <strong>Target Windows Instance</strong>.</li></ul></td></tr></tbody></table><p>Click
    <strong>Submit</strong>. The IIS Basic Workflow is created.</p><p></p><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583952027822/image.png\"/></figure><p>Let&#39;s
    walk through the default steps in the Workflow, <strong>Select Nodes</strong>
    and <strong>Install</strong>.</p><p>Click the <strong>Select Nodes</strong> step.
    The <strong>Select Nodes</strong> settings appear.</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583952483208/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>Select
    Nodes let&#39;s you specify the number of target instances. You can use a count
    or percentage. Remember that Harness locates instances based on the <strong>Tags</strong>
    settings in your Infrastructure Definition.</p><p>In <strong>Select specific hosts</strong>
    click <strong>Yes</strong>. In <strong>Host Name(s)</strong>, click the name of
    the target host Harness located using the <strong>Tags</strong> settings in your
    Infrastructure Definition.</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583952508105/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>Click
    <strong>Submit</strong>.</p><div class=\"note-callout\">Harness supports Basic,
    Canary, and Rolling deployments for IIS (.NET). In all Workflows you can adjust
    Select Nodes to fit your needs. For example, in a Canary deployment Workflow,
    you could set the <strong>Desired Instances</strong> to 50% in the first phase
    and 100% in the second phase.</div><p>Click the <strong>Install</strong> step.
    There&#39;s nothing to configure here. You can simple close the step.</p><p>The
    Workflow is complete. You can run the Workflow to deploy the IIS website to your
    EC2 Windows host.</p><h3>Step 8: Deploy and Review</h3><p>Now that your IIS website
    Basic Workflow is complete you can deploy it.</p><ol><li>If you&#39;re not already
    on the main Workflow page, use the breadcrumb navigation to navigate to the <strong>IIS
    Tutorial</strong> Workflow.</li><li>Click the <strong>Deploy</strong> button.
    The Deploy settings appear. Enter the following settings:</li></ol><p></p><div
    class=\"hd--html\"><table class=\"table table-responsive\" border=\"0\" bordercolor=\"#eee\"><tbody><tr><td
    width=\"60%\"><figure> <a class=\"lightbox\" href=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583952779974/image.png\"
    tabindex=\"-1\"><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583952779974/image.png\"/></a></figure></td><td><ul><li>
    <strong>Artifacts</strong> &gt; <strong>IIS-Website</strong>: Select an artifact
    from the Artifact Source you added to the Harness Service. In this tutorial, we
    are using a public Artifactory file. Select <strong>Buid# todolist-v3.0.zip</strong>.</li><li>
    <strong>Send notification to me only:</strong> Enable this setting if you are
    doing this tutorial using your corporate Harness account. Enabling this setting
    will ensure that other users won&#39;t be notified of this deployment.</li></ul></td></tr></tbody></table></div><p></p><ol><li
    style=\"counter-increment:li 2\" start=\"3\">Click <strong>Submit</strong>. The
    deployment executes.</li></ol><p>Here&#39;s a example of what the deployment looks
    like typically:</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/2oo63r9rwb/1583954956853/iis-quickstart.gif\"/></figure><p>Now
    that the deployment was successful, confirm the website was added to the Windows
    instance:</p><ol><li>In your Harness <strong>Deployments</strong> page, click
    the <strong>Install</strong> step.<figure><a href=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535409911262/image.png\"><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535409911262/image.png\"/></a></figure></li><li>Expand
    the <strong>Create Website</strong> section.<figure><a href=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535409944351/image.png\"><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535409944351/image.png\"/></a></figure></li><li>In
    the log, note the location where the website was created:</li></ol><pre>INFO 2018-08-27
    15:34:43 IIS-website 2 Started C:\\Artifacts\\IIS-website\\relea http :8080:*</pre><ol><li
    style=\"counter-increment:li 3\" start=\"4\">Connect to your Windows instance
    via Microsoft Remote Desktop or other console.</li><li>On the Windows instance,
    navigate to the location Harness reported to confirm the website was created:<figure><a
    href=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535410031807/image.png\"><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/pvjfe077ii/1535410031807/image.png\"/></a></figure></li></ol><p>You
    can see the website is installed.</p><h3>Next Steps</h3><p>In this quickstart,
    you learned how to:</p><ul><li>Install and run the Harness Shell Script Delegate
    on an EC2 host.</li><li>Connect Harness with your AWS account.</li><li>Connect
    Harness with your target host(s) over WinRM.</li><li>Connect Harness with Artifactory.</li><li>Specify
    the IIS Website files and Windows settings to use.</li><li>Specify the target
    Windows host(s) in AWS EC2.</li><li>Create and deploy an IIS Website Basic Workflow.</li><li>Verify
    deployment in Windows Server.</li></ul><p>Read the following related How-tos:</p><ul><li><a
    href=\"/article/bq9938fbk8-iis-net-deployments-overview\">IIS (.NET) Deployments
    Overview</a></li><li><a href=\"/article/z6ls3tgkqc-4-iis-workflows\">IIS Workflows
    and Pipelines</a></li><li><a href=\"/article/xerirloz9a-add-a-trigger-2\">Triggers</a></li><li><a
    href=\"/article/zc1u96u6uj-pipeline-configuration\">Pipelines</a></li></ul><p></p>"
  slug: iis-net-quickstart
  tags: []
  is_live: true
