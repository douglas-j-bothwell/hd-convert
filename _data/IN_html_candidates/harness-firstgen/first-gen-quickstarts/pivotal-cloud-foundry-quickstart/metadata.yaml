type: article
article_id: hy819vmsux
user_id: mfr0nxh4be
category_id: f6rh2cdvx9
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Tanzu Application Service (TAS) Quickstart
slug: pivotal-cloud-foundry-quickstart
description: Deploy an app to your PCF space using Harness.
short_version: Deploy an app to your PCF space using Harness.
tags:
- PCF tutorial
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T17:18:49.979091Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Tanzu Application Service (TAS) Quickstart
  description: Deploy an app to your PCF space using Harness.
  short_version: Deploy an app to your PCF space using Harness.
  body: '<p>This quickstart shows you how to deploy a publicly available app to your
    <a href="https://docs.pivotal.io/application-service/2-11/concepts/overview.html"
    target="_blank">Tanzu Application Service</a> (TAS, formerly PCF) space using
    Harness.</p><h3>Objectives</h3><p>You&#39;ll learn how to:</p><ul><li>Install
    and run the Harness Shell Script Delegate on an EC2 host.</li><li>Connect Harness
    with your TAS account.</li><li>Connect Harness with Artifactory.</li><li>Specify
    the TAS manifest to use for the app.</li><li>Specify the target TAS org and space.</li><li>Set
    the number of instances to deploy.</li><li>Create and deploy a TAS Basic Workflow.</li></ul><h3>Before
    You Begin</h3><ul><li>Review <a href="/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a> to establish a general understanding of Harness.</li><li><strong>TAS
    space</strong> — You will need a TAS space for Harness to deploy the app.</li><li><strong>EC2
    Instance for Harness Shell Script Delegate</strong> — The EC2 instance for the
    Harness Delegate must meet the following requirements:<ul><li>Linux/UNIX server.</li><li>​Minimum
    1 CPU.</li><li>Minimum 8GB RAM. For example, an AWS EC2 instance type such as
    m5a.xlarge has 16GB of RAM, 8 for the Delegate and 8 for the remaining operations.</li><li>Minimum
    6GB Disk space.</li><li>Outbound Access: HTTP, HTTPS, SSH. This enables the Delegate
    to communicate with Harness, Artifactory, and your TAS account.</li><li>IAM role:
    The EC2 instance only needs to make connections to Harness and TAS so its permissions
    are minimal.</li></ul></li></ul><p>Once you have the above prerequisites, the
    remaining steps in this tutorial will take about 10 minutes.</p><h3>Visual Summary</h3><p>The
    following diagram shows the very simple topology for this tutorial:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623877307214/image.png"/></figure><p>You
    will install the Harness Shell Script Delegate on an EC2 instance in your AWS
    account and connect Harness to TAS and Artifactory. Next, you&#39;ll set up your
    artifact, TAS manifests, and target space in Harness. Lastly, you&#39;ll create
    a Basic Workflow and deploy the number of new instances you need.</p><h3>Step
    1: Install and Launch the Shell Script Delegate</h3><p>First we&#39;ll install
    the Harness Shell Script Delegate on the EC2 instance you set up. Ensure that
    the EC2 instance meets the requirements in <a href="#before_you_begin">Before
    You Begin</a>.</p><p>To install the Delegate on your EC2 instance:</p><ol><li>Sign
    into the Harness Manager.</li><li>Click <strong>Setup</strong>, and then click
    <strong>Harness Delegates</strong>.</li><li>Click <strong>Download Delegate</strong>,
    and then click <strong>Shell Script</strong>.</li><li>Enter a name for the Delegate,
    and select the <strong>Primary</strong> Profile.</li><li>Click <strong>Copy Download
    Link</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfk9o0tsjb/1589494626430/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Log
    into your EC2 instance, paste the Shell Script Delegate command, and hit <strong>Enter</strong>.</li><li>Once
    the Delegate is downloaded, unzip it (<code>tar -zxvf harness-delegate.tar.gz</code>),
    change directories into the <strong>harness-delegate</strong> folder and run the
    start command: <code>./start.sh</code>. Ignore any warning about the ulimit.</li></ol><p>The
    Delegate will start and in a few moments you will see it listed in the <strong>Harness
    Delegates</strong> page.</p><p><strong>Delegate Selectors</strong> — As a best
    practice, add a Delegate Selector to the Delegate so you can quickly identify
    it.</p><ol><li>In the Delegate listing on the <strong>Harness Delegates</strong>
    page, click <strong>Edit</strong> next to <strong>Selectors</strong>.</li><li>Type
    in <strong>TAS-Tutorial</strong>, press <strong>Enter</strong>, and then click
    <strong>Submit</strong>.<br/>The Selector is added to the Delegate.</li></ol><p>Next
    we need to install the CF CLI on the Delegate so it can perform operations on
    your TAS space.</p><h3>Step 2: Add the CF CLI to Delegate</h3><p>The host running
    the Harness Delegate must run the CF CLI in order to execute the required commands.</p><p>You
    can follow the steps in <a href="https://docs.pivotal.io/pivotalcf/2-3/cf-cli/install-go-cli.html"
    target="_blank">Installing the cf CLI</a> from Pivotal to install the CLI, or
    you can use a Harness Delegate Profile to install the CLI, described below.</p><ol><li>In
    Harness, navigate to the Harness Delegates page if you are not already there.</li><li>Click
    <strong>Manage Delegate Profiles</strong>, and then click <strong>Add Delegate
    Profile</strong>.</li><li>In <strong>Display Name</strong>, enter <strong>Cloud
    Foundry CLI</strong>.</li><li>In <strong>Startup Script</strong>, enter the following
    script:</li></ol><pre>sudo wget -O /etc/yum.repos.d/cloudfoundry-cli.repo https://packages.cloudfoundry.org/fedora/cloudfoundry-cli.repo<br/><br/>sudo
    yum -y install cf-cli</pre><p>When you&#39;re done the Delegate Profile will look
    like this:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580510496326/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><ol><li
    style="counter-increment:li 4" start="5">Click <strong>Submit</strong>.</li><li>Locate
    your Delegate, click its <strong>Profile</strong> (<strong>None</strong> by default),
    and select <strong>Cloud Foundry CLI</strong>.</li></ol><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580510799951/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>It
    will take a few minutes for the CLI to install. When it is installed, a green
    checkmark appears next to the <strong>Profile</strong> on your Delegate.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580510941403/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>If
    you click View Logs, you can see the installation log:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580510872377/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div
    class="note-callout">The version of the CF CLI you install on the Delegate should
    always match the TAS features you are using in your Harness TAS deployment. For
    example, if you are using <code>buildpacks</code> in your manifest.yml in your
    Harness Service, the CLI you install on the Delegate should be version 3.6 or
    later.</div><p>Next, we can use the Delegate to set up Harness&#39; connections
    to TAS and Artifactory.</p><h3>Step 3: Add the Harness TAS Cloud Provider</h3><p>Harness
    integrates with many different types of repositories and providers. For this tutorial,
    you will connect to your TAS account.</p><div class="note-callout">The TAS user
    account you use must have <strong>Admin</strong>, <strong>Org Manager</strong>,
    or <strong>Space Manager</strong> role. The user account must be able to update
    spaces, orgs, and applications. For more information, see <a href="https://docs.pivotal.io/pivotalcf/2-3/concepts/roles.html"
    target="_blank">Orgs, Spaces, Roles, and Permissions</a> from Pivotal.</div><ol><li>In <strong>Setup</strong>,
    click <strong>Cloud Providers</strong>.</li><li>Click <strong>Add Cloud Provider</strong>.
    Enter the following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623877600269/clean-shot-2021-06-16-at-14-06-24.png"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Pivotal Cloud Foundry</strong>.</li><li><strong>Display Name:</strong>
    Enter <strong>TAS Tutorial</strong>.</li><li>Endpoint URL: Enter <strong>api.run.pivotal.io</strong>.</li><li><strong>Username/Password:</strong>
    Enter the username and password for your TAS account.</li></ul></td></tr></tbody></table><p></p><ol><li
    style="counter-increment:li 2" start="3">Click <strong>Test</strong>, and then
    click the <strong>SUBMIT</strong> button.</li></ol><p>The TAS Cloud Provider is
    added. Now we can connect to Artifactory where our publicly available app is located.</p><h3>Step
    4: Add the Artifactory Artifact Server</h3><p>For this tutorial, we&#39;ll use
    a Todo List app artifact, todolist.war, available in a public Harness Artifactory
    repo.</p><ol><li>In Harness, click <strong>Setup,</strong> and then click <strong>Connectors</strong>.</li><li>Click <strong>Artifact
    Servers</strong>, and then click <strong>Add Artifact Server</strong>. Enter the
    following settings:</li></ol><p></p><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580511889935/image.png"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Artifactory</strong>.</li><li><strong>Display Name:</strong> Enter
    <strong>Artifactory Public</strong>.</li><li><strong>Artifactory URL</strong>:
    Enter <strong>https://harness.jfrog.io/harness</strong>.</li><li><strong>Username/password:</strong>
    Leave these settings empty.</li></ul></td></tr></tbody></table><ol><li style="counter-increment:li
    2" start="3">Click <strong>Test</strong> and the <strong>Submit</strong>. If the
    test fails, that means the Delegate can&#39;t connect to https://harness.jfrog.io/harness.
    Make sure that the EC2 instance hosting the Delegate can make outbound connections
    to https://harness.jfrog.io/harness.</li></ol><p>Now all your connections are
    set up and you can define your TAS spec.</p><h3>Step 5: Add Your Artifact and
    TAS Specs</h3><p>A Harness Application represents your TAS apps, their deployment
    pipelines, and all the building blocks for those pipelines.</p><p>First, we&#39;ll
    create a Harness Application and Service, and look at the default TAS specs.</p><ol><li>In
    Harness, click <strong>Setup</strong>, and then click <strong>Add Application</strong>.
    The Application settings appear.</li><li>Enter the name TAS Tutorial, and click
    Submit. Your new Application appears.</li></ol><p>We won&#39;t cover all of the
    Application entities in this tutorial. We assume you&#39;ve read <a href="/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a>.</p><p>To add your specs, you create a Harness Service. Services
    represent your TAS apps. You define the sources of app artifacts and your TAS
    specs.</p><ol><li>In your Harness Application, click <strong>Services</strong>.
    On the <strong>Services</strong> page, click <strong>Add Service</strong>. The <strong>Service</strong> dialog
    appears. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623877675259/clean-shot-2021-06-16-at-14-07-45.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>TAS Tutorial</strong>.</li><li><strong>Deployment Type:</strong>
    Select <strong>Tanzu Application Services</strong>.</li></ul></td></tr></tbody></table><ol><li
    style="counter-increment:li 1" start="2">Click <strong>SUBMIT</strong>. The new
    Service is added.</li></ol><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580513839206/image.png"/></figure><p>Next,
    we will add the WAR file artifact to the Service.</p><ol><li>In your Service,
    click <strong>Add Artifact Source</strong>, and select the <strong>Artifactory</strong>
    artifact source. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580514005333/image.png"/></figure></td><td><ul><li><strong>Display
    Name:</strong> Enter <strong>Todo List</strong>.</li><li><strong>Source Server:</strong>
    Select the Artifact Server you created earlier, <strong>Artifactory Public</strong>.</li><li><strong>Repository:</strong>
    Select <strong>todolist-tutorial</strong>.</li><li><strong>Artifact Path/File
    Filter:</strong> Enter <strong>todolist.war</strong>.</li><li><strong>Metadata
    Only:</strong> Do not select this option.</li></ul></td></tr></tbody></table><p></p><ol><li
    style="counter-increment:li 1" start="2">Click <strong>Submit</strong>. The artifact
    is added to the Service. Next we&#39;ll check the <strong>Artifact History</strong>
    to get a history of the WAR file. This primes the deployment with the history
    of artifacts.</li><li>Click <strong>Artifact History</strong>, and then click
    <strong>Manually pull artifact</strong>.<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580517060545/image.png"/></figure></li><li>Enter
    the following settings:</li></ol><p></p><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580517131313/image.png"/></figure></td><td><ul><li><strong>Artifact
    Stream:</strong> Select <strong>Todo List</strong>.</li><li><strong>Artifact:</strong>
    Select <strong>build# todolist.war</strong>.</li></ul></td></tr></tbody></table><p>Click
    <strong>Submit</strong>. Now Harness has a history of all the artifacts. When
    you deploy the app, you can select a build number from this history.</p><p>Next,
    let&#39;s look at the Service <strong>Manifests</strong> section.</p><p>When you
    create the TAS Service, the <strong>Manifests</strong> section is created and
    the default manifest.yml and vars.yml files are added.</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/other/1572045993003/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572045993003/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></a></figure><p>Harness uses a manifest
    file (manifest.yml) and variables file (vars.yml) for defining the TAS application,
    instances, and routes. Both files must be in YAML format and can use the <strong>.yaml</strong> or <strong>.yml</strong> extension.</p><p>Let&#39;s
    look at these files:</p><ul><li><strong>manifest.yml</strong> - This file describes
    your application, host requirements, and routes. For example, the default name,
    memory limit, and number of instances. You can hardcode values or use variables
    defined in vars.yml.<br/>This file follows the TAS app manifest requirements described
    in <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html"
    target="_blank">Deploying with App Manifests</a> and <a href="https://docs.pivotal.io/pivotalcf/2-4/devguide/deploy-apps/manifest.html#minimal-manifest"
    target="_blank">Example Manifest</a> from Pivotal.</li><li><strong>vars.yml</strong> -
    This file is used to maintain variables used in the manifest.yml file.</li></ul><p>Here
    is an example showing how the variables in <strong>manifest.yml</strong> are given
    values in <strong>vars.yml</strong>:</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/other/1572044493122/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572044493122/image.png"/></a></figure><p>For
    this tutorial, we&#39;ll use the default manifest files. You do not need to make
    any changes.</p><div class="note-callout">Note that the name for the TAS app in
    vars.yml is a concatenation of your Harness Application, Service, and Environment
    names: <code>PCF_APP_NAME: ${app.name}__${service.name}__${env.name}</code>. This
    will help you find the deployed app in your TAS space later.</div><p>Now that
    we have our artifact and specs, we can define our target space.</p><h3>Step 6:
    Define Your Target TAS Space</h3><p>Harness uses Environments to represent one
    or more of your deployment infrastructures, such as Dev, QA, Stage, Production,
    etc.</p><p>In each Environment, you define Infrastructure Definitions to describe
    your target TAS space. A single Infrastructure Definition can be used by multiple
    Harness TAS Services.</p><ol><li>Use the breadcrumb navigation to jump to <strong>Environments</strong>.</li><li>Click <strong>Add
    Environment</strong>. The <strong>Environment</strong> dialog appears. Enter the
    following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623877777875/clean-shot-2021-06-16-at-14-09-28.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>TAS Tutorial</strong>.</li><li><strong>Environment Type:</strong>
    Select <strong>Non-Production</strong>.</li></ul></td></tr></tbody></table><ol><li
    style="counter-increment:li 2" start="3">Click <strong>Submit</strong>. The new
    Environment appears. Next we will add an Infrastructure Definition to identify
    the TAS space.</li><li>On your <strong>Environment</strong> page, click <strong>Add
    Infrastructure Definition</strong>. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623878181006/clean-shot-2021-06-16-at-14-16-11.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>TAS Tutorial</strong>.</li><li><strong>Cloud Provider Type:</strong>
    Select <strong>Tanzu Application Services</strong>.</li><li><strong>Deployment
    Type:</strong> Select <strong>Tanzu Application Services</strong>.</li><li><strong>Cloud
    Provider:</strong> Select the TAS Cloud Provider you added earlier.</li><li><strong>Organization:</strong>
    Select your target TAS org.</li><li><strong>Space:</strong> Select your target
    space.</li></ul></td></tr></tbody></table><ol><li style="counter-increment:li
    4" start="5">Click <strong>Submit</strong>. The new Infrastructure Definition
    is added to your Environment.</li></ol><p>You will select this Environment and
    Infrastructure Definition when you create your Harness Workflow next.</p><h3>Step
    7: Set up a TAS Basic Workflow</h3><p>A TAS Workflow performing a Basic deployment
    simply takes your Harness TAS Service and deploys it to your TAS Infrastructure
    Definition.</p><p>Once the TAS app is set up in the Workflow using the <strong>App
    Setup</strong> command, you can resize the number of instances specified in the
    Service manifest.yml or App Setup command using the <strong>App Resize</strong> command.</p><p></p><ol><li>Use
    the breadcrumb navigation to jump to <strong>Workflows</strong>, and then click <strong>Add
    Workflow</strong>. The Workflow settings appear.</li><li>Enter the following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623878284421/clean-shot-2021-06-16-at-14-17-54.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Enter <strong>TAS Tutorial</strong>.</li><li><strong>Workflow Type:</strong> Select
    <strong>Basic Deployment</strong>.</li><li><strong>Environment:</strong> Select
    <strong>TAS Tutorial</strong>.</li><li><strong>Service:</strong> Select <strong>TAS
    Tutorial</strong>.</li><li><strong>Infrastructure Definition:</strong> Select
    <strong>TAS Tutorial</strong>.</li></ul></td></tr></tbody></table><p></p><p>Click <strong>Submit</strong>.
    The TAS Basic Workflow is created.</p><p>There&#39;s nothing to change in the
    default Workflow settings. We simply need to open and confirm the defaults.</p><p>We&#39;ll
    walk through the default steps in the Workflow, <strong>App Step</strong> and
    <strong>App Resize</strong>.</p><ol><li>Click <strong>App Setup</strong>. The
    App Setup command uses the manifest.yml in your Harness TAS Service to set up
    your app. We&#39;ll confirm the defaults.</li></ol><p id="app_setup"></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623878337975/clean-shot-2021-06-16-at-14-18-48.png"/></figure></td><td><ul><li><strong>Name:</strong>
    This is the name of the step.</li><li><strong>Instance Count:</strong> The number
    of instances for your app. By default, we use the <code>INSTANCES</code> settings
    from the vars.yml in your Service <strong>Manifests</strong> section. The <strong>Match
    running instances</strong> setting can be used after your first deployment to
    override the <code>instances</code> setting in the manifest.yml.</li><li><strong>Existing
    Versions To Keep:</strong> The number of previous app versions to downsize and
    keep.</li><li><strong>Additional Routes:</strong> Any additional routes to add
    to the mapping configured in the Service manifest.</li><li><strong>Use App Autoscaler
    Plugin:</strong> This setting can be used if the <a href="https://docs.pivotal.io/application-service/2-7/appsman-services/autoscaler/using-autoscaler-cli.html"
    target="_blank">App Autoscaler plugin</a> service running in your target Pivotal
    space and bound to the app you are deploying.</li></ul></td></tr></tbody></table><ol><li
    style="counter-increment:li 1" start="2">Click <strong>Submit</strong>.</li><li>Click
    <strong>App Resize</strong>. The App Resize command is displayed as incomplete.
    Harness simply needs you to confirm the default number of desired instances, <strong>100
    Percent</strong>.</li></ol><p></p><table><tbody><tr><td><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623878414048/clean-shot-2021-06-16-at-14-20-04.png"/></figure></td><td><ul><li><strong>Name:</strong>
    This is the name of the step.</li><li><strong>Desired Instances:</strong> A percentage
    of the number specified in your manifest.yml, or if you used the <strong>App Setup Match
    desired count with current running instances</strong> setting, the current number
    of running instances. You can also use <strong>Count</strong> to explicitly set
    the number of desired instances.</li></ul></td></tr></tbody></table><ol><li style="counter-increment:li
    3" start="4">Click <strong>Submit</strong>.</li></ol><p>The Workflow is complete.
    You can run the Workflow to deploy the app to your TAS space.</p><h3>Step 8: Deploy
    and Review</h3><p>Now that your TAS Basic Workflow is complete you can deploy
    it to your space.</p><ol><li>If you&#39;re not already on the main Workflow page,
    use the breadcrumb navigation to navigate to the <strong>TAS Tutorial</strong>
    Workflow.</li><li>Click the <strong>Deploy</strong> button. The Deploy settings
    appear. Enter the following settings:</li></ol><p></p><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/fudvr38d76/1580516919892/image.png"/></figure></td><td><ul><li><strong>Artifacts</strong>
    &gt; <strong>TAS Tutorial</strong>: Select an artifact from the Artifact Source
    you added to the Harness Service. In this tutorial, we are using a public Artifactory
    file. Select <strong>Buid# todolist.war</strong>.</li><li><strong>Send notification
    to me only:</strong> Enable this setting if you are doing this tutorial using
    your corporate Harness account. Enabling this setting will ensure that other users
    won&#39;t be notified of this deployment.</li></ul></td></tr></tbody></table><ol><li
    style="counter-increment:li 2" start="3">Click <strong>Submit</strong>. The deployment
    executes.</li></ol><p>You now have a Todo List app deployed to your TAS space.
    Remember the app name is a concatenation of your Harness Application, Service,
    and Environment names: <code>${app.name}__${service.name}__${env.name}</code>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/hy819vmsux/1623878699789/clean-shot-2021-06-16-at-14-24-44.png"/></figure><p>Click
    <strong>VIEW APP</strong> to see the running app.</p><h3>Next Steps</h3><p>In
    this tutorial, you learned how to:</p><ul><li>Install and run the Harness Shell
    Script Delegate on an EC2 host.</li><li>Connect Harness with your TAS account.</li><li>Connect
    Harness with Artifactory.</li><li>Specify the TAS manifest to use for the app.</li><li>Specify
    the target TAS org and space.</li><li>Set the number of instances to deploy.</li><li>Create
    and deploy a TAS Basic Workflow.</li></ul><p>Read the following related How-tos:</p><ul><li><a
    href="https://docs.harness.io/category/emle05cclq">Tanzu Application Service How-tos</a>
    which include Canary and Blue/Green TAS deployments.</li><li><a href="/article/xerirloz9a-add-a-trigger-2">Triggers</a> show
    you how to automate deployments in response to different events.</li><li><a href="/article/o22jx8amxb-add-an-infra-provisioner">Infrastructure
    Provisioners Overview</a> will show you how to add provisioning as part of your
    Workflow.</li></ul><p></p>'
  slug: pivotal-cloud-foundry-quickstart
  tags:
  - PCF tutorial
  is_live: true
