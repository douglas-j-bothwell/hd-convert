type: article
article_id: keodlyvsg5
user_id: slcpusem6b
category_id: f6rh2cdvx9
author:
  name: Archana Singh
  profile_image: https://www.gravatar.com/avatar/e323facc5a711ac44c46e58dcb52aa3e?d=mm&s=150
title: Traditional (SSH) Quickstart
slug: traditional-ssh-quickstart
description: This quickstart shows you how to deploy a traditional (SSH) deployments
  using application package files and a runtime environment (Tomcat, JBoss) in Harness.
short_version: This quickstart shows you how to deploy a traditional (SSH) deployments
  using application package files and a runtime environment (Tomcat, JBoss) in Harness.
tags:
- quickstart
- Traditional SSH
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-09T21:36:37.940351Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Traditional (SSH) Quickstart
  description: This quickstart shows you how to deploy a traditional (SSH) deployments
    using application package files and a runtime environment (Tomcat, JBoss) in Harness.
  short_version: This quickstart shows you how to deploy a traditional (SSH) deployments
    using application package files and a runtime environment (Tomcat, JBoss) in Harness.
  body: '<p>This quickstart shows you how to deploy application package files and
    a runtime environment such as Tomcat to target hosts using Harness.</p><p>This
    deployment is called traditional because it uses SSH (Secure Shell) scripts and
    a traditional runtime environment as opposed to containers and orchestration mechanisms,
    such as those in the <a href="/article/7in9z2boh6-kubernetes-quickstart">Kubernetes
    Quickstart</a>.</p><h3>Objectives</h3><p>You&#39;ll learn how to:</p><ul><li>Install
    and run the Harness Shell Script Delegate on an EC2 host.</li><li>Connect Harness
    with your AWS account.</li><li>Connect Harness with Artifactory.</li><li>Review
    the Default Script Commands.</li><li>Specify the target hosts.</li><li>Create
    and deploy a Harness SSH Basic Workflow.</li></ul><h3>Before You Begin</h3><ul><li>Review
    <a href="https://docs.harness.io/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a> to establish a general understanding of Harness.</li><li>Target
    host — In this guide, we use an AWS EC2 instance as the target host. Minimum t2.medium.</li><li>EC2
    Instance for Harness Shell Script Delegate — The EC2 instance for the Harness
    Delegate must meet the following requirements:<ul><li>Linux/UNIX server.</li><li>​Minimum
    1 CPU.</li><li>Minimum 8GB RAM. For example, an AWS EC2 instance type such as
    m5a.xlarge has 16GB of RAM, 8 for the Delegate and 8 for the remaining operations.</li><li>Minimum
    6GB Disk space.</li><li>Inbound Access: SSH.</li><li>Outbound Access: HTTP and
    HTTPS. This enables the Delegate to communicate with Harness and Artifactory.</li><li>IAM
    role: AmazonEC2FullAccess. See <a href="/article/wt1gnigme7-add-amazon-web-services-cloud-provider#policies_required_aws_ec2">Policies
    Required: AWS EC2</a>.</li><li>If you wish to use an App Stack like Tomcat, then
    ensure that you have JAVA installed in your target AWS instance.</li><li>Ensure
    that you have <code>netcat (nc)</code> installed on your target host. The Harness
    SSH Service Port Listening command uses <code>netcat</code>. You can use the following
    command to do the installation:<br/><code>yum install -y nc</code></li></ul></li></ul><div
    class="note-callout">You can also simply deploy the artifact to your local computer
    instead of using an AWS EC2 instance. If you want to do this, install the Harness
    SSH Delegate on your local computer, use a <a href="/article/stkxmb643f-add-physical-data-center-cloud-provider">Physical
    Data Center Cloud Provider</a> instead of an AWS Cloud Provider, and when you
    set up the target infrastructure SSH key in Harness, use your local login information.
    You might also need to enable remote access on your computer.</div><h3>Visual
    Summary</h3><p>The following diagram shows the very simple topology for this tutorial:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1604398554992/screenshot-2020-11-03-at-3-45-15-pm.png"
    style="max-height:90%;max-width:90%" data-hd-height="90%" data-hd-width="90%"/></figure><h3>Step
    1: Install and Launch the Shell Script Delegate</h3><p>First, we&#39;ll install
    the Harness Shell Script Delegate on the EC2 instance you set up. Ensure that
    the EC2 instance meets the requirements in <a href="/article/keodlyvsg5-traditional-ssh-quickstart#before_you_begin">Before
    You Begin</a>.</p><p>To install the Delegate on your EC2 instance:</p><ol><li>Sign
    into the Harness Manager.</li><li>Click <strong>Setup</strong>, and then click
    <strong>Harness Delegates</strong>.</li><li>Click <strong>Download Delegate</strong>,
    and then click <strong>Shell Script</strong>.</li><li>Enter a name for the Delegate,
    and select the <strong>Primary</strong> Profile.</li><li>Click <strong>Copy Download
    Link</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfk9o0tsjb/1589494626430/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Log
    into your EC2 instance, paste the Shell Script Delegate command, and hit <strong>Enter</strong>.</li><li>Once
    the Delegate is downloaded, unzip it (<code>tar -zxvf harness-delegate.tar.gz</code>),
    change directories into the <strong>harness-delegate</strong> folder, and run
    the start command: <code>./start.sh</code>. Ignore any warning about the ulimit.</li></ol><p>The
    Delegate will start and in a few moments, you will see it listed on the <strong>Harness
    Delegates</strong> page.</p><p><strong>Delegate Selectors</strong> — As a best
    practice, add a Delegate Selector to the Delegate so you can quickly identify
    it.</p><ol><li>In the Delegate listing on the <strong>Harness Delegates</strong>
    page, click <strong>Custom</strong> <strong>Selector</strong>.</li><li>In <strong>Edit
    Selectors</strong>, type in a Selector name such as <code>ssh-quickstart</code>,
    press <strong>Enter</strong>, and then click <strong>Submit</strong>.<br/><br/>The
    Selector is added to the Delegate.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1607189333127/screenshot-2020-12-05-at-10-58-40-pm.png"
    style="max-height:90%;max-width:90%" data-hd-height="90%" data-hd-width="90%"/></figure></li></ol><p>Next,
    we need to add the AWS cloud provider.</p><h3>Step 2: Add the AWS Cloud Provider</h3><p>In
    this section, we will add a Harness AWS Cloud Provider to your Harness account
    to connect to AWS CodeDeploy, EC2, and S3.</p><h4 id="permissions">Permissions</h4><p
    id="permissions">The AWS Cloud Provider will assume the IAM Role associated with
    the EC2 host running the Delegate you installed in your VPC.</p><ol><li>In the
    Harness Manager, click <strong>Setup</strong>, and then click <strong>Cloud Providers</strong>.</li><li>Click <strong>Add
    Cloud Provider</strong>. The <strong>Cloud Provider</strong> settings appear.
    Enter the following settings:<br/><br/><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1607190202505/screenshot-2020-12-05-at-11-12-24-pm.png"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Amazon Web Services</strong>.</li><li><strong>Display Name:</strong>
    Enter <strong>Traditional SSH</strong>.</li><li><strong>Credentials:</strong>
    Select <strong>Assume IAM Role on Delegate</strong>.</li><li><strong>Delegate
    Selector:</strong> Select the Delegate Selector you added to your Delegate, <strong>ssh-quickstart</strong>.</li></ul></td></tr></tbody></table></li><li>Click
    <strong>Test</strong> and then <strong>Submit</strong>.</li></ol><h3>Step 3: Add
    the Artifactory Artifact Server</h3><p>For this tutorial, we&#39;ll use a Todo
    List app artifact, todolist.war, available in a public Harness Artifactory repo.</p><ol><li>In
    Harness, click <strong>Setup,</strong> and then click <strong>Connectors</strong>.</li><li>Click <strong>Artifact
    Servers</strong>, and then click <strong>Add Artifact Server</strong>. Enter the
    following settings:<br/><br/><table><tbody><tr><td><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1605076062953/screenshot-2020-11-11-at-11-57-27-am.png"
    style="max-height:80%;max-width:80%" data-hd-height="80%" data-hd-width="80%"/></figure></td><td><ul><li><strong>Type:</strong>
    Select <strong>Artifactory</strong>.</li><li><strong>Display Name:</strong> Enter
    <strong>Artifactory Public</strong>.</li><li><strong>Artifactory URL</strong>:
    Enter <strong>https://harness.jfrog.io/artifactory</strong>.</li><li><strong>Username/</strong><strong>Select
    Encrypted Password</strong><strong>:</strong> Leave these settings empty.</li></ul></td></tr></tbody></table></li><li>Click
    <strong>Test</strong> and then <strong>Submit</strong>. If the test fails, that
    means the Delegate can&#39;t connect to https://harness.jfrog.io/harness. Make
    sure that the EC2 instance hosting the Delegate can make outbound connections
    to https://harness.jfrog.io/harness.</li></ol><h3>Step 4: Add Target Instance
    SSH Key to Harness</h3><p>When you set up your target AWS instance, you created
    an SSH key file for connecting to it.</p><p>Harness uses this key to make a connection
    from the Harness Delegate to the target host during deployment. And so you must
    add the key to Harness Secrets.</p><p>First, you add the key as an Encrypted File
    Secret in Harness, and then use that file to add an SSH Key secret.</p><ol><li>In
    Harness, in <strong>Security</strong>, in <strong>Secrets Management</strong>,
    click <strong>Encrypted Files</strong>. </li><li>Click <strong>Add Encrypted File</strong>.
    The <strong>Add Encrypted File</strong> settings appear.<br/><br/><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1620840064508/bvmmaf-o-5-sro-mqio-5-nj-2-se-xt-lc-ky-9-th-0-zihid-ptiww-dl-7-nl-4-shxwhd-vev-9-u-agrog-7-rtrq-0-h-8-r-7-dtz-qs-srbu-0-g-zk-ibfhno-f-0-m-det-3-pb-8-kwx-v-6-e-7-xc-75-ggse-e-59-kq-gzv-wexj-ohcdj-q"/></figure></td><td><ul><li><strong>Secrets
    Manager</strong>: Use the default setting.</li><li><strong>Name</strong>: Enter
    <strong>ssh_quickstart</strong>.</li><li><strong>File</strong>: Upload your PEM
    file.</li></ul></td></tr></tbody></table></li><li>Click <strong>Submit</strong>.</li></ol><p>Next,
    use the Encrypted File to create an SSH Key in Harness.</p><ol><li>In <strong>Secrets
    Management</strong>, click <strong>SSH</strong>.</li><li>Click <strong>Add SSH
    Key.</strong> The <strong>SSH Configuration</strong> settings appear.<br/><br/><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1620840064812/y-npa-h-2-yw-rq-ahtj-nzm-r-w-osj-fpvmqkrd-kt-d-7-xx-809-pb-j-8-nzv-dhnur-da-6-vuxg-4-x-77-mt-g-zo-ojxhtu-hcx-rnau-9-h-jqox-snk-m-72-pu-pt-cy-y-p-ihw-yrawu-nwy-5-l-ee-nmvg-4-l-le-4-2-ug-fc"/></figure></td><td><ul><li><strong>Name</strong>:
    Enter <strong>ssh_quickstart</strong>.</li><li><strong>Auth Scheme</strong>: Leave
    the default.</li><li><strong>User Name</strong>: Enter <strong>ec2-user</strong>
    (this is the default for AWS EC2 instances)</li><li><strong>Credentials</strong>:
    Select <strong>SSH Key File</strong>.</li><li><strong>Select Encrypted SSH key
    Files</strong>: Select the Harness Encrypted File you just added.</li><li><strong>Select
    Encrypted Passphrase</strong>: Leave empty.</li><li><strong>SSH Port</strong>:
    Leave the default, <strong>22</strong>.</li></ul></td></tr></tbody></table></li></ol><p>Now
    you&#39;re all set to use this SSH key when you set up the Infrastructure Definition
    in Harness, later in this quickstart.</p><h3>Step 5: Create an Application</h3><ol><li>Click <strong>Setup</strong>,
    and then click <strong>Add Application</strong>. The <strong>Application</strong> settings
    appear.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1605719942583/screenshot-2020-11-18-at-10-48-48-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Enter
    the name for your Application, and click <strong>Submit</strong>. Your new Application
    appears.<br/><br/>For more information, see <a href="/article/bucothemly-application-configuration">Create
    an Application</a>.</li></ol><h3>Step 6: Create a Harness SSH Service</h3><p>To
    create a Service for an application package, do the following:</p><ol><li>In your
    Application, click <strong>Services</strong>, and then click <strong>Add Service</strong>.
    The <strong>Add Service</strong> settings appear.</li><li>In <strong>Name</strong>,
    enter a name for the Service. You will use this name when selecting this Service
    in Harness Environments, Workflows, and other components. For more information,
    see <a href="https://docs.harness.io/article/eb3kfl8uls-service-configuration">Services</a>.</li><li>In <strong>Deployment
    Type</strong>, select <strong>Secure Shell (SSH)</strong>. All file-based Services
    are Secure Shell (SSH) deployments. The <strong>Artifact Type</strong> and <strong>Application
    Stack</strong> settings appear.</li><li>In <strong>Artifact Type</strong>, select
    Web Archive (WAR).</li><li> In <strong>Application Stack</strong>, select Tomcat.
    The app stack is used as a runtime environment for your application.<br/><div
    class="note-callout">Ensure your target hosts have JAVA installed.</div></li></ol><h4>Review:
    Default SSH Script Commands</h4><p>The Service page has the following important
    sections:</p><ul><li><strong>Artifact Source</strong> - The package files you
    want to be deployed are added here. In some cases an actual file is obtained,
    but in most cases metadata is sufficient.</li><li><strong>Artifact History</strong> -
    You can manually pull metadata on your artifacts to see their builds and versions.</li><li><strong>Script</strong> -
    The scripts to set up your files. These will typically include an application
    stack setup unless your target hosts already have the application stack set up.</li><li><strong>Add
    Commands</strong> - You can add new commands from an Application or Shared Template
    Library, or simply add a blank command and add Harness scripts to it.</li><li><strong>Configuration</strong> -
    You can add variables and files to use in your Service scripts. These can be encrypted
    by Harness, allowing you to use secrets. The variables and files can be overwritten
    in Environments and Workflows.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1605718728255/screenshot-2020-11-18-at-10-28-04-pm.png"
    style="max-height:90%;max-width:90%" data-hd-height="90%" data-hd-width="90%"/></figure></li></ul><h4>See
    Also</h4><ul><li> <a href="/article/ih779z9kb6-add-deployment-specs-for-traditional-ssh-deployments">Add
    Scripts for Traditional (SSH) Deployments</a></li></ul><p></p><h3>Step 7: Add
    the Artifact Source</h3><p>The Artifact Source for the Service lists the file(s)
    that you want to be copied to the target host(s). The Artifact History will manually
    pull artifact build and version metadata from the Artifact Source.</p><p>For more
    information, see <a href="https://docs.harness.io/article/7dghbx1dbl-configuring-artifact-server">Add
    Artifact Servers</a> and <a href="https://docs.harness.io/article/whwnovprrb-cloud-providers">Add
    Cloud Providers</a>.</p><p>To add an artifact source, do the following:</p><ol><li>In
    your Service, click <strong>Add Artifact Source</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1607148971323/screenshot-2020-12-05-at-11-44-19-am.png"
    style="max-height:60%;max-width:60%" data-hd-height="60%" data-hd-width="60%"/></figure></li><li>Select
    the repo or cloud platform where the artifact is located. The Artifact Source
    settings appear. This topic uses Artifactory as an example.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1607188376380/screenshot-2020-12-05-at-10-41-06-pm.png"
    style="max-height:60%;max-width:60%" data-hd-height="60%" data-hd-width="60%"/></figure></li><li>In <strong>Display
    Name</strong>, enter a name for the Artifactory Server. This is the name you will
    use to identify this connection when adding an Artifact Source to a Harness Service.</li><li>In <strong>Source
    Server</strong>, select the Artifact Server you added to Harness.</li><li>In <strong>Repository</strong>,
    select the <strong>todolist-tutorial</strong>.</li><li>In <strong>Artifact Path/File
    Filter</strong>, enter the artifact path in the repository: <strong>todolist.war</strong>.<br/>Harness
    uses <strong>Metadata Only</strong> to download the file on the target host.<br/>Metadata
    is sufficient as it contains enough information for the target host(s) to obtain
    or build the artifact. Harness stores the metadata. During runtime, Harness passes
    the metadata to the target host(s) where it is used to obtain the artifact(s).
    Ensure that the target host has network connectivity to the Artifact Server. For
    more information, see <a href="https://docs.harness.io/article/qluiky79j8-service-types-and-artifact-sources">Service
    Types and Artifact Sources</a>.</li><li>Click <strong>Submit</strong>. The Artifact
    Source is listed.</li></ol><h3>Step 8: Add an Environment to the Application</h3><p>Add
    deployment Environments for the Services in your Application. These Environments
    will be deployed on the cloud providers you added as a connector. To add an Environment,
    do the following:</p><ol><li>Click <strong>Setup</strong> and then select the
    Application that where you want to add the Environment.</li><li>In <strong>Application
    Defaults</strong>, click <strong>Environments</strong> and then click <strong>Add</strong>
    <strong>Environment</strong>. The <strong>Add Pipeline</strong> settings appear.</li><li>Enter
    a name and description for the Environment. For example, Traditional SSH.</li><li>In <strong>Environment
    Type</strong>, choose <strong>Production</strong> or <strong>Non-Production</strong>.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1605721878432/screenshot-2020-11-18-at-11-05-21-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click <strong>Submit</strong>.</li></ol><h3>Step
    9: Define Your Target Servers</h3><p>As an example, we will create an Infrastructure
    Definition for an AWS EC2 target infrastructure.</p><p>To add an Infrastructure
    Definition, do the following:</p><ol><li>In your Harness Application Environment,
    click <strong>Add Infrastructure Definition</strong>. The <strong>Infrastructure
    Definition</strong> settings appear.</li><li>In <strong>Name</strong>, enter the
    name you will use when you select this Infrastructure Definition in Workflows.</li><li>In <strong>Cloud
    Provider Type</strong>, select the type of Cloud Provider that this Infrastructure
    Definition will use for connections. For example, select <strong>Amazon Web Services</strong> for
    AWS EC2 infrastructures.</li><li>In <strong>Deployment Type</strong>, select the
    deployment type for the Services that will use this Infrastructure Definition.
    In this example, you are deploying SSH type Services like JAR, WAR, etc., you
    would select <strong>Secure Shell (SSH)</strong>.</li><li>Click <strong>Use Already
    Provisioned Infrastructure</strong>. If you were using a Harness <a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner">Infrastructure
    Provisioner</a>, you would select <strong>Map Dynamically Provisioned Infrastructure</strong>.</li><li>In <strong>Cloud
    Provider</strong>, select <strong>Amazon Web Services: Traditional SSH</strong>
    to connect Harness to your deployment infrastructure.</li><li>Select your AWS
    <strong>Region</strong>, for example, US East (N. Virginia). When you select a
    region, more settings appear, such as <strong>VPC</strong> and <strong>Tags</strong>.</li><li>Select
    <strong>Connection Attribute</strong> to access the Target Host using a Harness
    SSH Key secret. This key is used by the Harness Delegate to SSH into the target
    host. See <a href="/article/keodlyvsg5-traditional-ssh-quickstart#step_4_add_target_instance_ssh_key_to_harness">Step
    4: Add Target Instance SSH Key to Harness</a>.</li><li>In the <strong>Host Name
    Convention</strong>, you can leave the default expression.</li><li>Select <strong>Use</strong>
    <strong>AWS Instance Filter</strong>.</li><li>Select the <strong>VPC</strong>
    where the AWS instance you want to deploy to is located. Ensure that the Delegate
    host has connectivity to the VPC.</li><li>In <strong>Tags</strong>, add the AWS
    EC2 Tags that are assigned to your target host(s). You can check your hosts in
    EC2 to get their Tags and ensure that you are using the correct Tags here. For
    example, <code>ssh-target</code>.</li><li>In <strong>Host Connection Type</strong>,
    select <strong>Private DNS</strong> (default selection).<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1606303173908/screenshot-2020-11-25-at-4-49-00-pm.png"
    style="max-height:60%;max-width:60%" data-hd-height="60%" data-hd-width="60%"/></figure></li><li>When
    you are finished, click <strong>Submit</strong>. The Infrastructure Definition
    is added.</li></ol><div class="note-callout">For AWS Infrastructure Definitions,
    you can use <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variables</a> in the <strong>Tags</strong> setting. This allows you to parameterize
    the <strong>Tags</strong> setting, and enter or select the AWS tags to use when
    you deploy any Workflow that uses this Infrastructure Definition.</div><h3>Step
    10: Set up a Basic SSH Workflow</h3><p>Traditional (SSH) deployments involve obtaining
    an application package from an artifact source, such as a WAR file in an AWS S3
    bucket, and deploying it to a target host, such as a virtual machine.</p><p>Typically,
    the Harness Basic Workflow is used for Traditional deployments, but Harness provides
    Canary and Rolling Workflows for Traditional deployments also.</p><p>In this topic,
    we will use the Basic Workflow to demonstrate a simple Traditional deployment.</p><h4>Create
    a Workflow</h4><p>To create a Basic Workflow for a Traditional deployment, do
    the following:</p><ol><li>In your Harness Application, click <strong>Workflows</strong>.</li><li>In <strong>Workflows</strong>,
    click <strong>Add Workflow</strong>. The <strong>Workflow</strong> dialog appears.</li><li>In <strong>Name</strong>,
    enter a name for the Workflow.</li><li>In <strong>Workflow Type</strong>, select <strong>Basic
    Deployment</strong>.</li><li>In <strong>Environment</strong>, select the Environment
    where the Infrastructure Definition you defined for your deployment is located.</li><li>In <strong>Service</strong>,
    select the SSH Service to be deployed.</li><li>In <strong>Infrastructure Definition</strong>,
    select your target infrastructure.</li><li>Click <strong>Submit</strong>. The
    Workflow is created.</li></ol><p>Let&#39;s look at the two default steps in the
    Workflow, <strong>Select Nodes</strong> and <strong>Install</strong>.</p><h4>Select
    Target Node</h4><p>The <strong>Select Nodes</strong> step selects the target hosts
    from the Infrastructure Definition you defined. You can choose to select a specific
    host or simply specify the number of instances to select with the Infrastructure
    Definition criteria.</p><p>The following image shows an <strong>Infrastructure
    Definition</strong> specifying an AWS Region, VPC, and Tags (<strong>Name:ssh-target</strong>),
    the EC2 instance that meets that criteria, and the host name in the Node Select
    dialog.</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1607191721815/screenshot-2020-12-05-at-11-38-04-pm.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p></p><p>For
    details, see <a href="/article/9h1cqaxyp9-select-nodes-workflow-step">Select Nodes
    Workflow Step</a>.</p><h4>Install and Run the Application and Stacks</h4><p>The
    Install step runs the command scripts in your Harness SSH and Service on the target
    host. See <a href="/article/2q8vjxdjcq-install-workflow-step">Install Workflow
    Step</a>.</p><p>The Install step is added in the Basic Workflow as part of its
    <strong>Deploy Service</strong> section. The Install step is used after the <a
    href="/article/9h1cqaxyp9-select-nodes-workflow-step">Select Nodes step</a>, which
    select the target nodes on which to run the Install step.</p><p>For details, see
    <a href="/article/8zff5k2frj-create-a-basic-workflow-for-traditional-ssh-deployments">Create
    a Basic Workflow for Traditional (SSH) Deployments</a>.</p><h3>Step 11: Deploy
    and Review</h3><p>The Basic Workflow is the most common deployment of Services
    deploying application packages. Once you&#39;ve successfully deployed the Workflow,
    you can click the <strong>Install</strong> step to see the Service commands and
    scripts in the <strong>Deployments</strong> page.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/keodlyvsg5/1616177996076/image.png"/></figure><p></p><p>You
    can expand logs for each script in the <strong>Install</strong> step to see the
    log of its execution by the Harness Delegate. For example, here is the <strong>Copy
    Artifact</strong> script copying the application package <strong>todolist.war</strong> to
    the runtime location set up in Application Defaults (<code>$HOME/${app.name}/${service.name}/${env.name}/runtime</code>):</p><pre>Begin
    execution of command: Copy Artifact<br/><br/>Connecting to ip-172-31-7-227.ec2.internal
    .... <br/><br/>Connection to ip-172-31-7-227.ec2.internal established<br/><br/>Begin
    file transfer todolist.war to ip-172-31-7-227.ec2.internal:/home/ec2-user/Traditional
    SSH/SSH Service Tomcat 8/Traditional SSH/runtime/tomcat/webapps<br/><br/>Metadata
    only option set for ARTIFACTORY. Starting download of artifact: todolist-tutorial/todolist.war<br/><br/>ARTIFACTORY:
    Download complete for artifact: todolist.war<br/><br/>File successfully transferred
    to ip-172-31-7-227.ec2.internal:/home/ec2-user/Traditional SSH/SSH Service Tomcat
    8/Traditional SSH/runtime/tomcat/webapps<br/><br/>Command execution finished with
    status SUCCESS</pre><h3>Next Steps</h3><ul><li> <a href="/article/6pwni5f9el-traditional-deployments-overview">Traditional
    (SSH) Deployments How-tos</a></li><li> <a href="/article/181zspq0b6-build-and-deploy-pipelines-overview">Build
    and Deploy Pipeline How-tos</a></li></ul><p></p>'
  slug: traditional-ssh-quickstart
  tags:
  - quickstart
  - Traditional SSH
  is_live: true
