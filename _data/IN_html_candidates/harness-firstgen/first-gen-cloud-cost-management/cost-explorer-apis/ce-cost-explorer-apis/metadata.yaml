type: article
article_id: 5zxz6rxtne
user_id: slcpusem6b
category_id: z4lta2vnfk
author:
  name: Archana Singh
  profile_image: https://www.gravatar.com/avatar/e323facc5a711ac44c46e58dcb52aa3e?d=mm&s=150
title: Use Cost Explorer APIs
slug: ce-cost-explorer-apis
description: The Cost Explorer API allows you to query your cost and usage data. You
  can query total, idle, and unallocated cloud costs in your cluster or Application.
  The response helps you to understand your pr…
short_version: The Cost Explorer API allows you to query your cost and usage data.
  You can query total, idle, and unallocated cloud costs in your cluster or Application.
  The response helps you to understand your pr…
tags:
- Cost Explorer API
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-12-08T09:17:39.017515Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Use Cost Explorer APIs
  description: ""
  short_version: ""
  body: "<p>The Cost Explorer API allows you to query your cost and usage data. You
    can query total, idle, and unallocated cloud costs in your cluster or Application.
    The response helps you to understand your primary cost contributors. You can use
    this data to manage and optimize your cost and resources.</p><p>Currently, these
    APIs can provide data for up to the last seven days. If you do not specify <code>StartTime</code>
    and <code>EndTime</code> or the specified time value is greater than seven days,
    it returns an exception error.</p><p>This topic lists examples of export data
    API usage.</p><p>In this topic:</p><ul><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-export-data-apis#before_you_begin\">Before
    You Begin</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#undefined\">Example
    1: Get Total, Idle, and Unallocated Cost Across Your Clusters</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_2_get_total_cost_across_your_clusters\">Example
    2: Get Total Cost Across Your Clusters</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_3_get_total_and_idle_cost_in_your_cluster_workloads\">Example
    3: Get Total and Idle Cost in Your Cluster Workloads</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_4_get_total_cost_in_your_cluster_workloads\">Example
    4: Get Total Cost in Your Cluster Workloads</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_5_get_the_cost_of_ecs_service_in_your_cluster\">Example
    5: Get the Cost of ECS Service in Your Cluster</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_6_get_total_and_idle_cost_in_your_harness_applications\">Example
    6: Get Total and Idle Cost in Your Harness Applications</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_7_get_raw_data\">Example
    7: Get Raw Data</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_8_add_label_information_in_the_workload_table_view\">Example
    8: Add Label Information in the Workload Table View</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_9_get_cost_details_of_nodes_in_your_cluster\">Example
    9: Get Cost Details of Nodes in Your Cluster</a></li><li><a href=\"https://docs.harness.io/article/5zxz6rxtne-ce-cost-explorer-apis#example_10_fetch_cost_details_of_pods_in_your_cluster\">Example
    10: Fetch Cost Details of Pods in Your Cluster</a></li></ul><h3>Before You Begin</h3><ul><li><a
    href=\"/article/tm0w6rruqv-harness-api\">​Introduction to Harness GraphQL API</a></li><li><a
    href=\"/article/2rmd5i0e0h-harness-api-explorer\">Harness API Explorer</a></li><li><a
    href=\"/article/eeekdk75q2-cost-explorer-walkthrough\">Cost Explorer Walkthrough</a></li><li><a
    href=\"/article/4rq26sszja-analyze-cost-trends-across-clusters\">Analyze Cost
    for Kubernetes</a></li></ul><h3 id=\"undefined\">Example 1: Get Total, Idle, and
    Unallocated Cost Across Your Clusters</h3><p>Use this sample query to get the <code>total</code>,
    <code>idle</code>, and <code>unallocated</code> cost across your clusters.</p><p>You
    can also specify a <code>limit</code> and <code>offset</code> to the query. Limit
    specifies the number of entries that will be returned and offset specifies the
    index from start.</p><div class=\"note-callout\">The time values passed for these
    queries follow Unix Time. You can use <a href=\"https://www.epochconverter.com/\">Epoch
    and Unix Timestamp Conversion Tools</a> to convert.</div><h5>Request</h5><pre>{<br/>
    \ ceClusterBillingData(aggregateFunction: [{function: SUM, cost: TOTALCOST}, {function:
    SUM, cost: IDLECOST}, {function: SUM, cost: UNALLOCATEDCOST}], filters: [{startTime:
    {operator: AFTER, value: 1594166400000}}, {endTime: {operator: BEFORE, value:
    1594771199000}}], groupBy: [{entity: Cluster}, {entity: Region}], sortCriteria:
    {sortType: TOTALCOST, order: DESCENDING}, limit: 2, offset: 1) {<br/>    data
    {<br/>      cluster<br/>      region<br/>      totalCost<br/>      idleCost<br/>
    \     unallocatedCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>
    \ &#34;data&#34;: {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;:
    [<br/>        {<br/>          &#34;cluster&#34;: &#34;5e4492209d084a327c5f9690&#34;,<br/>
    \         &#34;region&#34;: &#34;us-central1&#34;,<br/>          &#34;totalCost&#34;:
    114.40402222222215,<br/>          &#34;idleCost&#34;: 0,<br/>          &#34;unallocatedCost&#34;:
    49.168831484429724<br/>        },<br/>        {<br/>          &#34;cluster&#34;:
    &#34;5db7df8c01d32e806e20db28&#34;,<br/>          &#34;region&#34;: &#34;us-central1&#34;,<br/>
    \         &#34;totalCost&#34;: 114.37949999999987,<br/>          &#34;idleCost&#34;:
    34.45507082155397,<br/>          &#34;unallocatedCost&#34;: 49.1824891993497<br/>
    \       }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example 2: Get Total Cost
    Across Your Clusters</h3><p>Use this sample query to get the details of the <code>total</code>
    cost across your clusters.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(aggregateFunction:
    [{function: SUM, cost: TOTALCOST}], filters: [{startTime: {operator: AFTER, value:
    1594166400000}}, {endTime: {operator: BEFORE, value: 1594771199000}}], groupBy:
    [{entity: Cluster}, {time: {timePeriod: DAY}}], sortCriteria: {sortType: TIME,
    order: ASCENDING}) {<br/>    data {<br/>      startTime<br/>      cluster<br/>
    \     totalCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;startTime&#34;: 1594166400000,<br/>          &#34;cluster&#34;:
    &#34;5db7df8c01d32e806e20db28&#34;,<br/>          &#34;totalCost&#34;: 22.182955555555555<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594166400000,<br/>
    \         &#34;cluster&#34;: &#34;5e4492209d084a327c5f9690&#34;,<br/>          &#34;totalCost&#34;:
    22.18296666666667<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594166400000,<br/>          &#34;cluster&#34;: &#34;5e685bc20b238de6cbfb2b0a&#34;,<br/>
    \         &#34;totalCost&#34;: 46.358784<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594166400000,<br/>          &#34;cluster&#34;: &#34;5efc799adc9315eea531ccbe&#34;,<br/>
    \         &#34;totalCost&#34;: 5.6495999999999995<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594252800000,<br/>          &#34;cluster&#34;:
    &#34;5db7df8c01d32e806e20db28&#34;,<br/>          &#34;totalCost&#34;: 23.258011111111113<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594252800000,<br/>
    \         &#34;cluster&#34;: &#34;5e4492209d084a327c5f9690&#34;,<br/>          &#34;totalCost&#34;:
    23.27865555555555<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594252800000,<br/>          &#34;cluster&#34;: &#34;5e685bc20b238de6cbfb2b0a&#34;,<br/>
    \         &#34;totalCost&#34;: 20.736714000000003<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594252800000,<br/>          &#34;cluster&#34;:
    &#34;5efc799adc9315eea531ccbe&#34;,<br/>          &#34;totalCost&#34;: 5.6495999999999995<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594339200000,<br/>
    \         &#34;cluster&#34;: &#34;5db7df8c01d32e806e20db28&#34;,<br/>          &#34;totalCost&#34;:
    22.64108888888889<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594339200000,<br/>          &#34;cluster&#34;: &#34;5e4492209d084a327c5f9690&#34;,<br/>
    \         &#34;totalCost&#34;: 22.692766666666667<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594339200000,<br/>          &#34;cluster&#34;:
    &#34;5e685bc20b238de6cbfb2b0a&#34;,<br/>          &#34;totalCost&#34;: 20.421504000000002<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594339200000,<br/>
    \         &#34;cluster&#34;: &#34;5efc799adc9315eea531ccbe&#34;,<br/>          &#34;totalCost&#34;:
    5.6495999999999995<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594425600000,<br/>          &#34;cluster&#34;: &#34;5db7df8c01d32e806e20db28&#34;,<br/>
    \         &#34;totalCost&#34;: 23.24521111111111<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594425600000,<br/>          &#34;cluster&#34;:
    &#34;5e4492209d084a327c5f9690&#34;,<br/>          &#34;totalCost&#34;: 23.205488888888897<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594425600000,<br/>
    \         &#34;cluster&#34;: &#34;5e685bc20b238de6cbfb2b0a&#34;,<br/>          &#34;totalCost&#34;:
    20.421504000000002<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594425600000,<br/>          &#34;cluster&#34;: &#34;5efc799adc9315eea531ccbe&#34;,<br/>
    \         &#34;totalCost&#34;: 5.6495999999999995<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594512000000,<br/>          &#34;cluster&#34;:
    &#34;5db7df8c01d32e806e20db28&#34;,<br/>          &#34;totalCost&#34;: 23.05223333333334<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594512000000,<br/>
    \         &#34;cluster&#34;: &#34;5e4492209d084a327c5f9690&#34;,<br/>          &#34;totalCost&#34;:
    23.044144444444445<br/>        },<br/>        {<br/>          &#34;startTime&#34;:
    1594512000000,<br/>          &#34;cluster&#34;: &#34;5e685bc20b238de6cbfb2b0a&#34;,<br/>
    \         &#34;totalCost&#34;: 20.421504000000002<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594512000000,<br/>          &#34;cluster&#34;:
    &#34;5efc799adc9315eea531ccbe&#34;,<br/>          &#34;totalCost&#34;: 5.649600000000003<br/>
    \       }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example 3: Get Total and
    Idle Cost in Your Cluster Workloads</h3><p>Use this sample query to get the <code>total</code>
    and <code>idle</code> cost in your cluster workloads. This example uses a Kubernetes
    cluster.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(aggregateFunction:
    [{function: SUM, cost: TOTALCOST}, {function: SUM, cost: IDLECOST}], filters:
    [{startTime: {operator: AFTER, value: 1594166400000}}, {endTime: {operator: BEFORE,
    value: 1594771199000}}], groupBy: [{entity: Workload}, {entity: Namespace}], sortCriteria:
    {sortType: TOTALCOST, order: DESCENDING}) {<br/>    data {<br/>      k8s {<br/>
    \       workload<br/>        namespace<br/>      }<br/>      totalCost<br/>      idleCost<br/>
    \   }<br/>  }<br/>}<br/></pre><h5>Response</h5><pre>{<br/>  &#34;data&#34;: {<br/>
    \   &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;k8s&#34;: {<br/>            &#34;workload&#34;: &#34;Unallocated&#34;,<br/>
    \           &#34;namespace&#34;: &#34;Unallocated&#34;<br/>          },<br/>          &#34;totalCost&#34;:
    171.94164690970473,<br/>          &#34;idleCost&#34;: 0<br/>        },<br/>        {<br/>
    \         &#34;k8s&#34;: {<br/>            &#34;workload&#34;: &#34;qa-target-zeaakf&#34;,<br/>
    \           &#34;namespace&#34;: &#34;harness-delegate&#34;<br/>          },<br/>
    \         &#34;totalCost&#34;: 11.351383425925924,<br/>          &#34;idleCost&#34;:
    3.209113214533147<br/>        },<br/>        {<br/>          &#34;k8s&#34;: {<br/>
    \           &#34;workload&#34;: &#34;eks-custom-delegate-zeaakf-0&#34;,<br/>            &#34;namespace&#34;:
    &#34;harness-delegate&#34;<br/>          },<br/>          &#34;totalCost&#34;:
    7.762500000000001,<br/>          &#34;idleCost&#34;: 5.411073869204506<br/>        },<br/>
    \       {<br/>          &#34;k8s&#34;: {<br/>            &#34;workload&#34;: &#34;qa-target-automation-1-xicobc&#34;,<br/>
    \           &#34;namespace&#34;: &#34;harness-delegate&#34;<br/>          },<br/>
    \         &#34;totalCost&#34;: 7.561381759259261,<br/>          &#34;idleCost&#34;:
    1.4539720434025662<br/>        }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example
    4: Get Total Cost in Your Cluster Workloads</h3><p>Use this sample query to get
    the <code>total</code> cost in your cluster workloads. This example uses a Kubernetes
    cluster.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(aggregateFunction:
    [{function: SUM, cost: TOTALCOST}], filters: [{startTime: {operator: AFTER, value:
    1594166400000}}, {endTime: {operator: BEFORE, value: 1594771199000}}], groupBy:
    [{entity: Workload}, {time: {timePeriod: DAY}}], sortCriteria: {sortType: TIME,
    order: ASCENDING}) {<br/>    data {<br/>      startTime<br/>      k8s {<br/>        workload<br/>
    \     }<br/>      totalCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>
    \ &#34;data&#34;: {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;:
    [<br/>        {<br/>          &#34;startTime&#34;: 1594166400000,<br/>          &#34;k8s&#34;:
    {<br/>            &#34;workload&#34;: &#34;harness-example-1594104124442-deployment-canary&#34;<br/>
    \         },<br/>          &#34;totalCost&#34;: 0.000009444444444444445<br/>        },<br/>
    \       {<br/>          &#34;startTime&#34;: 1594166400000,<br/>          &#34;k8s&#34;:
    {<br/>            &#34;workload&#34;: &#34;kube-dns-autoscaler&#34;<br/>          },<br/>
    \         &#34;totalCost&#34;: 0.005425000000000001<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594166400000,<br/>          &#34;k8s&#34;: {<br/>
    \           &#34;workload&#34;: &#34;stackdriver-metadata-agent-cluster-level&#34;<br/>
    \         },<br/>          &#34;totalCost&#34;: 0.036605<br/>        },<br/>        {<br/>
    \         &#34;startTime&#34;: 1594166400000,<br/>          &#34;k8s&#34;: {<br/>
    \           &#34;workload&#34;: &#34;harness-example-1594104294676-deployment-canary&#34;<br/>
    \         },<br/>          &#34;totalCost&#34;: 0.000015277777777777777<br/>        },<br/>
    \       {<br/>          &#34;startTime&#34;: 1594166400000,<br/>          &#34;k8s&#34;:
    {<br/>            &#34;workload&#34;: &#34;asb-1&#34;<br/>          },<br/>          &#34;totalCost&#34;:
    0<br/>        }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example 5: Get the
    Cost of ECS Service in Your Cluster</h3><p>Use this sample query to get the cost
    of <code>ECS Service</code> in your cluster.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(aggregateFunction:
    [{function: SUM, cost: TOTALCOST}, {function: SUM, cost: IDLECOST}], filters:
    [{startTime: {operator: AFTER, value: 1594166400000}}, {endTime: {operator: BEFORE,
    value: 1594771199000}}], groupBy: [{entity: EcsService}, {entity: LaunchType}],
    sortCriteria: {sortType: TOTALCOST, order: DESCENDING}) {<br/>    data {<br/>
    \     ecs {<br/>        service<br/>        launchType<br/>      }<br/>      totalCost<br/>
    \     idleCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;ecs&#34;: {<br/>            &#34;service&#34;: &#34;ecs-example&#34;,<br/>
    \           &#34;launchType&#34;: &#34;EC2&#34;<br/>          },<br/>          &#34;totalCost&#34;:
    6.952500000000006,<br/>          &#34;idleCost&#34;: 5.19847219844681<br/>        },<br/>
    \       {<br/>          &#34;ecs&#34;: {<br/>            &#34;service&#34;: &#34;cce_app_01__cce_svc_aws__cce_aws_env__2&#34;,<br/>
    \           &#34;launchType&#34;: &#34;EC2&#34;<br/>          },<br/>          &#34;totalCost&#34;:
    0.3530566406249998,<br/>          &#34;idleCost&#34;: 0.33087744140624925<br/>
    \       },<br/>        {<br/>          &#34;ecs&#34;: {<br/>            &#34;service&#34;:
    &#34;cce_app_02__ce_svc_01_env_02__qa__2&#34;,<br/>            &#34;launchType&#34;:
    &#34;EC2&#34;<br/>          },<br/>          &#34;totalCost&#34;: 0.17652832031250026,<br/>
    \         &#34;idleCost&#34;: 0.1641562499999997<br/>        }<br/>      ]<br/>
    \   }<br/>  }<br/>}</pre><h3>Example 6: Get Total and Idle Cost in Your Harness
    Applications</h3><p>Use this sample query to get the <code>total</code>, <code>idle</code>,
    and <code>unallocated</code> cost in your Harness Application. For more information
    on how Harness organizes and models your projects using Applications, review <a
    href=\"/article/v7eaaq98vo-perform-root-cause-analysis#option_5_root_cost_analysis_for_harness_applications\">Harness
    Applications</a>.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(aggregateFunction:
    [{function: SUM, cost: TOTALCOST}, {function: SUM, cost: IDLECOST}], filters:
    [{startTime: {operator: AFTER, value: 1594166400000}}, {endTime: {operator: BEFORE,
    value: 1594771199000}}], groupBy: [{entity: Application}], sortCriteria: {sortType:
    TOTALCOST, order: DESCENDING}) {<br/>    data {<br/>      harness {<br/>        application<br/>
    \     }<br/>      totalCost<br/>      idleCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>
    \ &#34;data&#34;: {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;:
    [<br/>        {<br/>          &#34;harness&#34;: {<br/>            &#34;application&#34;:
    &#34;cce_app_01&#34;<br/>          },<br/>          &#34;totalCost&#34;: 0.3578607586320755,<br/>
    \         &#34;idleCost&#34;: 0.33087744140624925<br/>        },<br/>        {<br/>
    \         &#34;harness&#34;: {<br/>            &#34;application&#34;: &#34;cce_app_02&#34;<br/>
    \         },<br/>          &#34;totalCost&#34;: 0.17652832031250026,<br/>          &#34;idleCost&#34;:
    0.1641562499999997<br/>        }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example
    7: Get Raw Data</h3><p>Use this sample query to get raw data, such as cluster
    name, cluster type, average memory, and CPU utilization, etc.</p><h5>Request</h5><pre>{<br/>
    \ ceClusterBillingData(filters:[{startTime:{operator:AFTER, value:1593839612000}},
    {endTime:{operator:BEFORE, value:1594185212000}}] limit: 10){<br/>    data{<br/>
    \     startTime<br/>      cluster<br/>      totalCost<br/>      idleCost<br/>
    \     unallocatedCost<br/>      systemCost<br/>      clusterType<br/>      region<br/>
    \     k8s{<br/>        workload<br/>        namespace<br/>      }<br/>      ecs{<br/>
    \       service<br/>        launchType<br/>      }<br/>      avgCpuUtilization<br/>
    \     avgMemoryUtilization<br/>      maxCpuUtilization<br/>      maxMemoryUtilization<br/>
    \     memoryLimit<br/>      memoryRequest<br/>      cpuLimit<br/>      cpuRequest<br/>
    \   }<br/>  }<br/>}<br/></pre><h5>Response</h5><pre>{<br/>  &#34;data&#34;: {<br/>
    \   &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;startTime&#34;: 1594166400000,<br/>          &#34;cluster&#34;:
    &#34;5efc799adc9315eea531ccbe&#34;,<br/>          &#34;totalCost&#34;: 2.76,<br/>
    \         &#34;idleCost&#34;: 1.5653063312665463,<br/>          &#34;unallocatedCost&#34;:
    0.5091926027624538,<br/>          &#34;systemCost&#34;: 0.44759646492004396,<br/>
    \         &#34;clusterType&#34;: &#34;K8S&#34;,<br/>          &#34;region&#34;:
    &#34;eu-central-1&#34;,<br/>          &#34;k8s&#34;: {<br/>            &#34;workload&#34;:
    null,<br/>            &#34;namespace&#34;: null<br/>          },<br/>          &#34;ecs&#34;:
    {<br/>            &#34;service&#34;: null,<br/>            &#34;launchType&#34;:
    null<br/>          },<br/>          &#34;avgCpuUtilization&#34;: 0.0874776659826389,<br/>
    \         &#34;avgMemoryUtilization&#34;: 0.4092622368948973,<br/>          &#34;maxCpuUtilization&#34;:
    0.359142599,<br/>          &#34;maxMemoryUtilization&#34;: 0.5701184272766113,<br/>
    \         &#34;memoryLimit&#34;: 0,<br/>          &#34;memoryRequest&#34;: 8192,<br/>
    \         &#34;cpuLimit&#34;: 0,<br/>          &#34;cpuRequest&#34;: 2048<br/>
    \       },<br/>        {<br/>          &#34;startTime&#34;: 1594166400000,<br/>
    \         &#34;cluster&#34;: &#34;5efc799adc9315eea531ccbe&#34;,<br/>          &#34;totalCost&#34;:
    0.043199999999999995,<br/>          &#34;idleCost&#34;: 0,<br/>          &#34;unallocatedCost&#34;:
    0.03297722931056097,<br/>          &#34;systemCost&#34;: 0.006449908447265625,<br/>
    \         &#34;clusterType&#34;: &#34;K8S&#34;,<br/>          &#34;region&#34;:
    &#34;eu-central-1&#34;,<br/>          &#34;k8s&#34;: {<br/>            &#34;workload&#34;:
    null,<br/>            &#34;namespace&#34;: null<br/>          },<br/>          &#34;ecs&#34;:
    {<br/>            &#34;service&#34;: null,<br/>            &#34;launchType&#34;:
    null<br/>          },<br/>          &#34;avgCpuUtilization&#34;: 0.02275921297222222,<br/>
    \         &#34;avgMemoryUtilization&#34;: 0.5611361984370483,<br/>          &#34;maxCpuUtilization&#34;:
    0.046088964,<br/>          &#34;maxMemoryUtilization&#34;: 0.6234664916992188,<br/>
    \         &#34;memoryLimit&#34;: 0,<br/>          &#34;memoryRequest&#34;: 512,<br/>
    \         &#34;cpuLimit&#34;: 0,<br/>          &#34;cpuRequest&#34;: 2048<br/>
    \       }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example 8: Add Label Information
    in the Workload Table View</h3><p>Use this sample query to add label data in the
    workload table view. This adds <strong>Name</strong> and <strong>Value</strong>
    columns for the selected labels.</p><h5>Request</h5><pre>{<br/>  ceClusterBillingData(
    aggregateFunction: [{function: SUM, cost: TOTALCOST}, {function: SUM, cost: IDLECOST}],
    <br/>                        filters: [{startTime: {operator: AFTER, value: 1594166400000}},
    <br/>                                  {endTime: {operator: BEFORE, value: 1594771199000}}],
    <br/>                        groupBy: [{entity: Workload}, {entity: Namespace}],
    <br/>                        select : [{ labels : [&#34;app&#34;, &#34;version&#34;]
    } ],<br/>                        sortCriteria: {sortType: TOTALCOST, order: DESCENDING}<br/>
    \                       limit:4) {<br/>    data {<br/>      k8s {<br/>        workload<br/>
    \       namespace<br/>        selectedLabels{<br/>          name<br/>          value<br/>
    \       }<br/>      }<br/>      totalCost<br/>      idleCost<br/>    }<br/>  }<br/>}</pre><h5>Response</h5><pre>{<br/>
    \ &#34;data&#34;: {<br/>    &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;:
    [<br/>        {<br/>          &#34;k8s&#34;: {<br/>            &#34;workload&#34;:
    &#34;harness-example-deployment&#34;,<br/>            &#34;namespace&#34;: &#34;harness&#34;,<br/>
    \           &#34;selectedLabels&#34;: [<br/>              {<br/>                &#34;name&#34;:
    &#34;app&#34;,<br/>                &#34;value&#34;: &#34;harness-example&#34;<br/>
    \             },<br/>              {<br/>                &#34;name&#34;: &#34;version&#34;,<br/>
    \               &#34;value&#34;: &#34;-&#34;<br/>              }<br/>            ]<br/>
    \         },<br/>          &#34;totalCost&#34;: 4.452178888888889,<br/>          &#34;idleCost&#34;:
    2.138144994067336<br/>        },<br/>        {<br/>          &#34;k8s&#34;: {<br/>
    \           &#34;workload&#34;: &#34;harness-test-appd-deployment&#34;,<br/>            &#34;namespace&#34;:
    &#34;harness&#34;,<br/>            &#34;selectedLabels&#34;: [<br/>              {<br/>
    \               &#34;name&#34;: &#34;app&#34;,<br/>                &#34;value&#34;:
    &#34;harness-test-appd&#34;<br/>              },<br/>              {<br/>                &#34;name&#34;:
    &#34;version&#34;,<br/>                &#34;value&#34;: &#34;-&#34;<br/>              }<br/>
    \           ]<br/>          },<br/>          &#34;totalCost&#34;: 4.444068611111109,<br/>
    \         &#34;idleCost&#34;: 2.0589668015521623<br/>        },<br/>        {<br/>
    \         &#34;k8s&#34;: {<br/>            &#34;workload&#34;: &#34;mongo&#34;,<br/>
    \           &#34;namespace&#34;: &#34;mongo&#34;,<br/>            &#34;selectedLabels&#34;:
    [<br/>              {<br/>                &#34;name&#34;: &#34;app&#34;,<br/>
    \               &#34;value&#34;: &#34;mongo&#34;<br/>              },<br/>              {<br/>
    \               &#34;name&#34;: &#34;version&#34;,<br/>                &#34;value&#34;:
    &#34;-&#34;<br/>              }<br/>            ]<br/>          },<br/>          &#34;totalCost&#34;:
    1.2370908333333333,<br/>          &#34;idleCost&#34;: 0.6569387846433649<br/>
    \       },<br/>        {<br/>          &#34;k8s&#34;: {<br/>            &#34;workload&#34;:
    &#34;proff-point-polling-enabled-kmpysm&#34;,<br/>            &#34;namespace&#34;:
    &#34;harness-delegate&#34;,<br/>            &#34;selectedLabels&#34;: [<br/>              {<br/>
    \               &#34;name&#34;: &#34;app&#34;,<br/>                &#34;value&#34;:
    &#34;-&#34;<br/>              },<br/>              {<br/>                &#34;name&#34;:
    &#34;version&#34;,<br/>                &#34;value&#34;: &#34;-&#34;<br/>              }<br/>
    \           ]<br/>          },<br/>          &#34;totalCost&#34;: 1.213107037037037,<br/>
    \         &#34;idleCost&#34;: 0.6089169647607484<br/>        }<br/>      ]<br/>
    \   }<br/>  }<br/>}</pre><p></p><h3>Example 9: Get Cost Details of Nodes in Your
    Cluster</h3><p>Use this sample query to get the cost details of nodes in your
    cluster.</p><h5>Request</h5><p></p><pre>{<br/>  <br/>  ceClusterBillingData(<br/>
    \   aggregateFunction:[{cost:TOTALCOST, function: SUM}<br/>    \t{cost:IDLECOST,
    function: SUM},<br/>    \t{cost:UNALLOCATEDCOST, function: SUM},<br/>    \t{cost:MEMORYCOST,
    function: SUM},<br/>    \t{cost:MEMORYIDLECOST, function: SUM},<br/>    \t{cost:MEMORYUNALLOCATEDCOST,
    function: SUM},<br/>    \t{cost:CPUCOST, function: SUM},<br/>    \t{cost:CPUIDLECOST,
    function: SUM},<br/>    \t{cost:CPUUNALLOCATEDCOST, function: SUM},<br/>    \t{cost:STORAGECOST,
    function: SUM},<br/>    \t{cost:STORAGEIDLECOST, function: SUM},<br/>    \t{cost:STORAGEUNALLOCATEDCOST,
    function: SUM},<br/>    \t{utilization:STORAGE_REQUEST, function: MAX},<br/>    \t{utilization:STORAGE_UTILIZATION_VALUE,
    function: MAX},<br/>    \t{cost:SYSTEMCOST, function: SUM},<br/>    \t{cost:NETWORKCOST,
    function: SUM},]<br/>    groupBy:[{entity:Node}, {entity: Cluster}]<br/>  \tfilters:[{startTime:{operator:AFTER,
    value:1638316800000}}, {endTime:{operator:BEFORE, value:1638835200000}}]<br/>
    \ \tsortCriteria:{sortType:TOTALCOST, order:DESCENDING}<br/>    limit: 10<br/>
    \ ){<br/>    data{<br/>      cluster<br/>      k8s{<br/>        entityDetails{<br/>
    \         id<br/>          name<br/>          totalCost<br/>          idleCost<br/>
    \         unallocatedCost<br/>          systemCost<br/>          instanceCategory<br/>
    \         machineType<br/>          cpuAllocatable<br/>          memoryAllocatable<br/>
    \         memoryTotalCost<br/>          memoryIdleCost<br/>          memoryUnallocatedCost<br/>
    \         cpuTotalCost<br/>          cpuIdleCost<br/>          cpuUnallocatedCost<br/>
    \         createTime<br/>          deleteTime<br/>        }<br/>      }<br/>    }<br/>
    \ }<br/>}</pre><p></p><h5>Response</h5><p></p><pre>{<br/>  &#34;data&#34;: {<br/>
    \   &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;cluster&#34;: &#34;qa-target-clone&#34;,<br/>          &#34;k8s&#34;:
    {<br/>            &#34;entityDetails&#34;: {<br/>              &#34;id&#34;: &#34;2abab107ff820dd49ed7f711:0eec8ae2-08fc-44b4-84fd-f02745c10283&#34;,<br/>
    \             &#34;name&#34;: &#34;test-qa-target-qa-target-del-pool-xyz-2abc&#34;,<br/>
    \             &#34;totalCost&#34;: 46.62,<br/>              &#34;idleCost&#34;:
    0,<br/>              &#34;unallocatedCost&#34;: 43.26,<br/>              &#34;systemCost&#34;:
    3.36,<br/>              &#34;instanceCategory&#34;: &#34;ON_DEMAND&#34;,<br/>
    \             &#34;machineType&#34;: &#34;linux&#34;,<br/>              &#34;cpuAllocatable&#34;:
    8,<br/>              &#34;memoryAllocatable&#34;: 32,<br/>              &#34;memoryTotalCost&#34;:
    23.31,<br/>              &#34;memoryIdleCost&#34;: 0,<br/>              &#34;memoryUnallocatedCost&#34;:
    20.21,<br/>              &#34;cpuTotalCost&#34;: 46.62,<br/>              &#34;cpuIdleCost&#34;:
    0,<br/>              &#34;cpuUnallocatedCost&#34;: 43.26,<br/>              &#34;createTime&#34;:
    1633330139000,<br/>              &#34;deleteTime&#34;: 0<br/>            }<br/>
    \         }<br/>        },<br/>        {<br/>          &#34;cluster&#34;: &#34;qa-target-clone&#34;,<br/>
    \         &#34;k8s&#34;: {<br/>            &#34;entityDetails&#34;: {<br/>              &#34;id&#34;:
    &#34;2abab107ff820dd49ed7f711:12053334-f7be-4f22-1f3h-756bb335abc5&#34;,<br/>
    \             &#34;name&#34;: &#34;test-qa-target-qa-target-del-pool-a12abcde-a1bc&#34;,<br/>
    \             &#34;totalCost&#34;: 46.62,<br/>              &#34;idleCost&#34;:
    0,<br/>              &#34;unallocatedCost&#34;: 43.26,<br/>              &#34;systemCost&#34;:
    3.36,<br/>              &#34;instanceCategory&#34;: &#34;ON_DEMAND&#34;,<br/>
    \             &#34;machineType&#34;: &#34;linux&#34;,<br/>              &#34;cpuAllocatable&#34;:
    8,<br/>              &#34;memoryAllocatable&#34;: 32,<br/>              &#34;memoryTotalCost&#34;:
    23.31,<br/>              &#34;memoryIdleCost&#34;: 0,<br/>              &#34;memoryUnallocatedCost&#34;:
    20.21,<br/>              &#34;cpuTotalCost&#34;: 46.62,<br/>              &#34;cpuIdleCost&#34;:
    0,<br/>              &#34;cpuUnallocatedCost&#34;: 43.26,<br/>              &#34;createTime&#34;:
    1635335466000,<br/>              &#34;deleteTime&#34;: 0<br/>            }<br/>
    \         }<br/>        }<br/>      ]<br/>    }<br/>  }<br/>}</pre><h3>Example
    10: Fetch Cost Details of Pods in Your Cluster</h3><p>Use this sample query to
    fetch the cost details of pods in your cluster.</p><h5>Request</h5><p></p><pre>{<br/>
    \ <br/>  ceClusterBillingData(<br/>    aggregateFunction:[{cost:TOTALCOST, function:
    SUM}<br/>    \t{cost:IDLECOST, function: SUM},<br/>    \t{cost:UNALLOCATEDCOST,
    function: SUM},<br/>    \t{cost:MEMORYCOST, function: SUM},<br/>    \t{cost:MEMORYIDLECOST,
    function: SUM},<br/>    \t{cost:MEMORYUNALLOCATEDCOST, function: SUM},<br/>    \t{cost:CPUCOST,
    function: SUM},<br/>    \t{cost:CPUIDLECOST, function: SUM},<br/>    \t{cost:CPUUNALLOCATEDCOST,
    function: SUM},<br/>    \t{cost:STORAGECOST, function: SUM},<br/>    \t{cost:STORAGEIDLECOST,
    function: SUM},<br/>    \t{cost:STORAGEUNALLOCATEDCOST, function: SUM},<br/>    \t{utilization:STORAGE_REQUEST,
    function: MAX},<br/>    \t{utilization:STORAGE_UTILIZATION_VALUE, function: MAX},<br/>
    \   \t{cost:SYSTEMCOST, function: SUM},<br/>    \t{cost:NETWORKCOST, function:
    SUM},]<br/>    groupBy:[{entity:Pod}]<br/>  \tfilters:[{startTime:{operator:AFTER,
    value:1638316800000}}, {endTime:{operator:BEFORE, value:1638835200000}},<br/>
    \   \t\t\t\t\t{workload:{operator:EQUALS, values:[&#34;workload-here&#34;]}},<br/>
    \   \t\t\t\t\t{cluster:{operator:EQUALS, values: [&#34;cluster-id-here&#34;]}},<br/>
    \   \t\t\t\t\t{namespace:{operator:EQUALS, values:[&#34;namespace-here&#34;]}}]<br/>
    \ \tsortCriteria:{sortType:TOTALCOST, order:DESCENDING}<br/>    limit: 10<br/>
    \ ){<br/>    data{<br/>      cluster<br/>      k8s{<br/>        workload<br/>
    \       namespace<br/>        entityDetails{<br/>          id<br/>          name<br/>
    \         totalCost<br/>          idleCost<br/>          unallocatedCost<br/>
    \         systemCost<br/>          cpuRequested<br/>          memoryRequested<br/>
    \         memoryTotalCost<br/>          memoryIdleCost<br/>          memoryUnallocatedCost<br/>
    \         cpuTotalCost<br/>          cpuIdleCost<br/>          cpuUnallocatedCost<br/>
    \         createTime<br/>          deleteTime<br/>        }<br/>      }<br/>    }<br/>
    \ }<br/>}</pre><p></p><h5>Response</h5><p></p><pre>{<br/>  &#34;data&#34;: {<br/>
    \   &#34;ceClusterBillingData&#34;: {<br/>      &#34;data&#34;: [<br/>        {<br/>
    \         &#34;cluster&#34;: &#34;ATest_Nan&#34;,<br/>          &#34;k8s&#34;:
    {<br/>            &#34;workload&#34;: &#34;qa-test-abcdef&#34;,<br/>            &#34;namespace&#34;:
    &#34;harness-test-cost&#34;,<br/>            &#34;entityDetails&#34;: {<br/>              &#34;id&#34;:
    &#34;12345abc-a6b3-46fe-b46e-b4b56789d4b3&#34;,<br/>              &#34;name&#34;:
    &#34;qa-target-zeaakf-1&#34;,<br/>              &#34;totalCost&#34;: 8.74,<br/>
    \             &#34;idleCost&#34;: 0,<br/>              &#34;unallocatedCost&#34;:
    0,<br/>              &#34;systemCost&#34;: 0,<br/>              &#34;cpuRequested&#34;:
    1,<br/>              &#34;memoryRequested&#34;: 8,<br/>              &#34;memoryTotalCost&#34;:
    5.83,<br/>              &#34;memoryIdleCost&#34;: 0,<br/>              &#34;memoryUnallocatedCost&#34;:
    0,<br/>              &#34;cpuTotalCost&#34;: 8.74,<br/>              &#34;cpuIdleCost&#34;:
    0,<br/>              &#34;cpuUnallocatedCost&#34;: 0,<br/>              &#34;createTime&#34;:
    1633329486000,<br/>              &#34;deleteTime&#34;: 0<br/>            }<br/>
    \         }<br/>        },<br/>        {<br/>          &#34;cluster&#34;: &#34;ATest_Nan&#34;,<br/>
    \         &#34;k8s&#34;: {<br/>            &#34;workload&#34;: &#34;qa-test-abcdef&#34;,<br/>
    \           &#34;namespace&#34;: &#34;harness-test-cost&#34;,<br/>            &#34;entityDetails&#34;:
    {<br/>              &#34;id&#34;: &#34;12345abc-a6b3-46fe-b46e-b4b89214d4b3&#34;,<br/>
    \             &#34;name&#34;: &#34;qa-target-zeaakf-1&#34;,<br/>              &#34;totalCost&#34;:
    8.74,<br/>              &#34;idleCost&#34;: 0,<br/>              &#34;unallocatedCost&#34;:
    0,<br/>              &#34;systemCost&#34;: 0,<br/>              &#34;cpuRequested&#34;:
    1,<br/>              &#34;memoryRequested&#34;: 8,<br/>              &#34;memoryTotalCost&#34;:
    5.83,<br/>              &#34;memoryIdleCost&#34;: 0,<br/>              &#34;memoryUnallocatedCost&#34;:
    0,<br/>              &#34;cpuTotalCost&#34;: 8.74,<br/>              &#34;cpuIdleCost&#34;:
    0,<br/>              &#34;cpuUnallocatedCost&#34;: 0,<br/>              &#34;createTime&#34;:
    1633329486000,<br/>              &#34;deleteTime&#34;: 0<br/>            }<br/>
    \         }<br/>        }<br/>      ]<br/>    }<br/>  }<br/>}</pre><p></p>"
  slug: ce-cost-explorer-apis
  tags:
  - Cost Explorer API
  is_live: true
