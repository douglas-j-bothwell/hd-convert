type: article
article_id: sip9rr6ogy
user_id: x5amubrz4l
category_id: ll7h8ktlwe
author:
  name: Michael Katz
  profile_image: https://www.gravatar.com/avatar/17fb3fc86ca54443de0da47ef350d8f0?d=mm&s=150
title: Add a GitHub Repo
slug: add-github-repo
description: You can add one or more Git repositories as Source Repo Providers in
  Harness. Once added, a Git repo can be used to sync your Harness account and applications
  with your repos and branches.
short_version: Integrating and syncing with GitHub repositories.
tags:
- GitHub
- Git sync
- Post Webhooks
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-12T18:11:37.836837Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add a GitHub Repo
  description: You can add one or more Git repositories as Source Repo Providers in
    Harness. Once added, a Git repo can be used to sync your Harness account and applications
    with your repos and branches.
  short_version: Integrating and syncing with GitHub repositories.
  body: '<p>This topic outlines how to start syncing your Harness account and applications
    with one or more GitHub repositories. You add these repos as Source Repo Providers
    in Harness.</p><h3>Before You Begin</h3><ul><li> <a href="/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a></li></ul><div class="note-callout">Ensure your Git repo
    is initialized (<code>git init</code>) before connecting Harness to it.</div><h3>Limitations</h3><ul><li>One
    Harness Application cannot be in multiple repos.</li><li>Before Harness syncs
    with your Git repo, it will confirm that all Harness&#39; settings are in a valid
    state. If a connection is not working—for example, a connection to an Artifact
    Server or Cloud Provider—Harness will not sync with your Git repo.</li><li>Harness
    performs a <code>git clone</code> to fetch files. If the fetch is timing out,
    it can be because the repo is too large for the network connection to fetch it
    before timing out. To fetch very large repos, enable the feature flag <code>OPTIMIZED_GIT_FETCH_FILES</code>.
    When this feature flag is enabled, Harness will use provider-specific APIs to
    improve performance.<div class="note-callout">If you enable <code>OPTIMIZED_GIT_FETCH_FILES</code>,
    you must use a <u><strong>token</strong></u> for authentication. Passwords are
    not supported.</div><div class="note-callout">Currently, this feature is behind
    the feature flag <code>OPTIMIZED_GIT_FETCH_FILES</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div></li></ul><h3>Step:
    Add Source Repo Provider</h3><p>To add a source repo, do the following:</p><ol><li>Click
    <strong>Setup</strong>.</li><li>Click <strong>Connectors</strong>.</li><li>Click
    <strong>Source Repo Providers</strong>, and then click <strong>Add Source Repo
    Provider</strong>. The <strong>Git Connector</strong> settings appear.</li></ol><h3>Step:
    Display Name</h3><p>Enter a name for the repo connection. This is the name you
    will select when you sync your Harness account and applications in <a href="/article/htvzryeqjw-configuration-as-code">Configuration
    as Code</a>.You could create a Source Repo Provider for the Harness admin account,
    such as <strong>Admin_GitHub</strong>. Later, you can create a Source Repo account
    for each Harness user, such as <strong>J_User_GitHub</strong>.</p><h3>Step: Provider</h3><div
    class="note-callout">Currently, this feature is behind the Feature Flag <code>OPTIMIZED_GIT_FETCH_FILES</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>In <strong>Provider</strong>, select <strong>GitHub</strong>.</p><h3>Step:
    Git Repo or Git Account</h3><div class="note-callout">Currently, Git Account is
    in Beta and behind the Feature Flag <code>GIT_ACCOUNT_SUPPORT</code>. Contact <a
    href="https://mail.google.com/mail/?view=cm&amp;fs=1&amp;tf=1&amp;to=support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>You can add
    a connection to your entire Git account or just a repo in the account.</p><p>Selecting
    a Git account enables you to use one Source Repo Connector for all of your subordinate
    repos.</p><p>Later when you test this connection, you will use a repo name from
    the account.</p><p>In either case, when you use the Connector later in Harness,
    you will specify which repo to use.</p><h3>Step: HTTPS/SSH</h3><p>Select <strong>HTTPS</strong>
    or <strong>SSH</strong> for the connection. You will need to provide the protocol-relevant
    URL in <strong>URL</strong>. If you use Two-Factor Authentication for your Git
    repo, connect over <strong>HTTPS</strong> or <strong>SSH</strong>.</p><div class="note-callout">For
    SSH, ensure that the key is not OpenSSH, but rather PEM format. To generate an
    SSHv2 key, use: <br/><code>ssh-keygen -t rsa -m PEM</code> <br/>The <code>rsa</code> and
    <code>-m PEM</code> ensure the algorithm and that the key is PEM.<br/>Next, follow
    the prompts to create the PEM key. For more information, see the  <a href="https://linux.die.net/man/1/ssh-keygen"
    target="_blank">ssh-keygen man page</a> and <a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"
    target="_blank">Connecting to GitHub with SSH</a>.</div><div class="note-callout">Starting
    March 15, 2022, GitHub is fully deprecating RSA with SHA-1. GitHub will allow
    ECDSA and Ed25519 to be used. RSA keys uploaded after this cut-off date will work
    only with SHA-2 signatures (RSA keys uploaded before this date will continue to
    work with SHA-1). See <a href="https://github.blog/2021-09-01-improving-git-protocol-security-github/#when-are-these-changes-effective"
    target="_blank">Improving Git protocol security on GitHub</a> from GitHub.<br/><br/>Generating
    an SSH key in ECDSA looks like this:<br/><br/><code>ssh-keygen -t ecdsa -b 256
    -f /home/user/Documents/ECDSA/key -m pem</code></div><h3>Step: URL</h3><p>Enter
    the URL for your Git account or repo, depending on what you selected in <strong>Type</strong>.
    Ensure that it matches the option you selected in <a href="#https_ssh"><strong>HTTPS/SSH</strong></a>.</p><p>If
    you selected <strong>Git Repo</strong> in <strong>Type</strong>, enter the full
    URL for the repo, such as <code>https://github.com/account-name/repo-name</code>.</p><p>If
    you selected <strong>Git Account</strong> in <strong>Type</strong>, enter the
    URL without the repo name, like <code>https://github.com/account-name</code>.
    When you use this Source Repo Provider in a Harness setting you will be prompted
    to provide a repo name.</p><p>For example, here are the HTTPS and SSH URLs from
    Github:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/sip9rr6ogy/1627316078324/image.png"/></figure><h3>Step:
    Username and Password/Token</h3><div class="note-callout">Readonly GitHub repos
    also require username and password/token.</div><p>In <strong>Select Encrypted
    Password/Token</strong>, select or create a new  <a href="https://docs.harness.io/article/ygyvp998mu-use-encrypted-text-secrets">Harness
    Encrypted Text secret</a> for the credentials of your Github user account.</p><p>Typically,
    you can validate your token from the command line before using it in Harness.
    For example:</p><p><code>curl -i https://api.github.com -u &lt;username&gt;:&lt;token&gt;</code></p><div
    class="note-callout">If you have set up Two-Factor Authentication in your Git
    repo, then you need to generate a personal access token in your repo and enter
    that token in the <strong>Password/Token</strong> field. In GitHub, you can set
    up the personal access token at <a href="https://github.com/settings/tokens/new"
    target="_blank">https://github.com/settings/tokens/new</a>.</div><div class="note-callout">If
    you enable <code>OPTIMIZED_GIT_FETCH_FILES</code>, you must use a <u><strong>token</strong></u>
    for authentication. Passwords are not supported.</div><h3>Step: SSH Key</h3><p>If
    you selected <strong>SSH</strong> as the connection protocol, you must add the
    <strong>SSH Key</strong> for use with the connection.</p><p>If you added a key
    in Harness Secrets Management, you can select it here. For more information, see
    <a href="/article/au38zpufhr-secret-management#ssh">Secrets Management</a>.</p><p>To
    add a new key, click the drop-down and select <strong>Add New SSH Key</strong>.
    The <strong>SSH Configuration</strong> dialog appears.</p><p>In <strong>User Name</strong>,
    enter <strong>git</strong>. Ensure that it is lowercase.</p><div class="note-callout"><strong>git</strong>
    is the only value you should use in <strong>User Name.</strong></div><p></p><p>In
    <strong>Credentials</strong>, paste in the key or key file path, enter a display
    name, and then click <strong>Submit</strong>.</p><p></p><h3>Step: Branch Name</h3><p>If
    you selected <strong>Git Repo</strong> in <strong>Type</strong>, enter the branch
    name to sync with Harness, such as <strong>master</strong>, <strong>dev</strong>,
    or <strong>myAppName</strong>. Do not enter the full URL to the branch.</p><p></p><div
    class="note-callout">Names may not contain characters from the Emoticons unicode
    block.</div><h3>Option: Delegate Selector</h3><p>If you want this Connector to
    use one or more specific Delegates, use a Delegate Selector. If you do not use
    a Selector, Harness will select a Delegate that has worked in the past for this
    type of Connector.</p><p>In <strong>Delegate Selector</strong>, select the Selector
    for the Delegate(s) you want this Connector to use. You add Selectors to Delegates
    to make sure that they&#39;re used to execute the command. For more information,
    see <a href="/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates with Selectors</a>.</p><p>Harness will use Delegates matching the Selectors
    you add.</p><p>If you use one Selector, Harness will use any Delegate that has
    that Selector.</p><p>If you select two Selectors, a Delegate must have both Selectors
    to be selected. That Delegate might also have other Selectors, but it must have
    the two you selected.</p><h3>Step: Generate Webhook URL</h3><p>Enable this checkbox
    if you want to sync Harness with your repo bidirectionally. Changes made on either
    end will be synced. If you simply want Harness changes synched unidirectionally
    with the repo, disable this checkbox. When you use this Source Repo Provider to
    sync a Harness application to a repo bidirectionally, any account or application
    that uses this Source Repo provider will be synced bidirectionally. For more information,
    see <a href="/article/htvzryeqjw-configuration-as-code">Configuration as Code</a>.</p><p></p><h3>Step:
    Customize Commit Attributes (Git Sync Only)</h3><p>When Harness commits or pushes
    a change to Git as part of syncing, it uses <strong>Harness.io</strong> and <strong>support@harness.io</strong>
    as the author and commit email address of that commit.</p><p>In some cases, you
    might have strong pre-commit limitations on who may or may not commit. In that
    case, you need to provide an author name and email that is approved to push on
    that repo. You can add an <strong>Author Name</strong> and <strong>Author Email</strong>
    address that will be applied whenever Harness syncs with the Git repo.</p><p></p><h3>Option:
    Using the Webhook</h3><p>If you selected the <strong>Generate Webhook URL</strong>
    option when adding your <strong>Source Repo Provider</strong>, the <strong>Generated
    Webhook URL</strong> dialog appears. Copy the URL and use it in your repo to enable
    your repo to sync changes to Harness.</p><p></p><div class="note-callout">Modify
    the <strong>Content type</strong> to <strong>application/json</strong> and use
    the <strong>Just the push event</strong> trigger option.</div><p></p><h3>Step:
    Test and Save</h3><p>To finish configuring this Source Repo Provider:</p><ol><li
    style="counter-increment:li 0" start="1">In the <strong>Git Connector</strong>
    settings, click <strong>Test</strong>. If you selected <strong>Git Account</strong>
    in <strong>Type</strong>, you need to provide a subordinate repo to test with.<br/>Harness
    verifies the settings you entered.</li><li>When testing is successful, click <strong>Submit</strong>.
    This Source Repo Provider is now added to Harness.</li></ol><p></p><h3>Next Steps</h3><ul><li>Once
    a Source Repo Provider is set up, you can use it—at the Harness account level
    and Application level—to sync your account and/or applications with your Git repo.
    See <a href="/article/htvzryeqjw-configuration-as-code">Configuration as Code</a>.</li><li>To
    trigger Harness workflows and pipelines using Git Webhooks, see <a href="/article/xerirloz9a-add-a-trigger-2">Add
    a Trigger</a>.</li><li>To sync and clone a Harness Application template in Git,
    see <a href="/article/3av5pc4goc-onboard-teams-using-git-ops">Onboard Teams Using
    GitOps</a>.</li></ul><p></p>'
  slug: add-github-repo
  tags:
  - GitHub
  - Git sync
  - Post Webhooks
  is_live: true
