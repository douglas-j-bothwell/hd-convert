type: article
article_id: up3w9d8zd0
user_id: mfr0nxh4be
category_id: gyd73rp7np
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Automate Harness Kubernetes Delegate Setup
slug: automate-harness-kubernetes-delegate-setup
description: Use a simple script to create Harness Kubernetes Delegates.
short_version: Use a simple script to create Harness Kubernetes Delegates.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T18:58:21.756738Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Automate Harness Kubernetes Delegate Setup
  description: Use a simple script to create Harness Kubernetes Delegates.
  short_version: Use a simple script to create Harness Kubernetes Delegates.
  body: '<p>You can use a simple script to support GitOps scenarios where you want
    to name, configure, and install a Harness Kubernetes Delegate from a repo.</p><p>Developers
    often need to create Delegates in multiple cluster in their environments (DEV,
    UAT, SIT, STAGE, PROD, etc). This script method gives developers a quick alternative
    to using the manual process in the Harness Manager.</p><p>In this topic:</p><ul><li><a
    href="#before_you_begin">Before You Begin</a></li><li><a href="#step_1_download_the_base_delegate">Step
    1: Download the Base Delegate</a></li><li><a href="#step_2_create_the_script">Step
    2: Create the Script</a></li><li><a href="#step_3_create_a_new_delegate">Step
    3: Create a New Delegate</a></li><li><a href="#step_4_deploy_the_delegate">Step
    4: Deploy the Delegate</a></li><li><a href="#step_5_add_the_script_and_file_to_your_repo">Step
    5: Add the Script and File to Your Repo</a></li><li><a href="#option_1_deploy_using_the_script">Option
    1: Deploy using the Script</a></li><li><a href="#notes">Notes</a></li><li><a href="#next_steps">Next
    Steps</a></li></ul><h3>Before You Begin</h3><ul><li><a href="/article/h9tkwmkrm7-delegate-installation">Harness
    Delegate Overview</a></li></ul><h3>Step 1: Download the Base Delegate</h3><p>You
    will use one Harness Kubernetes Delegate as the base for all of the Delegates
    you generate automatically.</p><ol><li>In Harness, click <strong>Setup</strong>,
    and then click <strong>Harness Delegates</strong>.</li><li>Click <strong>Download
    Delegate</strong>, and then click <strong>Kubernetes YAML</strong>. The Delegate
    settings appear.</li><li>Enter a name for the Delegate, select a Profile (the
    default is named <strong>Primary</strong>), and click <strong>Download</strong>.<div
    class="note-callout">The name is limited to <code>^[a-z0-9-]+$</code> because
    it is a <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names"
    target="_blank">StatefulSet</a> name. Remember this when generating Delegates
    automatically.</div>The harness-delegate-kubernetes.tar.gz file is downloaded.</li><li>Extract
    the file by double-clicking it or using the command <code>tar -zxvf harness-delegate-kubernetes.tar.gz</code>.</li></ol><p>The
    <strong>harness-delegate-kubernetes</strong> folder is where you will save your
    script. The folder contains the harness-delegate.yaml file for the Delegate. Your
    script will use this file to create additional Delegate YAML files.</p><h3>Step
    2: Create the Script</h3><p>The script you will create uses harness-delegate.yaml
    to generate a new Delegate YAML file.</p><p>Each time you run the script, you
    will provide a new Delegate name.</p><p>Let&#39;s create the script:</p><ol><li>In
    the <strong>harness-delegate-kubernetes</strong> folder, create a file and paste
    in the following script:</li></ol><pre>SRC_FILE=harness-delegate.yaml<br/>TMP_FILE=harness-delegate.tmp<br/>DELEGATE_NAME=$1<br/>if
    [ $# -lt 1 ]; then<br/>   echo &#34;usage utils.sh &lt;name&gt;&#34;<br/>   exit
    0<br/>fi<br/>DST_FILE=harness-${DELEGATE_NAME}.yaml<br/>if [ -f $DST_FILE ]; then<br/>  echo
    &#34;File $DST_FILE exists. Exiting...&#34;<br/>  exit 1<br/>fi<br/>if [ ! -f
    ${TMP_FILE} ]; then<br/> echo &#34;creating $TMP_FILE&#34;<br/> cp $SRC_FILE $TMP_FILE<br/>
    dname=$(sed -n &#34;1,/^.*harness.io.name/s?^.*harness.io/name: ??p&#34; $TMP_FILE)<br/>
    sed -i -e &#34;s/$dname/DELEGATENAME/&#34; $TMP_FILE<br/>fi<br/><br/>echo &#34;creating
    $DST_FILE&#34;<br/>cp $TMP_FILE $DST_FILE<br/>sed -i -e &#34;s/DELEGATENAME/${DELEGATE_NAME}/&#34;
    $DST_FILE</pre><ol><li style="counter-increment:li 1" start="2">Save the file
    and name it <strong>utils.sh</strong>.</li><li>Open a Terminal and navigate to
    the <strong>harness-delegate-kubernetes</strong> folder where you saved your script.</li><li>Enter
    the following command to make the utils.sh file executable:</li></ol><pre>chmod
    a+x utils.sh</pre><p>Now the script is ready to run.</p><h3>Step 3: Create a New
    Delegate</h3><p>When you use the <strong>utils.sh</strong> script to generate
    a new Delegate YAML file, you will run the following command:</p><pre>./utils.sh
    &lt;name&gt;</pre><p>You will supply a name for the <code>&lt;name&gt;</code>
    parameter passed to the script.</p><p>There are many different conventions for
    naming the Delegate. Many customers use a combination of the following to create
    a unique Delegate name:</p><ul><li>environment prefix</li><li>application name</li><li>namespace</li></ul><p>The
    name is limited to <code>^[a-z0-9-]+$</code> because it is a <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-label-names"
    target="_blank">StatefulSet</a> name.</p><p>Here is an example using the name
    <code>mydelegate-dev</code> with utils.sh:</p><pre>./utils.sh mydelegate-dev</pre><p>The
    output is:</p><pre>creating harness-delegate.tmp<br/>creating harness-mydelegate-dev.yaml</pre><p>If
    you look in the harness-delegate-kubernetes folder you will see the new YAML file
    created using the name you provided: <strong>harness-mydelegate-dev.yaml</strong>.</p><p>If
    you open the file you will see that the Delegate spec uses the name you provided:</p><pre>...<br/>apiVersion:
    apps/v1<br/>kind: StatefulSet<br/>metadata:<br/>  labels:<br/>    harness.io/app:
    harness-delegate<br/>    harness.io/account: lnfzrf<br/>    harness.io/name: mydelegate-dev<br/>  #
    Name must contain the six letter account identifier: lnfzrf<br/>  name: mydelegate-dev-lnfzrf<br/>  namespace:
    harness-delegate<br/>spec:<br/>  replicas: 1<br/>  selector:<br/>    matchLabels:<br/>      harness.io/app:
    harness-delegate<br/>      harness.io/account: lnfzrf<br/>      harness.io/name:
    mydelegate-dev<br/>...</pre><div class="note-callout">A suffix such as <code>-lnfzrf</code>
    is a Harness convention for identifying the Harness account. Do not remove it.</div><h3>Step
    4: Deploy the Delegate</h3><p>To install the new Delegate you created with the
    script, do the following:</p><ol><li>Log into your Kubernetes cluster.</li><li>Use
    <code>kubectl apply</code> as shown below:</li></ol><pre>kubectl apply -f harness-mydelegate-dev.yaml
    </pre><p>The output is:</p><pre>namespace/harness-delegate created<br/>clusterrolebinding.rbac.authorization.k8s.io/harness-delegate-cluster-admin
    created<br/>secret/mydelegate-dev-proxy created<br/>statefulset.apps/mydelegate-dev-sdqvgx
    created</pre><p></p><h3>Step 5: Add the Script and File to Your Repo</h3><p>You
    can now add the harness-delegate-kubernetes folder containing the script and harness-delegate.yaml
    to your repo.</p><p>Now your developers do not need to use the Harness Manager
    to create Delegates. They can use the utils.sh script in your repo to create new
    Delegates and then install them in their target cluster.</p><h3>Option 1: Deploy
    using the Script</h3><p>If you want to use the utlis.sh script to both create
    <u>and deploy</u> the new Delegate, you can add the following line to the end
    the utlis.sh script:</p><pre>kubectl apply -f $DST_FILE</pre><p>Add this line
    before making the script executable, and then save the script and run <code>chmod
    a+x utils.sh</code> to make it executable.</p><p>Now you can copy the harness-delegate-kubernetes
    folder containing the script and harness-delegate.yaml to your cluster and simply
    run script using the new Delegate name:</p><pre>./utils.sh &lt;name&gt;</pre><p>The
    new Delegate is created and deployed in the cluster.</p><h3>Notes</h3><ul><li><strong>Selectors
    and Scopes</strong> — Harness does not support a way to automatically add Selectors
    or Delegate Scope for Delegates. Currently, you must add these attributes to Delegate
    manually in the Harness Manager.</li><li><strong>Delete a Delegate</strong> —
    To delete a Harness Delegate from your Kubernetes cluster, delete the StatefulSet
    for the Delegate. Deleting the pod without deleting the StatefulSet will result
    in the pod being recreated.<br/>For example, if you have the Delegate pod name <code>mydelegate-vutpmk-0</code>,
    you can delete the StatefulSet with the following command:<br/><code>$ kubectl
    delete statefulset -n harness-delegate mydelegate-vutpmk</code><br/>Note that
    the <code>-0</code> suffix in the pod name is removed for the StatefulSet name.</li></ul><h3>Next
    Steps</h3><ul><li> <a href="/article/p91u0bxtaf-enable-delegate-to-deploy-to-multiple-kubernetes-namespaces">Target
    Delegates to Specific Namespaces</a></li></ul><p></p>'
  slug: automate-harness-kubernetes-delegate-setup
  tags: []
  is_live: true
