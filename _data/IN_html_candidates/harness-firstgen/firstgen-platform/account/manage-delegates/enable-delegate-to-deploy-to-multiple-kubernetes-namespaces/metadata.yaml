type: article
article_id: p91u0bxtaf
user_id: mfr0nxh4be
category_id: gyd73rp7np
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Target Delegates to Specific Namespaces
slug: enable-delegate-to-deploy-to-multiple-kubernetes-namespaces
description: Deploy to specific namespaces.
short_version: Deploy to specific namespaces.
tags:
- namespace
- delegate permissions
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T18:58:21.749719Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Target Delegates to Specific Namespaces
  description: Deploy to specific namespaces.
  short_version: Deploy to specific namespaces.
  body: "<p>By default, Harness Delegates deploy to all namespaces in a Kubernetes
    cluster. This topic describes how to configure Delegates to deploy into specific
    namespaces.</p><p>In this topic:</p><ul><li><a href=\"#before_you_begin\">Before
    You Begin</a></li><li><a href=\"#visual_summary\">Visual Summary</a></li><li><a
    href=\"#review_harness_connections_to_kubernetes\">Review: Harness Connections
    to Kubernetes</a><ul><li><a href=\"#inherit_from_selected_delegate\">Inherit from
    selected Delegate</a></li><li><a href=\"#enter_manually\">Enter Manually</a></li></ul></li><li><a
    href=\"#step_1_create_service_account\">Step 1: Create Service Account</a></li><li><a
    href=\"#step_2_create_role_and_role_binding\">Step 2: Create Role and RoleBinding</a></li><li><a
    href=\"#option_1_use_the_service_account_token\">Option 1: Use the Service Account
    Token</a></li><li><a href=\"#option_2_add_service_account_to_delegate_spec\">Option
    2: Add Service Account to Delegate Spec</a></li><li><a href=\"#review_enable_skip_validation_in_kubernetes_cluster_cloud_provider\">Review:
    Enable Skip Validation in Kubernetes Cluster Cloud Provider</a></li><li><a href=\"#notes\">Notes</a></li><li><a
    href=\"#next_steps\">Next Steps</a></li></ul><h3>Before You Begin</h3><ul><li><a
    href=\"/article/h9tkwmkrm7-delegate-installation\">Harness Delegate Overview</a></li><li><a
    href=\"/article/0hn6vdpeqz-install-kubernetes-delegate\">Install the Harness Kubernetes
    Delegate</a></li></ul><h3>Visual Summary</h3><p>Let&#39;s take a quick look at
    the two ways the Delegate can deploy to namespaces in a cluster.</p><h4>Central
    Model</h4><p>By default, the Delegate resides in a namespace in the target cluster
    with a service account attached to it. The service account uses a ClusterRole
    for permission to deploy to all namespaces in the cluster.</p><p>The is called
    this the central model. Here is a simple illustration of the central model:</p><p></p><figure><img
    src=\"https://files.helpdocs.io/kw8ldg1itf/articles/p91u0bxtaf/1581641324015/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>The
    central model is simple and efficient, but it does not let you restrict teams
    to deploying into specific namespaces. Any team member can deploy to any namespace.</p><p>As
    an alternative, you can use a distributed model.</p><h4>Distributed Model</h4><p>This
    model places a Delegate in each namespace in the cluster. It limits each Delegate
    to deploying into its own namespace.</p><p>Here is the illustration of the distributed
    model:</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/p91u0bxtaf/1581641790397/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>In
    this model, each team uses their own Delegate for their deployments into their
    own namespace.</p><p>The distributed model is more complex, but it prevents a
    team member from deploying into the wrong namespace.</p><h3>Review: Harness Connections
    to Kubernetes</h3><p>First, we&#39;ll review how Harness connects to the target
    Kubernetes cluster using the Delegate.</p><p>For the Delegate to perform operations
    on a target Kubernetes cluster, it requires one of the following:</p><ul><li>A
    service account. The default service account created by the Kubernetes and Helm
    Delegates uses the Kubernetes <strong>cluster-admin</strong> role.</li><li>Service
    account token.</li><li>Username and password.</li><li>CA certificate, client certificate,
    and client key.</li></ul><p>For this topic, we will focus on the service account.</p><p>The
    Harness Kubernetes and Helm Delegates are designed to create the Kubernetes resources
    they need when you install them. This includes the namespace, service account,
    and a ClusterRole that enables the Delegate to deploy to any namespaces in the
    cluster.</p><pre>apiVersion: rbac.authorization.k8s.io/v1beta1<br/>kind: ClusterRoleBinding<br/>metadata:<br/>
    \ name: harness-delegate-cluster-admin<br/>subjects:<br/>  - kind: ServiceAccount<br/>
    \   name: default<br/>    namespace: harness-delegate<br/>roleRef:<br/>  kind:
    ClusterRole<br/>  name: cluster-admin<br/>  apiGroup: rbac.authorization.k8s.io</pre><p>This
    ClusterRoleBinding binds the service account with the <strong>cluster-admin</strong>
    ClusterRole. The cluster-admin ClusterRole exists by default in your Kubernetes
    cluster, and allows superuser operations in all of the cluster resources.</p><div
    class=\"note-callout\">For other type of Delegates (Shell Script, Docker, ECS),
    you need to create the Kubernetes resources yourself and then use the service
    account when setting up the Harness Kubernetes Cluster Cloud Provider.</div><p>Once
    a Delegate is installed and running, you can add a Harness Kubernetes Cluster
    Could Provider to connect to the target cluster.</p><p>There are two ways for
    the Kubernetes Cluster Could Provider to get credentials:</p><ul><li>Inherit from
    selected Delegate</li><li>Enter manually</li></ul><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/p91u0bxtaf/1587675160709/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>Both
    methods can use the service account to provide either the central or distributed
    models.</p><h4>Inherit from selected Delegate</h4><p><strong>Supported Delegate
    types:</strong> Kubernetes and Helm Delegate.</p><p>In this option, the Cloud
    Provider inherits the service account created when you installed the Delegate.</p><h4>Enter
    Manually</h4><p><strong>Supported Delegate types:</strong> Shell Script, Docker,
    ECS, Kubernetes, Helm.</p><p>In this option, the Cloud Provider uses the credentials
    that you enter manually. The Delegate uses these credentials to send deployment
    tasks to the cluster.</p><p>The Delegate can be outside or within the target cluster. </p><p>Some
    examples:</p><ul><li>Shell Script Delegate on a VM.</li><li>Docker Image Delegate
    outside of the target cluster. </li><li>Kubernetes Delegate in a pod outside of
    the target cluster. </li></ul><div class=\"note-callout\">Providing the <strong>Master
    URL</strong> is mandatory. This is the Kubernetes master node URL.</div><p>The
    remaining steps in this topic explain how to create the Kubernetes resources needed
    for the service account used by the Delegates in the distributed model.</p><h3>Step
    1: Create Service Account</h3><p>To restrict the Delegate to deploy to a specific
    namespace, first you create the namespace, if it isn&#39;t already created.</p><pre>apiVersion:
    v1<br/>kind: Namespace<br/>metadata:<br/>  name: mynamespace</pre><p>Next you
    create the service account in that namespace for the Delegate.</p><pre>apiVersion:
    v1<br/>kind: ServiceAccount<br/>metadata:<br/>  name: mynamespace-delegate-sa<br/>
    \ namespace: mynamespace</pre><h3>Step 2: Create Role and RoleBinding</h3><p>By
    default, the Delegate can deploy to all namespaces. Its service account uses the
    cluster-admin ClusterRole. This method enables the central model.</p><p>In the
    distributed model, you restrict the Delegate to a specific namespace by using
    the following:</p><ul><li>A Role in the namespace that grants access to items
    in that namespace only.</li><li>A RoleBinding in the namespace. It binds the Role
    in that namespace to the service account you created.</li></ul><pre>kind: Role<br/>apiVersion:
    rbac.authorization.k8s.io/v1beta1<br/>metadata:<br/>  name: default-full-access<br/>
    \ namespace: mynamespace<br/>rules:<br/>- apiGroups: [&#34;&#34;, &#34;extensions&#34;,
    &#34;apps&#34;, &#34;autoscaling&#34;, &#34;rbac.authorization.k8s.io&#34;, &#34;roles.rbac.authorization.k8s.io&#34;]<br/>
    \ resources: [&#34;*&#34;]<br/>  verbs: [&#34;*&#34;]<br/>- apiGroups: [&#34;batch&#34;]<br/>
    \ resources:<br/>  - jobs<br/>  - cronjobs<br/>  verbs: [&#34;*&#34;]<br/> <br/>---<br/>kind:
    RoleBinding<br/>apiVersion: rbac.authorization.k8s.io/v1beta1<br/>metadata:<br/>
    \ name: default-view<br/>  namespace: mynamespace<br/>subjects:<br/>- kind: ServiceAccount<br/>
    \ name: mynamespace-delegate-sa<br/>  namespace: mynamespace<br/>roleRef:<br/>
    \ apiGroup: rbac.authorization.k8s.io<br/>  kind: Role<br/>  name: default-full-access</pre><p>The
    service account is bound to a Role that limits it to the namespace.</p><p>Now
    you have two options:</p><ul><li><strong>Option 1:</strong> Install a Delegate
    outside of the namespace and simply enter the service account token in the Kubernetes
    Cluster Cloud Provider.</li><li><strong>Option 2:</strong> Install a Kubernetes
    or Helm Delegate in the namespace using the service account. You simply reference
    the service account in the Delegate spec. You can then have the Kubernetes Cluster
    Cloud Provider inherit credentials from the Delegate.</li></ul><h4>Resources and
    Verbs</h4><p>If you don&#39;t want to use <code>resources: [&#34;*&#34;]</code>
    for the role you can list out the resources you want to grant. Harness needs <code>configMap</code>,
    <code>secret</code>, <code>event</code>, <code>deployment</code>, and <code>pod</code>
    at a minimum. Beyond that, it depends on the resources you are deploying via Harness.</p><p>If
    you don&#39;t want to use <code>verbs: [&#34;*&#34;]</code> for the role you can
    list out the verbs you want to grant (create, delete, get, list, patch, update,
    watch). </p><h3>Option 1: Use the Service Account Token</h3><p>If you are using
    the <strong>Enter Cluster Details manually</strong> option in the Kubernetes Cloud
    Provider, use the service account in the <strong>Service Account Token</strong>
    setting.</p><p>The following shell script is a quick method for obtaining the
    service account token. Run this script wherever you run kubectl to access the
    cluster.</p><p>Set the <code>SERVICE_ACCOUNT_NAME</code> and <code>NAMESPACE</code> values
    to the values in your infrastructure:</p><pre>SERVICE_ACCOUNT_NAME=default<br/>NAMESPACE=mynamespace<br/>SECRET_NAME=$(kubectl
    get sa &#34;${SERVICE_ACCOUNT_NAME}&#34; --namespace &#34;${NAMESPACE}&#34; -o
    json | jq -r &#39;.secrets[].name&#39;)<br/>TOKEN=$(kubectl get secret &#34;${SECRET_NAME}&#34;
    --namespace &#34;${NAMESPACE}&#34; -o json | jq -r &#39;.data[&#34;token&#34;]&#39;
    | base64 -d)<br/>echo $TOKEN</pre><p>Next, enter the service account token in
    the Kubernetes Cluster Cloud Provider:</p><p></p><figure><img src=\"https://files.helpdocs.io/kw8ldg1itf/articles/p91u0bxtaf/1581645697852/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><h3>Option
    2: Add Service Account to Delegate Spec</h3><p>In you are using the <strong>Inherit
    from selected Delegate</strong> option in the Kubernetes Cloud Provider, add the
    service account to the Delegate YAML. See <code>serviceAccountName: mynamespace-delegate-sa</code>
    below:</p><pre>---<br/>apiVersion: apps/v1<br/>kind: StatefulSet<br/>metadata:<br/>
    \ labels:<br/>    harness.io/app: harness-delegate<br/>    harness.io/account:
    wsxvws<br/>    harness.io/name: demo-delegate<br/>  # Name must contain the six
    letter account identifier: wsxvws<br/>  name: demo-delegate-wsxvws<br/>  namespace:
    harness-delegate<br/>spec:<br/><strong>  serviceAccountName: mynamespace-delegate-sa</strong><br/>
    \ replicas: 1<br/>...</pre><p>When you download the Kubernetes Delegate YAML from
    Harness, you get the harness-delegate-kubernetes.tar.gz file. Once you extract
    the file, you get the harness-delegate.yaml file.</p><p>By default, the harness-delegate.yaml
    uses a role with the <code>default</code> service account and <code>harness-delegate</code>
    namespace.</p><p>As discussed above, to restrict the Delegate to a single namespace,
    you will create a namespace, service account, Role, and RoleBinding, and then
    reference the service account in the Delegate spec.</p><p>Edit the harness-delegate.yaml
    file to create these new resources.</p><p>Here is an example of the Kubernetes
    Delegate YAML that creates all the necessary resources:</p><div class=\"hd--md\"
    data-hd-markdown=\"&lt;details&gt;\n  &lt;summary style=&#34;font-size: 1.25rem;outline:
    none;border: none; color: #00adea; margin-bottom:20px&#34;&gt;Kubernetes Delegate
    YAML Sample&lt;/summary&gt;\n\n&lt;pre&gt;\napiVersion: v1\nkind: Namespace\nmetadata:\n
    \ name: mynamespace\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n
    \ name: mynamespace-delegate-sa\n  namespace: mynamespace\n\n---\nkind: Role\napiVersion:
    rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: default-full-access\n  namespace:
    mynamespace\nrules:\n- apiGroups: [&#34;&#34;, &#34;extensions&#34;, &#34;apps&#34;,
    &#34;autoscaling&#34;, &#34;rbac.authorization.k8s.io&#34;, &#34;roles.rbac.authorization.k8s.io&#34;]\n
    \ resources: [&#34;*&#34;]\n  verbs: [&#34;*&#34;]\n- apiGroups: [&#34;batch&#34;]\n
    \ resources:\n  - jobs\n  - cronjobs\n  verbs: [&#34;*&#34;]\n \n---\nkind: RoleBinding\napiVersion:
    rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: default-view\n  namespace:
    mynamespace\nsubjects:\n- kind: ServiceAccount\n  name: mynamespace-delegate-sa\n
    \ namespace: mynamespace\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind:
    Role\n  name: default-full-access\n  \n---\napiVersion: v1\nkind: Secret\nmetadata:\n
    \ name: demo-delegate-proxy\n  namespace: mynamespace\n  kubernetes.io/service-account.name:
    mynamespace-delegate-sa\ntype: Opaque\ndata:\n  # Enter base64 encoded username
    and password, if needed\n  PROXY_USER: &#34;&#34;\n  PROXY_PASSWORD: &#34;&#34;\n\n---\napiVersion:
    apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    harness.io/app: harness-delegate\n
    \   harness.io/account: wsxvws\n    harness.io/name: demo-delegate\n  # Name must
    contain the six letter account identifier: wsxvws\n  name: demo-delegate-wsxvws\n
    \ namespace: harness-delegate\nspec:\n  serviceAccountName: mynamespace-delegate-sa\n
    \ replicas: 1\n  selector:\n    matchLabels:\n      harness.io/app: harness-delegate\n
    \     harness.io/account: wsxvws\n      harness.io/name: demo-delegate\n  serviceName:
    &#34;&#34;\n  template:\n    metadata:\n      labels:\n        harness.io/app:
    harness-delegate\n        harness.io/account: wsxvws\n        harness.io/name:
    demo-delegate\n    spec:\n      containers:\n      - image: harness/delegate:latest\n
    \       imagePullPolicy: Always\n        name: harness-delegate-instance\n        resources:\n
    \         limits:\n            cpu: &#34;1&#34;\n            memory: &#34;8Gi&#34;\n
    \       readinessProbe:\n          exec:\n            command:\n              -
    test\n              - -s\n              - delegate.log\n          initialDelaySeconds:
    20\n          periodSeconds: 10\n        livenessProbe:\n          exec:\n            command:\n
    \             - bash\n              - -c\n              - &#39;[[ -e /opt/harness-delegate/msg/data/watcher-data
    &amp;&amp; $(($(date +%s000) - $(grep heartbeat /opt/harness-delegate/msg/data/watcher-data
    | cut -d &#34;:&#34; -f 2 | cut -d &#34;,&#34; -f 1))) -lt 300000 ]]&#39;\n          initialDelaySeconds:
    240\n          periodSeconds: 10\n          failureThreshold: 2\n        env:\n
    \       - name: ACCOUNT_ID\n          value: wsxvws\n        - name: ACCOUNT_SECRET\n
    \         value: 123abc\n        - name: MANAGER_HOST_AND_PORT\n          value:
    https://qa.harness.io\n        - name: WATCHER_STORAGE_URL\n          value: https://qa.harness.io/storage/wingswatchers\n
    \       - name: WATCHER_CHECK_LOCATION\n          value: watcherqa.txt\n        -
    name: DELEGATE_STORAGE_URL\n          value: https://qa.harness.io/storage/wingsdelegates\n
    \       - name: DELEGATE_CHECK_LOCATION\n          value: delegateqa.txt\n        -
    name: DEPLOY_MODE\n          value: KUBERNETES\n        - name: DELEGATE_NAME\n
    \         value: demo-delegate\n        - name: DELEGATE_PROFILE\n          value:
    &#34;&#34;\n        - name: MANAGER_TARGET\n          value: &#34;qa.harness.io&#34;\n
    \       - name: MANAGER_AUTHORITY\n          value: &#34;manager-grpc-qa.harness.io&#34;\n
    \       - name: PROXY_HOST\n          value: &#34;&#34;\n        - name: PROXY_PORT\n
    \         value: &#34;&#34;\n        - name: PROXY_SCHEME\n          value: &#34;&#34;\n
    \       - name: NO_PROXY\n          value: &#34;&#34;\n        - name: PROXY_MANAGER\n
    \         value: &#34;true&#34;\n        - name: PROXY_USER\n          valueFrom:\n
    \           secretKeyRef:\n              name: demo-delegate-proxy\n              key:
    PROXY_USER\n        - name: PROXY_PASSWORD\n          valueFrom:\n            secretKeyRef:\n
    \             name: demo-delegate-proxy\n              key: PROXY_PASSWORD\n        -
    name: POLL_FOR_TASKS\n          value: &#34;false&#34;\n        - name: HELM_DESIRED_VERSION\n
    \         value: &#34;&#34;\n        - name: CF_PLUGIN_HOME\n          value:
    &#34;&#34;\n      restartPolicy: Always\n\n&lt;/pre&gt;\n\n&lt;/details&gt;\"><details>\n
    \ <summary style=\"font-size: 1.25rem;outline: none;border: none; color: #00adea;
    margin-bottom:20px\">Kubernetes Delegate YAML Sample</summary>\n<pre><br/>\napiVersion:
    v1<br/>\nkind: Namespace<br/>\nmetadata:<br/>\n  name: mynamespace<br/>\n<br/>\n---<br/>\napiVersion:
    v1<br/>\nkind: ServiceAccount<br/>\nmetadata:<br/>\n  name: mynamespace-delegate-sa<br/>\n
    \ namespace: mynamespace<br/>\n<br/>\n---<br/>\nkind: Role<br/>\napiVersion: rbac.authorization.k8s.io/v1beta1<br/>\nmetadata:<br/>\n
    \ name: default-full-access<br/>\n  namespace: mynamespace<br/>\nrules:<br/>\n-
    apiGroups: [&#34;&#34;, &#34;extensions&#34;, &#34;apps&#34;, &#34;autoscaling&#34;,
    &#34;rbac.authorization.k8s.io&#34;, &#34;roles.rbac.authorization.k8s.io&#34;]<br/>\n
    \ resources: [&#34;*&#34;]<br/>\n  verbs: [&#34;*&#34;]<br/>\n- apiGroups: [&#34;batch&#34;]<br/>\n
    \ resources:<br/>\n  - jobs<br/>\n  - cronjobs<br/>\n  verbs: [&#34;*&#34;]<br/>\n
    <br/>\n---<br/>\nkind: RoleBinding<br/>\napiVersion: rbac.authorization.k8s.io/v1beta1<br/>\nmetadata:<br/>\n
    \ name: default-view<br/>\n  namespace: mynamespace<br/>\nsubjects:<br/>\n- kind:
    ServiceAccount<br/>\n  name: mynamespace-delegate-sa<br/>\n  namespace: mynamespace<br/>\nroleRef:<br/>\n
    \ apiGroup: rbac.authorization.k8s.io<br/>\n  kind: Role<br/>\n  name: default-full-access<br/>\n
    \ <br/>\n---<br/>\napiVersion: v1<br/>\nkind: Secret<br/>\nmetadata:<br/>\n  name:
    demo-delegate-proxy<br/>\n  namespace: mynamespace<br/>\n  kubernetes.io/service-account.name:
    mynamespace-delegate-sa<br/>\ntype: Opaque<br/>\ndata:<br/>\n  # Enter base64
    encoded username and password, if needed<br/>\n  PROXY_USER: &#34;&#34;<br/>\n
    \ PROXY_PASSWORD: &#34;&#34;<br/>\n<br/>\n---<br/>\napiVersion: apps/v1<br/>\nkind:
    StatefulSet<br/>\nmetadata:<br/>\n  labels:<br/>\n    harness.io/app: harness-delegate<br/>\n
    \   harness.io/account: wsxvws<br/>\n    harness.io/name: demo-delegate<br/>\n
    \ # Name must contain the six letter account identifier: wsxvws<br/>\n  name:
    demo-delegate-wsxvws<br/>\n  namespace: harness-delegate<br/>\nspec:<br/>\n  serviceAccountName:
    mynamespace-delegate-sa<br/>\n  replicas: 1<br/>\n  selector:<br/>\n    matchLabels:<br/>\n
    \     harness.io/app: harness-delegate<br/>\n      harness.io/account: wsxvws<br/>\n
    \     harness.io/name: demo-delegate<br/>\n  serviceName: &#34;&#34;<br/>\n  template:<br/>\n
    \   metadata:<br/>\n      labels:<br/>\n        harness.io/app: harness-delegate<br/>\n
    \       harness.io/account: wsxvws<br/>\n        harness.io/name: demo-delegate<br/>\n
    \   spec:<br/>\n      containers:<br/>\n      - image: harness/delegate:latest<br/>\n
    \       imagePullPolicy: Always<br/>\n        name: harness-delegate-instance<br/>\n
    \       resources:<br/>\n          limits:<br/>\n            cpu: &#34;1&#34;<br/>\n
    \           memory: &#34;8Gi&#34;<br/>\n        readinessProbe:<br/>\n          exec:<br/>\n
    \           command:<br/>\n              - test<br/>\n              - -s<br/>\n
    \             - delegate.log<br/>\n          initialDelaySeconds: 20<br/>\n          periodSeconds:
    10<br/>\n        livenessProbe:<br/>\n          exec:<br/>\n            command:<br/>\n
    \             - bash<br/>\n              - -c<br/>\n              - &#39;[[ -e
    /opt/harness-delegate/msg/data/watcher-data &amp;&amp; $(($(date +%s000) - $(grep
    heartbeat /opt/harness-delegate/msg/data/watcher-data | cut -d &#34;:&#34; -f
    2 | cut -d &#34;,&#34; -f 1))) -lt 300000 ]]&#39;<br/>\n          initialDelaySeconds:
    240<br/>\n          periodSeconds: 10<br/>\n          failureThreshold: 2<br/>\n
    \       env:<br/>\n        - name: ACCOUNT_ID<br/>\n          value: wsxvws<br/>\n
    \       - name: ACCOUNT_SECRET<br/>\n          value: 123abc<br/>\n        - name:
    MANAGER_HOST_AND_PORT<br/>\n          value: https://qa.harness.io<br/>\n        -
    name: WATCHER_STORAGE_URL<br/>\n          value: https://qa.harness.io/storage/wingswatchers<br/>\n
    \       - name: WATCHER_CHECK_LOCATION<br/>\n          value: watcherqa.txt<br/>\n
    \       - name: DELEGATE_STORAGE_URL<br/>\n          value: https://qa.harness.io/storage/wingsdelegates<br/>\n
    \       - name: DELEGATE_CHECK_LOCATION<br/>\n          value: delegateqa.txt<br/>\n
    \       - name: DEPLOY_MODE<br/>\n          value: KUBERNETES<br/>\n        -
    name: DELEGATE_NAME<br/>\n          value: demo-delegate<br/>\n        - name:
    DELEGATE_PROFILE<br/>\n          value: &#34;&#34;<br/>\n        - name: MANAGER_TARGET<br/>\n
    \         value: &#34;qa.harness.io&#34;<br/>\n        - name: MANAGER_AUTHORITY<br/>\n
    \         value: &#34;manager-grpc-qa.harness.io&#34;<br/>\n        - name: PROXY_HOST<br/>\n
    \         value: &#34;&#34;<br/>\n        - name: PROXY_PORT<br/>\n          value:
    &#34;&#34;<br/>\n        - name: PROXY_SCHEME<br/>\n          value: &#34;&#34;<br/>\n
    \       - name: NO_PROXY<br/>\n          value: &#34;&#34;<br/>\n        - name:
    PROXY_MANAGER<br/>\n          value: &#34;true&#34;<br/>\n        - name: PROXY_USER<br/>\n
    \         valueFrom:<br/>\n            secretKeyRef:<br/>\n              name:
    demo-delegate-proxy<br/>\n              key: PROXY_USER<br/>\n        - name:
    PROXY_PASSWORD<br/>\n          valueFrom:<br/>\n            secretKeyRef:<br/>\n
    \             name: demo-delegate-proxy<br/>\n              key: PROXY_PASSWORD<br/>\n
    \       - name: POLL_FOR_TASKS<br/>\n          value: &#34;false&#34;<br/>\n        -
    name: HELM_DESIRED_VERSION<br/>\n          value: &#34;&#34;<br/>\n        - name:
    CF_PLUGIN_HOME<br/>\n          value: &#34;&#34;<br/>\n      restartPolicy: Always<br/>\n<br/>\n</pre>\n</details></div><p>Next,
    connect to your cluster and run the kubectl command to install the Delegate:</p><p><code>kubectl
    apply -f harness-delegate.yaml</code></p><p>For Helm Delegate, you download the
    Delegate file harness-delegate-values.yaml. It includes instructions for adding
    the Harness Helm repo and</p><pre>helm repo add harness https://app.harness.io/storage/harness-download/harness-helm-charts/</pre><p>Next,
    you fetch the Delegate file:</p><pre>helm fetch harness/harness-delegate</pre><p>This
    results in the file harness-delegate-1.0.0.tgz. Extract it to see the YAML files.</p><p>In
    the <strong>harness-delegate</strong> folder you will see the <strong>values.yaml</strong>
    file where you specify the namespace for the Delegate to use.</p><pre>namespace:
    harness-delegate</pre><p>Simply replace the namespace with the new namespace:</p><pre>namespace:
    mynamespace</pre><p>In the <strong>harness-delegate/templates</strong> folder
    you will see the default YAML files that use values.yaml.</p><p>Modify these files
    in the same way that you modified the Kubernetes Delegate YAML. Use placeholder
    <code>{{ .Values.namespace }}</code> for to reference the new namespace in values.yaml.</p><p>You
    will delete <strong>cluster-rolebinding.yaml</strong>. and replace it a new file(s)
    for the service account, Role, and RoleBinding.</p><p>For details on installing
    the Helm Delegate, see <a href=\"/article/6n7fon8rit-using-the-helm-delegate\">Install
    the Harness Helm Delegate</a>.</p><h3>Review: Enable Skip Validation in Kubernetes
    Cluster Cloud Provider</h3><p>By default, Harness uses the default namespace to
    validate credentials the first time you set up a Kubernetes Cluster Cloud Provider.</p><p>If
    you add a Kubernetes Cluster Cloud Provider in Harness with a Service Account
    that does not have list all namespaces permissions in the cluster, ensure that
    you enable the <strong>Skip Validation</strong> option.</p><h3>Notes</h3><p>You
    can also enable a Delegate to deploy to namespaces outside its own. In this model,
    the Delegate does not have to be in the same namespace as the deployment target.</p><p>For
    this method, do the following:</p><ol><li>Create a service account for the Delegate
    in the namespace where you will install the Delegate. Let&#39;s call this the
    <code>delegate-ns</code>. We&#39;ll call the deployment target namespace <code>target</code>.</li><li>Create
    the service account in namespace <code>delegate-ns</code>.</li><li>Create a Role
    in namespace <code>target</code>.</li><li>Create a RoleBinding in namespace <code>target</code>,
    with the following properties:<ol><li>RoleRef pointing to the Role in the same
    namespace <code>target</code></li><li>Subject pointing to the Delegate service
    account and namespace: <code>delegate-ns</code>.</li></ol></li></ol><h3>Next Steps</h3><ul><li><a
    href=\"/article/whwnovprrb-cloud-providers\">Add Cloud Providers</a></li></ul><p></p>"
  slug: enable-delegate-to-deploy-to-multiple-kubernetes-namespaces
  tags:
  - namespace
  - delegate permissions
  is_live: true
