type: article
article_id: ejaddm3ddb
user_id: wz6xkfcc9i
category_id: o9x167at52
author:
  name: Chakravarthy Tenneti
  profile_image: https://www.gravatar.com/avatar/790db061bb8f8fb094e4d4b19a390f3b?d=mm&s=150
title: Add and Use a Custom Secrets Manager
slug: add-and-use-a-custom-secrets-manager
description: To store and use encrypted secrets (such as access keys) with third party
  secrets managers, you can add Custom Secrets Managers.
short_version: To store and use encrypted secrets (such as access keys) with third
  party secrets managers, you can add Custom Secrets Managers.
tags:
- Secrets management
- Custom Secrets Manager
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-01T15:07:57.566436Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add and Use a Custom Secrets Manager
  description: To store and use encrypted secrets (such as access keys) with third
    party secrets managers, you can add Custom Secrets Managers.
  short_version: To store and use encrypted secrets (such as access keys) with third
    party secrets managers, you can add Custom Secrets Managers.
  body: '<div class="tip-callout">This content is for Harness <a href="https://docs.harness.io/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/mg09uspsx1-custom-secret-manager">NextGen</a>.</div><p>Harness
    provides first-class support and built-in integration for some of the third party
    Secret Managers. You can configure and make use of other Secrets Managers using
    the Custom Secrets Manager. It&#39;s a shell script that you can execute anywhere
    that fetches the secret and shares it with Harness. It can be run on a Delegate
    or a remote machine connected to a Delegate.</p><p>In this topic:</p><ul><li><a
    href="#before_you_begin">Before You Begin</a></li><li><a href="#review_read_only_secret_manager">Review:
    Read-Only Secret Manager</a></li><li><a href="#step_1_create_an_encrypted_text_secret">Step
    1. Create an Encrypted Text Secret</a></li><li><a href="#step_2_add_connection_attributes_for_target_hosts">Step
    2: Add Connection Attributes for Target Hosts</a></li><li><a href="#step_3_create_a_shell_script_template">Step
    3. Create a Shell Script Template</a></li><li><a href="#step_4_configure_custom_secrets_manager">Step
    4. Configure Custom Secrets Manager</a></li><li><a href="#step_5_use_the_custom_secrets_manager">Step
    5. Use the Custom Secrets Manager</a></li><li><a href="#limitations">Limitations</a></li></ul><h3>Before
    You Begin</h3><ul><li>See <a href="https://docs.harness.io/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a>.</li><li>See <a href="https://docs.harness.io/article/au38zpufhr-secret-management">Secrets
    Management Overview</a>.</li></ul><h3>Limitations</h3><ul><li>You cannot migrate
    secrets to or from Custom Secrets Managers.</li><li>If you make any changes to
    the Shell Script Template they are not <u>automatically</u> updated in the Custom
    Secrets Manager that uses that Shell Script Template. To update the Custom Secrets
    Manager, reselect the Shell Script Template in the Custom Secrets Manager&#39;s
    <strong>Shell Script</strong> setting.</li></ul><h3>Review: Read-Only Secret Manager</h3><p>Harness
    Custom Secrets Manager is a read-only Secrets Manager. Harness can read/decrypt
    secrets, but it cannot write secrets to the Custom Secrets Manager.</p><h3>Step
    1. Create an Encrypted Text Secret</h3><p>Using a configured Secrets Manager,
    create an Encrypted Text secret to access the third party Secrets Manager.</p><p>Ensure
    that <strong>Usage Scope</strong> is set to <strong>Scope to Account</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/ejaddm3ddb/1608743360592/image.png"/></figure><p>For
    more information on creating Encrypted Text Secret, see <a href="https://docs.harness.io/article/ygyvp998mu-use-encrypted-text-secrets#step_1_add_encrypted_text">Add
    Encrypted Text</a>.</p><p>Make sure that the secret you create to access your
    third party Secrets Manager is selected as Scope to Account. It will not be used
    for any Application.</p><h3>Step 2: Add Connection Attributes for Target Hosts</h3><p>If
    you want to run the Shell Script on a target host and not on the Harness Delegate,
    you must first create the required connection attributes.</p><ul><li>To access
    an SSH-based Custom Secrets Manager, create an SSH credential first. See <a href="https://docs.harness.io/article/gsp4s7abgc-add-ssh-keys">Add
    SSH Keys</a> for the procedure to create SSH credentials.</li><li>To access a
    WinRM-based Custom Secrets Manager, create a WinRM connection first. See <a href="https://docs.harness.io/article/9fqa1vgar7-add-win-rm-connection-credentials">Add
    WinRM Connection Credentials</a> for more information.</li></ul><p>This does not
    apply if you want to run the Custom Secrets Manager on the Harness Delegate.</p><h3>Step
    3. Create a Shell Script Template</h3><p>Create a Shell Script Template. For more
    information on creating a Shell Script Template and adding it to the Template
    Library, see <a href="https://docs.harness.io/article/ygi6d8epse-use-templates#create_shell_script_template">Create
    Shell Script Template</a>.</p><p>Note the following points while creating the
    template.</p><ul><li>The variable in the Shell Script Template that gets the value
    must be named <strong>secret</strong>.</li><li>Custom secret manager does not
    support dynamic or runtime values for the variables. All parameters/variables
    are static and pre-defined. For example, users cannot pass <code>${workflow.variable...}</code>
    or <code>${env.name}</code> to the Shell Script Template.</li></ul><p>Here’s an
    example Shell Script Template created for Custom Secrets Manager.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/ejaddm3ddb/1594228365187/shell-script-1.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>In
    this example, this script assigns the secret variable to your final value. Here
    are the details of the entries in the script.</p><ul><li>This script makes a cURL
    call to the API URL of the third party Secrets Manager and gets the output to
    the file secret.json. </li><li>It includes some parameters such as engine name
    and path. </li><li>It uses an existing, already configured Secrets Manager for
    the API access.</li><li>After getting the file, as shown in the example, it gets
    the secret by using a third party tool like jq to retrieve the key from the data
    object. The key is also a parameter that can be assigned later.</li></ul><p>All
    the parameters (engine name, path, and key in this case) can be defined as Variables
    while creating or editing the Shell Script Template.</p><p>Note: Template library
    add ons like default variable values, script output, and default timeout are not
    supported in Custom Secrets Manager configuration.</p><h3>Step 4. Configure Custom
    Secrets Manager</h3><p>Make sure you enter the following details.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/ejaddm3ddb/1594228485784/editcsm-1-1.png"/></figure><h4>Display
    Name</h4><p>Enter a name for the Custom Secrets Manager.</p><h4>Shell Script</h4><p>Select
    the Shell Script from the Template Library that you have created for running the
    Custom Secrets Manager.</p><h4>Execute on Delegate</h4><p>Select this if you want
    to run the Shell Script on Harness Delegate. </p><p>If you want to run it in another
    host, enter the following details.</p><h4>Target Host</h4><p>Enter the name of
    the Target Host.</p><h4>Templatize Connection Attribute</h4><p>If you select this
    option, the Connection Attribute will be a part of the Test Variables. </p><p>For
    example, on a single target host, if you want to access different secrets with
    different keys for different users with a single Shell Script, you can templatize
    the connection attribute and enter its value while creating the secret.</p><h4>Connection
    Attribute</h4><p>Select an SSH key/WinRM Connection Credential to access the Target
    Host.</p><h4>Working Directory</h4><p>Enter the path to the directory on the Target
    Host.</p><h4>Test Variables</h4><p>Enter test values for the variables defined
    while creating the Shell Script Template. You must enter these values to verify
    if the custom Secrets Manager can be accessed and the script within can be executed
    to get the secret value. You can use a dummy secret or one of the secrets that
    are already configured for this validation.</p><h3>Step 5. Use the Custom Secrets
    Manager</h3><p>Create an Encrypted Text using the Custom Secrets Manager you created
    earlier. Enter the name and values of all the Input Variables defined while creating
    the Shell Script Template. </p><p>For more information on creating Encrypted Text
    Secret, see <a href="https://docs.harness.io/article/ygyvp998mu-use-encrypted-text-secrets#step_1_add_encrypted_text">Add
    Encrypted Text</a>.</p><p>If you want to create a secret on a Target Host Custom
    Secrets Manager, you must also select the Connection Attribute.</p><p></p>'
  slug: add-and-use-a-custom-secrets-manager
  tags:
  - Secrets management
  - Custom Secrets Manager
  is_live: true
