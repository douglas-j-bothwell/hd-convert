type: article
article_id: dgylyvpls8
user_id: mfr0nxh4be
category_id: o9x167at52
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Select Secrets in Scripts at Runtime
slug: select-secrets-in-scripts-at-runtime
description: You reference Harness secrets in your Workflows and other settings using
  the expression ${secrets.getValue("secret_name")} , where secret_name refers to
  the name you entered when you added the secret…
short_version: You reference Harness secrets in your Workflows and other settings
  using the expression ${secrets.getValue("secret_name")} , where secret_name refers
  to the name you entered when you added the secret…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:01.922835Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Select Secrets in Scripts at Runtime
  description: ""
  short_version: ""
  body: |-
    <p>You reference Harness secrets in your Workflows and other settings using the expression <code>${secrets.getValue(&#34;secret_name&#34;)}</code>, where <code>secret_name</code> refers to the name you entered when you added the secret in Harness. In this
      case, you are referring to a single secret.</p>
    <p>In some cases, you might want to select different secrets each time you deploy a Workflow.</p>
    <p>You can use Harness Shell Script templates and Workflow or Service Config Variables to select or substitute the secret name at Workflow runtime.</p>
    <p>In this topic:</p>
    <ul>
      <li>
        <a href="#before_you_begin">Before You Begin</a>
      </li>
      <li>
        <a href="#visual_summary">Visual Summary</a>
      </li>
      <li>
        <a href="#undefined">Supported Platforms and Technologies</a>
      </li>
      <li>
        <a href="#step_1_create_secrets">Step 1: Create Secrets</a>
      </li>
      <li>
        <a href="#step_2_create_the_shell_script_template">Step 2: Create the Shell Script Template</a>
      </li>
      <li>
        <a href="#option_create_the_workflow_variable">Option: Create the Workflow Variable</a>
      </li>
      <li>
        <a href="#option_create_the_service_config_variable_and_environment_overrides">Option: Create the Service Config Variable and Environment Overrides</a>
      </li>
      <li>
        <a href="#step_3_add_the_template_to_the_workflow">Step 3: Add the Template to the Workflow</a>
      </li>
      <li>
        <a href="#step_4_deploy_the_workflow">Step 4: Deploy the Workflow</a>
      </li>
      <li>
        <a href="#configure_as_code">Configure As Code</a>
      </li>
    </ul>
    <h3>Before You Begin</h3>
    <ul>
      <li>
        <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use Encrypted Text Secrets</a>
      </li>
      <li>
        <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set Workflow Variables</a>
      </li>
      <li>
        <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add Service Config Variables</a>
      </li>
      <li>
        <a href="/article/lfqn3t83hd-create-a-shell-script-workflow-step-template">Create a Shell Script Workflow Step Template</a>
      </li>
      <li>
        <a href="/article/o5ec7vvtju-secrets-and-log-sanitization">Secrets and Log Sanitization</a>
      </li>
    </ul>
    <h3>Visual Summary</h3>
    <p>You create a Shell Script template that uses a variable to replace the value of the secret name in the <code>${secrets.getValue(&#34;secret_name&#34;)}</code> expression.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606346799744/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p></p>
    <p>In the following example, you can see the Shell Script template uses a Workflow variable in <strong>Value</strong> to replace the secret name in the script. When the Workflow is deployed, you enter in a new variable name.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606346653226/image.png"/>
    </figure>
    <p>You can also perform the same substitution using Service Config Variables and
      <a href="/article/4m2kst307m-override-service-files-and-variables-in-environments">Environment Overrides</a>:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606344652995/image.png"/>
    </figure>
    <p>In this use case, you can have a single Service Config Variable and multiple Environments that override the variable with their own values. You can then
      <a href="/article/bov41f5b7o-templatize-a-workflow-new-template">templatize the Workflow</a> and select a different Environment each time you deploy.</p>
    <h3 id="undefined">Supported Platforms and Technologies</h3>
    <p>See
      <a href="/article/220d0ojx5y-supported-platforms">Supported Platforms and Technologies</a>.</p>
    <h3>Step 1: Create Secrets</h3>
    <p>Create the text secret you want to use in your Shell Script template.</p>
    <p>Give the secret a name that is easy for your users to identify.</p>
    <p>For this example, we&#39;ll use a secret named <code>hello</code>.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606332584578/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>You can use file secrets, also, but we cover text secrets in this topic.</p>
    <p>See:</p>
    <ul>
      <li>
        <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use Encrypted Text Secrets</a>
      </li>
      <li>
        <a href="/article/nt5vchhka4-use-encrypted-file-secrets">Use Encrypted File Secrets</a>
      </li>
    </ul>
    <h3>Step 2: Create the Shell Script Template</h3>
    <p>Next, we will create a Shell Script template that we can add to any Workflow.</p>
    <div class="note-callout">You can create a Shell Script Workflow Step template in the account Template Library or the
      <a href="/article/ygi6d8epse-use-templates">Application Templates</a>.</div>
    <p>Create a <strong>Shell Script</strong> template. See
      <a href="/article/lfqn3t83hd-create-a-shell-script-workflow-step-template">Create a Shell Script Workflow Step Template</a>.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606347114110/image.png" style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/>
    </figure>
    <p>In <strong>Script</strong>, enter a script that includes the text secret expression <code>${secrets.getValue(&#34;token&#34;)}</code>.</p>
    <p>You do not need to use an actual secret name because you will use a variable to replace it. In this example, we use <code>${secrets.getValue(&#34;token&#34;)}</code>. You can use any other name.</p>
    <div class="note-callout">Ensure that you use quotes.</div>
    <p>In <strong>Variables</strong>, add a new variable.</p>
    <p>In the variable <strong>Name</strong>, enter the secret name in your expression (in our example, <code>token</code>).</p>
    <p>In the variable <strong>Value</strong>, enter a default value for the secret name. For example, <code>hello</code>.</p>
    <p>You can enter the Workflow or Service Config variable expression in <strong>Value</strong> now, but it is easier to enter it in when you add the template to the Workflow. That way, you can use any Workflow variable or Service Config Variable expression.</p>
    <p>When you are done, the Shell Script template will look something like this:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606346799744/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p></p>
    <p>You can see that the variable <code>token</code> in <strong>Variables</strong> will replace the value in the <code>${secrets.getValue(&#34;token&#34;)}</code> expression with <code>hello</code>.</p>
    <p>When you add the template to the Workflow, you will replace <code>hello</code> with a Workflow or Service Config variable expression.</p>
    <h3>Option: Create the Workflow Variable</h3>
    <p>If you want to use a Workflow variable to replace the secret name at deployment runtime, create the Workflow variable. See
      <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set Workflow Variables</a>.</p>
    <p>Here&#39;s an example that includes multiple options:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606343739200/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>Later, when you add this Workflow variable to the template, you will reference it as <code>${workflow.variables.secret_name}</code>.</p>
    <h3>Option: Create the Service Config Variable and Environment Overrides</h3>
    <p>Instead of using a Workflow variable in the template, you can use a Service Config Variable.</p>
    <p>In the Service your Workflow will deploy, create a Service Config Variable. See
      <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add Service Config Variables</a>.</p>
    <p>In our example, the variable is named <code>secret</code>.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606344785386/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>Later, when you add this Service Config Variable to the template, you will reference it as <code>${serviceVariable.secret}</code>.</p>
    <p>Next, in each Environment that your Workflow will use, you can create a Service Configuration Override. The Service Configuration Override will provide a new value for the Service Config Variable.</p>
    <p>Here is an example where the Service Configuration Override uses the secret name <code>goodbye</code> to override the Service Config Variable:</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606344949196/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>In your Workflow, you can templatize the Environment setting so that you can select different Environments, and their Service Configuration Overrides, when you deploy the Workflow. See
      <a href="/article/bov41f5b7o-templatize-a-workflow-new-template">Templatize a Workflow</a>.</p>
    <h3>Step 3: Add the Template to the Workflow</h3>
    <p>In your Harness Workflow, click <strong>Add Step</strong>, and then click <strong>Template Library</strong>.</p>
    <p>Locate the template you created and click <strong>Link</strong> or <strong>Copy</strong>.</p>
    <p>In <strong>Variables</strong>, in <strong>Value</strong>, replace the default with the expression for your Workflow or Service Config Variable.</p>
    <p>Here is an example using the Workflow variable:</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606345694711/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>Here is an example using the Service Config Variable:</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606345677579/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>If you are using a Service Config Variable, ensure you add the template to a Workflow section that can access the Service. A Pre-deployment section
      <u>cannot</u> access Service Config Variables.</p>
    <h3>Step 4: Deploy the Workflow</h3>
    <p>In the Workflow, click <strong>Deploy</strong>.</p>
    <p>If you are using a Workflow variable, you will be prompted to provide a value for the variable. This value will be used in the template, and it must be the name of an existing secret.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606345981105/image.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <div class="note-callout">If you use a
      <a href="/article/xerirloz9a-add-a-trigger-2">Trigger</a> to execute the Workflow, you will select a secret name in the Trigger. You can also
      <a href="/article/revc37vl0f-passing-variable-into-workflows">pass values into the Workflow using a Trigger</a>.</div>
    <p>In the <strong>Deployments</strong> page, click the template step to see that the secret was substituted:</p><pre class="hljs bash">Executing command ...<br/>**************<br/>Command completed with ExitCode (0)</pre>
    <p>In the step <strong>Details</strong>, click more options (<strong>︙</strong>) , and then click <strong>View Execution Context</strong>. In <strong>Execution Context</strong>, you can see the secret name that was used.</p>
    <p>Here is the <strong>Execution Context</strong> for a template using a Workflow variable:</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606346297819/image.png"/>
    </figure>
    <p>Here is the <strong>Execution Context</strong> for a template using a Service Config Variable:</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dgylyvpls8/1606346248388/image.png"/>
    </figure>
    <p>That&#39;s it. You have successfully selected a secret at deployment runtime.</p>
    <h3>Configure As Code</h3>
    <p>To see how to configure the settings in this topic using YAML, configure the settings in the UI first, and then click the YAML editor button (<span style="color:#fb9e00" data-hd-color="#fb9e00"><strong>&lt;/&gt;</strong></span>).</p>
  slug: select-secrets-in-scripts-at-runtime
  tags: []
  is_live: true
