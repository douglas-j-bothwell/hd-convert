type: article
article_id: aza65y4af6
user_id: mfr0nxh4be
category_id: 9lw749jubn
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Built-in Variables List (FirstGen)
slug: built-in-variables-list
description: The default (built-in) Harness expressions, as well as the prefixes used
  to identify user-created variables. This list will be periodically updated when
  new expressions are added to Harness.
short_version: The default (built-in) Harness expressions.
tags:
- pipelineDeploymentUuid
- variable
show_toc: true
is_private: false
is_published: true
is_featured: true
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-12T18:42:44.671894Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Built-in Variables List (FirstGen)
  description: The default (built-in) Harness expressions, as well as the prefixes
    used to identify user-created variables. This list will be periodically updated
    when new expressions are added to Harness.
  short_version: The default (built-in) Harness expressions.
  body: '<p>The following lists describes the default (built-in) Harness expressions,
    as well as the prefixes used to identify user-created variables. This list will
    be periodically updated when new expressions are added to Harness.</p><p>For information
    on how Harness uses built-in variable expressions, see <a href="/article/9dvxcegm90-variables">What
    is a Harness Variable Expression?</a>.</p><h3>Application</h3><p><code>${app.name}</code></p><ul><li>Harness
    Application name.</li></ul><p><code>${app.description}</code></p><ul><li>Harness
    Application description.</li></ul><p><code>${app.accountId}</code></p><ul><li>The
    Application account ID. See <code>${env.accountId}</code> below.</li></ul><h3>Service</h3><div
    class="note-callout">For deployment information, see <a href="#deployments">Deployments</a>.</div><p><code>${service.name}</code></p><ul><li>Harness
    Service name.</li></ul><p><code>${service.description}</code></p><ul><li>Harness
    Service description.</li></ul><p><code>${artifact.serviceIds}</code></p><ul><li>The
    ID of the artifact source set up in the Harness Service. For example, <code>[J9xRo2udQ0KktSzghvhQ5w]</code>.</li><li>You
    can remove the brackets from the value like this<br/><code>export serviceId=`echo
    ${artifact.serviceIds} | awk ‘{ gsub(/\[/,“”); gsub(/]/, “”); print $1 }’`</code></li></ul><p></p><h3>Service
    Config Variables</h3><p><code>${serviceVariable.your_var_name}</code></p><ul><li>Replace
    <code>your_var_name</code> to reference any variable created in a Service in the
    current Application.</li><li>For example, you could add a Shell Script command
    to a Workflow that references the variable <code>${serviceVariable.productName}</code>,
    created in a Service used by the Workflow.</li><li>For most Service types, Harness
    uses Service Config Variables to create environment variables on the target hosts
    at deployment runtime.</li></ul><p>See <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add
    Service Config Variables</a>.</p><h3>Environment</h3><div class="note-callout">For
    deployment information, see <a href="#deployments">Deployments</a>.</div><p><code>${env.name}</code></p><ul><li>Harness
    Environment name.</li></ul><p><code>${env.description}</code></p><ul><li>Harness
    Environment description.</li></ul><p><code>${env.environmentType}</code></p><ul><li>Harness
    Environment type. Evaluates to <code>PROD</code> or <code>NON_PROD</code>.</li></ul><p><code>${serviceVariable.override_var_name}</code></p><ul><li>References
    Service configuration overrides at the Environment level.<ul><li>See <a href="/article/4m2kst307m-override-service-files-and-variables-in-environments">Override
    a Service Configuration in an Environment</a>.</li></ul></li><li>You can also
    create a Harness Environment-level variable that is not set in a Service, but
    is available in any Workflow using the Environment.<ul><li>See <a href="/article/ki525qfbs0-environment-level-variables-for-all-services">Create
    Environment-level Variables and Files for All Services</a>.</li></ul></li></ul><p><code>${environmentVariable.variable_name}</code></p><ul><li>References
    a Service Override Variable set in an Environment when <strong>All Services</strong>
    is selected.<br/>To reference the Service Override Variable for a <u>specific
    Service</u>, use <code>${serviceVariable.override_var_name}</code>.<ul><li>See
    <a href="/article/ki525qfbs0-environment-level-variables-for-all-services">Create
    Environment-level Variables and Files for All Services</a>.</li></ul></li></ul><p><code>${env.accountId}</code></p><ul><li>The
    Harness account ID where the Environment is set up.</li></ul><p><code>${env.keywords}</code></p><ul><li>Lists
    Environment name followed by type, all listed in lowercase.</li></ul><h3>Infrastructure</h3><div
    class="note-callout">For deployment information, see <a href="#deployments">Deployments</a>.</div><p><code>${infra.name}</code></p><ul><li>The
    name of the Harness Infrastructure Definition used by the Workflow or Workflow
    Phase.</li></ul><p><code>${infra.kubernetes.namespace}</code></p><ul><li>The namespace
    for the Kubernetes cluster where the microservice/app is deployed.</li></ul><p><code>${infra.route}</code></p><ul><li>A
    route where the app is deployed. In a Blue/Green deployment, this is the Green,
    or production, address.</li></ul><p><code>${infra.tempRoute}</code></p><ul><li>A
    temporary route where the app is deployed. In a Blue/Green deployment, this is
    the Blue, or old, address.</li></ul><p><code>${infra.cloudProvider.name}</code></p><ul><li>Name
    of the Harness Cloud Provider selected in the Infrastructure Definition used by
    the Workflow.</li></ul><h3>Workflow</h3><p>See <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set
    Workflow Variables</a>.</p><div class="note-callout">For deployment information,
    see <a href="#deployments">Deployments</a>.</div><p><code>${workflow.displayName}</code></p><ul><li>Harness
    Workflow name and the timestamp when the Workflow is deploying.</li><li>For example,
    if the Workflow is named <strong>SSH</strong>, the <code>${workflow.displayName}</code>
    would display something like this: <code>SSH - 02/27/2020 10:07 PM</code>.</li></ul><p><code>${workflow.description}</code></p><ul><li>Workflow
    description.</li></ul><p><code>${workflow.releaseNo}</code></p><ul><li>The count
    of deployments for this Workflow.</li></ul><p><code>${workflow.lastGoodReleaseNo}</code></p><ul><li>The
    count of the last successful deployment of this Workflow.</li></ul><p><code>${workflow.lastGoodDeploymentDisplayName}</code></p><ul><li>The
    display name of the last successful deployment of this Workflow.</li></ul><p><code>${workflow.pipelineDeploymentUuid}</code></p><ul><li>The
    unique ID for the execution of the Pipeline deploying this Workflow.</li><li>This
    variable expression is used in a Workflow and displays the unique ID of the Pipeline
    that deploys the Workflow. When the Workflow is run by itself, and not in a Pipeline
    deployment, this variable expression will output null.</li></ul><p><code>${workflow.pipelineResumeUuid}</code></p><ul><li>Original
    execution ID of a resumed Pipeline execution. See <a href="/article/4dvyslwbun-resume-a-pipeline-deployment">Resume
    Pipeline Deployments</a>.</li><li>This variable expression is used in a Workflow
    and displays the unique ID of the Pipeline that deploys the Workflow. When the
    Workflow is run by itself, and not in a Pipeline deployment, this variable expression
    will output null.</li></ul><p><code>${workflow.startTs}</code></p><ul><li>Date
    and time when the Workflow execution started in Unix epoch time.</li></ul><p><code>${workflow.variables.var_name}</code></p><ul><li>References
    to variables created in a Workflow&#39;s <strong>Workflow Variables</strong> section.</li><li>See
    <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set Workflow
    Variables</a> and <a href="/article/revc37vl0f-passing-variable-into-workflows">Passing
    Variables into Workflows and Pipelines from Triggers</a>.</li></ul><h3>Shell Script
    Workflow Step</h3><p><code>${context.published_name.var_name}</code></p><ul><li>The
    published output variable name created by a Workflow Shell Script step. For more
    information, see <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Using
    the Shell Script Step</a>.</li></ul><h3>Pipelines</h3><div class="note-callout">For
    deployment information, see <a href="#deployments">Deployments</a>.</div><ul><li>See
    <code>${workflow.pipelineDeploymentUuid}</code> above.</li><li>See <code>${workflow.pipelineResumeUuid}</code>
    above.</li></ul><p><code>${pipeline.name}</code></p><ul><li>Name of the pipeline.</li></ul><h3>Deployments</h3><p><code>${deploymentUrl}</code></p><ul><li>The
    URL of the deployment in the Harness Deployments page.</li></ul><h3>Steps</h3><p><code>${currentStep.name}</code></p><ul><li>Name
    of the current step name in the Harness Deployments.</li></ul><p><code>${currentStep.type}</code></p><ul><li>Type
    of the current step in the Harness Deployments.</li></ul><h3>Trigger</h3><p><code>${deploymentTriggeredBy}</code></p><ul><li>Name
    of the Harness user that triggered the execution of the Workflow or Pipeline deployment.</li></ul><h3>Artifact</h3><div
    class="warning-callout">If an artifact expression is used in a Workflow step,
    you will be prompted to select an artifact. This is true even if the Workflow
    does not deploy an artifact (such as a Build Workflow or a Workflow performing
    a <a href="/article/zrz7nstjha-use-kustomize-for-kubernetes-deployments">kustomize
    deployment</a>). If you want to reference an artifact that isn&#39;t the primary
    deployment artifact without being prompted, you can use an expression with quotes,
    like <code>docker pull ${artifact${&#34;.metadata.image&#34;}}</code>.</div><div
    class="note-callout">You cannot access artifact metadata in a Build Workflow because
    Build Workflows do not use a Harness Service. See <a href="/article/wqytbv2bfd-ci-cd-with-the-build-workflow">CI/CD
    with the Build Workflow</a>.</div><p><code>${artifact.displayName}</code></p><ul><li>Display
    name of an artifact used by a Service.</li></ul><p><code>${artifact.description}</code></p><ul><li>Description
    of artifact.</li></ul><p><code>${artifact.buildNo}</code></p><ul><li>Build number
    of the artifact. It is Job Number for Jenkins, Tag Name for Docker, Artifact File
    name for Artifactory, and Version number for Nexus.</li><li>For AWS AMI, it is
    the name of the build.</li><li>You can extract the build number from the <code>artifact.fileName</code>
    variable using a JEXL expression like this:</li></ul><pre>echo &#34;buildNo =
    ${regex.extract(&#34;v[0-9]+.[0-9]+&#34;, artifact.fileName)}&#34;</pre><p></p><p><code>${artifact.fileName}</code></p><ul><li>The
    full file name of the artifact used in the deployment.</li><li>You can extract
    the build number from the <code>artifact.fileName</code> variable using a JEXL
    expression like this:</li></ul><pre>echo &#34;buildNo = ${regex.extract(&#34;v[0-9]+.[0-9]+&#34;,
    artifact.fileName)}&#34;</pre><p></p><p><code>${artifact.label.get(&#34;&lt;label-key&gt;&#34;)}</code></p><ul><li>Lists
    the value of a Docker image artifact&#39;s label. The label is identified using
    the label key. For example, if the Docker image has the following label:</li></ul><pre>&#34;Labels&#34;:
    {<br/>    &#34;maintainer&#34;: &#34;NGINX Docker Maintainers&#34;<br/>},</pre><p></p><p>You
    can reference the label in a Workflow Shell Script step using <code>${artifact.label.get(&#34;maintainer&#34;)}</code>.</p><p>Notes:</p><ul><li>The
    key value format example <code>${artifact.label.get(&#34;&lt;label-key&gt;&#34;)}</code>
    has the placeholder character <code>&lt;</code>. Bash will throw an unexpected
    token error if you use the <code>&lt;</code>. Ensure that label values do not
    have unexpected tokens.</li><li>Both labels and values can contain dots.</li></ul><p></p><p><code>${artifact.revision}</code></p><ul><li>Artifact
    revision is available only if the artifact source is set up with build servers
    like Jenkins, Bamboo, etc. Artifact sources like Nexus or Artifactory would not
    have the revision details.</li><li>For AWS AMI, it is the AMI ID, for example:
    <code>ami-0ff62736444c74a47</code>.</li></ul><p><code>ARTIFACT_FILE_NAME</code></p><ul><li>The
    file name of the artifact attached to a Service.</li></ul><p><code>${artifact.metadata.image}</code></p><div
    class="note-callout">You cannot access artifact metadata in a Build Workflow because
    Build Workflows do not use a Harness Service. See <a href="/article/wqytbv2bfd-ci-cd-with-the-build-workflow">CI/CD
    with the Build Workflow</a>.</div><ul><li>Available for Docker images&#39; Artifact
    Sources in Services. For example, if you used a publicly available Docker Hub
    NGINX image as the Artifact Source for a Service, then when the Service is deployed,
    the expression output would be <code>registry.hub.docker.com/library/nginx:stable-perl</code>
    at runtime.</li></ul><p><code>${artifact.metadata.tag}</code></p><div class="note-callout">You
    cannot access artifact metadata in a Build Workflow because Build Workflows do
    not use a Harness Service. See <a href="/article/wqytbv2bfd-ci-cd-with-the-build-workflow">CI/CD
    with the Build Workflow</a>.</div><ul><li>Access tags associated with an artifact,
    such as AMI tags. For example, if an AMI used the tag <code>harness</code>, you
    would use: <code>${artifact.metadata.harness}</code>.</li></ul><p><code>${artifact.metadata.artifactId}</code></p><ul><li>The
    ID of the artifact. What this contains depends on the repository platform.</li></ul><p><code>${artifact.metadata.repositoryName}</code></p><ul><li>The
    name of the repository where this artifact is pulled from.</li></ul><p><code>${artifact.metadata.groupId}</code></p><ul><li>The
    ID of the group (such as a Nexus group ID). What this contains depends on the
    repository platform.</li></ul><p><code>${artifact.source.dockerconfig}</code></p><ul><li>Base64
    representation of your Docker credentials. See <a href="https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#inspecting-the-secret-regcred"
    target="_blank">Inspecting the Secret regcred</a> from Kubernetes.</li></ul><p><code>${artifact.bucketName}</code></p><ul><li>Name
    of the bucket on the artifact server where the artifact is located. For example,
    an S3 bucket.</li></ul><p><code>${artifact.key}</code></p><ul><li>The unique key
    that is used to identify the artifact in the artifact source, such as in AWS S3.</li></ul><p><code>${artifact.url}</code></p><ul><li>The
    URL to download the artifact from the artifact server.</li></ul><p><code>${artifact.buildFullDisplayName}</code></p><ul><li>The
    full name of the artifact file.</li></ul><p><code>${artifact.artifactPath}</code></p><ul><li>The
    path to the location of the artifact on the artifact server.</li></ul><p><code>${artifact.source.username}</code></p><ul><li>The
    artifact source user-name key.</li></ul><p><code>${artifact.source.registryUrl}</code></p><ul><li>The
    artifact source registry URL key.</li></ul><p><code>${artifact.source.repositoryName}</code></p><ul><li>The
    artifact source repository name key.</li></ul><h3>Artifact Rollback Variables</h3><p>The
    following expressions will output information on the artifact used for the deployment
    rollback.</p><p>For example, if you added a Shell Script step and included both
    <code>${artifact.displayName}</code> and <code>${rollbackArtifact.description}</code>,
    you would get the name of the artifact being deployed and the artifact that will
    be used in case of rollback:</p><ul><li>If <code>${artifact.displayName}</code>
    gave you: <code>harness/todolist-sample_11_0702794</code></li><li>Then <code>${rollbackArtifact.description}</code>
    would give you the previous release, that will be used in case of rollback: <code>harness/todolist-sample_10_0702581</code></li></ul><p>Harness
    pulls rollback artifact information from last successful deployment. If there&#39;s
    no previous, successful deployment, then the rollback artifact will return null.</p><p>Review
    the artifact variables above for definitions of each variable.</p><ul><li><code>${rollbackArtifact.bucketName}</code></li><li><code>${rollbackArtifact.buildNo}</code></li><li><code>${rollbackArtifact.buildFullDisplayName}</code></li><li><code>${rollbackArtifact.ArtifactPath}</code></li><li><code>${rollbackArtifact.description}</code></li><li><code>${rollbackArtifact.displayName}</code></li><li><code>${rollbackArtifact.fileName}</code></li><li><code>${rollbackArtifact.key}</code></li><li><code>${rollbackArtifact.metadata.image}</code></li><li><code>${rollbackArtifact.metadata.tag}</code></li><li><code>${rollbackArtifact.source.registryUrl}</code></li><li><code>${rollbackArtifact.url}</code></li></ul><h3>Instance</h3><p>A
    few things to remember when using instance variable expressions:</p><ul><li>Only
    use instance variable expressions at points in the Workflow where instances are
    identifiable.<br/>For example, in a pre-deployment phase, the target instances
    are not known. In cases where Harness is creating instances, such as an AWS AMI/ASG
    deployment, the instances are not known until after they created.</li><li>If you
    use an instance variable expression in a script, the script is forked and executed
    once for each instance.</li><li>If you select the <strong>Execute on Delegate</strong>
    option in a Workflow step, such as the <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step, <code>${instance.&lt;name&gt;}</code> variables do not work.
    The Delegate is not a target instance.</li></ul><h4>How is Instance Determined
    in Different Platforms?</h4><p>Instance expressions evaluate to different information
    depending on the target platform.</p><h5>Kubernetes and Helm</h5><p>Harness queries
    the release name label to identify the replicas. The release name (or expression
    that generates the release name) must be unique for each deployment.</p><p>For
    example, if you deploy two Workflows using the exact same Infrastructure Definition
    simultaneously, the release name will not be considered unique. Instead, use an
    expression that will produce a unique release name for each deployment. Ensure
    that the expression evaluates to a name that follows Kubernetes name restrictions.</p><h5>AWS
    AMI/ASG</h5><p>Harness gets instances belonging to the ASG.</p><h5>SSH Hosts</h5><p>Instances
    are defined in the Node Select Workflow step by using the filters in the Infrastructure
    Definition.</p><h4>Instance Variables</h4><p><code>${instance.name}</code></p><ul><li>The
    name of the instance on which the service is deployed.</li><li>If you use this
    variable in a Workflow, such as in a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step, Harness will apply the script to all target instances. You do
    not have to loop through instances in your script.</li></ul><p><code>${instance.hostName}</code></p><ul><li>The
    host/container/pod name where the microservice/application is deployed.</li><li>If
    you use this variable in a Workflow, such as in a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step, Harness will apply the script to all target instances. You do
    not have to loop through instances in your script.</li></ul><p><code>${instance.host.hostName}</code></p><ul><li>The
    same as <code>${instance.hostName}</code>. For Docker containers, it displays
    the Docker ID.</li><li>For example: <code>d40161ece682</code>.</li><li>See <code>${instance.EcsContainerDetails.dockerId}</code>
    in AWS ECS below also.</li></ul><p><code>${instance.host.ip}</code></p><ul><li>The
    IP address of the target deployment host(s).</li></ul><p><code>${instance.dockerId}</code></p><ul><li>The
    container ID where the Service is deployed. Also see AWS ECS below.</li></ul><p><code>${instance.host.publicDns}</code></p><ul><li>The
    public DNS domain name of the host where the service is deployed. In environments
    like AWS, the public DNS name can be different from the host name.</li><li>If
    you use this variable in a Workflow, such as in a Shell Script command, Harness
    will apply the script to all target instances. You do not have to loop through
    instances in your script.</li></ul><h3>Host (Deprecated)</h3><p>Host variables
    are deprecated, but existing usage is supported. All host properties are available
    using <strong>Instance</strong>.</p><p><code>${host.hostName}</code> — (Deprecated)</p><ul><li>The
    name of the host/container/pod where the service is deployed. The host/container/pod
    might be located by <code>${host.name}</code> or <code>${host.hostName}</code>,
    depending on the JSON label that identifies the host.</li></ul><p><code>${host.ip}</code>
    — (Deprecated)</p><ul><li>The public IP address used to locate the host in the
    deployment environment.</li></ul><p><code>${host.publicDns}</code> — (Deprecated)</p><ul><li>In
    environments like AWS, the public DNS name can be different from the host name.</li></ul><p><code>${host.ec2Instance.instanceId}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance ID.</li></ul><p><code>${host.ec2Instance.instanceType}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance type.</li></ul><p><code>${host.ec2Instance.imageId}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance image ID.</li></ul><p><code>${host.ec2Instance.architecture}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance architecture (for example, AMD64).</li></ul><p><code>${host.ec2Instance.kernelId}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance kernel ID (for example, aki-004ec330).</li></ul><p><code>${host.ec2Instance.keyName}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance key-pair name.</li></ul><p><code>${host.ec2Instance.privateDnsName}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance private DNS FQDN.</li></ul><p><code>${host.ec2Instance.privateIpAddress}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance private IP address.</li></ul><p><code>${host.ec2Instance.publicDnsName}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance public DNS FQDN.</li></ul><p><code>${host.ec2Instance.publicIpAddress}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance public IP address.</li></ul><p><code>${host.ec2Instance.subnetId}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance subnet ID (for example, subnet-1122aabb).</li></ul><p><code>${host.ec2Instance.vpcId}</code>
    — (Deprecated)</p><ul><li>The AWS EC2 instance VPC ID (for example, vpc-1a2b3c4d).</li></ul><h3>HTTP</h3><p>The
    HTTP expressions are typically used in the Workflow <a href="/article/m8ksas9f71-using-the-http-command">HTTP
    step</a>.</p><p><code>${httpResponseMethod}</code></p><ul><li>HTTP response method
    (for example, GET, POST, PUT).</li></ul><p><code>${httpResponseCode}</code></p><ul><li>HTTP
    response code returned by the server (for example, 200, 404).</li></ul><p><code>${httpResponseBody}</code></p><ul><li>HTTP
    message excluding headers. An example use might be <code>${httpResponseBody}.contains(&#34;hello&#34;)</code>.</li><li>You
    can also use JSON and XML functors that httpResponseBody.</li><li>For example,
    <code>json.select(&#34;status&#34;, ${httpResponseBody}) == &#34;success&#34;</code>.
    See <a href="/article/wfvecw3yod-json-and-xml-functors">JSON and XML Functors</a>.</li></ul><h3>Approval</h3><p>Approval
    variables can be defined only within Workflow Approval steps that use the Harness
    UI. See <a href="/article/0ajz35u2hy-approvals">Harness UI Approvals</a>.</p><p><code>${approvedBy.name}</code>
    — (Deprecated)</p><ul><li>The name of the Harness user that approved a Workflow
    approval step.</li></ul><p><code>${approvedBy.email}</code> — (Deprecated)</p><ul><li>The
    email address of the Harness user that approved a Workflow approval step.</li></ul><p><code>${published_name.approvedBy.name}</code></p><ul><li>The
    name of the Harness user that approved a Workflow approval step.</li><li>As of
    December, 2019, this—and the other Approval variables below—must be preceded by
    a published output variable name (<code>published_name</code>). For details about
    this convention, see <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using
    Variables in Workflow Approvals</a>.</li></ul><p><code>${published_name.approvedBy.email}</code></p><ul><li>The
    email address of the Harness user that approved a Workflow approval step.</li><li>See
    <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using Variables
    in Workflow Approvals</a>.</li></ul><p><code>${published_name.approvedOn}</code></p><ul><li>The
    epoch time at which a Workflow approval step was approved.</li><li>See <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using
    Variables in Workflow Approvals</a>.</li></ul><p><code>${published_name.comments}</code></p><ul><li>Free-text
    comments that a user entered when approving (or rejecting) a Workflow approval
    step.</li><li>See <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using
    Variables in Workflow Approvals</a>.</li></ul><p><code>${published_name.timeoutMillis}</code></p><ul><li>Timeout
    (in milliseconds) set for this approval step.</li><li>See <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using
    Variables in Workflow Approvals</a>.</li></ul><p><code>${published_name.approvalStateType}</code></p><ul><li>The
    ticketing system used for this approval: USER_GROUP, JIRA, SERVICENOW, and SHELL_SCRIPT.</li><li>See
    <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using Variables
    in Workflow Approvals</a>.</li></ul><p><code>${published_name.approvalStatus}</code></p><ul><li>The
    approval&#39;s outcome. Can take the values SUCCESS or REJECTED.</li><li>See <a
    href="/article/5pspec1apl-use-variables-for-workflow-approval">Using Variables
    in Workflow Approvals</a>.</li></ul><p><code>${published_name.userGroups[&lt;index&gt;].name}</code></p><ul><li>An
    array of User Groups that were added in a Workflow&#39;s approval step.</li><li>For
    example, if two User Groups were added, you can access those groups&#39; names
    as <code>${published_name.userGroups[0].name}</code> and <code>${published_name.userGroups[1].name}</code>.</li><li>See
    <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using Variables
    in Workflow Approvals</a>.</li></ul><p><code>${published_name.variables.var_name}</code></p><ul><li>Use
    the <code>.variables.</code> prefix when referring to an Additional Input Variable
    that was defined in a Workflow Approval step.</li><li>See <a href="/article/5pspec1apl-use-variables-for-workflow-approval">Using
    Variables in Workflow Approvals</a>.</li></ul><h3>Email</h3><p><code>${toAddress}</code></p><ul><li>The
    destination email address for an Email step in a Workflow.</li></ul><p><code>${ccAddress}</code></p><ul><li>The
    email address to CC, as part of an Email step in a Workflow.</li></ul><p><code>${subject}</code></p><ul><li>The
    email subject, as part of an Email step in a Workflow.</li></ul><p><code>${body}</code></p><ul><li>The
    email address body, as part of an Email step in a Workflow.</li></ul><h3>AWS AMI/ASG</h3><p><code>${ami.newAsgName}</code></p><ul><li>Use
    this expression to obtain the name of the new Auto Scaling Group created by Harness
    during deployment.</li><li>For example, you could add a Shell Script step to your
    Workflow that contains the command echo <code>${ami.newAsgName}</code>.</li><li>For
    more information, see <a href="/article/ox5ewy2sf4-ami-deployments-overview">AMI
    Deployments Overview</a>.</li></ul><p><code>${ami.oldAsgName}</code></p><ul><li>Use
    this expression to obtain the name of the Auto Scaling Group created by the last
    successful deployment.</li></ul><h3>AWS ECS</h3><p><code>${instance.EcsContainerDetails.dockerId}</code></p><ul><li>Short
    form Docker ID for the Docker container hosting the deployed image. For example:
    <code>d40161ece682</code>.</li></ul><p><code>${instance.EcsContainerDetails.completeDockerId}</code></p><ul><li>Full
    form Docker ID for the Docker container hosting the deployed image. For example:<br/><code>d40161ece682a74922b9c540be199cd9fbead4760cd9826b637a58d930c0f526</code></li></ul><p><code>${instance.ecsContainerDetails.taskId}</code></p><ul><li>AWS
    Task ID for ECS container.</li></ul><p><code>${instance.ecsContainerDetails.taskArn}</code></p><ul><li>AWS
    Task ARN for ECS container.</li></ul><h4>ECS Service Name</h4><p>The ECS service
    Harness deploys is named using whatever is set in the <strong>ECS Service Setup</strong>
    Workflow step&#39;s <strong>ECS Service Name</strong> setting:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1598468795326/image.png"/></figure><p>By
    default, the ECS service is named using a concatenation of Harness Application,
    Service, and Environment names: <code>${app.name}__${service.name}__${env.name}</code>.</p><p>You
    can use a <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variable</a> or built-in Harness expression in the <strong>ECS Service Name</strong>
    setting. You can then use that variable elsewhere to refer to the deployed service
    name.</p><h4>ECS Service Names Create by Harness</h4><p>When Harness creates your
    new ECS service, it names it according to the <strong>ECS Service Setup</strong>
    Workflow step&#39;s <strong>Name</strong> setting, and adds a version number as
    a suffix.</p><p>For example:</p><pre class="hljs html">ECS__Example__Default_Replica__stage__ecs__4</pre><p></p><p>You
    can reference this name in your Workflow after the ECS Service Setup step using
    the following expression:</p><p><code>${[step__name].serviceName}</code></p><p>You
    replace <code>[step__name]</code> with the value in the <strong>Name</strong>
    setting.</p><p>The <code>serviceName</code> references the <strong>ECS Service
    Name</strong> setting.</p><p>So, in this example, the reference is <code>${ECS__Service__Setup.serviceName}</code>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/aza65y4af6/1619728106029/image.png"/></figure><p>You
    must use double underscores in between any letters or numbers in the step name
    reference. For example, any spaces must be replaced double underscores.</p><p>For
    example, you can use a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step after the <strong>ECS Service Setup</strong> step to output the
    newly created ECS service name, including the version number suffix Harness adds
    each deployment:</p><pre>echo &#34;${ECS__Service__Setup.serviceName}&#34;</pre><p></p><p>You
    can then output that value from the Shell Script step for use elsewhere in your
    Workflow.</p><p>You can reference the target ECS cluster using the following expression:</p><pre>${ECS__Service__Setup.clusterName}</pre><p></p><h3>Terraform</h3><p><code>${terraform.&lt;output_name&gt;}</code></p><ul><li>When
    you map a Terraform script output to a Harness field, as part of a Service Mapping,
    the variable for the output can be used anywhere in the Workflow that uses that
    Terraform Provisioner. For example, <code>${terraform.clusterName}</code>.</li><li>For
    more information, see <a href="/article/9pvvgcdbjh-terrform-provisioner">Terraform
    How-tos</a>.</li></ul><h4>Terraform Plan Output</h4><p><code>${terraformApply.tfplan}</code></p><ul><li>Displays
    the Terraform plan that was executed as a dry run in the Terraform Apply or Terraform
    Provision step.</li><li>When you use the Terraform Apply or Terraform Provision
    step in a Workflow, you can select the <strong>Set as Terraform Plan</strong>
    option to run the step as a dry run. See <a href="/article/xthfj92dys-terraform-dry-run">Perform
    a Terraform Dry Run</a>.</li></ul><div class="note-callout">The <code>${terraformApply.tfplan}</code>
    expression does not support plan files larger than 15MB.</div><p><code>${terraformDestroy.tfplan}</code></p><ul><li>Displays
    the Terraform plan that was executed as a dry run in the Terraform Destroy step.</li><li>When
    you use the Terraform Destroy step in a Workflow, you can select the <strong>Set
    as Terraform Destroy Plan and Export</strong> option to run the step as a dry
    run. See <a href="/article/4egyxnse9r-terraform-destroy">Remove Provisioned Infra
    with Terraform Destroy</a>.</li></ul><h4>Terraform Plan Output Files</h4><div
    class="note-callout">Currently, this feature is behind the Feature Flag <code>OPTIMIZED_TF_PLAN</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>If you select the <strong>Set as Terraform Plan</strong>
    option, you can display <u>the path</u> to the output of the plan using the variable
    expression <code>${terraformPlan.jsonFilePath()}</code>.</p><p>For example, you
    can display the plan output in a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step:</p><pre># Terraform Apply<br/>#### Using OPA <br/>opa exec --decision
    terraform/analysis/authz --bundle policy/ ${terraformPlan.jsonFilePath()}<br/><br/>####
    Using OPA daemon<br/>curl localhost:8181/v0/data/terraform/analysis/authz -d @${terraformPlan.jsonFilePath()}</pre><p></p><p>If
    you use the Terraform Destroy step, you can use the expression <code>${terraformPlan.destroy.jsonFilePath()}</code>
    to output the path to the plan used by that step.</p><h4>Terraform Plan and Terraform
    Destroy Changes</h4><div class="note-callout">Currently, this feature is behind
    the feature flag <code>ANALYSE_TF_PLAN_SUMMARY</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>You can use
    the following expressions <strong>after</strong> a <a href="/article/xthfj92dys-terraform-dry-run">Terraform
    plan step</a> (Terraform Apply step with <strong>Set as Terraform Plan</strong>
    enabled). The expressions will list the number of resources added, changed, or
    destroyed:</p><ul><li><code>${terraformApply.add}</code></li><li><code>${terraformApply.change}</code></li><li><code>${terraformApply.destroy}</code></li></ul><p>For
    example, if you use these expressions in a Shell Script step following the Terraform
    plan step, the output will look something like this:</p><pre>INFO   2022-08-04
    01:20:13    Executing command ...<br/>INFO   2022-08-04 01:20:13    add 1<br/>INFO   2022-08-04
    01:20:13    change 0<br/>INFO   2022-08-04 01:20:13    destroy 0<br/>INFO   2022-08-04
    01:20:13    null<br/>INFO   2022-08-04 01:20:13    Command completed with ExitCode
    (0)</pre><p></p><p>You can use the following expressions <strong>after</strong>
    a Terraform Destroy step. The expressions will list the number of resources added,
    changed, or destroyed:</p><ul><li><code>${terraformDestroy.add}</code></li><li><code>${terraformDestroy.change}</code></li><li><code>${terraformDestroy.destroy}</code></li></ul><div
    class="note-callout">If Harness detects that a Terraform plan produces no changes
    then the actual generated Terraform plan file is not be uploaded to the Secret
    Manager regardless of whether the Terraform Apply step has <strong>Export Terraform
    Plan to Apply Step</strong> enabled.</div><p></p><h4>Terraform Plan Human Readable</h4><p>Harness
    provides expressions to view the plan in a more human readable format:</p><ul><li><code>${terraformApply.tfplanHumanReadable}</code></li><li><code>${terraformDestroy.tfplanHumanReadable}</code></li></ul><h3>CloudFormation</h3><p><code>${cloudformation.&lt;output_name&gt;}</code></p><ul><li>When
    you map a CloudFormation template output to a Harness field, as part of an Infrastructure
    Definition, the variable for the output can be used anywhere in the Workflow that
    uses that CloudFormation Provisioner.</li><li>For example, <code>${cloudformation.region}</code>.</li><li>For
    more information, see <a href="/article/78g32khjcu-cloud-formation-provisioner">CloudFormation
    Provisioner</a>.</li></ul><h3>Kubernetes</h3><p>Kubernetes Workflows use various
    expressions to represent Kubernetes services, Blue/Green and Canary deployment
    values, and Istio traffic splitting.</p><p>For more information, see <a href="/article/pc6qglyp5h-kubernetes-deployments-overview">Kubernetes
    How-tos</a> and <a href="/article/7bpdtvhq92-workflow-variables-expressions">Kubernetes
    Workflow Variable Expressions</a>.</p><div class="note-callout">These variables
    access infrastructure settings and so they cannot be used in the <strong>Pre-Deployment</strong>
    Workflow section since Harness does not access the target infrastructure in pre-deployment.</div><p><code>${HARNESS_KUBE_CONFIG_PATH}</code></p><ul><li>The
    path to a Harness-generated kubeconfig file containing the credentials you provided.
    The credentials can be used by kubectl commands by exporting its value to the
    KUBECONFIG environment variable.</li><li>You can use this variable in a Workflow
    <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell Script</a>
    to set the environment variable at the beginning of your kubectl script:<br/><code>export
    KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}</code></li></ul><p><code>${infra.kubernetes.infraId}</code></p><ul><li>The <code>${infra.kubernetes.infraId}</code> expression
    is a unique identifier that identifies the combination of Service and Infrastructure
    Definition. In the Infrastructure Definition <strong>Service Infrastructure Mapping</strong>
    below each listing has a unique identifier that can be referenced using <code>${infra.kubernetes.infraId}</code>:</li></ul><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/u3rp89v80h/1624554401882/clean-shot-2021-06-24-at-10-06-02.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p><code>release-${infra.kubernetes.infraId}</code>
    is typically used in the <strong>Release Name</strong> setting for a Harness Kubernetes
    Infrastructure Definition. Release names must be unique. Harness uses the release
    name for tracking releases.</p><p>Use <code>release-${infra.kubernetes.infraId}</code> for
    the <strong>Release Name</strong> instead of just <code>${infra.kubernetes.infraId}</code>.</p><p>Kubernetes
    service and pod names follow DNS-1035 and must consist of lowercase alphanumeric
    characters or &#39;-&#39;, start with an alphabetic character, and end with an
    alphanumeric character.</p><p>Using <code>release-</code> as a prefix will prevent
    any issues.</p><p>See <a href="/article/u3rp89v80h-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a>.</p><h3>Tanzu Application Service (formerly
    Pivotal)</h3><p>See <a href="/article/ojd73hseby-pcf-built-in-variables">Tanzu
    Built-in Variables</a>.</p><h3>Helm</h3><p><code>${infra.helm.releaseName}</code></p><ul><li>Helm
    release name. The variable is populated after the Helm Deploy workflow step is
    done. Data for the variable is available during Helm deployment only.</li></ul><p><code>${infra.helm.shortId}</code></p><ul><li>Helm
    requires the Helm release name to be unique across the cluster, set in a Workflow
    Deploy Helm step.</li><li><code>${infra.helm.shortId}</code> is a Harness-generated
    unique identifier, used as a prefix/suffix to the release name. It contains the
    first 7 characters of the Infrastructure mapping ID used during the Helm deployment.</li><li>Recommended
    release name:<br/><code>${service.name}-${env.name}-${infra.helm.shortId}</code></li></ul><h4>Helm
    Artifact Variable Expressions</h4><p>Harness includes several built-in variable
    expressions that you can use to output Helm chart deployment information:</p><ul><li><code>${helmChart.description}</code>
    - The <code>description</code> in the Helm chart.</li><li><code>${helmChart.displayName}</code>
    - The display <code>name</code> of the chart.</li><li><code>${helmChart.metadata.basePath}</code>
    - The base path used for Helm charts stored in AWS S3 and Google GCS.</li><li><code>${helmChart.metadata.bucketName}</code>
    - The S3 or GCS bucket name, if used.</li><li><code>${helmChart.metadata.repositoryName}</code>
    - The name setting for the repo.</li><li><code>${helmChart.metadata.url}</code>
    - The URL from where the chart was pulled.</li><li><code>${helmChart.name}</code>
    - The <code>name</code> in the chart.</li><li><code>${helmChart.version}</code>
    - The version of the chart that was deployed.</li></ul><p>See <a href="/article/p5om530pe0-deploy-a-helm-chart-as-an-artifact">Deploy
    Helm Charts</a>.</p><h3>Constants</h3><p>The following constants define the paths
    used at runtime, backup, and staging of deployments.</p><table><tbody><tr><td><p><strong>Constant</strong></p></td><td><p><strong>Expression</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p>RUNTIME_PATH</p></td><td><p>${app.defaults.RUNTIME_PATH}</p></td><td><p>The
    runtime path for a Harness application:</p><p><code>$HOME/${app.name}/${service.name}/${env.name}/runtime</code></p></td></tr><tr><td><p>BACKUP_PATH</p></td><td><p>${app.defaults.BACKUP_PATH}</p></td><td><p>The
    backup path for a Harness application:</p><p><code>$HOME/${app.name}/${service.name}/${env.name}/backup/${timestampId}</code></p></td></tr><tr><td><p>STAGING_PATH</p></td><td><p>${app.defaults.STAGING_PATH}</p></td><td><p>The
    staging path for a Harness application:</p><p><code>$HOME/${app.name}/${service.name}/${env.name}/staging/${timestampId}</code></p></td></tr><tr><td><p>WINDOWS_RUNTIME_PATH</p></td><td><p>${app.defaults.WINDOWS_RUNTIME_PATH}</p></td><td><p>The
    runtime path for a Harness application on Windows.</p></td></tr></tbody></table><p>Here
    is example output of the constants on a Linux server:</p><pre>Executing command
    ...<br/>RUNTIME_PATH:  /Users/johndoe/ExampleApp/Secrets/Secrets/runtime<br/>BACKUP_PATH:  /Users/johndoe/ExampleApp/Secrets/Secrets/backup/1607386248419-457<br/>STAGING_PATH:  /Users/johndoe/ExampleApp/Secrets/Secrets/staging/1607386248419-457<br/>timestampId:  1607386248419-457<br/>Command
    completed with ExitCode (0)</pre><p>The <code>${timestampId}</code> is the time
    when the constant is set on the target host. It is in milliseconds with a random
    number appended (<code>-457</code>).</p>'
  slug: built-in-variables-list
  tags:
  - pipelineDeploymentUuid
  - variable
  is_live: true
