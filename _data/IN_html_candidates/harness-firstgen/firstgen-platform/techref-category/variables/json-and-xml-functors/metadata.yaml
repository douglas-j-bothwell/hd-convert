type: article
article_id: wfvecw3yod
user_id: mfr0nxh4be
category_id: 9lw749jubn
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: JSON and XML Functors
slug: json-and-xml-functors
description: Harness includes JSON and XML functors you can use to select contents
  from JSON and XML sources.
short_version: Harness includes JSON and XML functors you can use to select contents
  from JSON and XML sources.
tags:
- jsonpath
- select
- object
- list
- format
- Workflow variable
- Publish Variable Name
- VARS.FIELD
- httpResponseBody
- xml.select
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-08-09T22:28:14.953427Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: JSON and XML Functors
  description: Harness includes JSON and XML functors you can use to select contents
    from JSON and XML sources.
  short_version: Harness includes JSON and XML functors you can use to select contents
    from JSON and XML sources.
  body: '<p>Harness includes JSON and XML functors you can use to select contents
    from JSON and XML sources. These functors reduce the amount of shell scripting
    needed to pull JSON and XML information into your Harness Workflow steps.</p><h3>JSON
    Functor</h3><p>The JSON functor uses the JSON library <a href="https://github.com/json-path/JsonPath"
    target="_blank">JsonPath</a>. The JSON functor methods are described below.</p><h4>jsonpath()</h4><ul><li><strong>Syntax:</strong>
    <code>${jsonpath(&#39;string.string&#39;)}</code></li><li><strong>Description:</strong>
    Select attribute values in a path.</li><li><strong>Parameters:</strong> literal
    string, string. For example, <code>${jsonpath(&#39;health.status&#39;)}</code>.</li></ul><p><strong>Example:</strong></p><p>Here
    is the JSON we will query:</p><pre>{<br/>  &#34;books&#34;: [{<br/>      &#34;isbn&#34;:
    &#34;9781593275846&#34;,<br/>      &#34;title&#34;: &#34;Eloquent JavaScript,
    Second Edition&#34;,<br/>      &#34;subtitle&#34;: &#34;A Modern Introduction
    to Programming&#34;,<br/>      &#34;author&#34;: &#34;Marijn Haverbeke&#34;,<br/>      &#34;published&#34;:
    &#34;2014-12-14T00:00:00.000Z&#34;,<br/>      &#34;publisher&#34;: &#34;No Starch
    Press&#34;,<br/>      &#34;pages&#34;: &#34;472&#34;,<br/>      &#34;description&#34;:
    &#34;JavaScript lies at the heart of almost every modern web application, from
    social apps to the newest browser-based games. Though simple for beginners to
    pick up and play with, JavaScript is a flexible, complex language that you can
    use to build full-scale applications.&#34;<br/>    },<br/>...<br/>}</pre><p></p><p>We&#39;ll
    use the the expression <code>${jsonpath(&#39;books[0].isbn&#39;)} == &#34;9781593275846&#34;</code>
    to compare the <code>jsonpath(&#39;books[0].isbn&#39;)</code> value with <code>9781593275846</code>.</p><p>Here
    is the HTTP step configured to compare in the <strong>Assertion</strong> setting:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1569980301580/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>Here is the Harness deployment
    result with the successful comparison:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1569980490657/image.png"/></figure><h4>select()</h4><ul><li><strong>Syntax:</strong>
    <code>select(string, string)</code></li><li><strong>Description:</strong> Select
    attribute values using a path.</li><li><strong>Parameters:</strong> literal string,
    string (typically, the second string is <code>httpResponseBody</code>). This is
    a path to identify the desired JSON attribute value from a JSON response.</li></ul><p><strong>Example:</strong></p><p>Here
    is the JSON array that we want to select a value from:</p><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;attributes&#34;: {<br/>      &#34;name&#34;: &#34;new-construction-api&#34;,<br/>      &#34;version_pins&#34;:
    {<br/>        &#34;mvn-service://new-construction-api&#34;: &#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34;<br/>      }<br/>    }<br/>  }<br/>}</pre><p>To
    select the value <code>0.0.253-feature_NC-6595.8d268cd~nc1.6312a66</code>, you
    would use <code>select()</code> to specify the path to the value, like this:</p><pre>${json.select(&#34;data.attributes.version_pins.mvn-service://new-construction-api&#34;,
    httpResponseBody)}</pre><p>The <code>httpResponseBody</code> argument is used
    to indicate that we want to select the path <em>within</em> the HTTP response
    body. <code>httpResponseBody</code> is propagated from the HTTP request.</p><p>A
    common use of <code>select()</code> is in an HTTP command in a Workflow. For example,
    the following HTTP command uses a variable named <strong>FIELD</strong> in <strong>Name</strong>
    and the <code>select()</code> method in <strong>Expression</strong> to obtain
    the value <code>0.0.253-feature_NC-6595.8d268cd~nc1.6312a66</code> from the HTTP
    response payload at the URL specified in <strong>URL</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558742272307/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    value returned by the expression is stored in the variable <strong>FIELD</strong>.</p><p>In
    <strong>Publish Variable Name</strong>, the variable <strong>VARS</strong> is
    used to store the value of <strong>FIELD</strong> (the value obtained by the expression).
    The value for <strong>FIELD</strong> can now be referenced elsewhere in the Workflow
    using <code>${VARS.FIELD}</code>.</p><p>When this HTTP command is deployed, <strong>Deployments</strong>
    will display the HTTP response:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558743011008/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>If
    you echo the <code>${VARS.FIELD}</code> output variable in a successive Shell
    Script command, you will get the output of the <code>select()</code> expression
    stored in <code>FIELD</code>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558743166406/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h5>Conditional
    Expressions with Select</h5><p>Using JSON PATH syntax, you can perform conditional
    expressions such as:</p><pre>${json.select(&#34;fileList[?(@.fileData.minorType
    == &#39;MANUAL&#39;)].fileData.downloadLink&#34;,httpResponseBody)}<br/><br/>${json.select(&#34;fileList[?(@.fileData.minorType
    == &#39;ZIP&#39;)].fileData.downloadLink&#34;,httpResponseBody)}</pre><p></p><p>There
    are some useful path examples in <a href="https://github.com/json-path/JsonPath#path-examples"
    target="_blank">JsonPath</a> in GitHub.</p><h4>object()</h4><ul><li><strong>Syntax:</strong>
    <code>object(string)</code></li><li><strong>Description:</strong> Selects objects
    from a JSON collection.</li><li><strong>Parameters:</strong> string. This is a
    JSON key used to identify the desired JSON attribute value from a JSON response.
    Typically, <code>httpResponseBody</code>.</li></ul><p><strong>Example:</strong></p><p>Here
    is the JSON we will query:</p><pre class="hljs json">{&#34;item&#34;:&#34;value1&#34;,&#34;level1&#34;:{&#34;level2&#34;:&#34;value2&#34;}}</pre><p></p><p>Here
    is the query using the <code>object()</code> method to select <code>value1</code>:</p><pre>${json.object(httpResponseBody).item}</pre><p></p><p>We
    can add the <code>object()</code> method to an HTTP step and output it using <strong>Publish
    Variable Name</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559160904207/image.png"/></figure><p>Next,
    we reference the output variable in a Shell Script step:</p><pre>echo &#34;JSON
    object: &#34; ${VAROBJECT.LEVEL}</pre><p>When the Workflow is deployed, the result
    is:</p><pre>JSON object:  value1</pre><p></p><h4>list()</h4><ul><li><strong>Syntax:</strong>
    <code>list(string, string)</code></li><li><strong>Description:</strong> Returns
    list object.</li><li><strong>Parameters:</strong> literal string, string (typically,
    <code>httpResponseBody</code>). Using the <code>list().get()</code> method returns
    items from the list.</li></ul><p><strong>Example:</strong></p><p>Here is the JSON
    we will query:</p><pre>{<br/>  &#34;books&#34;: [{<br/>      &#34;isbn&#34;: &#34;9781593275846&#34;,<br/>      &#34;title&#34;:
    &#34;Eloquent JavaScript, Second Edition&#34;,<br/>      &#34;subtitle&#34;: &#34;A
    Modern Introduction to Programming&#34;,<br/>      &#34;author&#34;: &#34;Marijn
    Haverbeke&#34;,<br/>      &#34;published&#34;: &#34;2014-12-14T00:00:00.000Z&#34;,<br/>      &#34;publisher&#34;:
    &#34;No Starch Press&#34;,<br/>      &#34;pages&#34;: &#34;472&#34;,<br/>      &#34;description&#34;:
    &#34;JavaScript lies at the heart of almost every modern web application, from
    social apps to the newest browser-based games. Though simple for beginners to
    pick up and play with, JavaScript is a flexible, complex language that you can
    use to build full-scale applications.&#34;<br/>    },<br/>    {<br/>      &#34;isbn&#34;:
    &#34;9781449331818&#34;,<br/>      &#34;title&#34;: &#34;Learning JavaScript Design
    Patterns&#34;,<br/>      &#34;subtitle&#34;: &#34;A JavaScript and jQuery Developer&#39;s
    Guide&#34;,<br/>      &#34;author&#34;: &#34;Addy Osmani&#34;,<br/>      &#34;published&#34;:
    &#34;2012-07-01T00:00:00.000Z&#34;,<br/>      &#34;publisher&#34;: &#34;O&#39;Reilly
    Media&#34;,<br/>      &#34;pages&#34;: &#34;254&#34;,<br/>      &#34;description&#34;:
    &#34;With Learning JavaScript Design Patterns, you&#39;ll learn how to write beautiful,
    structured, and maintainable JavaScript by applying classical and modern design
    patterns to the language. If you want to keep your code efficient, more manageable,
    and up-to-date with the latest best practices, this book is for you.&#34;<br/>    },<br/>    {<br/>      &#34;isbn&#34;:
    &#34;9781449365035&#34;,<br/>      &#34;title&#34;: &#34;Speaking JavaScript&#34;,<br/>      &#34;subtitle&#34;:
    &#34;An In-Depth Guide for Programmers&#34;,<br/>      &#34;author&#34;: &#34;Axel
    Rauschmayer&#34;,<br/>      &#34;published&#34;: &#34;2014-02-01T00:00:00.000Z&#34;,<br/>      &#34;publisher&#34;:
    &#34;O&#39;Reilly Media&#34;,<br/>      &#34;pages&#34;: &#34;460&#34;,<br/>      &#34;description&#34;:
    &#34;Like it or not, JavaScript is everywhere these days-from browser to server
    to mobile-and now you, too, need to learn the language or dive deeper than you
    have. This concise book guides you into and through JavaScript, written by a veteran
    programmer who once found himself in the same position.&#34;<br/>    },<br/>    {<br/>      &#34;isbn&#34;:
    &#34;9781491950296&#34;,<br/>      &#34;title&#34;: &#34;Programming JavaScript
    Applications&#34;,<br/>      &#34;subtitle&#34;: &#34;Robust Web Architecture
    with Node, HTML5, and Modern JS Libraries&#34;,<br/>      &#34;author&#34;: &#34;Eric
    Elliott&#34;,<br/>      &#34;published&#34;: &#34;2014-07-01T00:00:00.000Z&#34;,<br/>      &#34;publisher&#34;:
    &#34;O&#39;Reilly Media&#34;,<br/>      &#34;pages&#34;: &#34;254&#34;,<br/>      &#34;description&#34;:
    &#34;Take advantage of JavaScript&#39;s power to build robust web-scale or enterprise
    applications that are easy to extend and maintain. By applying the design patterns
    outlined in this practical book, experienced JavaScript developers will learn
    how to write flexible and resilient code that&#39;s easier-yes, easier-to work
    with as your code base grows.&#34;<br/>    }<br/>  ]<br/>}</pre><p>Here is the
    query using the <code>list()</code> method to select <code>pages</code> from the
    3rd book:</p><pre>${json.list(&#34;books&#34;, httpResponseBody).get(2).pages}</pre><p>We
    can add the <code>list()</code> method to an HTTP step and output it using <strong>Publish
    Variable Name</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559167380354/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Next,
    we reference the output variable in a Shell Script step:</p><pre>echo &#34;JSON
    list pages: &#34; ${book.pages}</pre><p>When the Workflow is deployed, the result
    is:</p><pre>JSON list:  460</pre><h4>format()</h4><ul><li><strong>Syntax:</strong>
    <code>format(object)</code></li><li><strong>Description:</strong> Format the array
    passed as the string value in JSON format.</li><li><strong>Parameters:</strong>
    object. Typically, this is the response from the HTTP response body (<code>httpResponseBody</code>).
    The <code>httpResponseBody</code> argument is used to indicate that we want to
    select the path within the HTTP response body. <code>httpResponseBody</code> is
    propagated from the HTTP request.</li></ul><p><strong>Example:</strong></p><p>We
    add a variable to the HTTP step that contains the <code>${httpResponseBody}</code>
    variable and then pass the response in the output variable named <code>BODY</code>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1567114201698/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>If we simply render the
    <code>${VARS.BODY}</code> expression variable we get:</p><pre>{data:{attributes:name:new-construction-api}}
    {data:{attributes:version_pins:{mvn-service://new-construction-api:0.0.253-feature_NC-6595.8d268cd~nc1.6312a66}}}</pre><p></p><p>If
    we render the variable using the method <code>${json.format(VARS.BODY)}</code>
    we get a JSON formatted string:</p><pre class="hljs json">{&#34;data&#34;:{&#34;attributes&#34;:{&#34;name&#34;:&#34;new-construction-api&#34;,&#34;version_pins&#34;:{&#34;mvn-service://new-construction-api&#34;:&#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34;}}}}</pre><p></p><p>If
    you formatted this with common JSON indentation it would look like this:</p><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;attributes&#34;: {<br/>      &#34;name&#34;: &#34;new-construction-api&#34;,<br/>      &#34;version_pins&#34;:
    {<br/>        &#34;mvn-service://new-construction-api&#34;: &#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34;<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><div
    class="note-callout">If you echo using <code>json.format()</code> and <code>double
    quotes</code> ensure that any double quotes in the JSON are escaped. Another option
    is to use echo with single quotes. This is standard Bash functionality.</div><h3>XML
    Functor</h3><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/XPath"
    target="_blank">XPath</a> functor has one method: <code>xml.select()</code>.</p><h4>select()</h4><ul><li><strong>Syntax:</strong>
    <code>xml.select(string, string)</code></li><li><strong>Description:</strong>
    Returns XML file.</li><li><strong>Parameters:</strong> String using an XPath expression
    and XML file, and a string for <code>httpResponseBody</code>.</li></ul><p><strong>Example:</strong></p><p>Here
    is the contents of the XML file we will query:</p><pre class="hljs xml">&lt;?xml
    version=&#34;1.0&#34;?&gt;<br/>&lt;bookstore&gt;<br/>  &lt;book category=&#34;cooking&#34;&gt;<br/>    &lt;title
    lang=&#34;en&#34;&gt;Everyday Italian&lt;/title&gt;<br/>    &lt;author&gt;Giada
    De Laurentiis&lt;/author&gt;<br/>    &lt;year&gt;2005&lt;/year&gt;<br/>    &lt;price&gt;30.00&lt;/price&gt;<br/>  &lt;/book&gt;<br/>  &lt;book
    category=&#34;children&#34;&gt;<br/>    &lt;title lang=&#34;en&#34;&gt;Harry Potter&lt;/title&gt;<br/>    &lt;author&gt;J
    K. Rowling&lt;/author&gt;<br/>    &lt;year&gt;2005&lt;/year&gt;<br/>    &lt;price&gt;29.99&lt;/price&gt;<br/>  &lt;/book&gt;<br/>  &lt;book
    category=&#34;web&#34;&gt;<br/>    &lt;title lang=&#34;en&#34;&gt;XQuery Kick
    Start&lt;/title&gt;<br/>    &lt;author&gt;James McGovern&lt;/author&gt;<br/>    &lt;author&gt;Per
    Bothner&lt;/author&gt;<br/>    &lt;author&gt;Kurt Cagle&lt;/author&gt;<br/>    &lt;author&gt;James
    Linn&lt;/author&gt;<br/>    &lt;author&gt;Vaidyanathan Nagarajan&lt;/author&gt;<br/>    &lt;year&gt;2003&lt;/year&gt;<br/>    &lt;price&gt;49.99&lt;/price&gt;<br/>  &lt;/book&gt;<br/>  &lt;book
    category=&#34;web&#34; cover=&#34;paperback&#34;&gt;<br/>    &lt;title lang=&#34;en&#34;&gt;Learning
    XML&lt;/title&gt;<br/>    &lt;author&gt;Erik T. Ray&lt;/author&gt;<br/>    &lt;year&gt;2003&lt;/year&gt;<br/>    &lt;price&gt;39.95&lt;/price&gt;<br/>  &lt;/book&gt;<br/>&lt;/bookstore&gt;</pre><p>Here
    is the query using the <code>xml.select()</code> method to select the title from
    the first book:</p><pre>${xml.select(&#34;/bookstore/book[1]/title&#34;, httpResponseBody)}</pre><p>We
    can add the <code>xml.select()</code> method to an HTTP step and output it using
    <strong>Publish Variable Name</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559168928099/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>Next,
    we reference the output variable in a Shell Script step:</p><pre>echo &#34;XML
    select: &#34; ${mybook.title}</pre><p>When the Workflow is deployed, the result
    is:</p><pre>XML select:  Everyday Italian</pre><p>You can also see the entire
    XML file in the deployment <strong>Details</strong> section:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559169014702/image.png"/></figure><p></p>'
  slug: json-and-xml-functors
  tags:
  - jsonpath
  - select
  - object
  - list
  - format
  - Workflow variable
  - Publish Variable Name
  - VARS.FIELD
  - httpResponseBody
  - xml.select
  is_live: true
- language_code: ja
  title: JSONおよびXMLファンクタ
  description: ""
  short_version: ""
  body: '<p>ハーネスには、JSONおよびXMLソースからコンテンツを選択するために使用できるJSONおよびXMLファンクタが含まれています。これらのファンクターは、JSONおよびXML情報をハーネスワークフローステップに取り込むために必要なシェルスクリプトの量を削減します。</p><h3>
    JSON Functor </h3><p>JSONファンクタは、JSONライブラリ<a href="https://github.com/json-path/JsonPath"
    target="_blank">JsonPathを</a>使用します。 JSONファンクタメソッドについては、以下で説明します。</p><h4> jsonpath（）
    </h4><ul><li><strong>構文：</strong> <code>${jsonpath(&#39;string.string&#39;)}</code></li><li><strong>説明：</strong>パス内の属性値を選択します。</li><li><strong>パラメータ：</strong>リテラル文字列、文字列。たとえば、
    <code>${jsonpath(&#39;health.status&#39;)}</code>です。</li></ul><p><strong>例：</strong></p><p>クエリするJSONは次のとおりです。</p><pre>{
    <br/> &#34;books&#34;: [{ <br/> &#34;isbn&#34;: &#34;9781593275846&#34;, <br/>
    &#34;title&#34;: &#34;Eloquent JavaScript, Second Edition&#34;, <br/> &#34;subtitle&#34;:
    &#34;A Modern Introduction to Programming&#34;, <br/> &#34;author&#34;: &#34;Marijn
    Haverbeke&#34;, <br/> &#34;published&#34;: &#34;2014-12-14T00:00:00.000Z&#34;,
    <br/> &#34;publisher&#34;: &#34;No Starch Press&#34;, <br/> &#34;pages&#34;: &#34;472&#34;,
    <br/> &#34;description&#34;: &#34;JavaScript lies at the heart of almost every
    modern web application, from social apps to the newest browser-based games. Though
    simple for beginners to pick up and play with, JavaScript is a flexible, complex
    language that you can use to build full-scale applications.&#34; <br/> }, <br/>
    ... <br/> }</pre> <p>式<code>${jsonpath(&#39;books[0].isbn&#39;)} == &#34;9781593275846&#34;</code>を使用して、
    <code>jsonpath(&#39;books[0].isbn&#39;)</code>値を<code>9781593275846</code>と<code>9781593275846</code>ます。</p><p>次に、
    <strong>アサーション</strong>設定で比較するように構成されたHTTPステップを示します。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1569980301580/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>比較が成功したハーネス展開結果は次のとおりです。</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1569980490657/image.png"/></figure><h4>選択する（）
    </h4><ul><li><strong>構文：</strong> <code>select(string, string)</code></li><li><strong>説明：</strong>パスを使用して属性値を選択します。</li><li><strong>パラメータ：</strong>リテラル文字列、文字列（通常、2番目の文字列は<code>httpResponseBody</code>
    ）。これは、JSON応答から目的のJSON属性値を識別するためのパスです。</li></ul><p><strong>例：</strong></p><p>以下は、値を選択するJSON配列です。</p><pre>{
    <br/> &#34;data&#34;: { <br/> &#34;attributes&#34;: { <br/> &#34;name&#34;: &#34;new-construction-api&#34;,
    <br/> &#34;version_pins&#34;: { <br/> &#34;mvn-service://new-construction-api&#34;:
    &#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34; <br/> } <br/> } <br/> }
    <br/> }</pre> <p>値<code>0.0.253-feature_NC-6595.8d268cd~nc1.6312a66</code>を選択するには、次のように、
    <code>select()</code>を使用して値へのパスを指定します。</p><pre>${json.select(&#34;data.attributes.version_pins.mvn-service://new-construction-api&#34;,
    httpResponseBody)}</pre> <p><code>httpResponseBody</code>引数は、我々がHTTPレスポンスボディ<em>内の</em>パスを選択することを示すために使用されます。
    <code>httpResponseBody</code>はHTTPリクエストから伝播されます。</p><p><code>select()</code>一般的な用途は、ワークフローのHTTPコマンドです。たとえば、次のHTTPコマンドは、
    <strong>Nameに</strong> <strong>FIELD</strong>という名前の変数と<strong>Expressionの</strong>
    <code>select()</code>メソッドを使用して、URLで指定されたURLのHTTP応答ペイロードから値<code>0.0.253-feature_NC-6595.8d268cd~nc1.6312a66</code>を取得し<strong>ます</strong>
    。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558742272307/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>式によって返された値は、変数<strong>FIELDに</strong>格納されます。</p><p><strong>Publish
    Variable Name</strong>では、変数<strong>VARS</strong>を使用して、 <strong>FIELD</strong>の値（式によって取得された値）を格納します。
    <strong>FIELD</strong>の値は、 <code>${VARS.FIELD}</code>を使用してワークフローの他の場所で参照できるようになりました。</p><p>このHTTPコマンドがデプロイされると、
    <strong>デプロイメント</strong>はHTTP応答を表示します。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558743011008/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>後続のシェルスクリプトコマンドで<code>${VARS.FIELD}</code>出力変数をエコーすると、
    <code>FIELD</code>格納されている<code>select()</code>式の出力が得られ<code>select()</code> 。</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1558743166406/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h4>オブジェクト（）
    </h4><ul><li><strong>構文：</strong> <code>object(string)</code></li><li><strong>説明：</strong>
    JSONコレクションからオブジェクトを選択します。</li><li><strong>パラメータ：</strong>文字列。これは、JSON応答から目的のJSON属性値を識別するために使用されるJSONキーです。通常、
    <code>httpResponseBody</code>です。</li></ul><p><strong>例：</strong></p><p>クエリするJSONは次のとおりです。</p><pre
    class="hljs json"> {&#34;item&#34;： &#34;value1&#34;、 &#34;level1&#34;：{&#34;level2&#34;：
    &#34;value2&#34;}}</pre><p>次に、 <code>object()</code>メソッドを使用して<code>value1</code>を選択するクエリを示し<code>object()</code>
    。</p><pre>${json.object(httpResponseBody).item}</pre> <p><code>object()</code>メソッドをHTTPステップに追加し、
    <strong>Publish Variable Name</strong>を使用してそれを出力できます。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559160904207/image.png"/></figure><p>次に、シェルスクリプトステップで出力変数を参照します。</p><pre>echo
    &#34;JSON object: &#34; ${VAROBJECT.LEVEL}</pre> <p>ワークフローがデプロイされると、結果は次のようになります。</p><pre>JSON
    object: value1</pre> <p></p><h4>リスト（） </h4><ul><li><strong>構文：</strong> <code>list(string,
    string)</code></li><li><strong>説明：</strong>リストオブジェクトを返します。</li><li><strong>パラメータ：</strong>リテラル文字列、文字列（通常、
    <code>httpResponseBody</code> ）。 <code>list().get()</code>メソッドを使用すると、 <code>list().get()</code>からアイテムが返されます。</li></ul><p><strong>例：</strong></p><p>クエリするJSONは次のとおりです。</p><pre>{
    <br/> &#34;books&#34;: [{ <br/> &#34;isbn&#34;: &#34;9781593275846&#34;, <br/>
    &#34;title&#34;: &#34;Eloquent JavaScript, Second Edition&#34;, <br/> &#34;subtitle&#34;:
    &#34;A Modern Introduction to Programming&#34;, <br/> &#34;author&#34;: &#34;Marijn
    Haverbeke&#34;, <br/> &#34;published&#34;: &#34;2014-12-14T00:00:00.000Z&#34;,
    <br/> &#34;publisher&#34;: &#34;No Starch Press&#34;, <br/> &#34;pages&#34;: &#34;472&#34;,
    <br/> &#34;description&#34;: &#34;JavaScript lies at the heart of almost every
    modern web application, from social apps to the newest browser-based games. Though
    simple for beginners to pick up and play with, JavaScript is a flexible, complex
    language that you can use to build full-scale applications.&#34; <br/> }, <br/>
    { <br/> &#34;isbn&#34;: &#34;9781449331818&#34;, <br/> &#34;title&#34;: &#34;Learning
    JavaScript Design Patterns&#34;, <br/> &#34;subtitle&#34;: &#34;A JavaScript and
    jQuery Developer&#39;s Guide&#34;, <br/> &#34;author&#34;: &#34;Addy Osmani&#34;,
    <br/> &#34;published&#34;: &#34;2012-07-01T00:00:00.000Z&#34;, <br/> &#34;publisher&#34;:
    &#34;O&#39;Reilly Media&#34;, <br/> &#34;pages&#34;: &#34;254&#34;, <br/> &#34;description&#34;:
    &#34;With Learning JavaScript Design Patterns, you&#39;ll learn how to write beautiful,
    structured, and maintainable JavaScript by applying classical and modern design
    patterns to the language. If you want to keep your code efficient, more manageable,
    and up-to-date with the latest best practices, this book is for you.&#34; <br/>
    }, <br/> { <br/> &#34;isbn&#34;: &#34;9781449365035&#34;, <br/> &#34;title&#34;:
    &#34;Speaking JavaScript&#34;, <br/> &#34;subtitle&#34;: &#34;An In-Depth Guide
    for Programmers&#34;, <br/> &#34;author&#34;: &#34;Axel Rauschmayer&#34;, <br/>
    &#34;published&#34;: &#34;2014-02-01T00:00:00.000Z&#34;, <br/> &#34;publisher&#34;:
    &#34;O&#39;Reilly Media&#34;, <br/> &#34;pages&#34;: &#34;460&#34;, <br/> &#34;description&#34;:
    &#34;Like it or not, JavaScript is everywhere these days-from browser to server
    to mobile-and now you, too, need to learn the language or dive deeper than you
    have. This concise book guides you into and through JavaScript, written by a veteran
    programmer who once found himself in the same position.&#34; <br/> }, <br/> {
    <br/> &#34;isbn&#34;: &#34;9781491950296&#34;, <br/> &#34;title&#34;: &#34;Programming
    JavaScript Applications&#34;, <br/> &#34;subtitle&#34;: &#34;Robust Web Architecture
    with Node, HTML5, and Modern JS Libraries&#34;, <br/> &#34;author&#34;: &#34;Eric
    Elliott&#34;, <br/> &#34;published&#34;: &#34;2014-07-01T00:00:00.000Z&#34;, <br/>
    &#34;publisher&#34;: &#34;O&#39;Reilly Media&#34;, <br/> &#34;pages&#34;: &#34;254&#34;,
    <br/> &#34;description&#34;: &#34;Take advantage of JavaScript&#39;s power to
    build robust web-scale or enterprise applications that are easy to extend and
    maintain. By applying the design patterns outlined in this practical book, experienced
    JavaScript developers will learn how to write flexible and resilient code that&#39;s
    easier-yes, easier-to work with as your code base grows.&#34; <br/> } <br/> ]
    <br/> }</pre> <p>3番目の本から<code>pages</code>を選択するために<code>list()</code>メソッドを使用するクエリは次のとおりです。</p><pre>${json.list(&#34;books&#34;,
    httpResponseBody).get(2).pages}</pre> <p><code>list()</code>メソッドをHTTPステップに追加し、
    <strong>Publish Variable Name</strong>を使用して出力できます。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559167380354/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>次に、シェルスクリプトステップで出力変数を参照します。</p><pre>echo
    &#34;JSON list pages: &#34; ${book.pages}</pre> <p>ワークフローがデプロイされると、結果は次のようになります。</p><pre>JSON
    list: 460</pre> <h4>フォーマット（） </h4><ul><li><strong>構文：</strong> <code>format(object)</code></li><li><strong>説明：</strong>文字列値として渡された配列をJSON形式でフォーマットします。</li><li><strong>パラメータ：</strong>オブジェクト。通常、これはHTTP応答本文（
    <code>httpResponseBody</code> ）からの応答です。 <code>httpResponseBody</code>引数は、HTTP応答本<code>httpResponseBody</code>のパスを選択することを示すために使用されます。
    <code>httpResponseBody</code>はHTTPリクエストから伝播されます。</li></ul><p><strong>例：</strong></p><p><code>${httpResponseBody}</code>変数を含むHTTPステップに変数を追加し、
    <code>BODY</code>という名前の出力変数に応答を渡します。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1567114201698/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p><code>${VARS.BODY}</code>出力変数を単にエコーすると、次のようになります。</p><pre>{data:{attributes:name:new-construction-api}}
    {data:{attributes:version_pins:{mvn-service://new-construction-api:0.0.253-feature_NC-6595.8d268cd~nc1.6312a66}}}</pre>
    <p>メソッド<code>${json.format(VARS.BODY)}</code>を使用して変数を出力すると、JSON形式の文字列が得られます。</p><pre>{&#34;data&#34;:{&#34;attributes&#34;:{&#34;name&#34;:&#34;new-construction-api&#34;,&#34;version_pins&#34;:{&#34;mvn-service://new-construction-api&#34;:&#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34;}}}}</pre>
    <p>これを一般的なJSONインデントでフォーマットすると、次のようになります。</p><pre>{ <br/> &#34;data&#34;: { <br/>
    &#34;attributes&#34;: { <br/> &#34;name&#34;: &#34;new-construction-api&#34;,
    <br/> &#34;version_pins&#34;: { <br/> &#34;mvn-service://new-construction-api&#34;:
    &#34;0.0.253-feature_NC-6595.8d268cd~nc1.6312a66&#34; <br/> } <br/> } <br/> }
    <br/> }</pre> <h3> XMLファンクター</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/XPath"
    target="_blank">XPath</a>ファンクタには、 <code>xml.select()</code> 1つのメソッドがあります。</p><h4>選択する（）
    </h4><ul><li><strong>構文：</strong> <code>xml.select(string, string)</code></li><li><strong>説明：</strong>
    XMLファイルを返します。</li><li><strong>パラメータ：</strong> XPath式とXMLファイルを使用した文字列、および<code>httpResponseBody</code>文字列。</li></ul><p><strong>例：</strong></p><p>クエリするXMLファイルの内容は次のとおりです。</p><pre
    class="hljs xml"> &lt;？xml version = &#34;1.0&#34;？&gt; <br/> &lt;書店&gt; <br/>
    &lt;book category = &#34;cooking&#34;&gt; <br/> &lt;title lang = &#34;en&#34;&gt;毎日のイタリア語&lt;/
    title&gt; <br/> &lt;author&gt; Giada De Laurentiis &lt;/ author&gt; <br/> &lt;年&gt;
    2005年&lt;/年&gt; <br/> &lt;price&gt; 30.00 &lt;/ price&gt; <br/> &lt;/ book&gt;
    <br/> &lt;book category = &#34;children&#34;&gt; <br/> &lt;title lang = &#34;en&#34;&gt;ハリー・ポッター&lt;/
    title&gt; <br/> &lt;author&gt; J K.ローリング&lt;/ author&gt; <br/> &lt;年&gt; 2005年&lt;/年&gt;
    <br/> &lt;price&gt; 29.99 &lt;/ price&gt; <br/> &lt;/ book&gt; <br/> &lt;book
    category = &#34;web&#34;&gt; <br/> &lt;title lang = &#34;en&#34;&gt; XQueryキックスタート&lt;/
    title&gt; <br/> &lt;author&gt; James McGovern &lt;/ author&gt; <br/> &lt;author&gt;
    Per Bothner &lt;/ author&gt; <br/> &lt;author&gt;カートケイグル&lt;/ author&gt; <br/>
    &lt;author&gt; James Linn &lt;/ author&gt; <br/> &lt;author&gt; Vaidyanathan Nagarajan
    &lt;/ author&gt; <br/> &lt;年&gt; 2003 &lt;/年&gt; <br/> &lt;price&gt; 49.99 &lt;/
    price&gt; <br/> &lt;/ book&gt; <br/> &lt;book category = &#34;web&#34; cover =
    &#34;paperback&#34;&gt; <br/> &lt;title lang = &#34;en&#34;&gt; XMLの学習&lt;/ title&gt;
    <br/> &lt;author&gt;エリックT.レイ&lt;/ author&gt; <br/> &lt;年&gt; 2003 &lt;/年&gt; <br/>
    &lt;price&gt; 39.95 &lt;/ price&gt; <br/> &lt;/ book&gt; <br/> &lt;/ bookstore&gt;</pre><p><code>xml.select()</code>メソッドを使用して最初の本からタイトルを選択するクエリは次のとおりです。</p><pre>${xml.select(&#34;/bookstore/book[1]/title&#34;,
    httpResponseBody)}</pre> <p><code>xml.select()</code>メソッドをHTTPステップに追加し、 <strong>Publish
    Variable Name</strong>を使用して出力できます。</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559168928099/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>次に、シェルスクリプトステップで出力変数を参照します。</p><pre>echo
    &#34;XML select: &#34; ${mybook.title}</pre> <p>ワークフローがデプロイされると、結果は次のようになります。</p><pre>XML
    select: Everyday Italian</pre> <p>デプロイメントの<strong>詳細</strong>セクションでXMLファイル全体を確認することもできます。</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/wfvecw3yod/1559169014702/image.png"/></figure><p></p>'
  slug: json-xml
  tags: []
  is_live: true
  machine_translated_at: 2020-05-04T20:37:25.436708Z
