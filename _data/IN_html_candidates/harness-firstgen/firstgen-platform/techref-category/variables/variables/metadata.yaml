type: article
article_id: 9dvxcegm90
user_id: mfr0nxh4be
category_id: 9lw749jubn
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: What is a Harness Variable Expression?
slug: variables
description: Using Harness variable expressions you can find a variable for most Harness
  settings and deployment information.
short_version: Find a variable for most Harness settings and deployment information.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: true
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-02T22:42:54.054215Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: What is a Harness Variable Expression?
  description: Using Harness variable expressions you can find a variable for most
    Harness settings and deployment information.
  short_version: Find a variable for most Harness settings and deployment information.
  body: '<p>Harness variable expressions are used to parameterize settings in your
    Harness components, create environment variables, and create templates that can
    be used by your team.</p><p>You can create your own variable expressions to pass
    information through your Pipeline, or use built-in expressions to reference most
    of the settings and deployment information in Harness.</p><p>For example, you
    can use an expression containing the variable name <code>account</code> to refer
    to account properties:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537295053592/image.png"/></figure><p></p><h3>Overview</h3><p>Harness
    includes two types of variables that you can use in expressions:</p><ul><li><strong>Harness
    built-in variables:</strong> There are variables scoped to different entities—such
    as Applications, Services, Environments, and Workflows—and variables that provide
    information about deployment environments.</li><li><strong>User-created variables:</strong>
    You can create variables at the account level and application level, which can
    be used across your Harness applications. You can also create variables in Application
    entities, to be replaced by users when configuring or deploying a CD pipeline.</li></ul><div
    class="tip-callout">All expressions are evaluated immediately and use the <code>${}</code>
    delimiters. Harness uses the <a href="http://commons.apache.org/proper/commons-jexl/"
    target="_blank">Java Expression Language (JEXL)</a> expression language to render
    variables.</div><p>For information on passing variables from a Trigger to a Workflow,
    see <a href="/article/revc37vl0f-passing-variable-into-workflows">Passing Variables
    into Workflows from Triggers</a>.</p><p>To use a variable, you enter the variable
    name inside <code>${...}</code> expression. For example, to obtain the name of
    a Harness application, you would use the expression <code>${app.name}</code>.</p><div
    class="note-callout">Harness permits variables only within their scope. You will
    not see a variable available in a field where it cannot be used.</div><p>Variables
    can be used with methods. For example, here is an object using the expression
    <code>${instance.hostName}</code>:</p><pre class="hljs java">${instance.hostName.split(&#39;\.&#39;)[0]}</pre><p>A
    split method is called with the argument <strong>(&#39;\.&#39;)</strong>, and
    the result is a Java array, returning the first item, <strong>[0]</strong>.</p><p>For
    more information, see <a href="https://docs.harness.io/article/9dvxcegm90-variables#objects_and_functors">Objects
    and Functors</a>.</p><div class="note-callout">Do not use hyphens (dashes) in
    variable names, as some Linux distributions and deployment-related software do
    not allow them.</div><h4>JEXL and Java String API</h4><p>JEXL supports all <a
    href="https://docs.oracle.com/javase/8/docs/api/?java/lang/String.html" target="_blank">Java
    String methods</a>. You can use these methods wherever you use expressions in
    Harness.</p><p>For example, here is an object using the expression <code>${instance.hostName}</code>:</p><pre
    class="hljs java">${instance.hostName.split(&#39;\.&#39;)[0]}</pre><p></p><p>A
    split method is called with the argument <strong>(&#39;\.&#39;)</strong>, and
    the result is a Java array, returning the first item, <strong>[0]</strong>.</p><p>You
    can manipulate strings just like you would in Java. Here&#39;s another example
    where JEXL is operating on a JSON data payload received from New Relic and the
    JAVA String <code>replaceAll()</code> method is applied:</p><pre>ip-${instanceDetails.aws.ip.replaceAll(&#34;\\.&#34;,&#34;-&#34;)}.us-east-2.compute.internal</pre><h3>Limitations</h3><p>See
    <a href="/article/9ob3r6v9tg-variable-expression-name-restrictions">Variable Expression
    Limitations and Restrictions</a>.</p><h3>What Expressions Am I Already Using?</h3><p>An
    easy way to see what expressions are already used in your deployments is to look
    at the Execution Context for each Workflow step:</p><ol><li>In Harness, click
    <strong>Continuous Deployment</strong>.</li><li>Locate a deployment and open it.</li><li>Expand
    the deployment flowchart and then click any step in the deployment. You will see
    its details displayed.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1575581640461/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    the execution details, click the option button and click <strong>View Execution
    Context</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1575581715807/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>The
    expressions used in that step are displayed.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1575581799701/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>If
    an expression is too long to view, hover over it to see its full name.</li></ol><p>Now
    you can reference those expressions elsewhere in your Workflow or Pipeline, in
    the set up of the Workflow, or in command such as Shell Script.</p><h3>Creating
    Custom Variables</h3><p>You can create variables in Services and Workflows.</p><ul><li><a
    href="/article/eb3kfl8uls-service-configuration#configuration_variables_and_files">Service
    Configuration Variables</a> are variables you can use in the manifests and specifications
    in your Service, and can be overwritten by <a href="/article/n39w05njjv-environment-configuration#override_a_service_configuration">Service
    Variable Overrides</a> in Environments.</li><li><a href="/article/m220i1tnia-workflow-configuration#add_workflow_variables">Workflow
    Variables</a> let you add parameters to your Workflow that can be used throughout
    the Workflow. When the Workflow is deployed, values for the variables can be provided
    or required. Values can also be passed into the Workflow from Triggers. See <a
    href="/article/revc37vl0f-passing-variable-into-workflows">Passing Variables into
    Workflows and Pipelines from Triggers</a>.</li></ul><p>Some Workflow commands
    let you publish their output as variables:</p><ul><li><a href="/article/5fzq9w0pq7-using-the-jenkins-command">Jenkins</a></li><li><a
    href="/article/077hwokrpr-jira-integration#jira_issue_variables">Jira</a></li><li><a
    href="/article/1fjrjbau7x-capture-shell-script-step-output#using_shell_script_step">Shell
    Script</a></li><li><a href="/article/wfvecw3yod-json-and-xml-functors">HTTP</a></li></ul><p>Variables
    are also integrated into <a href="/article/0ajz35u2hy-approvals#create_variable_workflow">Workflow
    Approval</a> and <a href="/article/0ajz35u2hy-approvals#approving_pipeline_stages_using_variables">Pipeline
    Approval</a> steps.</p><h3>When are Variable Expressions Evaluated?</h3><p>Variable
    expressions are resolved <strong>before</strong> the Bash or PowerShell script
    is run. Therefore, if you use one in a Bash comment, the variable expression is
    resolved and its value is displayed.</p><h3>What if Harness Can&#39;t Resolve
    an Expression?</h3><p>If Harness cannot resolve an expression to a value, it simply
    outputs the expression itself.</p><h3>Built-in Variables</h3><p>Harness includes
    many default (built-in) Harness variable expressions. This variables are frequently
    updated.</p><p>See <a href="/article/aza65y4af6-built-in-variables-list">Built-in
    Variables List</a>.</p><h3>Account Default Variables</h3><p>You can define account-wide
    variables that can be referenced by any Application and entity in your account.</p><p>Account
    Defaults are account-level variables available to all users logged into the account.
    To manage Account Defaults, you must be logged into Harness as a member of a group
    that has <strong>Manage Account</strong> permissions, such as the default <strong>Account
    Administrator</strong> group.</p><p>To create an Account Default variable, do
    the following:</p><ol><li>Log into Harness, and then click <strong>Setup</strong>.</li><li>Click
    the More Options ⋮ menu next to <strong>Account</strong>, and then click <strong>Account
    Defaults</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537217642989/image.png"/></figure><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537219197217/image.png"/></figure></li><li>Click
    <strong>Add Row</strong>. A new row appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537219267171/image.png"/></figure></li><li>In
    <strong>Name</strong>, enter a name for the variable. Ensure that the name is
    descriptive, as users will be looking at a list of variable names and will need
    to distinguish between them.</li><li>In <strong>Type</strong>, select <strong>STRING</strong>.</li><li>In
    <strong>Value</strong>, enter the value for the variable. For example, if you
    added an Account Default variable for <strong>productName</strong>, the dialog
    would look like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537219480037/image.png"/></figure></li><li>Click
    <strong>SUBMIT</strong>. The new variable is added.<br/><br/>Now, let&#39;s reference
    the variable.</li></ol><p></p><ol><li style="counter-increment:li 7" start="8">Open
    a Harness Application, and then open a Service, such as Docker or Pivotal Cloud
    Foundry (PCF) Service within that Application.</li><li>In the Service, under <strong>Configuration</strong>,
    click <strong>Add Variable</strong>. The <strong>Config Variable</strong> dialog
    appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537219871181/image.png"/></figure></li><li>In
    <strong>Value</strong>, enter <code>${account.defaults}</code> to see the account
    variables displayed.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1537219993244/image.png"/></figure></li><li>Click
    the account variable name to enter it. It is entered as <code>${account.defaults.variable_name}</code>.</li></ol><h3>Application
    Default Variables</h3><p>When you create an Application in Harness, you can define
    Application-wide variables that can be referenced in any entity within the Application.
    For example, you might want to create an Application-wide variable for an approval.</p><p>See
    <a href="/article/lgg12f0yry-set-default-application-directories-as-variables">Create
    a Default Application Directories and Variables</a>.</p><h3>Secrets and Variables</h3><p>You
    can create encrypted text items in Harness <strong>Secrets Management</strong>,
    and reference that the text using variables. For information on creating and managing
    secrets, see <a href="/article/au38zpufhr-secret-management">Secrets Management</a>.</p><p>For
    example, you can add a username as an encrypted text item, named <strong>Username</strong>,
    and then reference it using the variable <code>${secrets.getValue(&#34;Username&#34;)}</code>.</p><div
    class="tip-callout">By default, the <code>${secrets.getValue(&#34;var_name&#34;)}</code>
    is available in the Harness Applications listed in its <strong>Usage Scope</strong>.
    To make the secret available Account-wide, so that it can be used in a <a href="/article/h9tkwmkrm7-delegate-installation#delegate_profiles">Delegate
    Profile</a>, you must select the <strong>Scope to Account</strong> option:</div><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1570485047825/image.png"/></figure><p>For
    an extended example, see <a href="/article/h9tkwmkrm7-delegate-installation#using_secrets_in_a_profile">Using
    Secrets in a Profile</a>.</p><h3>Service Config Variables</h3><p>When you create
    variables in a Harness Service&#39;s <strong>Config Variables</strong> section,
    they can be referenced anywhere that Service is used in your Workflow. For more
    information, see <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add
    Service Config Variables</a>.</p><p>You reference the Service Config Variable
    using the <code>${serviceVariable.your_var_name}</code> format.</p><p>The Service
    Config Variables are added to your target hosts as Environment variables.</p><p>For
    example, if you have a Service Config Variable named <strong>jarName</strong>,
    Harness creates an environment variable name <strong>jarName</strong> that can
    be referenced in two ways:</p><ul><li>As a Service variable: <code>${serviceVariable.jarName}</code>.
    There is no escaping done by Harness.</li><li>As an environment variable: <code>${jarName}</code>.
    Escaping is automatically done by Harness.</li></ul><p></p><h3>Service Config
    Files</h3><p>Files added in the <strong>Config Files</strong> section of a Service
    are referenced using the <code>configFile.getAsString(&#34;fileName&#34;)</code> Harness
    expression:</p><ul><li><code>configFile.getAsString(&#34;fileName&#34;)</code> –
    Plain text file contents.</li><li><code>configFile.getAsBase64(&#34;fileName&#34;)</code> –
    Base64-encoded file contents.</li></ul><p>For more information, see <a href="/article/iwtoq9lrky-add-service-level-configuration-files-april-2-2020">Add
    Service Config Files</a>.</p><h3>Objects and Functors</h3><p>Anywhere that variables
    are allowed in Harness, methods using the variable are also allowed. Methods follow
    Java regex pattern format, and operators may be used in building expressions.</p><p>For
    example, here is an object using the variable, <code>${artifact.source.repositoryName}</code>:</p><pre
    class="hljs java">${artifact.source.repositoryName.split(&#39;\.&#39;)[0]}</pre><p>A
    split method is called with the argument <strong>(&#39;\.&#39;)</strong>, and
    the result is a Java array, returning the first item, <strong>[0]</strong>.</p><h4>Functors</h4><p>Harness
    provides functors to enable you to map over a set of values. Harness provides
    a Regex and an AWS functor.</p><h5>Regex Functor</h5><p>The Regex Functor allows
    you to operate over variables using regular expressions.</p><p>For example, the
    following argument is a regular expression in Java regex format that extracts
    the first matching non-empty substring:</p><pre class="hljs java">${regex.extract(&#34;[0-9]*&#34;,
    &#34;build-webservices-3935-0.noarch.rpm&#34;)}</pre><p>It resolves to <strong>&#34;3935&#34;</strong>.
    If there were no matching substring, it would resolve as an empty string.</p><p>The
    next argument uses operators to extract the substring and its iteration number:</p><pre
    class="hljs java">${regex.extract(&#34;[0-9]+-[0-9]+&#34;, &#34;build-webservices-3935-0.noarch.rpm&#34;)}</pre><p>It
    resolves to <strong>&#34;3935-0&#34;</strong>.</p><p>For more functors, see <a
    href="/article/wfvecw3yod-json-and-xml-functors">JSON and XML Functors</a>.</p><h5>AWS
    Functor</h5><p>The AWS functor allows you to operate over complex objects returned
    from the AWS API.</p><p>For example, the following arguments use AWS Tags to find
    a tag with a particular key. In this example, the tags collection is:</p><pre
    class="hljs json">{“Name”, “main-service”; “Environment”, “Green”}</pre><p>The
    first argument resolves to an empty string because <strong>find()</strong> is
    case sensitive and the tag name is <strong>&#34;Name&#34;</strong>:</p><pre class="hljs
    java">${aws.tags.find(host.ec2Instance.tags, &#39;name&#39;)}</pre><p>The next
    argument finds the tag <strong>Name</strong> and resolves to <strong>”main-service”</strong>:</p><pre
    class="hljs java">${aws.tags.find(host.ec2Instance.tags, &#39;Name&#39;)}</pre><p>The
    last argument finds the key <strong>Green</strong>:</p><pre class="hljs java">${aws.tags.find(host.ec2Instance.tags,
    Environment)}</pre><h5>Java StrSubstitutor</h5><p>Harness also supports the Java
    <a href="https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/text/StrSubstitutor.html"
    target="_blank">StrSubstitutor</a> class for taking a piece of text and substituting
    all the variables within it. This can useful because it includes many static convenience
    methods for replacing variables.</p><h3>View Output in Deployments</h3><p>The
    <strong>Deployments</strong> page in Harness Manager displays the output of any
    of the Harness built-in variables, or third-party API calls, that you use in its
    <strong>Execution Context</strong> panel.</p><h4>View Variable Output</h4><p>Here
    is an example of the Harness variables in a Shell Script command in a Kubernetes
    Workflow:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553300895313/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Here
    is the output of these variables displayed in the <strong>Execution Context</strong>
    panel:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553295857977/image.png"/></figure><h4>View
    3rd Party API Calls</h4><p>To see the output from third-party API calls, you select
    a Verification Provider node, and then click <strong>View 3rd Party API Calls</strong>
    option:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553295163867/image.png"/></figure><p>The
    <strong>Third Party API Call History</strong> window appears.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553295206092/image.png"/></figure><p>Clicking
    the API call links displays the request and response for the call:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553295267334/image.png"/></figure><h4>Install
    Command</h4><p>Some Workflow commands contain a lot of variable output information.
    An example is the Install command:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553298172742/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h4>Output
    History</h4><p>Each deployment shows its own execution variable output. Rerunning
    the deployment does not overwrite the output. If you rerun a deployment, the old
    deployment contains its variable output, and the new deployment contains its new
    variable output.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9dvxcegm90/1553293599715/image.png"/></figure><h3>See
    Also</h3><ul><li><a href="/article/revc37vl0f-passing-variable-into-workflows">Passing
    Variables into Workflows and Pipelines from Triggers</a></li><li><a href="/article/xerirloz9a-add-a-trigger-2">Triggers</a></li></ul><p></p>'
  slug: variables
  tags: []
  is_live: true
- language_code: ja
  title: untitled article (ja)
  description: ""
  short_version: ""
  body: ""
  slug: untitled-article-ja
  tags: []
  is_live: false
