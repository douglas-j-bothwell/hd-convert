type: article
article_id: cfrqinjhci
user_id: mfr0nxh4be
category_id: l2p3i03l4a
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Publish Pipeline Events to an HTTP Endpoint using the API
slug: publish-pipeline-events-to-an-http-endpoint-using-the-api
description: To help you analyze how Pipelines are performing, Harness can send key
  Pipeline deployment events to a URL endpoint as a JSON payload. Next, you can use
  other tools to consume and build dashboards for the events.
short_version: Send key Pipeline deployment events to a URL endpoint as a JSON payload.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-03-21T07:15:32.490628Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Publish Pipeline Events to an HTTP Endpoint using the API
  description: To help you analyze how Pipelines are performing, Harness can send
    key Pipeline deployment events to a URL endpoint as a JSON payload. Next, you
    can use other tools to consume and build dashboards for the events.
  short_version: Send key Pipeline deployment events to a URL endpoint as a JSON payload.
  body: '<p></p><div class="note-callout">Currently, this feature is behind the Feature
    Flag <code>GRAPHQL_DEV</code>. Contact <a href="mailto:support@harness.io" target="_blank">Harness
    Support</a> to enable the feature.</div><p>To help you analyze how Pipelines are
    performing, Harness can send key Pipeline deployment events to a URL endpoint
    as a JSON payload. Next, you can use other tools to consume and build dashboards
    for the events.</p><p>In this topic:</p><ul><li><a href="https://docs.harness.io/article/cfrqinjhci-publish-pipeline-events-to-an-http-endpoint-using-the-api#before_you_begin">Before
    You Begin</a></li><li><a href="https://docs.harness.io/article/cfrqinjhci-publish-pipeline-events-to-an-http-endpoint-using-the-api#step_query_the_event_rules_for_an_application">Step:
    Query the event rules for an Application</a></li><li><a href="https://docs.harness.io/article/cfrqinjhci-publish-pipeline-events-to-an-http-endpoint-using-the-api#step_create_event_rule">Step:
    Create Event Rule</a></li><li><a href="https://docs.harness.io/article/cfrqinjhci-publish-pipeline-events-to-an-http-endpoint-using-the-api#option_update_and_delete_event_rules">Option:
    Update and Delete Event Rules</a></li></ul><h3>Before You Begin</h3><p>You can
    see how to create event rules in Harness UI in <a href="/article/scrsak5124-publish-pipeline-events-to-an-http-endpoint">Publish
    Pipeline Events to an HTTP Endpoint</a>.</p><h3>Step: Query the event rules for
    an Application</h3><p>You can query the event rules for an Application using the
    GraphQL <code>eventsConfigs</code> method. You simply need an Application Id.
    See <a href="/article/0wmvn5dgzn-use-harness-applications-api">Use Harness Applications
    API</a>.</p><p>Here is an example:</p><pre class="hljs graphql">query{<br/>  eventsConfigs(appId:
    &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;) {<br/>    id<br/>    appId<br/>    name<br/>    enabled<br/>    delegateSelectors<br/>    rule
    {<br/>      type<br/>      pipelineRule {<br/>        allEvents<br/>        allPipelines<br/>        pipelineIds<br/>        events<br/>      }<br/>    }<br/>    webhookConfig{<br/>      url<br/>      headers
    {<br/>        key<br/>        value<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>The
    output shows all the events:</p><pre class="hljs graphql">{<br/>  &#34;data&#34;:
    {<br/>    &#34;eventsConfigs&#34;: [<br/>      {<br/>        &#34;id&#34;: &#34;cKScQtWISvGySK3lFxvG1w&#34;,<br/>        &#34;appId&#34;:
    &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;,<br/>        &#34;name&#34;: &#34;Send me everything&#34;,<br/>        &#34;enabled&#34;:
    true,<br/>        &#34;delegateSelectors&#34;: null,<br/>        &#34;rule&#34;:
    {<br/>          &#34;type&#34;: &#34;ALL&#34;,<br/>          &#34;pipelineRule&#34;:
    {<br/>            &#34;allEvents&#34;: true,<br/>            &#34;allPipelines&#34;:
    true,<br/>            &#34;pipelineIds&#34;: null,<br/>            &#34;events&#34;:
    null<br/>          }<br/>        },<br/>        &#34;webhookConfig&#34;: {<br/>          &#34;url&#34;:
    &#34;http://127.0.0.1:3000&#34;,<br/>          &#34;headers&#34;: []<br/>        }<br/>      },<br/>      {<br/>        &#34;id&#34;:
    &#34;maCF_W44QRCF8eeygNa9Vg&#34;,<br/>        &#34;appId&#34;: &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;,<br/>        &#34;name&#34;:
    &#34;Demo Send Everything&#34;,<br/>        &#34;enabled&#34;: true,<br/>        &#34;delegateSelectors&#34;:
    null,<br/>        &#34;rule&#34;: {<br/>          &#34;type&#34;: &#34;ALL&#34;,<br/>          &#34;pipelineRule&#34;:
    {<br/>            &#34;allEvents&#34;: true,<br/>            &#34;allPipelines&#34;:
    true,<br/>            &#34;pipelineIds&#34;: null,<br/>            &#34;events&#34;:
    null<br/>          }<br/>        },<br/>        &#34;webhookConfig&#34;: {<br/>          &#34;url&#34;:
    &#34;https://32ec0fac9910.ngrok.io/events&#34;,<br/>          &#34;headers&#34;:
    [<br/>            {<br/>              &#34;key&#34;: &#34;custom-header&#34;,<br/>              &#34;value&#34;:
    &#34;hello-world&#34;<br/>            }<br/>          ]<br/>        }<br/>      }<br/>    ]<br/>  }<br/>}</pre><p></p><p>Now
    that you have the event rule Id, you can also use the <code>eventsConfig</code>
    method to search for that specific event.</p><p>You can also query using the Application
    Id and event rule name:</p><pre class="hljs graphql">{<br/>  eventsConfigsByName(appId:
    &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;, name: &#34;Send me everything&#34;) {<br/>    webhookConfig
    {<br/>      url<br/>      headers {<br/>        key<br/>        value<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>This
    will return the specific event rule settings:</p><pre class="hljs graphql">{<br/>  &#34;data&#34;:
    {<br/>    &#34;eventsConfigsByName&#34;: {<br/>      &#34;webhookConfig&#34;:
    {<br/>        &#34;url&#34;: &#34;http://127.0.0.1:3000&#34;,<br/>        &#34;headers&#34;:
    []<br/>      }<br/>    }<br/>  }<br/>}</pre><h3>Step: Create Event Rule</h3><p>You
    use createEventsConfig to create an event rule. You simply need the Application
    Id.</p><pre class="hljs graphql">mutation{<br/>  createEventsConfig(input: {<br/>    appId:
    &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;<br/>    name: &#34;apiexample&#34;,<br/>    enabled:
    false,<br/>    rule: {<br/>      type: ALL,<br/>    }<br/>    webhookConfig: {<br/>      url:&#34;http://127.0.0.1:3000&#34;<br/>    }<br/>  })
    <br/>  {<br/>    eventsConfig {<br/>      appId<br/>      name<br/>      enabled<br/>      rule
    {<br/>        type<br/>        pipelineRule {<br/>          allEvents<br/>          pipelineIds<br/>          allPipelines<br/>          events<br/>        }<br/>      }<br/>      webhookConfig
    {<br/>        url<br/>        headers {<br/>          key<br/>          value<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>The
    new event rule is returned.</p><pre class="hljs graphql">{<br/>  &#34;data&#34;:
    {<br/>    &#34;createEventsConfig&#34;: {<br/>      &#34;eventsConfig&#34;: {<br/>        &#34;appId&#34;:
    &#34;UkO-q8YnSR2dAyiJCw4V9A&#34;,<br/>        &#34;name&#34;: &#34;apiexample&#34;,<br/>        &#34;enabled&#34;:
    false,<br/>        &#34;rule&#34;: {<br/>          &#34;type&#34;: &#34;ALL&#34;,<br/>          &#34;pipelineRule&#34;:
    null<br/>        },<br/>        &#34;webhookConfig&#34;: {<br/>          &#34;url&#34;:
    &#34;http://127.0.0.1:3000&#34;,<br/>          &#34;headers&#34;: []<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>The
    new event rule will also show up in the Application UI.</p><h3>Option: Update
    and Delete Event Rules</h3><p>There are also APIs for <code>deleteEventsConfig</code>
    and <code>updateEventsConfig</code>.</p><p>Update example:</p><pre class="hljs
    graphql">mutation{<br/>  updateEventsConfig(input: {<br/>    appId: &#34;123&#34;<br/>    name:
    &#34;foo&#34;,<br/>    enabled: false,<br/>    rule: {<br/>      type: ALL,<br/>    }<br/>    webhookConfig:
    {<br/>      url: &#34;http://127.0.0.1:3000&#34;<br/>    }<br/>  })<br/>  {<br/>    eventsConfig
    {<br/>      appId<br/>      name<br/>      enabled<br/>      rule {<br/>        type<br/>        pipelineRule
    {<br/>          allEvents<br/>          pipelineIds<br/>          allPipelines<br/>          events<br/>        }<br/>      }<br/>      webhookConfig
    {<br/>        url<br/>        headers {<br/>          key<br/>          value<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>Delete
    example:</p><pre class="hljs graphql">mutation{<br/>  deleteEventsConfig (input
    : {<br/>  appId : &#34;Jid5r7XHQYCHL8Azz3tKpg&#34;<br/>  eventsConfigId : &#34;j-hkK6gNSvGymqLakZGWnQ&#34;<br/>  clientMutationId
    : &#34;del0001&#34;<br/>  }) {<br/>   clientMutationId<br/>  }<br/>}</pre><p></p><p></p>'
  slug: publish-pipeline-events-to-an-http-endpoint-using-the-api
  tags: []
  is_live: true
