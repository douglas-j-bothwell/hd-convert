type: article
article_id: qwkg2khtr7
user_id: slcpusem6b
category_id: l2p3i03l4a
author:
  name: Archana Singh
  profile_image: https://www.gravatar.com/avatar/e323facc5a711ac44c46e58dcb52aa3e?d=mm&s=150
title: Add Git Connectors Using API
slug: add-git-connectors-using-api
description: Describes how to add Git connectors using Harness GraphQL APIs.
short_version: Describes how to add Git connectors using Harness GraphQL APIs.
tags:
- Git Connectors
- GraphQL API
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:06.825437Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add Git Connectors Using API
  description: Describes how to add Git connectors using Harness GraphQL APIs.
  short_version: Describes how to add Git connectors using Harness GraphQL APIs.
  body: '<p>This topic describes how to create, read, update, and delete <a href="/article/ay9hlwbgwa-add-source-repo-providers">Git
    Connectors</a> using Harness GraphQL APIs.</p><p>In this document, GitHub Repo
    is used as an example. But you can use Harness GraphQL APIs for the other supported
    <a href="/article/ay9hlwbgwa-add-source-repo-providers">Harness Source Repo Providers</a>
    as well.</p><p>In this topic:</p><ul><li><a href="https://docs.harness.io/article/qwkg2khtr7-add-git-connectors-using-api#before_you_begin">Before
    You Begin</a></li><li><a href="https://docs.harness.io/article/qwkg2khtr7-add-git-connectors-using-api#undefined">Step:
    Create a Git Connector</a></li><li><a href="https://docs.harness.io/article/qwkg2khtr7-add-git-connectors-using-api#step_update_a_git_connector">Step:
    Update a Git Connector</a></li><li><a href="https://docs.harness.io/article/qwkg2khtr7-add-git-connectors-using-api#step_delete_a_git_connector">Step:
    Delete a Git Connector</a></li></ul><h3>Before You Begin</h3><ul><li><a href="/article/tm0w6rruqv-harness-api">​Introduction
    to Harness GraphQL API</a></li><li><a href="/article/2rmd5i0e0h-harness-api-explorer">Harness
    API Explorer</a></li></ul><h3 id="undefined">Step: Create a Git Connector</h3><p>Use
    this sample query to create a Git Connector.</p><h5>Request</h5><p></p><p>You
    create a Git Connector using the mutation <code>createConnector</code>. You can
    use <code>passwordSecretId</code> or <code>sshSettingId</code> to authenticate
    to your Git connector.</p><p></p><pre>mutation CreateConnector($connector: CreateConnectorInput!)
    {<br/>  createConnector(input: $connector) {<br/>    clientMutationId<br/>    connector
    {<br/>      id<br/>      name<br/>      ...on GitConnector{<br/>        userName<br/>        passwordSecretId<br/>        webhookUrl<br/>        customCommitDetails
    {<br/>          authorEmailId<br/>          authorName<br/>          commitMessage<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><h5>Query
    Variables</h5><p>The Query Variables follow this syntax, with <code>connectorType</code> identifying
    the Git Connector to create.</p><p>To fetch the <code>passwordSecretId</code>
    or <code>sshSettingId</code> use:</p><ul><li><a href="/article/omnfccj1n0-api-encrypted-text#get_a_secret_by_name">Encrypted
    Text API</a></li><li><a href="/article/2rlo5zw321-api-win-rm-credentials#get_a_secret_by_name">WinRM
    Credentials API</a></li><li><a href="/article/v65okfwfl2-api-ssh-credentials#get_a_secret_by_name">SSH
    Credentials API</a></li></ul><p>The following sample query variable uses <code>passwordSecretId</code>
    to authenticate to the Git connector.</p><pre class="hljs json">{<br/>  &#34;connector&#34;:
    {<br/>    &#34;connectorType&#34;: &#34;GIT&#34;,<br/>    &#34;gitConnector&#34;:
    {<br/>    &#34;urlType&#34;: &#34;ACCOUNT&#34;,<br/>    &#34;name&#34;: &#34;connectorName&#34;,<br/>    &#34;generateWebhookUrl&#34;:
    true,<br/>    &#34;URL&#34;: &#34;https://github.com/abc-xyz/test&#34;,<br/>    &#34;userName&#34;:
    &#34;user-harness&#34;,<br/>    &#34;passwordSecretId&#34;: <span class="hljs-string"
    style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223, 80, 0)">&#34;xxxxxx&#34;</span>,<br/>    &#34;branch&#34;:
    &#34;testBranch&#34;,<br/>    &#34;customCommitDetails&#34;: {<br/>        &#34;authorName&#34;:
    &#34;User Harness&#34;,<br/>        &#34;authorEmailId&#34;: &#34;user.harness@harness.io&#34;,<br/>        &#34;commitMessage&#34;:
    &#34;commit message&#34;<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><h5>Response</h5><p></p><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;createConnector&#34;: {<br/>      &#34;clientMutationId&#34;: null,<br/>      &#34;connector&#34;:
    {<br/>        &#34;id&#34;: <span class="hljs-string" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)">&#34;xxxxxx&#34;</span>,<br/>        &#34;name&#34;:
    &#34;connectorNameSample&#34;,<br/>        &#34;userName&#34;: &#34;test1&#34;,<br/>        &#34;passwordSecretId&#34;:
    <span class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">&#34;xxxxxx&#34;</span>,<br/>        &#34;webhookUrl&#34;: &#34;https://test.xyz.io/api/setup-as-code/yaml/webhook/<span
    class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">xxxxxx</span>?accountId=<span class="hljs-string" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)">xxxxxx</span>&#34;,<br/>        &#34;customCommitDetails&#34;:
    {<br/>          &#34;authorEmailId&#34;: &#34;user.harness@harness.io&#34;,<br/>          &#34;authorName&#34;:
    &#34;User Harness&#34;,<br/>          &#34;commitMessage&#34;: &#34;test commit
    message&#34;<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><p>The
    following sample query variable uses <code>sshSettingId</code> to authenticate
    to the Git connector.</p><pre>{<br/>  &#34;connector&#34;: {<br/>    &#34;connectorType&#34;:
    &#34;GIT&#34;,<br/>    &#34;gitConnector&#34;: {<br/>    &#34;urlType&#34;: &#34;ACCOUNT&#34;,<br/>    &#34;name&#34;:
    &#34;connectorName&#34;,<br/>    &#34;generateWebhookUrl&#34;: true,<br/>    &#34;URL&#34;:
    &#34;git@github.com/abc-xyz/test&#34;,<br/>    &#34;sshSettingId&#34;: &#34;xxxxxx&#34;,<br/>    &#34;branch&#34;:
    &#34;testBranch&#34;,<br/>    &#34;customCommitDetails&#34;: {<br/>        &#34;authorName&#34;:
    &#34;User Harness&#34;,<br/>        &#34;authorEmailId&#34;: &#34;user.harness@harness.io&#34;,<br/>        &#34;commitMessage&#34;:
    &#34;commit message&#34;<br/>      }<br/>    }<br/>  }<br/>}</pre><h3>Step: Update
    a Git Connector</h3><p>Use this sample query to update a Git Connector.</p><h5>Request</h5><p>You
    update a Git Connector using the mutation <code>updateConnector</code>. You can
    use <code>passwordSecretId</code> or <code>sshSettingId</code> to authenticate
    to your Git connector.</p><p></p><pre>mutation UpdateConnector($connector: UpdateConnectorInput!)
    {<br/>  updateConnector(input: $connector) {<br/>    clientMutationId<br/>    connector
    {<br/>      id<br/>      name<br/>      ...on GitConnector{<br/>        userName<br/>        passwordSecretId<br/>        webhookUrl<br/>        urlType<br/>        customCommitDetails
    {<br/>          authorEmailId<br/>          authorName<br/>          commitMessage<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><h5>Query
    Variables</h5><p>The Query Variables follow this syntax, with <code>connectorType</code> identifying
    the Git Connector to update. See <a href="/article/qwkg2khtr7-add-git-connectors-using-api#fetch_the_connector_id">Fetch
    the Connector ID</a> to get the connector ID details.</p><p></p><pre>{<br/>  &#34;connector&#34;:
    {<br/>    &#34;connectorType&#34;: &#34;GIT&#34;,<br/>    &#34;connectorId&#34;:
    <span class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">&#34;xxxxxx&#34;</span>,<br/>    &#34;gitConnector&#34;: {<br/>    &#34;name&#34;:
    &#34;connectorName&#34;,<br/>    &#34;generateWebhookUrl&#34;: true,<br/>    &#34;URL&#34;:
    &#34;https://github.com/abc-xyz/test&#34;,<br/>    &#34;userName&#34;: &#34;user-harness&#34;,<br/>    &#34;passwordSecretId&#34;:
    <span class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">&#34;xxxxxx&#34;</span>,<br/>    &#34;branch&#34;: &#34;testBranch&#34;,<br/>    &#34;customCommitDetails&#34;:
    {<br/>        &#34;authorName&#34;: &#34;Test&#34;,<br/>        &#34;authorEmailId&#34;:
    &#34;abc@xyz.io&#34;,<br/>        &#34;commitMessage&#34;: &#34;test commit message&#34;<br/>      }<br/>    }<br/>  }<br/>}</pre><p></p><h5>Response</h5><p></p><pre>{<br/>  &#34;data&#34;:
    {<br/>    &#34;updateConnector&#34;: {<br/>      &#34;clientMutationId&#34;: null,<br/>      &#34;connector&#34;:
    {<br/>        &#34;id&#34;: <span class="hljs-string" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)">&#34;xxxxxx&#34;</span>,<br/>        &#34;name&#34;:
    &#34;connectorNameSample1&#34;,<br/>        &#34;userName&#34;: &#34;test1&#34;,<br/>        &#34;passwordSecretId&#34;:
    <span class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">&#34;xxxxxx&#34;</span>,<br/>        &#34;webhookUrl&#34;: &#34;https://test.xyz.io/api/setup-as-code/yaml/webhook/<span
    class="hljs-string" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">xxxxxx</span>?accountId=<span class="hljs-string" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)">xxxxxx</span>&#34;,<br/>        &#34;urlType&#34;:
    &#34;REPO&#34;,<br/>        &#34;customCommitDetails&#34;: {<br/>          &#34;authorEmailId&#34;:
    &#34;abc@xyz.io&#34;,<br/>          &#34;authorName&#34;: &#34;Test&#34;,<br/>          &#34;commitMessage&#34;:
    &#34;test commit message updated&#34;<br/>        }<br/>      }<br/>    }<br/>  }<br/></pre><p></p><h5>Fetch
    the Connector ID</h5><p>Use the following query to fetch the <code>ID</code> of
    a connector. A list of connectors is returned based on the set filters. You can
    select the <code>ID</code> of the connector that you want to update.</p><p></p><pre
    class="hljs json">query{<br/>  connectors(filters: [<br/>    {<br/>      connectorType:
    {<br/>        operator: EQUALS,<br/>        values: [GIT]<br/>      }<br/>    }<br/>  ],<br/>  limit:
    10){<br/>    nodes{<br/>      id<br/>      name<br/>      ...on GitConnector {<br/>        branch<br/>        customCommitDetails{<br/>          authorEmailId<br/>          authorName<br/>          commitMessage<br/>        }<br/>      }<br/>    }<br/>  }<br/>}</pre><h3>Step:
    Delete a Git Connector</h3><p>You delete a Git Connector using the mutation <code>deleteConnector</code>.
    Deleting a Git Connector requires its <code>ID</code> only.</p><h5>Request</h5><p></p><pre
    class="hljs json">mutation DeleteConnectorMutation($connector: DeleteConnectorInput!)
    {<br/>  deleteConnector(input: $connector) {<br/>    clientMutationId<br/>  }<br/>}</pre><p></p><h5>Query
    Variables</h5><p>Query Variables, with <code>connectorId</code> identifies the
    Git Connector to delete.</p><pre class="hljs json">{<br/>  &#34;connector&#34;:
    {<br/>    &#34;connectorId&#34;: <span class="hljs-string" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)">&#34;xxxxxx&#34;</span><br/>  }<br/>}</pre><p></p><p></p>'
  slug: add-git-connectors-using-api
  tags:
  - Git Connectors
  - GraphQL API
  is_live: true
