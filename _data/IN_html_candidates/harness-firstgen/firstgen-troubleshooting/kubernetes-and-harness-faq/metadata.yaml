type: article
article_id: dtu3ud1ok7
user_id: mfr0nxh4be
category_id: pglyu478ao
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Harness Kubernetes Implementation v1 FAQ
slug: kubernetes-and-harness-faq
description: Answers to common questions about Harness legacy Kubernetes integration.
short_version: This FAQ answers all of the common questions about Harness Version
  1 integration and deployment with Kubernetes.
tags:
- Kubernetes Cluster
- GCP
- controller
- YAML
- variable
- environment variable
- ConfigMap
- Kubernetes Service
- Ingress rule
- kubectl
show_toc: true
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:23:29.199918Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Harness Kubernetes Implementation v1 FAQ
  description: Answers to common questions about Harness legacy Kubernetes integration.
  short_version: This FAQ answers all of the common questions about Harness Version
    1 integration and deployment with Kubernetes.
  body: |-
    <div class="note-callout">This document covers legacy Kubernetes and Helm implementations using Harness Kubernetes <strong>Version 1</strong>. It is provided to support customers that have not migrated to <strong>Version 2</strong>. For <strong>Version 2</strong>, see
      <a href="/article/pc6qglyp5h-kubernetes-deployments-overview">Kubernetes How-tos</a>.</div>
    <h3>Installations and Permissions</h3>
    <h4>How Do I Connect to a Kubernetes Cluster in Harness?</h4>
    <p>This section gives an overview of connection Harness to Kubernetes. For details on connecting to a Kubernetes cluster or Kubernetes on cloud providers, see
      <a href="/article/whwnovprrb-infrastructure-providers">Add Cloud Providers</a>.</p>
    <p>You add a Kubernetes cluster as a Cloud Provider in the <strong>Harness Account</strong> section:</p>
    <ol>
      <li>In <strong>Setup</strong>, under <strong>Account</strong>, click <strong>Cloud Providers</strong>.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840206216/x-yhlsvv-jwvc-nncvzkj-t-8-jh-jl-2-z-svb-own-qq-5-rdgms-1-if-wjq-el-bympt-anjhg-2-srgkn-3-yg-bxmfqlz-v-82-i-nlih-xzi-9-ytlu-g-2-fq-2-vm-f-8-p-7-p-bfrqq-gq-8-q-kwctr-053-s-f-5-c-spo-726-mcg-3"/>
        </figure>
      </li>
      <li>Click <strong>Add Cloud Provider</strong>. The <strong>Cloud Provider</strong> dialog appears.</li>
      <li>In <strong>Type</strong>, select <strong>Kubernetes Cluster</strong>. The Kubernetes options appear.</li>
      <li>Fill out the dialog and click <strong>SUBMIT</strong>. It will look something like this:</li>
    </ol>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534200243705/k-8-s-cluster-cloud-provider.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <h4>Can I Install a Harness Delegate in a Kubernetes Cluster?</h4>
    <p>You can install a Harness Kubernetes delegate inside a Kubernetes cluster. You can add a startup script to the delegate, called a Delegate Profile, that will be applied every time the delegate is created or restarted. For information on installing the
      Harness Kubernetes delegate and profiles, see the related steps in
      <a href="/article/h9tkwmkrm7-delegate-installation">Delegate Installation</a>.</p>
    <div class="note-callout">Instructions for running the Harness Kubernetes delegate are also included in the README file that accompanies the Harness Kubernetes delegate download.</div>
    <p>The Harness Kubernetes delegate is configured and run using a YAML file. It creates a delegate that has the <strong>cluster-admin</strong> role used for the Harness delegate in a Kubernetes cluster. For more information on this role,
      <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#default-roles-and-role-bindings" target="_blank">Default Roles and Role Bindings</a> from Kubernetes. This Kubernetes delegate will have all the permissions it requires. It does not require the permissions of the traditional, external Harness delegate which requires login credentials or certificates
      for authentication.</p>
    <p>You can edit the Harness Kubernetes delegate YAML file before using it to create the Harness Kubernetes delegate. For example, you can change proxy settings or the desired Helm version for the Harness Kubernetes delegate to use.</p>
    <h4>What Are the Google Cloud Platform Permissions for Kubernetes and Harness?</h4>
    <p>The Google Cloud Platform (GCP) service account requires the <strong>Container Engine Admin</strong> role to get the Kubernetes master username and password. Harness also requires <strong>Storage Object Viewer</strong> permissions.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840206546/4-ydul-2-qf-ue-3-aksh-kx-e-2-p-sab-hfv-5-us-0-ha-t-33-bwj-r-0-nas-qvgza-uys-kbw-ulikxcjqd-flenv-ts-4-drqg-gey-2-n-z-5-zjx-knw-b-8-qd-0-e-6-b-lx-2-mpsv-p-220-uqe-va-lg-4-u-0-lw-xd-yay-dn-e-9-qvrq-5-p-s-7"/>
    </figure>
    <h4>Do Harness Kubernetes v1 Support Kubernetes Cluster Version 1.16?</h4>
    <p>No. Harness Kubernetes v1 does not support Kubernetes cluster version 1.16 and later due to the <code>/extensions/v1beta1</code> reference which is fully deprecated.</p>
    <p>Please migrate your Harness Kubernetes v1 Services to v2. See
      <a href="/article/g3bzgg4rsw-summary-of-changes-in-kubernetes-deployments-version-2">Harness Kubernetes V2 Changes</a> and
      <a href="/article/2j2vi5oxrq-define-kubernetes-manifests">Define Kubernetes Manifests</a>.</p>
    <p>Ford details deprecated APIs removed in 1.16, see
      <a href="https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/" target="_blank">Deprecated APIs Removed In 1.16</a> from Kubernetes.</p>
    <p></p>
    <h3>Kubernetes Components</h3>
    <h4>What Kubernetes Entities Does Harness Support?</h4>
    <table>
      <tbody>
        <tr>
          <td>
            <p><strong>Entity</strong></p>
          </td>
          <td>
            <p><strong>Description</strong></p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Controllers</strong></p>
          </td>
          <td>
            <p>Harness supports Kubernetes controller entities. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-controller" target="_blank">Controller</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Labels</strong></p>
          </td>
          <td>
            <p>Harness uses Kubernetes labels to reference (and cross-reference) all Kubernetes components. Labels are used when Harness creates a Kubernetes controller and service. Labels make the service route traffic to the pods that the controller brings
              up. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-label" target="_blank">Label</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>ConfigMaps</strong></p>
          </td>
          <td>
            <p>Harness creates ConfigMaps automatically using all the unencrypted Harness service variables and configuration files. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-configmap" target="_blank">ConfigMap</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Secret Maps</strong></p>
          </td>
          <td>
            <p>Stores all encrypted Harness service variables and configuration information. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-secret" target="_blank">Secret</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Horizontal Pod Autoscaler</strong></p>
          </td>
          <td>
            <p>Harness lets you configure Horizontal Pod Autoscaler to automatically scales pod replicas based on targets. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-horizontal-pod-autoscaler" target="_blank">Horizontal Pod Autoscaler</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Services</strong></p>
          </td>
          <td>
            <p>Not to be confused with a Harness service (which is a micro-service or application you are deploying), a Kubernetes service describes how to access pods in a cluster both internally and externally. See
              <a href="https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/" target="_blank">Connecting Applications with Services</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Ingress Rules</strong></p>
          </td>
          <td>
            <p>Manages external traffic coming into the Kubernetes cluster. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-ingress" target="_blank">Ingress</a> from Kubernetes.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Istio Route Rules</strong></p>
          </td>
          <td>
            <p>A type of Ingress controller that support traffic splitting for the different revisions that Harness deploys. See
              <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-istio" target="_blank">Isito</a> from Kubernetes.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h4>What Are the Supported Kubernetes Controllers?</h4>
    <p>Kubernetes controllers include the container specification and create the pods to run the application. Controllers manage routine tasks to ensure the desired state of the cluster matches the observed state. Each controller is responsible for a particular
      resource.</p>
    <div class="note-callout">The default controller type used by Harness is <strong>Deployment</strong>. To use a different controller type, you must define it in Harness.</div>
    <p>Harness supports the following controllers:</p>
    <table>
      <tbody>
        <tr>
          <td>
            <p><strong>Controller Type</strong></p>
          </td>
          <td>
            <p><strong>Description</strong></p>
          </td>
          <td>
            <p><strong>Kubernetes Doc</strong></p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Deployment (default)</strong></p>
          </td>
          <td>
            <p>Provides declarative updates for Pods and ReplicaSets.</p>
            <p>You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and
              adopt all their resources with new Deployments.</p>
          </td>
          <td>
            <p>
              <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank">Deployments</a>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>ReplicationController</strong></p>
          </td>
          <td>
            <p>Ensures a specified number of pod replicas are running at any one time. Guarantees that a pod or a homogeneous set of pods is running and available.</p>
          </td>
          <td>
            <p>
              <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank">ReplicationController</a>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>ReplicaSet</strong></p>
          </td>
          <td>
            <p>ReplicaSet is the next-generation Replication Controller and supports the new set-based selector requirements whereas a Replication Controller only supports equality-based selector requirements.</p>
          </td>
          <td>
            <p>
              <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/" target="_blank">ReplicaSet</a>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>StatefulSet</strong></p>
          </td>
          <td>
            <p>Similar to a Deployment, a StatefulSet manages Pods that are based on an identical container spec. While StatefulSet pods are created from the same spec, they are not interchangeable. Each pod has a persistent identifier maintained across any
              rescheduling.</p>
          </td>
          <td>
            <p>
              <a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank">StatefulSets</a>
            </p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>DaemonSet</strong></p>
          </td>
          <td>
            <p>Ensures all (or some) nodes run a copy of a pod. As nodes are added to the cluster, pods are added to them. As nodes are removed from the cluster, pods are garbage collected. Deleting a DaemonSet cleans up the pods it created.</p>
          </td>
          <td>
            <p>
              <a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank">DaemonSet</a>
            </p>
          </td>
        </tr>
      </tbody>
    </table>
    <h4>Where Are Controllers Set Up?</h4>
    <p>Controllers are set up in Harness services that use a <strong>Docker Image Artifact Type</strong>.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534189445941/service-artifact-docker.png"/>
    </figure>
    <p>For information on setting up a service using a Docker Image Artifact Type, see
      <a href="/article/gxv9gj6khz-add-a-docker-image-service">Add a Docker Image Service</a>.</p>
    <p>For example, to configure a Deployment in a Docker Image Service, do the following:</p>
    <ol>
      <li>In the service, in <strong>Deployment Specification</strong>, click <strong>Kubernetes</strong>.</li>
      <li>Click <strong>Container Specification</strong>. The <strong>KUBERNETES - Container Definition</strong> dialog appears.</li>
      <li>Click <strong>Advanced Settings</strong>. The YAML code for the service appears. Note: <code><code>kind: Deployment</code></code>
        <div class="note-callout">Please read the information provided in the <strong>Advanced Settings YAML</strong> comments. It provides details about required and optional variables.</div>
      </li>
      <li>Modify the Deployment YAML and click <strong>SUBMIT</strong>. The Kubernetes container specification is displayed in the <strong>Service Overview</strong>. To edit it further, click <strong>Container Specification</strong>.</li>
    </ol>
    <h4>What Controller Types Are Versioned?</h4>
    <p>The following controller types are versioned:</p>
    <ul>
      <li>Deployment</li>
      <li>ReplicaSet</li>
      <li>ReplicationController</li>
    </ul>
    <p>The following controller types are not versioned:</p>
    <ul>
      <li>StatefulSet
        <ul>
          <li>Pods keep the same name when restarted.</li>
          <li>Persistent volumes can be specified as templates.</li>
        </ul>
      </li>
      <li>DaemonSet
        <ul>
          <li>Does not use replicas field.</li>
          <li>Always creates one pod in each node in the cluster.</li>
        </ul>
      </li>
    </ul>
    <h4>How Does Harness Cache Non-Versioned Controller Types?</h4>
    <p>For non-versioned controller types, Harness caches the current YAML (if any) in case of rollback.</p>
    <p>Cached entities are:</p>
    <ul>
      <li><strong>Controller</strong> - set up in Harness service.</li>
      <li><strong>ConfigMap</strong> - set up in Harness service.</li>
      <li><strong>Secret map</strong> - set up in Harness service.</li>
      <li><strong>Horizontal Pod Autoscaler</strong> - set up in Harness workflow <strong>Kubernetes Service Setup</strong>.</li>
    </ul>
    <p>For non-versioned controller types, deployment happens in the workflow <strong>Setup Container</strong> step (<strong>Kubernetes Service Setup</strong>). There is no phased deployment.</p>
    <h3>Configure as Code</h3>
    <h4>How Do I Add My YAML?</h4>
    <p>Harness services includes a <strong>Kubernetes Container Specification</strong> section that allows you to define multiple Deployment container specification details.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534190204317/k-8-s-container-def.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <p>If you need to configure advanced settings, such as change the container type, and CPU, imagePullPolicy, etc, you can click the <strong>Advanced Settings</strong> in <strong>Kubernetes Container Specification</strong> and enter in your YAML.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534190269476/k-8-s-container-spec-yaml.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
    </figure>
    <h4>What Harness Placeholders Are Required in the YAML?</h4>
    <p>The service <strong>Kubernetes Container Specification</strong> allows for advanced YAML and customization, but there are some placeholders required by Harness. These placeholders are described in the YAML comments at the top of the <strong>Advanced Settings</strong>,
      and below.</p>
    <div class="note-callout">When pasting your YAML into the <strong>Kubernetes Container Definition</strong>, ensure that you do not overwrite the placeholders. There are also optional placeholder you can take advantage of for naming Kubernetes components.</div>
    <h5>Required Placeholders</h5>
    <p>There is only one required placeholder:</p>
    <p><strong>${DOCKER_IMAGE_NAME}</strong> - Replaced with the Docker image name and tag.</p>
    <p>If you are pasting your YAML into the Kubernetes Container Definition, replace your <strong>image:repository/tag</strong> or a partial image ID with <strong>${DOCKER_IMAGE_NAME}</strong>:</p><pre>spec:<br/>  containers:<br/>  - args: []<br/>    command:<br/>    - &#34;...&#34;<br/>    env: []<br/>    envFrom: []<br/>    image: &#34;${DOCKER_IMAGE_NAME}&#34;</pre>
    <h5>Optional Placeholders</h5>
    <p>The following optional placeholder:</p>
    <ul>
      <li><strong>${CONFIG_MAP_NAME}</strong> - Replaced with the ConfigMap name (same as controller name). ConfigMap contains all unencrypted service variables and all unencrypted config files, unless a custom config map is provided.</li>
      <li><strong>${SECRET_MAP_NAME}</strong> - Replaced with the Secret name (same as controller name). Secret map contains all encrypted service variables and all encrypted config files.</li>
      <li><strong>${CONTAINER_NAME}</strong> - Replaced with a container name based on the image name.</li>
      <li><strong>${SECRET_NAME}</strong> - Replaced with the name of the generated imagePullSecret (credentials of the registry). If you are using a private Docker registry, you will want to set the <strong>${SECRET_NAME}</strong>. See
        <a href="https://kubernetes.io/docs/concepts/containers/images/#using-a-private-registry" target="_blank">Using a Private Registry</a> from Kubernetes.</li>
    </ul>
    <h4>What YAML Fields Are Overwritten By Harness?</h4>
    <p>If you paste your own Kubernetes YAML in the Harness service <strong>Kubernetes Container Definition</strong>, the following labels are overwritten by Harness:</p>
    <ul>
      <li><strong>metadata.name</strong></li>
      <li><strong>metadata.namespace</strong></li>
      <li><strong>metadata.labels</strong>
        <ul>
          <li>The <strong>harness-*</strong> prefix is applied.</li>
        </ul>
      </li>
      <li><strong>spec.selectors</strong>
        <ul>
          <li>The <strong>harness-*</strong> prefix is applied.</li>
        </ul>
      </li>
      <li><strong>spec.replicas</strong> is how many pods should be created. Harness manages this setting in the <strong>Upgrade Containers</strong> workflow step during deployment based on your setting (for example, 33%):</li>
    </ul>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534190871407/upgrade-containers-dialo.png"/>
    </figure>
    <h4>Where Does Harness Get Environment Variables?</h4>
    <p>Kubernetes environment variables (env: label) are taken from Harness service variables, ConfigMap and encrypted variables (secrets). Harness service variables and ConfigMap are configured in the service <strong>Configuration</strong> section.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534190937394/service-config-sectio.png"/>
    </figure>
    <p>Secrets are any encrypted variables and files in Harness. Secrets are configured in the Harness <strong>Continuous Security</strong> section, in <strong>Secrets Management</strong>, and then they can be used in Harness service <strong>Config Variables</strong>  and <strong>Config Files</strong>.</p>
    <p>Unencrypted variables and files go into Kubernetes ConfigMap. Encrypted variables and files go into Kubernetes
      <a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank">Secret</a> map.</p>
    <div class="note-callout">If you look in Google Cloud Platform (GCP), you will see the <strong>Config Map</strong> and <strong>Secret</strong> in <strong>Kubernetes Engine</strong> &gt; <strong>Configuration</strong>. Click a <strong>Config Map</strong> or <strong>Secret</strong>  to see the YAML. For information on Kubernetes environment variables, see
      <a href="https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/" target="_blank">Define Environment Variables for a Container and Expose Pod Information to Containers Through Environment Variables</a> from Kubernetes.</div>
    <h4>What Variables Are Overwritten or Merged by Harness?</h4>
    <p>If you paste in your Kubernetes specification, Kubernetes environment variables (env: label) in you specification are merged by Harness as follows:</p>
    <ul>
      <li>Harness overrides Harness service <strong>Config Variables</strong> values if the variable name you use is the same as a variable name configured in Harness.</li>
      <li>Unencrypted environment variables are merged to Kubernetes ConfigMap.</li>
      <li>Encrypted variables are merged in Kubernetes Secret map if the key is a legal name for an environment variable.</li>
      <li>Container name based on expression in Harness Setup (<strong>${CONTAINER_NAME}</strong>), with <strong>.&lt;revision&gt;</strong> added.</li>
    </ul>
    <h4>Can I Override the Harness Service ConfigMap, Variables, and Files?</h4>
    <p>You can overwrite Harness Service variables at the Service and Environment level.</p>
    <h5>Service-Level Overrides</h5>
    <p>If you have a very large Kubernetes ConfigMap, you can override the Harness ConfigMap by pasting your Kubernetes ConfigMap into the Harness service <strong>ConfigMap YAML</strong> section of the Harness service:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534191211304/config-map-yaml.png"/>
    </figure>
    <p>Harness will use that ConfigMap instead of merging service the Config Variables and Config Files entered.</p>
    <p>Harness does not allow you paste YAML for Secret map. You have to use encrypted <strong>Config Variables</strong> or <strong>Config File</strong>.</p>
    <h5>Environment-Level Overrides</h5>
    <p>If you want to overwrite the Config Variables, Config Files, or ConfigMap YAML (and even the Helm Value YAML) for one or more Harness services, you can do so in a Harness environment’s <strong>Service Configuration Overrides</strong> section.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534191290594/service-config-overrides.png"/>
    </figure>
    <p>To overwrite the Harness service(s) configurations in an Harness environment, do the following:</p>
    <ol>
      <li>In your Harness application, click the name of the application with the service(s) you want to overwrite.</li>
      <li>In <strong>Environments</strong>, click the environment where you want to overwrite a service. This will be an environment where you have already added the service(s) as part of the <strong>Service Infrastructure</strong>.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534191380213/service-infra.png" style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/>
        </figure>
      </li>
      <li>In the <strong>Environment Overview</strong> page, click <strong>Add Configuration Overrides</strong>.</li>
      <li>In the <strong>Service Configuration Override</strong> dialog, select the Harness service with the ConfigMap or variables you want to override, and then click an override option, such as ConfigMap YAML, Variable Override, or File Override.
        <div class="note-callout">To override all service that use this environment, in <strong>Service</strong>, select <strong>All Services</strong>.</div>
      </li>
      <li>Enter the new ConfigMap YAML, variables, or file and click <strong>SUBMIT</strong>.</li>
    </ol>
    <h4>What Is the Harness Variable Overwrite Precedence?</h4>
    <p>When managing variable overwrites, it is important to remember the precedence of variable overwriting in Harness.</p>
    <p>Variable precedence goes, <strong>from least to greatest</strong>:</p>
    <ol>
      <li>Harness service ConfigMap YAML.</li>
      <li>Harness environment ConfigMap YAML targeted to <strong>all Harness services</strong> that use the environment (set in Harness environment <strong>Service Configuration Override</strong>).</li>
      <li>Harness environment ConfigMap YAML targeted to <strong>a specific Harness service</strong>.</li>
      <li>Service variable at the Harness service level.</li>
      <li>Service variable override in Harness environment targeted to <strong>all Harness services</strong>.</li>
      <li>Service variable override in Harness environment targeted to <strong>a specific Harness service</strong>.</li>
    </ol>
    <h3>Kubernetes ConfigMap and Secrets</h3>
    <p>How does Harness Create the Kubernetes ConfigMap?</p>
    <ul>
      <li><strong>When?</strong> Harness creates the Kubernetes ConfigMap automatically by default, containing all of a Harness service’s unencrypted text variables and config files.</li>
      <li><strong>How?</strong> The Kubernetes Controller is modified to include all ConfigMap entries as environment variables using <strong>envFrom configMapRef</strong>. For more information, see
        <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-pod-environment-variables" target="_blank">Configure all key-value pairs in a ConfigMap as Pod environment variables</a> from Kubernetes.</li>
      <li><strong>How do I reference the ConfigMap?</strong> You can reference the ConfigMap in the Harness service <strong>Kubernetes Container Specification</strong> Advanced YAML with the placeholder <strong>${CONFIG_MAP_NAME}</strong>.</li>
      <li><strong>How do I mount ConfigMap as a volume?</strong> Unencrypted files become multi-line entries in the Kubernetes ConfigMap and can be mounted as a volume if you need to use them as a file. Here is an example of an unencrypted config file as a volume:
        <br/><pre> containers:<br/> - name: ${CONTAINER_NAME}<br/>   image: ${DOCKER_IMAGE_NAME}<br/>   volumeMounts:<br/>   - name: config-vol<br/>     mountPath: /your/path<br/>  volumes:<br/>  - name: config-vol<br/>    configMap:<br/>      name: ${CONFIG_MAP_NAME}<br/>      items:<br/>      - key: config-file-name<br/>        path: config-file-path</pre></li>
      <li><strong>What ConfigMap labels are overwritten by Harness?</strong>
        <ul>
          <li>metadata.name</li>
          <li>metadata.namespace</li>
        </ul>
      </li>
      <li><strong>How is the ConfigMap named?</strong> The ConfigMap has the same name as the controller.</li>
    </ul>
    <h4>How Does Harness Create a Kubernetes Secret Map?</h4>
    <ul>
      <li><strong>When?</strong> The Kubernetes Secret map is created automatically using encrypted Harness service <strong>Config Variables</strong> and encrypted Harness <strong>Config Files</strong>.</li>
      <li><strong>How?</strong> You create encrypted text and files in Harness in the <strong>Continuous Security</strong> section, in <strong>Secrets Management</strong>, and then they can be used in Harness service Config Variables and Config Files.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534192508134/add-encrypted-text.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/>
        </figure>Encrypted files become multi-line entries in the Secret map. For more information, see
        <a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank">Secrets</a> from Kubernetes. The Kubernetes Controller is modified to include all Secret map entries as environment variables using <strong>valueFrom secretKeyRef</strong>. For more information, see
        <a href="https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables" target="_blank">Using Secrets as Environment Variables</a> from Kubernetes.</li>
      <li><strong>How do I mount Secret map as a volume?</strong> Secret maps can be mounted as a volume if you need to use them as a file. Here is an example of an encrypted config file as a volume:
        <br/><pre>- name: ${CONTAINER_NAME}<br/>  image: ${DOCKER_IMAGE_NAME}<br/>  volumeMounts:<br/>  - name: secret-vol<br/>    mountPath: /your/path<br/>  volumes:<br/>  - name: secret-vol<br/>    secret:<br/>      secretName: ${SECRET_MAP_NAME}<br/>      items:<br/>      - key: config-file-name<br/>        path: config-file-path</pre></li>
      <li><strong>Can I use the custom YAML in Harness for Secret maps or Secrets?</strong> No. You must use the encrypted Config Variables and Config Files settings in a Harness service.</li>
      <li><strong>Are Secret Maps versioned and rolled back?</strong> Yes.</li>
      <li><strong>How do I reference the Secret map?</strong> You can reference the Secret map in the service <strong>Kubernetes Container Specification</strong> Advanced YAML with the placeholder <strong>${SECRET_MAP_NAME}</strong>.</li>
      <li><strong>How is the Secret map named?</strong> The Secret map has the same name as the controller.</li>
    </ul>
    <h4>How Does Harness Create a Kubernetes Secret?</h4>
    <ul>
      <li><strong>What?</strong> Contains the credentials for a private registry.</li>
      <li><strong>How?</strong> Created automatically using credentials from the Harness connector for the artifact source, configured in your Harness <strong>Account</strong> settings.</li>
      <li><strong>How is a Secret named?</strong> The name is generated from the <strong>imagePullSecret</strong> when pulling from a private Docker registry.</li>
      <li><strong>How do I reference a Secret?</strong> You can reference the Secret in the service <strong>Kubernetes Container Specification</strong> Advanced YAML with the placeholder <strong>${SECRET_NAME}</strong>.</li>
      <li><strong>Are Secrets versioned and rolled back?</strong> No.</li>
      <li><strong>How are Secrets named?</strong> Secrets are named using the private registry URL plus username.</li>
    </ul>
    <h3>Kubernetes Service</h3>
    <h4>How Do I Set Up a Kubernetes Service?</h4>
    <p>A Kubernetes service is different from a Harness service. A Harness service is your micro-service or application for deployment. A Kubernetes service enables applications running in a Kubernetes cluster to find and communicate with each other, and the
      outside world. For more information, see
      <a href="https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/" target="_blank">Connecting Applications with Services</a> and
      <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank">Services</a> from Kubernetes.</p>
    <p>A Kubernetes service can be set up in Harness workflows that are configured with a environment that uses Kubernetes. The process is as follows:</p>
    <ol>
      <li>When you defined a Harness environment, you define a <strong>Service Infrastructure</strong> that uses Kubernetes.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534193067675/service-infra-env.png"/>
        </figure>
      </li>
      <li>When you create a workflow, you select the environment for the workflow to deploy its service(s).
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534193148197/workflow-env.png"/>
        </figure>
      </li>
      <li>Since the Service Infrastructure in the environment supports Kubernetes, the workflow will have a <strong>Kubernetes Service Setup</strong> step where you can configure the Kubernetes service scheduler, Horizontal Pod Autoscaler, and Ingress rules,
        and Istio.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840206866/u-400-gg-2-z-1-oj-6-pn-g-8-l-vkkunzyou-crobp-bfqm-tz-qncp-41-a-9-epr-zu-772-nl-th-63-drklyr-7-jd-xrm-7-i-8-za-3-x-ff-z-ix-nypkgiknw-t-7-tyb-d-1-k-hiyi-4-a-zvrl-k-9-b-9-tt-hvruq-7-g-1-c-4-z-eun-d"/>
        </figure>
      </li>
      <li>Click <strong>Kubernetes Service Setup</strong>. The <strong>Kubernetes Service Setup</strong> dialog appears.</li>
    </ol>
    <h4>How Do I Use the Workflow Scheduler?</h4>
    <p>Harness enables you to schedule how your instances are deployed, including a resize strategy.</p>
    <div class="note-callout">The Scheduler in the Kubernetes Service Setup is not the same as a Kubernetes scheduler.</div>
    <h4>How Do I Set Up the Workflow Scheduler in Harness?</h4>
    <p>To set up the scheduler, do the following:</p>
    <ol>
      <li>In the <strong>Kubernetes Service Setup</strong> of a workflow, expand <strong>Scheduler</strong>.</li>
    </ol>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1542755552777/image.png"/>
    </figure>
    <p></p>
    <table>
      <tbody>
        <tr>
          <td>
            <p><strong>Field</strong></p>
          </td>
          <td>
            <p><strong>Description</strong></p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Scheduler Name</strong></p>
          </td>
          <td>
            <p>The name you put here is used to name all the Kubernetes entities Harness creates. Harness generates a descriptive string using <strong>${app.name}-${service.name}-${env.name}</strong>.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Release Name</strong></p>
          </td>
          <td>
            <p>A Release is an instance of a service running in a Kubernetes cluster. <strong>Release Name</strong> is a label used to identify a Release.
              <br/>
            </p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p>Release Name can be overridden if you want to deploy multiple parallel releases. One scenario is to create a per Pull Request service instance in the same Kubernetes Cluster.
              <br/>
            </p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
            <p></p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Desired Instance Count</strong></p>
          </td>
          <td>
            <p>The number of instances to schedule.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Resize Strategy</strong></p>
          </td>
          <td>
            <p>Add new instances before downsizing old instance, or vice versa.</p>
          </td>
        </tr>
        <tr>
          <td>
            <p><strong>Steady State Wait Timeout</strong></p>
          </td>
          <td>
            <p>How long to wait for scheduled instances before timing out.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <h4>Can I Use Horizontal Pod Autoscaler?</h4>
    <p>Harness lets you configure Kubernetes Horizontal Pod Autoscaler to automatically scales pod replicas based on metrics, such as CPU utilization, or a custom metric. For more information, see
      <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-horizontal-pod-autoscaler" target="_blank">Horizontal Pod Autoscaler</a> from Kubernetes.</p>
    <p>Harness Horizontal Pod Autoscaler:</p>
    <ul>
      <li>Supports custom YAML.</li>
      <li>Evaluates expressions.</li>
      <li>Is versioned and rolls back on failed deployments.</li>
      <li>Harness overwrites the following related YAML labels and values:
        <ul>
          <li><strong>metadata.name</strong></li>
          <li><strong>metadata.namespace</strong></li>
        </ul>
      </li>
      <li>Horizontal Pod Autoscaler is named the same as controller used by Harness for deployment.</li>
    </ul>
    <h4>How Do I Set Up the Horizontal Pod Autoscaler in Harness?</h4>
    <p>Horizontal Pod Autoscaler is available in Harness workflows that are configured with a environment that uses Kubernetes. The process is as follows:</p>
    <ol>
      <li>In the <strong>Kubernetes Service Setup</strong> of a workflow, expand <strong>Horizontal Pod Autoscaler</strong> and click the <strong>Horizontal Pod Autoscaler</strong> checkbox.</li>
      <li>Define the <strong>Min</strong> and <strong>Max Autoscale Instances</strong> and the <strong>Target CPU Utilization %</strong>. If the default metrics are not adequate, you can use custom metrics.</li>
      <li>To use custom metrics, click <strong>Use YAML Format</strong> and paste in your custom metrics. For information on YAML for custom metrics, see
        <a href="https://cloud.google.com/kubernetes-engine/docs/tutorials/custom-metrics-autoscaling" target="_blank">Autoscaling Deployments with Custom Metrics</a> from Google. The article describes how to use StackDriver Metrics Explorer. For information on using external metrics, see
        <a href="https://cloud.google.com/kubernetes-engine/docs/tutorials/external-metrics-autoscaling" target="_blank">Autoscaling Deployments with External Metrics</a> from Google.</li>
    </ol>
    <h4>How Do I Set Up the Kubernetes Services Types?</h4>
    <p>Kubernetes services types are different methods to connecting external traffic into your cluster. For more information, see
      <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank">Services</a> from Kubernetes and
      <a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0" target="_blank">Kubernetes NodePort vs LoadBalancer vs Ingress? When should I use what?</a> from Medium.</p>
    <p>Harness supports Kubernetes service types as follows:</p>
    <ul>
      <li>Supports custom YAML, and evaluates expressions.</li>
      <li>Not versioned.</li>
      <li>Does not roll back on failed deployments.</li>
      <li>Supported Kubernetes service types:
        <ul>
          <li>Cluster IP</li>
          <li>Node Port</li>
          <li>Load Balancer</li>
          <li>External Name</li>
        </ul>
      </li>
      <li>Sends traffic to pods based on the label selectors.</li>
      <li>You can use custom YAML to expose more than one port or to use annotations.</li>
      <li>Kubernetes service labels overwritten by Harness:
        <ul>
          <li><strong>metadata.name</strong></li>
          <li><strong>metadata.namespace</strong></li>
        </ul>
      </li>
      <li>Service is named based on expression <strong>${app.name}-${service.name}-${env.name}</strong>.</li>
    </ul>
    <p>To set up a Kubernetes service type, do the following:</p>
    <ol>
      <li>In the <strong>Kubernetes Service Setup</strong> of a workflow, expand <strong>Service Setup</strong>.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534194377459/k-8-s-service-type.png"/>
        </figure>
      </li>
      <li>Select the service type you want to configure and enter its settings.</li>
    </ol>
    <div class="note-callout">The Port and Target Port settings do not support
      <a href="/article/9dvxcegm90-variables">Harness variable expressions</a>.</div>
    <h4>Can I Add Custom YAML for Kubernetes Service Types?</h4>
    <p>When the default configuration option in the <strong>Kubernetes Service Setup</strong> step are not sufficient, you can select <strong>YAML</strong> in <strong>Kubernetes Service Type</strong>, and enter in your YAML for the Kubernetes service. For example:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534194466167/k-8-s-service-type-yaml.png"/>
    </figure>
    <div class="note-callout">To find the YAML for a service in GCP, go to <strong>Kubernetes Engine</strong>, then <strong>Services</strong>, then click a service name, and then click the <strong>YAML</strong> tab.</div>
    <p>An example for when you might enter a Kubernetes service YAML instead of the options in the <strong>Kubernetes Service Setup</strong> step is if you chose <strong>Load Balancer</strong> in <strong>Kubernetes Service Setup</strong> step but you want to
      specify more than just one <strong>Port</strong> (exposed port) and <strong>Target Port</strong> (port of the container that is mapped to Port). You might want to put both HTTP (80) and HTTPS (443) ports for these values. In that case, you would select
      <strong>YAML</strong> in <strong>Kubernetes Service Type</strong>, and enter in your YAML for these ports:</p><pre>...<br/>spec:<br/>  clusterIP: 10.15.240.143<br/>  externalTrafficPolicy: Cluster<br/>  ports:<br/>  - name: http<br/>    nodePort: 31244<br/>    port: 80<br/>    protocol: TCP<br/>    targetPort: 8080<br/>  - name: https<br/>    nodePort: 31573<br/>    port: 443<br/>    protocol: TCP<br/>    targetPort: 8081<br/>...</pre>
    <h4>Can I Use Kubernetes Ingress in Harness?</h4>
    <p>Harness supports Kubernetes Ingress rules. A Kubernetes Ingress is a collection of rules that allow inbound connections to reach the cluster services. For more information, see
      <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank">Ingress</a> from Kubernetes.</p>
    <p>Harness supports Kubernetes Ingress as follows:</p>
    <ul>
      <li>Supports custom YAML, and evaluates expressions.</li>
      <li>Not versioned.</li>
      <li>Does not roll back on failed deployments.</li>
      <li>Uses placeholders for service name, service port, ConfigMap name, and Secret map name:
        <ul>
          <li><strong>${SERVICE_NAME}</strong> - required</li>
          <li><strong>${SERVICE_PORT}</strong> - required</li>
          <li><strong>${CONFIG_MAP_NAME}</strong></li>
          <li><strong>${SECRET_MAP_NAME}</strong></li>
        </ul>
      </li>
      <li>Kubernetes Ingress labels overwritten by Harness:
        <ul>
          <li><strong>metadata.name</strong></li>
          <li><strong>metadata.namespace</strong></li>
        </ul>
      </li>
      <li>Named the same as the Harness service.</li>
    </ul>
    <h4>How Do I Set Up Kubernetes Ingress Rules?</h4>
    <p>To set up Ingress Rules for a Kubernetes service, do the following:</p>
    <ol>
      <li>In the <strong>Kubernetes Service Setup</strong> of a workflow, expand <strong>Ingress Rules</strong>.</li>
      <li>Click <strong>Enable Ingress rules</strong>.</li>
      <li>In <strong>Ingress YAML</strong>, enter the YAML for the Ingress object.</li>
    </ol>
    <h4>Can I Use Istio Route Rules for Traffic Splitting?</h4>
    <p>Harness support Istio as a traffic splitter. When using an Istio ingress controller, traffic flow is decoupled from infrastructure scaling, letting you specify the routing rules to follow rather than which specific pods/VMs should receive traffic. For
      more information, see
      <a href="https://istio.io/docs/concepts/traffic-management/" target="_blank">Traffic Management</a> from Istio.</p>
    <p>Harness supports Istio as follows:</p>
    <ul>
      <li>No custom YAML.</li>
      <li>Not versioned</li>
      <li>Harness does handle rollback for traffic splitting.</li>
      <li>Manages
        <a href="https://istio.io/latest/docs/tasks/traffic-management/traffic-shifting/" target="_blank">traffic shifting</a> using the revision label on pods: <strong>harness-revision</strong>.</li>
      <li>Named the same as the Harness service.</li>
    </ul>
    <h4>How Do I Set Up Istio for Traffic Splitting?</h4>
    <p>To set up Istio for a Kubernetes service, do the following:</p>
    <ol>
      <li>In the <strong>Kubernetes Service Setup</strong> of a workflow, expand <strong>Ingress Rules</strong>. You might also want to click <strong>Enable Ingress rules</strong> and enter custom YAML for Kubernetes Ingress.</li>
      <li>In <strong>Traffic Splitter</strong>, select <strong>Istio</strong>.</li>
      <li>In <strong>Gateways</strong>, enter the names of the Istio Gateways to be configured with VirtualService. For more information, see
        <a href="https://istio.io/docs/concepts/traffic-management/#gateways" target="_blank">Gateways</a> from Istio.</li>
      <li>In <strong>Hosts</strong>, enter the hostnames VirtualService will listen on. If you do not enter a host name, Harness will look up a host based on the service name.</li>
    </ol>
    <p>For more information, see
      <a href="https://istio.io/docs/concepts/traffic-management/" target="_blank">Traffic Management</a> from Istio.</p>
    <h3>What Happens in Kubernetes During a Harness Deployment?</h3>
    <p>The following procedure describes how a Harness workflow uses Kubernetes components, entities, and variables during a deployment to a Kubernetes infrastructure. Here is an example of a Harness workflow:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1534197728098/workflow-k-8-s.png"/>
    </figure>
    <h4>1. Setup Container</h4>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840207235/zga-w-3-f-zn-4-ou-e-46-go-qt-e-2-o-bwb-czk-o-5-mj-poyah-y-43-pc-ft-b-chiyb-ld-0-mb-xoj-2-sjm-6-ic-ywf-ucsg-zy-44-qd-71-j-7-wn-nwshsc-h-4-mbqydhqeqi-a-6-xp-1-nu-1-qav-a-f-0-ft-9-ur-3-mm-fjwku-3-z"/>
    </figure>
    <p>During the first step of the workflow, Harness sets up the Kubernetes container and does the following:</p>
    <ul>
      <li>For versioned Kubernetes controllers, Harness creates the following in Kubernetes, adding a revision number:
        <ul>
          <li>ConfigMap.</li>
          <li>Secret map.</li>
          <li>Controller with zero replicas.</li>
          <li>Horizontal Pod Autoscaler, disabled initially.</li>
        </ul>
      </li>
      <li>For non-versioned Kubernetes controllers, Harness creates or replaces the following, while caching the current version, in case of rollback:
        <ul>
          <li>ConfigMap.</li>
          <li>Secret map.</li>
          <li>Controller.</li>
          <li>Horizontal Pod Autoscaler.</li>
        </ul>
      </li>
      <li>Harness creates or replaces the following entities, deleting them if they existed previously in the cluster but are no longer specified in the Harness workflow:
        <ul>
          <li>Image Pull Secret.</li>
          <li>Service.</li>
        </ul>
      </li>
      <li>
        <ul>
          <li>Ingress Rule.</li>
          <li>Istio Route Rule.</li>
          <li>Deletes and caches in case of rollback:</li>
        </ul>
      </li>
    </ul>
    <h4>2. Deploy Containers</h4>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840207590/e-k-2-v-5-v-203-t-e-6-w-l-25-h-9-n-g-2-gt-2-g-8-d-6-sz-pppc-nw-yy-yp-lzf-t-6-w-h-5-b-9-dg-ab-7-blkr-68-u-i-6-lfd-kcbw-8-gl-3-f-0-wd-im-rq-3-st-qwi-r-21-e-2-o-ir-18-qm-wiq-2-n-cjszsihua-bur-id-is-21-t-zyo-3-ntja"/>
    </figure>
    <p>During the second step of the workflow, Harness deploys the Kubernetes container(s), changing the number of replicas, and does the following:</p>
    <ul>
      <li>Harness sets controller replicas to the count or percentage of total specified in the <strong>Upgrade Containers</strong> dialog.
        <figure>
          <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840207876/kb-1-wwg-brl-w-48-rbx-ubcqbj-7-z-3-ay-4-tj-zr-7-td-y-2-we-do-nekm-8-bqetewuz-sbib-fvjfohv-28-ox-443-jxf-m-5-s-jco-unxgp-pwivoa-iqzq-gpnea-a-3-g-kudl-0-k-xebfa-y-hkj-ag-cps-kiwbe-zd-czt-g-1"/>
        </figure>
      </li>
      <li>Harness reduces previous controller revision(s) by the same amount.</li>
      <li>The <strong>Advanced</strong> section in the <strong>Upgrade Containers</strong> dialog allows upsize, downsize, and traffic shifting to be set independently.</li>
      <li>If Istio traffic shifting was enabled in the Kubernetes Setup Step, Harness adjusts Istio Route Rule to split traffic in the same proportion as the number of pods for each revision (default), or in the amount specified in the <strong>Advanced</strong>    section in the <strong>Upgrade Containers</strong> dialog.</li>
      <li>If <strong>Desired Instances</strong> is set to deploy 100%, Harness creates <strong>Horizontal Pod Autoscaler</strong>.</li>
    </ul>
    <h4>Rollback Steps: 1. Deploy Containers</h4>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840208251/r-7-g-9-cq-ihfb-5-m-62-eo-5-dnr-hdg-k-2-d-177-5-muxwli-hx-4-hpu-rm-vbt-thim-98-bx-zjkd-lj-kvr-baaej-nw-c-1-zj-8-d-3-jdp-yw-dw-7-na-isln-xuk-ai-5-g-9-c-27-ets-pn-6-ir-sdxr-3-p-wkan-4-c-8-l-l-0-sr-lc"/>
    </figure>
    <p>If Harness needs to rollback and restore the Kubernetes setup to its previous working version, the first step is to rollback the Kubernetes containers. Harness rolls back the Kubernetes containers and does the following:</p>
    <ul>
      <li>Deletes Horizontal Pod Autoscaler.</li>
      <li>Sets previous controller revision number(s) back to the values it had before deploy step.</li>
      <li>Returns the number of controller replicas to the count that existed before the <strong>Upgrade Containers</strong> step.</li>
      <li>If Istio traffic shifting is enabled, Harness adjusts Istio Route Rule to split traffic in the same proportion as it was before the <strong>Upgrade Containers</strong> step.</li>
    </ul>
    <h4>Rollback Steps: 2. Setup Container</h4>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840208613/xh-yp-y-ioqzkk-nq-urfhdxvcxin-swzv-c-k-7-n-mnael-2-unzn-0-vs-tct-ysh-yndez-9-m-4-j-hlnp-zma-9-c-464-f-vsdc-e-2-lj-hd-xh-7-m-bckuge-ts-fjl-x-5-qe-4-g-8-co-35-j-53-h-vd-3-qy-cb-cjn-pryx-rq-0-a-60"/>
    </figure>
    <p>Once Harness has rolled back the Kubernetes containers, it rolls back the remaining Kubernetes infrastructure setup:</p>
    <ul>
      <li>Reverts DaemonSet or StatefulSet to previous YAML along with ConfigMap, Secret map, and Horizontal Pod Autoscaler, if specified.</li>
      <li>Enables previous Horizontal Pod Autoscaler.</li>
    </ul>
    <p></p>
    <div class="hd--md" data-hd-markdown="&lt;span id=&#34;why_is_deploy_containers_missing_from_my_workflow&#34;&gt;&lt;/span&gt;">
      <p><span id="why_is_deploy_containers_missing_from_my_workflow"></span></p>
    </div>
    <h3>Why Is &#34;Deploy Containers&#34; Missing from My Workflow?</h3>
    <p>If you change the <strong>Controller Type</strong> in the Harness service <strong>Container Specification</strong> to a type other than <strong>Deployment</strong> (default), <strong>ReplicaSet</strong>, or <strong>ReplicationController</strong>, and
      then use that service in a Workflow, the <strong>Deploy Containers</strong> step (and <strong>Upgrade Container</strong> substep) will not be added to the workflow.</p>
    <p>The controller types that will not use the <strong>Deploy Containers</strong> workflow step are <strong>StatefulSet</strong> and <strong>DaemonSet</strong>.</p>
    <div class="note-callout">This is particularly important if you use a workflow as a template and try to use services with different Kubernetes controller types with the
      <a href="/article/m220i1tnia-workflow-configuration#template_a_workflow">workflow template</a>.</div>
    <p>For information on the controller types Harness supports, see
      <a href="#what_are_the_supported_kubernetes_controllers">What Are the Supported Kubernetes Controllers?</a>.</p>
    <p>For example, the default controller type in a Harness service Kubernetes <strong>Container Specification</strong> is <strong>kind: &#34;Deployment&#34;</strong>. The following <strong>Container Specification</strong> uses <strong>kind: &#34;StatefulSet&#34;</strong>.</p>
    <p></p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1538079959311/image.png"/>
    </figure>
    <p>If you create a workflow that uses this Harness service, the <strong>Deploy Containers</strong> step does not appear. Only the <strong>Kubernetes Service Setup</strong> step is used:</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1538080502012/image.png"/>
    </figure>
    <h3>Where Can I See the Kubernetes Deployment in GCP?</h3>
    <p>Once Harness has deployed your application, you can see the Kubernetes entities deployed in the
      <a href="https://console.cloud.google.com/kubernetes" target="_blank">GCP console Kubernetes Engine</a>.</p>
    <figure>
      <img src="https://files.helpdocs.io/kw8ldg1itf/articles/dtu3ud1ok7/1620840208917/wf-s-61-dx-zopbf-07-r-lbf-256-bgs-0-wklq-llcr-0-h-1-m-yrf-7-uy-ums-7-rz-9-z-yo-rsff-u-3-y-i-4-g-zdxlo-1-x-3-c-td-6-wm-xhxf-tj-yx-ll-xrl-idhxjtbb-j-22-r-3-h-vx-jm-8-rw-mzof-nlhn-vl-9-esu-bf-u-3"/>
    </figure>
    <p>Here is where you can find the Kubernetes entities Harness deployed:</p>
    <ul>
      <li><strong>Clusters</strong> - Clusters and resource usage.</li>
      <li><strong>Workloads</strong> - Controllers, pod details, logs, and events.</li>
      <li><strong>Services</strong> - Services and Ingress endpoints.</li>
      <li><strong>Configuration</strong> - Config Maps and Secrets.</li>
      <li><strong>Storage</strong> - Persistent volume claims.</li>
    </ul>
    <p>To find your deployed Kubernetes entity in any section, click the in the search field and start typing the name of the entity.</p>
    <h4>Can I See the Kubernetes Deployment Using kubectl?</h4>
    <p>To view entities that aren’t displayed in GCP (such as a Horizontal Pod Autoscaler), or for other cloud providers, use the kubectl command line interface. For more information, see
      <a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank">Overview of kubectl</a> and
      <a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/" target="_blank">kubectl Cheat Sheet</a> from Kubernetes.</p>
    <p>For example, to see a specific <strong>HorizontalPodAutoscaler</strong> object in your cluster, run:</p><pre>kubectl get hpa [HPA_NAME]</pre>
    <p>To see the <strong>HorizontalPodAutoscaler</strong> configuration:</p><pre>kubectl get hpa [HPA_NAME] -o yaml</pre>
    <p>To see a detailed description of a specific <strong>HorizontalPodAutoscaler</strong> object in the cluster:</p><pre>kubectl describe hpa [HPA_NAME]</pre>
    <p></p>
  slug: kubernetes-and-harness-faq
  tags:
  - Kubernetes Cluster
  - GCP
  - controller
  - YAML
  - variable
  - environment variable
  - ConfigMap
  - Kubernetes Service
  - Ingress rule
  - kubectl
  is_live: true
