type: article
article_id: jbzxpljhlo
user_id: mfr0nxh4be
category_id: noj782z9is
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Provision using the Terragrunt Provision Step
slug: provision-using-the-terragrunt-provision-step
description: This topic describes how to provision the target infrastructure for a
  deployment using the Workflow Terragrunt Provisioner step. The same information
  applies to provision non-target resources.
short_version: This topic describes how to provision the target infrastructure for
  a deployment using the Workflow Terragrunt Provisioner step.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-06-30T21:23:08.857868Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Provision using the Terragrunt Provision Step
  description: This topic describes how to provision the target infrastructure for
    a deployment using the Workflow Terragrunt Provisioner step. The same information
    applies to provision non-target resources.
  short_version: This topic describes how to provision the target infrastructure for
    a deployment using the Workflow Terragrunt Provisioner step.
  body: '<p>You can use Terragrunt in Harness to provision the target infrastructure
    for a deployment or any other resources. Typically, Harness users provision the
    target infrastructure for a deployment and then deploy to it in the same Workflow.</p><p>This
    topic describes how to provision the target infrastructure for a deployment using
    the Workflow <strong>Terragrunt</strong> <strong>Provisioner</strong> step. The
    same information applies to provision non-target resources.</p><p>You use the
    Terragrunt Provisioner step in a Workflow to run the Terragrunt configuration
    file (and related Terraform scripts) you added in a <a href="/article/mkjxbkglih-add-terragrunt-configuration-files">Harness
    Terragrunt Infrastructure Provisioner</a>.</p><p>During deployment, the Terragrunt
    Provisioner step provisions the target infrastructure and then the Workflow deploys
    to it.</p><div class="note-callout">The Harness Terragrunt Infrastructure Provisioner
    is supported in Canary and Multi-Service Workflows only. For AMI/ASG and ECS deployments,
    the Terragrunt Infrastructure Provisioner is also supported in Blue/Green Workflows.</div><h3>Before
    You Begin</h3><ul><li>Get an overview how how Harness supports Terragrunt: <a
    href="/article/a6onutvbem-terragrunt-provisioning-with-harness">Terragrunt Provisioning
    with Harness</a>.</li><li>Ensure you have your Harness account settings prepared
    for Terragrunt: <a href="/article/ulhl7sjxva-set-up-your-harness-account-for-terragrunt">Set
    Up Your Harness Account for Terragrunt</a>.</li><li>Create a Harness Terragrunt
    Infrastructure Provisioner: <a href="/article/mkjxbkglih-add-terragrunt-configuration-files">Add
    Terragrunt Configuration Files</a>.</li><li>If you are provisioning the target
    infrastructure for a deployment you need to map Terraform outputs to the Infrastructure
    Definition used by the Workflow. See <a href="/article/tphb27opry-map-terragrunt-infrastructure">Map
    Dynamically Provisioned Infrastructure using Terragrunt</a>.</li></ul><p>In addition,
    the following related features are documented in other topics:</p><ul><li><strong>Terragrunt</strong>
    <strong>Dry Run</strong>: the Terragrunt Provisioner step in the Workflow can
    be executed as a dry run, just like running the <code>terragrunt plan</code> command.
    The dry run will refresh the state file and generate a plan. See <a href="/article/rbw96hdr1c-perform-a-terragrunt-dry-run">Perform
    a Terragrunt Dry Run</a>.</li><li><strong>Terragrunt</strong> <strong>Destroy</strong>:
    see <a href="/article/1zmz2vtdo2-remove-provisioned-infra-with-terragrunt-destroy">Remove
    Provisioned Infra with Terragrunt Destroy</a>.</li></ul><h3>Visual Summary</h3><p>Here
    is a visual summary of how you use your and Terragrunt and Terraform files with
    Harness to provision target infra and then deploy to it:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/a6onutvbem/1618962617102/image.png"/></figure><p></p><p>For
    step 1, see <a href="/article/mkjxbkglih-add-terragrunt-configuration-files">Add
    Terragrunt Configuration Files</a>. For step 2, see <a href="/article/tphb27opry-map-terragrunt-infrastructure">Map
    Dynamically Provisioned Infrastructure using Terragrunt</a>.</p><p>Here&#39;s
    a 6 minute video walkthrough of Harness-Terragrunt integration:</p><p></p><div
    class="hd--embed" data-provider="YouTube" data-thumbnail="https://i.ytimg.com/vi/HYSi2LAaYdc/hqdefault.jpg"><iframe
    width="200" height="150" src="https://www.youtube.com/embed/HYSi2LAaYdc?feature=oembed"
    frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media;
    gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p></p><p></p><h3>Step
    1: Add Environment to Workflow</h3><p>Before creating or changing the Workflow
    settings to use a Terragrunt Infrastructure Provisioner, you need an Infrastructure
    Definition that uses the Terragrunt Infrastructure Provisioner. Setting up this
    Infrastructure Definition is covered in <a href="/article/tphb27opry-map-terragrunt-infrastructure">Map
    Dynamically Provisioned Infrastructure using Terragrunt</a>.</p><p>Next, when
    you create your Workflow, you add the Environment containing the mapped Infrastructure
    Definition to your Workflow settings.</p><div class="note-callout">Harness Infrastructure
    Provisioners are only supported in Canary and Multi-Service deployment types.
    For AMI deployments, Infrastructure Provisioners are also supported in Blue/Green
    deployments. If you are creating a Blue/Green Workflow for AMI, you can select
    the Environment and Infrastructure Definition in the Workflow setup settings.</div><p>In
    your Harness Application, click <strong>Workflows</strong>.</p><p>Click <strong>Add
    Workflow</strong>. The Workflow settings appear.</p><p>Enter a name and description
    for the Workflow.</p><p>In <strong>Workflow Type</strong>, select <strong>Canary</strong>.</p><p>In
    <strong>Environment</strong>, select the Environment that has the Terragrunt Provisioner
    set up in one of its Infrastructure Definitions.</p><p>Click <strong>SUBMIT</strong>.
    The new Workflow is created.</p><p>By default, the Workflow includes a <strong>Pre-deployment
    Steps</strong> section. This is where you will add a step that uses your Terragrunt
    Provisioner.</p><div class="note-callout">Infrastructure Definitions are added
    in Canary Workflow <em>Phases</em>, in the <strong>Deployment Phases</strong>
    section. You will add the Infrastructure Definition that uses your Terragrunt
    Infrastructure Provisioner when you add the Canary Phases, later in this topic.</div><h3>Step
    2: Add Terragrunt Step to Pre-deployment Steps</h3><p>To provision the infrastructure
    in your Terragrunt Infrastructure Provisioner, you add the <strong>Terraform Provisioner</strong>
    Step in <strong>Pre-deployment Steps</strong>.</p><p>In your Workflow, in <strong>Pre-deployment
    Steps</strong>, click <strong>Add Step</strong>.</p><p>Select <strong>Terragrunt</strong>
    <strong>Provision</strong>. The <strong>Terragrunt</strong> <strong>Provision</strong>
    settings appear.</p><p>In <strong>Name</strong>, enter a name for the step. Use
    a name that describes the infrastructure the step will provision.</p><p>In <strong>Provisioner</strong>,
    select the Harness Terragrunt Infrastructure Provisioner you set up for provisioning
    your target infrastructure. This is covered in <a href="/article/mkjxbkglih-add-terragrunt-configuration-files">Add
    Terragrunt Configuration Files</a>.</p><p>In <strong>Timeout</strong>, enter how
    long Harness should wait to complete the Terragrunt Provisioner step before failing
    the Workflow. Provisioning can be time-consuming so use at least <code>5m</code>.</p><p>Click
    <strong>Next</strong>. The <strong>Module Configuration</strong> settings appear.</p><h4>Terragrunt
    Module Settings</h4><p>Specify the Terraform modules you want Terragrunt to use.</p><p>You
    are telling Harness where to locate your terragrunt.hcl file. The terragrunt.hcl
    itself will point to a Terraform module using the <code>source</code> parameter
    like this:</p><pre>locals {<br/>}<br/><br/>terraform {<br/>//  source = &#34;git::git@github.com:Tathagat-289/terraformResources.git//module3&#34;<br/>  source
    = &#34;github.com/Tathagat-289/terraformResources//module3&#34;<br/>}<br/><br/>#
    Include all settings from the root terragrunt.hcl file<br/>include {<br/>  path
    = find_in_parent_folders()<br/>}<br/><br/>inputs = {<br/>  tfmodule3 = &#34;tfmodule4&#34;<br/>  slmodule3
    = &#34;sleepmodule4&#34;<br/>  tfv = &#34;tfversion1&#34;<br/>  sl = &#34;sl1&#34;<br/>}</pre><p></p><p>You
    have two options:</p><ul><li><strong>Apply All Modules:</strong> Harness will
    use <u>all of the terragrunt.hcl files</u> starting from the folder you specify
    in <strong>Path to Module</strong>.<br/>When you select <strong>Apply All Modules</strong>,
    the <a href="#export_terragrunt_plan_to_next_terragrunt_provision_step">Export
    Terragrunt Plan to next Terragrunt Provision step</a> option is disabled.<br/>When
    you select <strong>Apply All Modules</strong>, you might want to use <a href="#option_backend_configuration_remote_state">Backend
    Configuration (Remote state)</a> to store your state file. Harness will not sync
    with the current state when Apply All Modules is selected. Instead, Harness simply
    applies the terragrunt.hcl files.</li><li><strong>Specify Specific Module:</strong>
    Harness will use <u>the terragrunt.hcl file</u> in the folder you specify in <strong>Path
    to Module</strong>.</li></ul><div class="note-callout">You can use <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variables</a> in <strong>Path to Module</strong>.</div><h4>Terragrunt Plan Configuration</h4><p>Essentially,
    these settings allow you to use your Terraform Provision steps as a Terragrunt
    plan dry run.</p><p>Users typically do this and add a Harness <a href="/category/4edbfn50l8">Approval
    step</a> between the Terraform Provision step that runs the plan and the Terraform
    Provision step that applies the plan.</p><h5>Inherit configurations from previous
    Terragrunt Provision step</h5><p>Select this option if there is a previous Terragrunt
    Provision step in the Workflow with <strong>Export Terragrunt Plan to next Terragrunt
    Provision</strong> selected.</p><div class="note-callout">The <strong>Inherit
    configurations from previous Terragrunt Provision step</strong> will only work
    if a preceding Terragrunt Provision step uses <strong>Export Terragrunt Plan to
    next Terragrunt Provision</strong>.</div><h5>Set as Terragrunt Plan</h5><p>Run
    the step as a Terragrunt plan.</p><p>When this option is selected, the <strong>Export
    Terragrunt Plan to next Terragrunt Provision step</strong> option becomes available.</p><p></p><h5>Export
    Terragrunt Plan to next Terragrunt Provision step</h5><div class="note-callout">This
    option supports <a href="https://www.terraform.io/upgrade-guides/0-12.html" target="_blank">Terraform
    version 12</a> only.</div><p>Select this option to run this Terragrunt Provision
    as a Terragrunt plan and then export it to the next Terragrunt Provision step
    in the Workflow to be applied.</p><p>The next Terragrunt Provision step must have
    the <strong>Inherit configurations from previous Terragrunt Provision</strong>
    <strong>step</strong> selected to apply the plan.</p><div class="note-callout">By
    default, Harness uses the <a href="/article/uuer539u3l-add-a-secrets-manager">Harness
    Secret Manager</a> you have selected as your <strong>default</strong>.</div><h3>Step
    3: Input Values</h3><p>Input values are where you provide values for the Terraform
    input variables in the Terraform module (config.tf) that your Terragrunt config
    file uses.</p><p>For example, here&#39;s a Terraform config.tf file with variables
    for access and secret key:</p><pre>variable &#34;access_key&#34; {}<br/><br/>variable
    &#34;secret_key&#34; {}<br/><br/>provider &#34;aws&#34; {<br/>  access_key = var.access_key<br/>  secret_key
    = var.secret_key<br/>  region = &#34;us-east-1&#34;<br/>}<br/>...</pre><p></p><p>You
    provide values for these input variables in the <strong>Use tfvar Files</strong>
    and or <strong>Inline Values</strong> section. You can use either or a mix of
    both.</p><h4>Use tfvar Files</h4><p>Use the <strong>Use tfvar files</strong> option
    for a variable definitions file. You can use inline or remote tfvar files.</p><h5>Inline
    tfvar Files</h5><p>In <strong>File Path</strong>, enter the path to the terraform.tfvars
    file from the root of the repo you specified in the Terragrunt Infrastructure
    Provisioner you selected. Enter the full path from the root of the repo to the
    tfvar file.</p><p>For example, if the file is located from the root at <code>variables/local_variables/terraform.tfvars</code>
    you would enter <code>variables/local_variables/terraform.tfvars</code>. You can
    enter multiple file paths separated by commas.</p><div class="note-callout">You
    can use <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variables</a> in <strong>File Path</strong>.</div><h5>Remote tfvar Files</h5><p>In
    <strong>Source Repository</strong>, select the Harness <a href="/article/ay9hlwbgwa-add-source-repo-providers">Source
    Repo Provider</a> that connects to the repo where your tfvar file is.</p><p>Select
    <strong>Commit ID</strong> or <strong>Branch.</strong></p><ul><li>For <strong>Commit
    ID</strong>, enter the git commit ID containing the tfvar version you want to
    use.</li><li>For <strong>Branch</strong>, enter the name of the branch where the
    tfvar file is located.</li></ul><p>In <strong>File Folder Path</strong>, enter
    the full path from the root of the repo to the tfvar file. You can enter multiple
    file paths separated by commas.</p><h4>Inline Values</h4><p>You can enter inline
    values for the inputs in the Terraform config.tf file.</p><p>For example, here&#39;s
    a Terraform config.tf file with variables for access and secret key:</p><pre>variable
    &#34;access_key&#34; {}<br/><br/>variable &#34;secret_key&#34; {}<br/><br/>provider
    &#34;aws&#34; {<br/>  access_key = var.access_key<br/>  secret_key = var.secret_key<br/>  region
    = &#34;us-east-1&#34;<br/>}<br/>...</pre><p></p><p>In <strong>Inline Values</strong>,
    you can enter values for those inputs or select Harness secrets for the values:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/jbzxpljhlo/1619215912362/image.png"/></figure><p>See
    <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use Encrypted Text Secrets</a>.</p><h3>Option:
    Backend Configuration (Remote state)</h3><p>In Backend Configuration (Remote state),
    enter values for each backend config (remote state variable) in the Terragrunt
    config (.hcl) or Terraform script (config.tf) file.</p><p>For example, here&#39;s
    a config.tf with a backend the values for it in Harness:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/jbzxpljhlo/1619216443618/image.png"/></figure><p>Depending
    on which platform you store your remote state data, Terragrunt and Terraform allow
    you to pass many different credentials and configuration settings, such as access
    and secret keys. For example, see the settings available for <a href="https://www.terraform.io/docs/backends/types/s3.html#configuration"
    target="_blank">AWS S3</a> from Terraform and review <a href="https://terragrunt.gruntwork.io/docs/features/keep-your-remote-state-configuration-dry/"
    target="_blank">Keep your remote state configuration DRY</a> from Terragrunt.</p><h3>Option:
    Resource Targeting</h3><p>In <strong>Additional Settings</strong>, you can use
    the <strong>Target</strong> setting to target one or more specific modules in
    your Terraform script, just like using the <code>terraform plan -target</code>
    command. See <a href="https://www.terraform.io/docs/commands/plan.html#resource-targeting"
    target="_blank">Resource Targeting</a> from Terraform.</p><p>For example, in the
    following image you can see the Terraform script has one resource and two modules
    and the <strong>Targets</strong> setting displays them as potential targets.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/uxwih21ps1/1586301265517/image.png"/></figure><div
    class="note-callout">If you have multiple modules in your script and you do not
    select one in <strong>Targets</strong>, all modules are used.</div><p>You can
    also use Workflow variables as your targets. For example, you can create a Workflow
    variable named <strong>module</strong> and then enter the variable <code>${workflow.variables.module}</code>
    in the <strong>Targets</strong> field. When you deploy the Workflow, you are prompted
    to provide a value for the variable:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1559944106336/image.png"/></figure><p>See
    <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set Workflow
    Variables</a>.</p><h3>Option: Workspaces</h3><p>Harness supports Terraform <a
    href="https://www.terraform.io/docs/state/workspaces.html">workspaces</a>. A Terraform
    workspace is a logical representation of one your infrastructures, such as Dev,
    QA, Stage, Production.</p><p>Workspaces are useful when testing changes before
    moving to a production infrastructure. To test the changes, you create separate
    workspaces for Dev and Production.</p><p>A workspace is really a different state
    file. Each workspace isolates its state from other workspaces. For more information,
    see <a href="https://www.terraform.io/docs/state/workspaces.html#when-to-use-multiple-workspaces"
    target="_blank">When to use Multiple Workspaces</a> from Hashicorp.</p><p>Here
    is an example script where a local value names two workspaces, <strong>default</strong>
    and <strong>production</strong>, and associates different instance counts with
    each:</p><pre class="hljs json">locals {<br/>  counts = {<br/>      &#34;default&#34;=1<br/>      &#34;production&#34;=3<br/>  }<br/>}<br/><br/>resource
    &#34;aws_instance&#34; &#34;my_service&#34; {<br/>  ami=&#34;ami-7b4d7900&#34;<br/>  instance_type=&#34;t2.micro&#34;<br/>  count=&#34;${lookup(local.counts,
    terraform.workspace, 2)}&#34;<br/>  tags {<br/>         Name = &#34;${terraform.workspace}&#34;<br/>    }<br/>}</pre><p></p><p>In
    the workspace interpolation sequence you can see the count is assigned by applying
    it to the workspace variable (<code>terraform.workspace</code>) and that the tag
    is applied using the variable also.</p><p>Harness will pass the workspace name
    you provide to the <code>terraform.workspace</code> variable, thus determining
    the count. If you provide the name <strong>production</strong>, the count will
    be <strong>3</strong>.</p><p>In the <strong>Workspace</strong> setting, you can
    simply select the name of the workspace to use.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/uxwih21ps1/1586301805802/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>So
    can also use a Workflow variable to enter the name in <strong>Workspace</strong>.</p><p>Later,
    when the Workflow is deployed, you can specify the name for the Workflow variable:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/uxwih21ps1/1586301948509/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>This
    allows you to specify a different workspace name each time the Workflow is run.</p><p>You
    can even set a Harness Trigger where you can set the workspace name used by the
    Workflow:</p><p>This Trigger can then be run in response to different events,
    such as a Git push. For more information, see <a href="/article/revc37vl0f-passing-variable-into-workflows">Passing
    Variables into Workflows and Pipelines from Triggers</a>.</p><div class="note-callout">When
    rollbacks occur, Harness will rollback the Terraform state to the previous version
    of same workspace.</div><h3>Option: Select Delegate</h3><p>In <strong>Delegate
    Selector</strong>, you can select the specific Harness Delegate(s) to execute
    the Terragrunt Provisioning step.</p><p>For more information on Delegate Selectors,
    see <a href="/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates with Selectors</a>.</p><p>You can even add a <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variable</a> for the Delegate Selector and the use an expression in the <strong>Delegate
    Selectors</strong> field. When you deploy the Workflow, you will provide the name
    of the Delegate Selector.</p><p>For more information, see <a href="https://docs.harness.io/article/m220i1tnia-workflow-configuration#add_workflow_variables">Add
    Workflow Variables</a> and <a href="/article/revc37vl0f-passing-variable-into-workflows">Passing
    Variables into Workflows and Pipelines from Triggers</a>.</p><h3>Option: Skip
    Terragrunt Rollback</h3><p>When you add a <strong>Terragrunt Provision</strong>
    step to the Pre-deployment section of a Workflow, Harness automatically adds a
    <strong>Terragrunt Rollback</strong> step to the <strong>Rollback Steps</strong>
    of the Workflow Phase.</p><p>Enable <strong>Skip rollback of provisioned infrastructure
    on failure</strong> to prevent Harness from automatically adding a <strong>Terragrunt
    Rollback</strong> step to the <strong>Rollback Steps</strong> of the Workflow
    Phase.</p><p></p><h3>Option: Add Environment Variables</h3><p>In <strong>Terragrunt</strong>
    <strong>Environment Variables</strong>, you can reference additional environment
    variables in the Terraform script ultimately used by the Terragrunt Infrastructure
    Provisioner. These are in addition to any variables already in the script.</p><p>Click
    <strong>Add</strong> and enter a name, type, and value for the environment variable.
    For example: <strong>TF_LOG</strong>, <strong>Text</strong>, and <code>TRACE</code>.</p><p>If
    you select Encrypted Text, you must select an existing Harness <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Encrypted
    Text secret</a>.</p><p>You can use Harness <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variables</a> and <a href="/article/9dvxcegm90-variables">expression variables</a>
    for the name and value.</p><div class="note-callout">Environment variables can
    also be deleted using the Terragrunt Destroy step. See <a href="/article/1zmz2vtdo2-remove-provisioned-infra-with-terragrunt-destroy">Remove
    Provisioned Infra with Terragrunt Destroy</a>.</div><h3>Step 4: Add Infrastructure
    Definition to Phases</h3><p>Now that the Workflow <strong>Pre-deployment</strong>
    section has your Terragrunt Provisioner step added, you need to add the target
    Infrastructure Definition where the Workflow will deploy.</p><p>This is the same
    Infrastructure Definition where you mapped your Terragrunt Infrastructure Provisioner
    outputs, as described in <a href="/article/tphb27opry-map-terragrunt-infrastructure">Map
    Dynamically Provisioned Infrastructure using Terragrunt</a>.</p><p>For Canary
    Workflows, Infrastructure Definitions are added in Phases, in the <strong>Deployment
    Phases</strong> section.</p><div class="note-callout">For AMI deployments, Terragrunt
    Infrastructure Provisioners are also supported in Blue/Green Workflows. If you
    are creating a Blue/Green Workflow for AMI, you can select the Environment and
    Infrastructure Definition in the Workflow setup settings.</div><p>In the <strong>Deployment
    Phases</strong> section, click <strong>Add Phase</strong>. The Workflow Phase
    settings appear.</p><p>In <strong>Service</strong>, select the Harness Service
    to deploy.</p><p>In <strong>Infrastructure Definition</strong>, select the target
    Infrastructure Definition where the Workflow will deploy. This is the same Infrastructure
    Definition where you mapped your Terragrunt Infrastructure Provisioner outputs,
    as described in <a href="/article/tphb27opry-map-terragrunt-infrastructure">Map
    Dynamically Provisioned Infrastructure using Terragrunt</a>.</p><p>Here is an
    example:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jbzxpljhlo/1619218606103/image.png"/></figure><p>Click
    <strong>Submit</strong>. Use the same Infrastructure Definition for the remaining
    phases in your Canary Workflow.</p><p>Once you are done, your Workflow is ready
    to deploy. Let&#39;s look at an example below.</p><h3>Example: Terragrunt Deployment</h3><p>This
    section shows the deployment steps for a Workflow using the Terragrunt Provisioner
    step and deploying to a Kubernetes cluster.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jbzxpljhlo/1619218725999/image.png"/></figure><p>In
    the <strong>Pre-Deployment</strong> section, two <strong>Terragrunt</strong> <strong>Provision</strong> steps
    are executed. When you click each step you can see the Terragrunt commands executed
    in <strong>Details</strong>.</p><p>The first Terragrunt Provision step create
    a plan using the Terragrunt config files and the source Terraform module. The
    plan is encrypted and stored in a Secrets Manager.</p><pre>Generating **************
    plan <br/><br/>terragrunt plan -out=tfplan -input=false   -var-file=&#34;/opt/harness-delegate/./terragrunt-working-dir/kmpySmUISimoRrJL6NL73w/235638175/terragrunt-script-repository/variables/local_variables/**************.tfvars&#34;  <br/>Refreshing
    Terraform state in-memory prior to plan...<br/>The refreshed state will be used
    to calculate this plan, but will not be<br/>persisted to local or remote state
    storage.</pre><p></p><p>The second Terragrunt Provision step inherits the plan,
    decrypts it, and applies the plan:</p><pre>Decrypting ************** plan before
    applying<br/><br/><br/>Using approved ************** plan <br/><br/>Finished terragrunt
    plan task<br/>...<br/>terragrunt apply -input=false tfplan<br/>null_resource.delaymodule3:
    Creating...<br/>null_resource.delaymodule3: Provisioning with &#39;local-exec&#39;...<br/>null_resource.delaymodule3
    (local-exec): Executing: [&#34;/bin/sleep&#34; &#34;5&#34;]<br/>null_resource.delaymodule3:
    Creation complete after 5s [id=932665668643318315]<br/><br/>Apply complete! Resources:
    1 added, 0 changed, 0 destroyed.<br/><br/>The state of your infrastructure has
    been saved to the path<br/>below. This state is required to modify and destroy
    your<br/>infrastructure, so keep it safe. To inspect the complete state<br/>use
    the `************** show` command.<br/><br/>State path: **************.tfstate<br/><br/>Outputs:<br/><br/>clusterName
    = us-central1-a/harness-test<br/>sleepoutputModule3 = 10<br/>versionModule3 =
    5</pre><p></p><p>Finally, in the <strong>Canary Deployment</strong> step, the
    workload steady state is reached and the deployment is considered a success:</p><pre>kubectl
    --kubeconfig=config get events --namespace=default --output=custom-columns=KIND:involvedObject.kind,NAME:.involvedObject.name,MESSAGE:.message,REASON:.reason
    --watch-only<br/><br/>kubectl --kubeconfig=config rollout status Deployment/harness-example-deployment-canary
    --namespace=default --watch=true<br/><br/><br/>Status : Waiting for deployment
    &#34;harness-example-deployment-canary&#34; rollout to finish: 0 of 1 updated
    replicas are available...<br/>Event  : Pod    harness-example-deployment-canary-5b4cb547b-dmv5k   Pulling
    image &#34;registry.hub.docker.com/library/nginx:stable-perl&#34;   Pulling<br/>Event  :
    Pod   harness-example-deployment-canary-5b4cb547b-dmv5k   Successfully pulled
    image &#34;registry.hub.docker.com/library/nginx:stable-perl&#34;   Pulled<br/>Event  :
    Pod   harness-example-deployment-canary-5b4cb547b-dmv5k   Created container harness-example   Created<br/>Event  :
    Pod   harness-example-deployment-canary-5b4cb547b-dmv5k   Started container harness-example   Started<br/><br/>Status
    : deployment &#34;harness-example-deployment-canary&#34; successfully rolled out<br/><br/>Done.</pre><p></p><h3>Notes</h3><p>The
    following notes discuss rollback of deployments that use Terragrunt Infrastructure
    Provisioners.</p><h4 id="undefined">Deployment Rollback</h4><p>If you have successfully
    deployed Terraform modules and on the next deployment there is an error that initiates
    a rollback, Harness will roll back the provisioned infrastructure to the previous,
    successful version of the Terraform state.</p><p>Harness will not increment the
    serial in the state, but perform a hard rollback to the exact version of the state
    provided.</p><h4 id="undefined">Rollback Limitations</h4><p>If you deployed two
    modules successfully already, module1 and module2, and then attempted to deploy
    module3, but failed, Harness will roll back to the successful state of module1
    and module2.</p><p>However, let&#39;s look at the situation where module3 succeeds
    and now you have module1, module2, and module3 deployed. If the next deployment
    fails, the rollback will only roll back to the Terraform state with module3 deployed.
    Module1 and module2 were not in the previous Terraform state, so the rollback
    excludes them.</p><h3>Next Steps</h3><p>Now that you&#39;re familiar with provision
    using the Terragrunt Provisioner step, the following topics cover features to
    help you extend your Harness Terragrunt deployments:</p><ul><li><a href="/article/rbw96hdr1c-perform-a-terragrunt-dry-run">Perform
    a Terragrunt Dry Run</a></li><li><a href="/article/1zmz2vtdo2-remove-provisioned-infra-with-terragrunt-destroy">Remove
    Provisioned Infra with Terragrunt Destroy</a></li></ul><p></p><p></p><p></p><p></p><p></p><p></p>'
  slug: provision-using-the-terragrunt-provision-step
  tags: []
  is_live: true
