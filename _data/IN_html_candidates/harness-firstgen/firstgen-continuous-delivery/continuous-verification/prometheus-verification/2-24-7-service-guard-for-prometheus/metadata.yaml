type: article
article_id: i9d01kf32g
user_id: mfr0nxh4be
category_id: 177rlmujlu
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Monitor Applications 24/7 with Prometheus
slug: 2-24-7-service-guard-for-prometheus
description: Lists specific options for integrating Prometheus with Harness 24/7 Service
  Guard. This feature monitors your live applications, catching problems that surface
  minutes or hours following deployment.
short_version: Combined with Prometheus, Harness 24/7 Service Guard monitors your
  live applications, catching problems that surface minutes or hours following deployment.
tags:
- Prometheus
- Verification Provider
- verification
- 24/7 Service Guard
- APM
- application performance monitoring
- setup
- Metrics Provider
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-08-31T17:13:07.464904Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Monitor Applications 24/7 with Prometheus
  description: Lists specific options for integrating Prometheus with Harness 24/7
    Service Guard. This feature monitors your live applications, catching problems
    that surface minutes or hours following deployment.
  short_version: Combined with Prometheus, Harness 24/7 Service Guard monitors your
    live applications, catching problems that surface minutes or hours following deployment.
  body: '<p></p><p>Harness 24/7 Service Guard monitors your live applications, catching
    problems that surface minutes or hours following deployment. For more information,
    see <a href="/article/dajt54pyxd-24-7-service-guard-overview">24/7 Service Guard
    Overview</a>.</p><p>Harness 24/7 Service Guard differs from Deployment Verification
    in that it monitors the live microservice whereas Deployment Verification monitors
    the hosts and nodes for the first 15 minutes following steady state.</p><p>You
    can add your Prometheus monitoring to Harness 24/7 Service Guard in your Harness
    Application Environment. See <a href="/article/da3je0ck3a-1-prometheus-connection-setup">Connect
    to Prometheus</a>.</p><div class="note-callout">This section assumes you have
    a Harness Application set up and containing a Service and Environment. For steps
    on setting up a Harness Application, see <a href="/article/bucothemly-application-configuration">Application
    Checklist</a>.</div><p></p><h3>Before You Begin</h3><ul><li>Set up a Harness Application,
    containing a Service and Environment. SeeÂ <a href="https://docs.harness.io/article/bucothemly-application-configuration">Create
    an Application</a>.</li><li>See the <a href="/article/5uh79dplbj-prometheus-verification-overview">Prometheus
    Verification Overview</a>.</li></ul><p></p><h3>Visual Summary</h3><p>Here&#39;s
    an example of a 24/7 Service Guard configuration for Prometheus.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/i9d01kf32g/1585726909738/image.png"
    style="max-height:55%;max-width:55%" data-hd-height="55%" data-hd-width="55%"/></figure><p></p><p></p><h3>Step
    1: Set Up 24/7 Service Guard for Prometheus</h3><p>To set up 24/7 Service Guard
    for Prometheus, do the following:</p><ol><li>Ensure that you have added Prometheus
    as a Harness Verification Provider, as described in <a href="/article/da3je0ck3a-1-prometheus-connection-setup">Connect
    to Prometheus</a>.</li><li>In your Harness Application, ensure that you have added
    a Service, as described in <a href="/article/eb3kfl8uls-service-configuration">Services</a>.
    For 24/7 Service Guard, you do not need to add an Artifact Source to the Service,
    or configure its settings. You simply need to create a Service and name it. It
    will represent your application for 24/7 Service Guard.</li><li>In your Harness
    Application, click <strong>Environments</strong>.</li><li>In <strong>Environments</strong>,
    ensure that you have added an Environment for the Service you added. For steps
    on adding an Environment, see <a href="/article/n39w05njjv-environment-configuration">Environments</a>.</li><li>Click
    the Environment for your Service. Typically, the <strong>Environment Type</strong>
    is <strong>Production</strong>.</li><li>In the <strong>Environment</strong> page,
    locate <strong>24/7 Service Guard</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/ps716zaurs/1553127693787/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    <strong>24/7 Service Guard</strong>, click <strong>Add Service Verification</strong>,
    and then click <strong>Prometheus</strong>. The <strong>Prometheus</strong> dialog
    appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/i9d01kf32g/1585726909738/image.png"
    style="max-height:55%;max-width:55%" data-hd-height="55%" data-hd-width="55%"/></figure></li></ol><p>The
    <strong>Prometheus</strong> dialog has the following fields.</p><div class="note-callout">For
    24/7 Service Guard, the queries you define to collect logs are specific to the
    Application or Service you want monitored. (Verification is Application/Service
    level.) This is unlike Workflows, where deployment verification is performed at
    the host/node/pod level.</div><p></p><h3>Step 2: Display Name</h3><p>Enter the
    name to identify this Service&#39;s Prometheus monitoring on the 24/7 Service
    Guard dashboard.</p><p></p><h3>Step 3: Service</h3><p>The Harness Service to monitor
    with 24/7 Service Guard.</p><p></p><h3>Step 4: Prometheus Server</h3><p>Select
    the server you added when setting up the <a href="/article/da3je0ck3a-1-prometheus-connection-setup">Connect
    to Prometheus</a>.</p><h3>Step 5: Metric to Monitor</h3><p>Every time series is
    uniquely identified by its metric name and a set of key-value pairs, also known
    as labels. For more information, see <a href="https://prometheus.io/docs/concepts/data_model/">Data
    Model</a> from Prometheus. A metric requires the following parameters:</p><ul><li><strong>Metric
    Name:</strong> The name of the metric defined in Prometheus.</li><li><strong>Metric
    Type:</strong> The type of metric (Response Time, Error, Throughput, or Value).</li><li><strong>Group
    Name:</strong> The transaction (service or request context) which the metric relates
    to. For example, Login or Hardware.</li><li><strong>Query:</strong> The API query
    required to retrieve the metric value.</li></ul><div class="note-callout">When
    you add your query in <strong>Query</strong>, you want the query to return a <u>single</u>
    time series result for the metric and transaction you identify. If it returns
    multiple results, Harness will not process your verification step.</div><p>You
    can simply obtain your query from Prometheus and paste it into Harness.</p><p>For
    example, here is a query in Prometheus:</p><p></p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/i9d01kf32g/1587102049154/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/i9d01kf32g/1587102049154/image.png"/></a></figure><p>See
    <a href="https://prometheus.io/docs/prometheus/latest/querying/api/#expression-queries"
    target="_blank">Expression queries</a> from Prometheus for example of queries,
    but always use the placeholders demonstrated above.</p><div class="note-callout">You
    cannot use the built-in Harness expressions <code>${service.name}</code> in the
    query.</div><h4>Always Use Throughput with Error and Response Time Metrics</h4><p>Whenever
    you use the Error metric type, you should also add another metric for Throughput
    with the same Group Name.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qkcn11esgb/1606858647855/image.png"/></figure><p>Harness
    analyze errors as error percentage and without the throughput the error number
    does not provide much information.</p><p>The same setup should used with the Response
    Time metric also. Whenever you set up a Response Time metric, setup a Throughput
    metric with the same Group Name.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qkcn11esgb/1606858673359/image.png"/></figure><h3>Step
    6: Custom Thresholds</h3><p>In the <strong>Custom Thresholds</strong> section,
    you can define <strong>Ignore Hints</strong>. These are rules that instruct Harness
    to skip certain metrics/value combinations from verification analysis.</p><p>To
    configure these rules, see <a href="/article/53t35yit8p-custom-thresholds-24-7">Apply
    Custom Thresholds to 24/7 Service Guard</a>.</p><p></p><h3>Step 7: Algorithm Sensitivity</h3><p>See
    <a href="/article/0avzb5255b-cv-strategies-and-best-practices#algorithm_sensitivity_and_failure_criteria">CV
    Strategies, Tuning, and Best Practices</a>.</p><p></p><h3>Step 8: Enable 24/7
    Service Guard</h3><p>Click the checkbox to enable 24/7 Service Guard.</p><h3>Next
    Steps</h3><ul><li><a href="/article/qkcn11esgb-3-verify-deployments-with-prometheus">Verify
    Deployments with Prometheus</a></li></ul><p></p>'
  slug: 2-24-7-service-guard-for-prometheus
  tags:
  - Prometheus
  - Verification Provider
  - verification
  - 24/7 Service Guard
  - APM
  - application performance monitoring
  - setup
  - Metrics Provider
  is_live: true
