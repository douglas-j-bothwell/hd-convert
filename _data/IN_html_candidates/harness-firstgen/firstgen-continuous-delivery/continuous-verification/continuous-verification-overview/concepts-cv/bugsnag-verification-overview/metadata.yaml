type: article
article_id: ac5piurukt
user_id: mfr0nxh4be
category_id: zxxvl8vahz
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Bugsnag Verification Overview
slug: bugsnag-verification-overview
description: Overview of adding Bugsnag to Harness' monitoring features (Deployment
  Verification and 24/7 Service Guard).
short_version: Overview of Harness' Bugsnag integration.
tags:
- Bugsnag
- browser version
- browser issue
- setup
- Verification Provider
- verification
- log
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:22:47.726998Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Bugsnag Verification Overview
  description: Overview of adding Bugsnag to Harness' monitoring features (Deployment
    Verification and 24/7 Service Guard).
  short_version: Overview of Harness' Bugsnag integration.
  body: <p></p><p>This topic describes how to set up Harness Continuous Verification,
    and monitor your deployments and production applications using its unsupervised
    machine-learning functionality, on Bugsnag.</p><p>Bugsnag provides error reporting
    libraries for every major software platform, detecting and reporting errors in
    your apps, and capturing diagnostic data for each error. Bugsnag captures your
    app’s exceptions or events, and groups them into errors according to their root
    causes.</p><p>In this topic:</p><ul><li><a href="#visual_summary">Visual Summary</a></li><li><a
    href="#integration_process_summary">Integration Process Summary</a></li><li><a
    href="#browser_based_benefits">Browser-Based Benefits</a></li><li><a href="#next_steps">Next
    Steps</a></li></ul><p></p><h3>Visual Summary</h3><p>Harness Continuous Verification
    integrates with Bugsnag to verify your deployments and live production applications
    using the following Harness features:</p><ul><li><strong>24/7 Service Guard</strong> -
    Monitors your live, production applications.</li><li><strong>Deployment Verification</strong> -
    Monitors your application deployments, and performs automatic rollback according
    to your criteria.</li></ul><p>This document describes how to set up these Harness
    Continuous Verification features, and then monitor your deployments and production
    applications using its unsupervised machine-learning functionality.</p><div class="note-callout">Bugsnag
    provides unique browser-focused reporting. See <a href="#browser_based_benefits">Browser-Based
    Benefits</a> below.</div><p></p><table><tbody><tr><td><p><strong>Reporting with
    Bugsnag</strong></p></td><td><p><strong>Harness Analysis</strong></p></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/p4lxsooom7/1537824161946/image.png"/></figure></td><td><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/p4lxsooom7/1537826469641/image.png"/></figure></td></tr></tbody></table><p></p><h3>Integration
    Process Summary</h3><p>You set up Bugsnag and Harness in the following way:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/f9k09nevme/1588745590571/bugsnag-integratio.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><ol><li><strong>Bugsnag</strong> -
    Monitor your application using Bugsnag. In this article, we assume that you are
    using Bugsnag to monitor your application already.</li><li><strong>​Verification
    Provider Setup</strong> - In Harness, you connect Harness to your Bugsnag account,
    adding Bugsnag as a <strong>Harness Verification Provider</strong>.</li><li><strong>Harness
    Application</strong> - Create a Harness Application with a Service and an Environment.
    We do not cover Application setup in this sequence. See <a href="https://docs.harness.io/article/bucothemly-application-configuration">Create
    an Application</a>.</li><li><strong>​24/7 Service Guard Setup</strong><strong>-</strong> In
    the Environment, set up 24/7 Service Guard to monitor your live, production application.</li><li>​<strong>Verify
    Deployments</strong>:<ol><li>Add a Workflow to your Harness Application and deploy
    your microservice or application to the service infrastructure/<a href="https://docs.harness.io/article/n39w05njjv-environment-configuration#add_an_infrastructure_definition">Infrastructure
    Definition</a> in your Environment.</li><li>After you have run a successful deployment,
    you then add verification steps to the Workflow using your Verification Provider.</li><li>Harness
    uses unsupervised machine-learning and Bugsnag analytics to analyze your future
    deployments, discovering events that might be causing your deployments to fail.
    Then you can use this information to set rollback criteria and improve your deployments.</li></ol></li></ol><h3>Browser-Based
    Benefits</h3><p>Bugsnag is particularly useful for browser-based apps, as it collects
    browser information as part of its exception and error capture. This can helpful
    in determining if a new version of a browser is causing problems for users. Here
    is an example from Bugsnag:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/p4lxsooom7/1537827333743/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Once
    you have deployed your app via Harness, you can add host/node-focused verification
    to your Harness workflow using another <a href="/article/myw4h9u05l-verification-providers-list">Verification
    Provider</a>, and use Bugsnag to focus on browser-based issues. Here is an example
    of a Harness verification where other verification tools have been used to verify
    host/node issues, and Bugsnag is added as the last verification step to capture
    browser-based issues:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/p4lxsooom7/1537894468789/image.png"/></figure><p>When
    you set up Bugsnag as a verification step in a Harness workflow, you can indicate
    if your app is browser-based. When Harness arrives at the Bugsnag verification
    step, Harness will ignore deployment host or node information and focus on browser-based
    data. This browser focus enables you to capture browser issues on their own after
    you have already ensured that the deployment host/node environment is running
    correctly.</p><p>Harness can now use this browser data with the machine-learning
    in its Continuous Verification and determine what events are causing errors or
    have to the potential to cause errors in the future.</p><p>For information about
    advanced browser event capturing in Bugsnag, see <a href="https://docs.bugsnag.com/platforms/browsers/react/#sending-diagnostic-data"
    target="_blank">React integration guide</a> from Bugsnag.</p><h3>Next Steps</h3><ul><li><a
    href="/article/dml2vk0ec3-1-bugsnag-connection-setup">Connect to Bugsnag</a></li><li><a
    href="/article/4usahbjhp6-2-24-7-service-guard-for-bugsnag">Monitor Applications
    24/7 with Bugsnag</a></li><li><a href="/article/2tfwoxl1dj-3-verify-deployments-with-bugsnag">Verify
    Deployments with Bugsnag</a></li></ul><p></p>
  slug: bugsnag-verification-overview
  tags:
  - Bugsnag
  - browser version
  - browser issue
  - setup
  - Verification Provider
  - verification
  - log
  is_live: true
