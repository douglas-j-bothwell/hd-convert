type: article
article_id: o22jx8amxb
user_id: mfr0nxh4be
category_id: nj9oa7ljyy
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Infrastructure Provisioners Overview
slug: add-an-infra-provisioner
description: Quick overview of Harness Infrastructure Provisioners to support Terraform,
  CloudFormation, and custom Shell Script provisioners.
short_version: Quick overview of Harness Infrastructure Provisioners for Terraform,
  CloudFormation, and custom Shell Script provisioners.
tags:
- Terraform
- Cloudformation
- Service Mapping
- Workflow variable
- Secrets management
- Shell Script
- Infrastructure Provisioner
- output variable
- YAML
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-03-17T23:36:34.084339Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Infrastructure Provisioners Overview
  description: Quick overview of Harness Infrastructure Provisioners to support Terraform,
    CloudFormation, and custom Shell Script provisioners.
  short_version: Quick overview of Harness Infrastructure Provisioners for Terraform,
    CloudFormation, and custom Shell Script provisioners.
  body: '<p>This article provides a general overview of Harness support for Infrastructure
    Provisioners. For detailed Harness Infrastructure Provisioner guides, see:</p><ul><li><a
    href="https://docs.harness.io/article/9pvvgcdbjh-terrform-provisioner">Terrform
    Provisioner</a></li><li><a href="/article/jaxppd8w9j-using-the-terraform-apply-command">Using
    the Terraform Apply Command</a></li><li><a href="https://docs.harness.io/article/1m3p7phdqo-shell-script-provisioner">Shell
    Script Provisioner</a></li><li><a href="/article/78g32khjcu-cloud-formation-provisioner">CloudFormation
    Provisioner</a></li></ul><p>In this topic we&#39;ll discuss general information
    such as:</p><ul><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#overview">Overview</a></li><li><a
    href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#provisioning_process_with_harness_variables">Provisioning
    Process with Harness Variables</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#intended_audience">Intended
    Audience</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#before_you_begin">Before
    You Begin</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#add_an_infrastructure_provisioner">Add
    an Infrastructure Provisioner</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#cloud_formation">CloudFormation</a></li><li><a
    href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#terraform">Terraform</a></li><li><a
    href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#shell_script">Shell
    Script</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#output_mappings">Output
    Mappings</a></li><li><a href="#rollback">Rollback</a></li><li><a href="https://docs.harness.io/article/o22jx8amxb-add-an-infra-provisioner#set_up_with_yaml">Set
    Up with YAML</a></li></ul><div class="note-callout">You can create any resource
    using Terraform, and output values can be published for use in Harness Workflows
    and Pipelines. Harness supports first-class <a href="#service_mappings">Service
    Mapping</a> for AWS-based infrastructures (SSH, ASG, ECS, Lambda) and Google Kubernetes
    (GKE). Google Kubernetes is not supported for CloudFormation, as CloudFormation
    is used for provisioning infrastructure on AWS only.</div><h3>Overview</h3><p>Harness
    Infrastructure Provisioners define deployment infrastructure blueprints from known
    Infrastructure-as-Code technologies, such as Terraform and CloudFormation, and
    map their output settings to provision the infrastructure. Infrastructure Provisioners
    enable Harness Workflows to provision infrastructure on the fly when deploying
    Services.</p><p>Typically, when creating your Harness deployment, there is an
    assumption that you already have an infrastructure in place where you want to
    deploy your Services. In some cases, you will want to use an Infrastructure Provisioner
    to define this infrastructure on the fly.</p><p>Add an Infrastructure Provisioner
    such as <a href="https://aws.amazon.com/cloudformation/" target="_blank">CloudFormation</a>
    or <a href="https://www.terraform.io/intro/index.html" target="_blank">Terraform</a>
    as a blueprint for the system, networking, and security infrastructure for the
    service(s) you deploy. Define components such as load balancer, VPC, subnets,
    firewall rules, security groups, and so on. When Harness deploys your microservice,
    it will build your infrastructure according to this blueprint.</p><p>After you
    set up an Infrastructure Provisioner in your Harness Application, you can add
    it as a <strong>Pre-Deployment</strong> step in a Workflow or as an Infrastructure
    Definition in an Environment. Once configured, your Workflow can deploy multiple
    Services, each using the same Infrastructure Provisioner as a blueprint, and passing
    in Service-specific input variables to create Service-specific deployments using
    the single Infrastructure Provisioner.</p><p>See also <a href="/article/bucothemly-application-configuration">Application
    Checklist</a>, <a href="/article/eb3kfl8uls-service-configuration">Add a Service</a>,
    <a href="/article/n39w05njjv-environment-configuration">Add an Environment</a>,
    <a href="/article/m220i1tnia-workflow-configuration">Add a Workflow</a>.</p><h3>Provisioning
    Process with Harness Variables</h3><p>Infrastructure provisioner templates include
    inputs and outputs that Harness uses for provisioning:</p><ul><li><strong>Inputs
    -</strong> Typically, provisioner inputs are information needed to access the
    target environment, such access and secret keys. In Harness, you can write values
    from Harness <a href="/article/au38zpufhr-secret-management">Secrets Management</a>
    or <a href="https://docs.harness.io/article/m220i1tnia-workflow-configuration#add_workflow_variables">Workflow
    variables</a> to template inputs to be used at runtime.</li><li><strong>Outputs
    -</strong> In order for Harness to create infrastructure using your provisioner,
    you map template outputs (VPCs, regions, subnets, etc) to Harness Infrastructure
    Provisioner <strong>Service Mappings</strong>, and the outputs are used to provision
    as the Service is deployed.</li></ul><p>The process is as follows:</p><ol><li>You
    create a Harness Infrastructure Provisioner using your infrastructure provisioner
    templates. You identify the inputs your template requires, such as access keys,
    and map the template outputs to the fields Harness requires for the different
    cloud platforms (VPC, subnets, etc).</li><li>You set up the Harness Environment
    and Workflow that will use your Infrastructure Provisioner. For the Environment,
    you simply identify that the Infrastructure Definition uses a Harness Infrastructure
    Provisioner. For the Workflow, you configure the input variables that Harness
    will pass to the Infrastructure Provisioner (access keys, etc).</li><li>When Harness
    deploys the Workflow, it uses the infrastructure provisioner (Terraform, CloudFormation,
    Shell Script) to provision as part of the Pre-Deployment Steps, using the inputs
    and outputs you configured to provision on the target cloud platform or physical
    datacenter.</li><li>Once provisioning has occurred, the Workflow deploys the Service
    to the provisioned infrastructure.</li></ol><h3>Before You Begin</h3><ul><li><a
    href="/article/4o7oqwih6h-harness-key-concepts">Harness Key Concepts</a></li></ul><h3>Add
    an Infrastructure Provisioner</h3><p>To add an infrastructure provisioner, do
    the following:</p><ol><li>Click <strong>Setup</strong>.</li><li>Click the application
    where you want to add an infrastructure provisioner.</li><li>Click <strong>Infrastructure
    Provisioners</strong>.<br/>The <strong>Infrastructure Provisioners</strong> page
    appears.</li><li>Click <strong>Add Infrastructure Provisioner</strong>, and select
    <strong>Terraform</strong>, <strong>CloudFormation</strong>, or <strong>Shell
    Script</strong>.<br/>Below are the options for each infrastructure provisioner
    type.</li></ol><h3>CloudFormation</h3><p>For all information on using Harness
    CloudFormation Infrastructure Provisioner, see <a href="/article/78g32khjcu-cloud-formation-provisioner">CloudFormation
    Provisioner</a>.</p><h3>Terraform</h3><p>For all information on using Harness
    Terraform Infrastructure Provisioner, see <a href="/article/9pvvgcdbjh-terrform-provisioner">Terraform
    Provisioner</a>.</p><h3>Shell Script</h3><p>Harness has first-class support for
    Terraform and AWS CloudFormation provisioners, but to support different provisioners,
    or your existing shell script implementations, Harness includes the <a href="/article/1m3p7phdqo-shell-script-provisioner">Shell
    Script Infrastructure Provisioner</a>.</p><h3>Output Mappings</h3><p>Harness can
    map output values from your provisioner script to the settings Harness requires
    to provision an infrastructure. These mappings are optional.</p><div class="note-callout">You
    can create any resource using Terraform and output values can be published for
    use in Harness Workflow and Pipelines. Harness supports first class output mapping
    for AWS-based infrastructures (SSH, ASG, ECS, Lambda) and Google Kubernetes (GKE).
    Google Kubernetes is not supported for CloudFormation as CloudFormation is for
    provisioning infrastructure on AWS only.</div><p>Most infrastructure resources
    have attributes associated with them, and outputs are a way to easily extract
    and query that information. For example, in a Terraform template, outputs specify
    values that will be provided to the user when Terraform applies the template,
    such as region, VPCs, and subnets.</p><div class="note-callout">If you have been
    running your deployments manually, you might not have outputs configured in your
    template files. To configure Service Mappings, you will need to add these output
    variables to your template.</div><p>When you use Terraform or CloudFormation with
    Harness, you can map the template outputs with Harness settings so that a single
    Infrastructure Provisioner can be used by many of the deployments you have configured
    in Harness.</p><p>For more information, see Terraform <a href="https://docs.harness.io/article/9pvvgcdbjh-terrform-provisioner#service_mappings">Service
    Mappings</a> and <a href="https://docs.harness.io/article/9pvvgcdbjh-terrform-provisioner#infrastructure_definition">Infrastructure
    Definition</a>, CloudFormation <a href="https://docs.harness.io/article/78g32khjcu-cloud-formation-provisioner#service_mappings">Service
    Mappings</a> and <a href="https://docs.harness.io/article/78g32khjcu-cloud-formation-provisioner#infrastructure_definition_service_mappings">Infrastructure
    Definition Mappings</a>, or Shell Script Provisioner <a href="https://docs.harness.io/article/1m3p7phdqo-shell-script-provisioner#service_mappings">Service
    Mappings</a> and <a href="https://docs.harness.io/article/1m3p7phdqo-shell-script-provisioner#environment_setup_and_infrastructure_definitions">Environment
    Setup and Infrastructure Definitions</a>.</p><h3>Rollback </h3><p>By default,
    Harness performs rollback for pre-deployment provisioned resources first, followed
    by rollback for the deployment Phases of a Workflow. The Phases of a Workflow
    are rolled back in reverse order, with last Phase rolled back first.</p><h4>Rollback
    Provisioned Resources after Rolling Back Phases</h4><div class="note-callout">Currently,
    this feature is behind the Feature Flag <code>ROLLBACK_PROVISIONER_AFTER_PHASES</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to
    enable the feature.</div><p>As part of a <a href="/article/vfp0ksdzg3-define-workflow-failure-strategy-new-template">Workflow
    Failure Strategy</a>, you can set Harness to perform rollback of pre-deployment
    provisioned resources after it has rolled back the Phases of a Workflow.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/o22jx8amxb/1647559886443/image.png"/></figure><h3>Set
    Up with YAML</h3><p>You can set up an infrastructure provisioner quickly using
    the Harness code editor.</p><div class="note-callout">For information about syncing
    the Harness code editor with Git, see <a href="/article/htvzryeqjw-configuration-as-code">Configuration
    as Code</a>.</div><p>To set up an infrastructure provisioner using code, do the
    following:</p><ol><li>In the Git repo for Harness, open your application folder.</li><li>Inside
    your application folder, add a new folder named <strong>Provisioners</strong>.</li><li>Add
    a YAML file with the name that describes your provisioner, like <strong>DEV</strong>,
    and save it.</li><li>Open the YAML file and define your provisioner. Below are
    examples for CloudFormation and Terraform. Once you have added the YAML, sync
    your Git repo with Harness via <strong>Configuration As Code</strong>. The code
    editor appears and displays your provisioner.</li></ol><h4>CloudFormation Example</h4><pre
    class="hljs ruby">harnessApiVersion: &#39;1.0&#39;<br/>type: CLOUD_FORMATION<br/>mappingBlueprints:<br/>-
    cloudProviderType: AWS<br/>  deploymentType: SSH<br/>  nodeFilteringType: AWS_INSTANCE_FILTER<br/>  properties:<br/>  -
    name: region<br/>  - name: region<br/>  - name: securityGroups<br/>    value:
    ${cloudformation.security_group}<br/>  - name: subnets<br/>    value: ${cloudformation.subnet}<br/>  -
    name: tags<br/>    value: ${cloudformation.aws_ssh_tags}<br/>  - name: vpcs<br/>    value:
    ${cloudformation.vpc}<br/>  serviceName: TAR-file<br/>name: DEV-CF<br/>sourceType:
    TEMPLATE_URL<br/>templateFilePath: https://s3.amazon.aws.com/path<br/>variables:<br/>-
    name: access key<br/>  valueType: ENCRYPTED_TEXT<br/>- name: secret key<br/>  valueType:
    ENCRYPTED_TEXT</pre><p></p><h4>Terraform Example</h4><pre class="hljs ruby">harnessApiVersion:
    &#39;1.0&#39;<br/>type: TERRAFORM<br/>description: module for front-end deployment
    infra<br/>mappingBlueprints:<br/>- cloudProviderType: AWS<br/>  deploymentType:
    SSH<br/>  nodeFilteringType: AWS_INSTANCE_FILTER<br/>  properties:<br/>  - name:
    region<br/>    value: ${terraform.region}<br/>  - name: securityGroups<br/>    value:
    ${terraform.security_group}<br/>  - name: subnets<br/>    value: ${terraform.Subnet}<br/>  -
    name: tags<br/>    value: ${terraform.aws_ssh_tags}<br/>  - name: vpcs<br/>    value:
    ${terraform.VPCs}<br/>  serviceName: TAR-file<br/>name: front-end<br/>path: terraform-CV<br/>sourceRepoSettingName:
    git<br/>variables:<br/>- name: access key<br/>  valueType: ENCRYPTED_TEXT<br/>-
    name: secret key<br/>  valueType: ENCRYPTED_TEXT</pre><p></p><p></p>'
  slug: add-an-infra-provisioner
  tags:
  - Terraform
  - Cloudformation
  - Service Mapping
  - Workflow variable
  - Secrets management
  - Shell Script
  - Infrastructure Provisioner
  - output variable
  - YAML
  is_live: true
