type: article
article_id: bucothemly
user_id: ""
category_id: fwal42867c
author:
  name: ""
  profile_image: ""
title: Create an Application
slug: application-configuration
description: How to create a Harness Application.
short_version: How to create a Harness Application.
tags:
- Application
- Service
- Environment
- Workflow
- Pipeline
- Trigger
- Infrastructure Provisioner
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-02-24T11:40:34.826838Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create an Application
  description: How to create a Harness Application.
  short_version: How to create a Harness Application.
  body: |-
    <p>A Harness <strong>Application</strong> represents a group of microservices, their deployment pipelines, and all the building blocks for those pipelines. Harness represents your microservice using a logical group of one or more entities: Services, Environments, Workflows, Pipelines, Triggers, and Infrastructure Provisioners. Applications organize all of the entities and configurations in Harness CI/CD. </p><p>The following procedure creates a new Application. Once you are done, you can add components to the Application, such as Services and Environments.</p><p>In this topic:</p><ul><li> <a href="#before_you_begin">Before You Begin</a></li><li> <a href="#visual_summary">Visual Summary</a></li><li> <a href="#step_1">Step 1: Set up the Application</a><ul><li><a href="https://docs.harness.io/article/bucothemly-application-configuration#option_authorize_manual_triggers">Option: Authorize Manual Triggers</a></li><li><a href="https://docs.harness.io/article/bucothemly-application-configuration#option_mandate_webhook_secrets_for_git_hub_triggers">Option: Mandate Webhook Secrets for GitHub Triggers</a></li><li><a href="https://docs.harness.io/article/bucothemly-application-configuration#option_set_up_git_sync">Option: Set up Git Sync</a></li></ul></li><li> <a href="#step_2">Step 2: Add Services to the Application</a></li><li> <a href="#step_3">Step 3: Add Environments to the Application</a></li><li> <a href="#step_4">Step 4: Add Workflows to the Application</a></li><li> <a href="#step_5">Step 5: Add Pipelines to the Application</a></li><li> <a href="#step_6">Step 6: Add Triggers to the Application</a></li><li> <a href="#step_7">Step 7: Add Infrastructure Provisioners to the Application</a></li></ul><div class="hd--md" data-hd-markdown="&lt;span id=&#34;visual_summary&#34;&gt;&lt;/span&gt;"><p><span id="visual_summary"></span></p>
    </div><p></p><h3>Visual Summary</h3><p>The following diagram displays how an Application organizes Services, Workflows, and Environments into components that can be selected and deployed using Pipelines (although you can deploy a workflow by itself, also). The Artifact Servers and Cloud Providers you connect to your Harness account are used to obtain your microservices/applications and deploy them to your deployment environments.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1569872525524/image.png"/></figure><p>Keep this diagram in mind when setting up your Harness Application.</p><p></p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;before_you_begin&#34;&gt;&lt;/span&gt;"><p><span id="before_you_begin"></span></p>
    </div><p></p><h3>Before You Begin</h3><ul><li> <a href="/article/4o7oqwih6h-harness-key-concepts">Harness Key Concepts</a></li></ul><p></p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_1&#34;&gt;&lt;/span&gt;"><p><span id="step_1"></span></p>
    </div><p></p><h3>Step 1: Set up the Application</h3><ol><li>Click <strong>Setup</strong>, and then click <strong>Add Application</strong>. The <strong>Application</strong> dialog appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/bucothemly/1645694574532/screenshot-2022-02-24-at-2-47-08-pm.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Enter the name for your Application.</li></ol><h4>Option: Authorize Manual Triggers</h4><p>Select <strong>Authorize Manual Triggers</strong> to make API keys mandatory to authorize Manual Triggers invocation. For more information, see <a href="/article/ys3cvwm5gc-trigger-a-deployment-on-git-event#option_manual_triggers">Manual Triggers</a>.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/bucothemly/1645701755236/screenshot-2022-02-24-at-4-52-07-pm.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h4>Option: Mandate Webhook Secrets for GitHub Triggers</h4><p>Select <strong>Mandate Webhook Secrets for Github Triggers</strong> to make Webhook Secrets mandatory for all your GitHub Triggers. You must always supply your secret token added in your Git provider to authenticate the Webhook once you make it essential to provide Webhook secrets. For more information on how to authenticate the Webhook, see <a href="/article/ys3cvwm5gc-trigger-a-deployment-on-git-event#option_authenticate_the_webhook">Authenticate the Webhook</a>.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/bucothemly/1645695373657/screenshot-2022-02-24-at-3-05-37-pm.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div class="note-callout">Currently, this feature is behind the Feature Flag <code>GITHUB_WEBHOOK_AUTHENTICATION</code>. Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable the feature.</div><h4>Option: Set up Git Sync</h4><p>Select <strong>Set up Git Sync</strong> to sync your Application to a Git repo. You must also select a Git Connector and Branch Name that you want to use for Git Sync. For more information, see <a href="/article/6mr74fm55h-harness-application-level-sync">Harness Application-Level Git Sync</a>.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/bucothemly/1645702302061/screenshot-2022-02-24-at-5-01-17-pm.png" style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><ol><li style="counter-increment:li 2" start="3">Click <strong>SUBMIT</strong>. Your new Application appears.</li><li>Click your Application’s name. The Application appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/bucothemly/1554859619868/image.png" style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure></li></ol><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_2&#34;&gt;&lt;/span&gt;"><p><span id="step_2"></span></p>
    </div><p></p><h3>Step 2: Add Services to the Application</h3><p>Services represent your microservices/apps. You define where the artifacts for those microservices come from, and the container specs, configuration variables, and files for those microservices.</p><p>Add your microservices, including their artifact sources, container types, configuration variables, and YAML files.</p><p>For more information, see <a href="/article/eb3kfl8uls-service-configuration">Service Configuration</a>.</p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_3&#34;&gt;&lt;/span&gt;"><p><span id="step_3"></span></p>
    </div><p></p><h3>Step 3: Add Environments to the Application</h3><p>Environments represent one or more of your deployment infrastructures, such as Dev, QA, Stage, Production, etc.</p><p>Add deployment Environments for the Services in your application. These Environments will be deployed on the cloud providers you added as a connector.</p><p>For more information, see <a href="/article/n39w05njjv-environment-configuration">Environment Configuration</a>.</p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_4&#34;&gt;&lt;/span&gt;"><p><span id="step_4"></span></p>
    </div><h3>Step 4: Add Workflows to the Application</h3><p>Workflows define how a Service is deployed, verified, and rolled back, among other important phases. There are many different types of Workflows, from Basic to Canary and Blue/Green.</p><p>Add Workflows to manage the stages of Service deployments.</p><p>For more information, see <a href="/article/m220i1tnia-workflow-configuration">Workflow Configuration</a>.</p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_5&#34;&gt;&lt;/span&gt;"><p><span id="step_5"></span></p>
    </div><h3>Step 5: Add Pipelines to the Application</h3><p>A Pipeline is a collection of one or more stages, containing workflows for one or more services and other deployment and verification steps.</p><p>Add a Pipeline to define the workflows used in deployment and verification.</p><p>For more information, see <a href="/article/zc1u96u6uj-pipeline-configuration">Pipeline Configuration</a>.</p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_6&#34;&gt;&lt;/span&gt;"><p><span id="step_6"></span></p>
    </div><h3>Step 6: Add Triggers to the Application</h3><p>Triggers automate deployments using a variety of conditions, such as Git events, new artifacts, schedules, and the success of other pipelines.</p><p>Add a Trigger to define when a Workflow or Pipeline is executed.</p><p>For more information, see <a href="/article/xerirloz9a-add-a-trigger-2">Trigger Configuration</a>.</p><div class="hd--md" data-hd-markdown="&lt;span id=&#34;step_7&#34;&gt;&lt;/span&gt;"><p><span id="step_7"></span></p>
    </div><h3>Step 7: Add Infrastructure Provisioners to the Application</h3><p>Infrastructure Provisioners define blueprints from known Infrastructure-as-Code technologies (Terraform, Cloud Formation, etc) and map the output (such as load balancers, VPCs, etc). They enable Workflows to provision infrastructure on the fly when deploying Services.</p><p>Add an Infrastructure Provisioner such as CloudFormation or Terraform as a blueprint for the system, networking, and security infrastructure for the Service deployment.</p><p>For more information, see <a href="/article/o22jx8amxb-add-an-infra-provisioner">Infrastructure Provisioner Configuration</a>.</p>
  slug: application-configuration
  tags:
  - Application
  - Service
  - Environment
  - Workflow
  - Pipeline
  - Trigger
  - Infrastructure Provisioner
  is_live: true
