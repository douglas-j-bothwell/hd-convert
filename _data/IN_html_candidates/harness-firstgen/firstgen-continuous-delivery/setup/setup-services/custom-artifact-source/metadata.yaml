type: article
article_id: jizsp5tsms
user_id: mfr0nxh4be
category_id: u4eimxamd3
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Using Custom Artifact Sources
slug: custom-artifact-source
description: 'Pull artifacts from your custom repository:  Query your artifact server
  via a script; use the resulting JSON output to map to your artifact''s build number;
  and then collect the artifact via Workflow command or shell script.'
short_version: Define a Custom Artifact Source to collect artifacts from your custom
  repository.
tags:
- ARTIFACT_RESULT_PATH
- Build Number
- Artifact Source
- Custom Repository
- Artifacts Array Path
- artifact.buildNo
- Jenkins
- Shell Script
- Jenkins.description
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-08-18T22:33:33.021101Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Using Custom Artifact Sources
  description: 'Pull artifacts from your custom repository:  Query your artifact server
    via a script; use the resulting JSON output to map to your artifact''s build number;
    and then collect the artifact via Workflow command or shell script.'
  short_version: Define a Custom Artifact Source to collect artifacts from your custom
    repository.
  body: '<p></p><p>For enterprises that use a custom repository, Harness provides
    the Custom Artifact Source to add their custom repository to the Service.</p><p>To
    use this artifact source, you provide a script to query your artifact server via
    its API (for example, REST) and then Harness stores the output on the Harness
    Delegate in the Harness-initialized variable <code>${ARTIFACT_RESULT_PATH}</code>.
    The output must be a JSON array, with a mandatory key for a Build Number. You
    then map a key from your JSON output to the Build Number.</p><p></p><h3>Before
    You Begin</h3><ul><li>Read the <a href="/article/bucothemly-application-configuration">Create
    an Application</a> topic to get an overview of how Harness organizes Services.</li><li>Read
    the <a href="/article/eb3kfl8uls-service-configuration">Add a Service</a> topic
    to understand the process to add a Service to an Application.</li><li>Read <a
    href="/article/htvzryeqjw-configuration-as-code">Configuration as Code</a> to
    see how you can quickly configure your Harness Service using your existing YAML
    in Git.</li></ul><p></p><h3>Step 1: Add an Artifact Source</h3><p>To add a Custom
    Artifact Source, do the following:</p><ol><li>In your Harness Application, open
    the Service where you want to use a Custom Artifact Source.</li><li>Click <strong>Add
    Artifact Source</strong>, and then click <strong>Custom Repository</strong>.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1553715561185/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>The
    <strong>Add Custom Artifact Source</strong> dialog appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1656397646051/screenshot-2022-06-28-at-11-54-17-am.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li></ol><p>Fill
    out the Add Custom Artifact Source dialog fields.</p><h3>Step 2: Source Type</h3><p>Select
    <strong>Custom</strong>.</p><h3>Step 3: Display Name</h3><p>Enter a name to identify
    this custom artifact source. You will use this name when picking the artifact
    builds and versions during deployment.</p><p></p><h3>Step 4: Script</h3><p>Enter
    a shell script that pulls the artifact from the custom repo to a file path on
    the Harness Delegate host.</p><p>You can leave the <strong>Script</strong> empty
    by not selecting <strong>Auto Collect Artifacts</strong>.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1656398498383/screenshot-2022-06-28-at-12-10-18-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div
    class="note-callout">You <u>cannot</u> use Harness <a href="/article/q78p7rpx9u-add-service-level-config-variables">Service
    Configuration</a> variables in the script.</div><p>The shell script you enter
    will query the custom artifact repository for your artifact, and output the result
    to a file on the Harness Delegate host using the environment variable <code>ARTIFACT_RESULT_PATH</code>,
    initialized by Harness. <code>ARTIFACT_RESULT_PATH</code> is a random, unique
    file path created on the Delegate by Harness.</p><div class="note-callout">You
    must delete the Artifact Source and re-add it to re-collect the Artifacts if the
    Artifact Source or its script information has been changed.</div><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1559078063312/image.png"/></figure><p>The
    script you enter should result in a JSON array, for example:</p><pre>{<br/>  &#34;items&#34;
    : [ {<br/>    &#34;id&#34; : &#34;bWF2ZW4tcmVsZWFzXXXXXXXXXXXXXkOGVmMzU2YWE0ZTliMmZlNDY&#34;,<br/>    &#34;repository&#34;
    : &#34;maven-releases&#34;,<br/>    &#34;format&#34; : &#34;maven2&#34;,<br/>    &#34;group&#34;
    : &#34;mygroup&#34;,<br/>    &#34;name&#34; : &#34;myartifact&#34;,<br/>    &#34;version&#34;
    : &#34;1.0&#34;,<br/>    &#34;assets&#34; : [ {<br/>      &#34;downloadUrl&#34;
    : &#34;http://nexus3.harness.io:8081/repository/maven-releases/mygroup/myartifact/1.0/myartifact-1.0.war&#34;,<br/>      &#34;path&#34;
    : &#34;mygroup/myartifact/1.0/myartifact-1.0.war&#34;,<br/>      &#34;id&#34;
    : &#34;bWF2ZW4tcmVsZWFzXXXXXXXXXXXXXkOGVmMzU2YWE0ZTliMmZlNDY&#34;,<br/>      &#34;repository&#34;
    : &#34;maven-releases&#34;,<br/>      &#34;format&#34; : &#34;maven2&#34;,<br/>      &#34;checksum&#34;
    : {<br/>        &#34;sha1&#34; : &#34;da39a3eXXXXXXXXXXXXX95601890afd80709&#34;,<br/>        &#34;md5&#34;
    : &#34;d41d8cdXXXXXXXXXXXXX998ecf8427e&#34;<br/>      }<br/>    }, {<br/>      &#34;downloadUrl&#34;
    : &#34;http://nexus3.harness.io:8081/repository/maven-releases/mygroup/myartifact/1.0/myartifact-1.0.war.md5&#34;,<br/>      &#34;path&#34;
    : &#34;mygroup/myartifact/1.0/myartifact-1.0.war.md5&#34;,<br/>      &#34;id&#34;
    : &#34;bWF2ZW4tcmVXXXXXXXXXXXXXYmE3YTE1OTYwNzUxZTE4ZjQ&#34;,<br/>      &#34;repository&#34;
    : &#34;maven-releases&#34;,<br/>      &#34;format&#34; : &#34;maven2&#34;,<br/>      &#34;checksum&#34;
    : {<br/>        &#34;sha1&#34; : &#34;67a74306XXXXXXXXXXXXX570f4d093747&#34;,<br/>        &#34;md5&#34;
    : &#34;74beXXXXXXXXXXXXX56088456&#34;<br/>      }<br/>....</pre><p>Harness will
    read the file, process it, and make the artifacts available for deployment in
    your Workflows and Pipelines.</p><p>The following example pulls an artifact from
    a repo and outputs it to the <code>ARTIFACT_RESULT_PATH</code>:</p><pre>curl -X
    GET &#34;http://nexus3.harness.io:8081/service/rest/v1/components?repository=maven-releases&#34;
    \<br/>-H &#34;accept: application/json&#34; &gt; ${ARTIFACT_RESULT_PATH}</pre><p>Here
    is an example using a Harness encrypted text secret for credentials:</p><pre>curl
    -u &#39;harness&#39; ${secrets.getValue(&#34;repo_password&#34;)} https://myrepo.example.io/todolist/json/
    &gt; ${ARTIFACT_RESULT_PATH}</pre><p>For more information, see <a href="/article/au38zpufhr-secret-management">Secrets
    Management</a>.</p><p>The expected output from the shell script is a JSON structure
    with an array, where every element represents an artifact object. You map the
    array object using <strong>Query Result to Artifact Mapping</strong>.</p><p></p><h3>Step
    5: Delegate Selectors</h3><p>Enter Delegate Selector names of one or more Harness
    Delegates to use when executing the script. The Delegates you identify should
    have network access to the custom repo in order to obtain any artifacts. See <a
    href="/article/h9tkwmkrm7-delegate-installation#delegate_selectors">Delegate Selectors</a>.</p><p></p><h3>Step
    6: Timeout</h3><p>Enter a time limit for the script to execute before failing
    the artifact retrieval.</p><p></p><h3>Step 7: Query Result to Artifact Mapping</h3><p>Use
    the <strong>Query Result to Artifact Mapping</strong> section to map the JSON
    key from your script to the artifact Build Number.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1580409391450/image.png"/></figure><p>In
    <strong>Artifacts Array Path</strong>, enter the root object of the array. For
    example, if your array object starts with <code>{&#34;items&#34; : [ {...},{...}</code>
    then enter <code>$.items</code> in <strong>Artifacts Array Path</strong>.</p><p>Next,
    in <strong>Build No. Path</strong>, enter the key to use as the buildNo, such
    as <code>version</code>.</p><p>Once mapped, you can reference the build number
    using the expression <code>${artifact.buildNo}</code>.</p><h4>Additional Attributes</h4><p>In
    <strong>Additional Attributes</strong>, you can map any additional values from
    your JSON array.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1559079048248/image.png"/></figure><p>For
    example, if a subsection of your array contains the download URL, such as <code>&#34;assets&#34;:[
    {&#34;downloadUrl&#34;...</code> you enter <code>assets[0].downloadUrl</code> in <strong>Path</strong> and <code>URL</code> in <strong>Name</strong>.
    Later in your Workflow you can reference the URL with <code>${artifact.metadata.URL}</code>.</p><p></p><h3>Option
    1: Use the Artifact Collection Command</h3><p>Typically, a Build Workflow is used
    in a Pipeline to perform standard CI (continuous integration) of an artifact and
    is followed by another Workflow to perform the deployment of the built artifact.</p><p>The
    way the Build Workflow performs CI is to run a <strong>Jenkins</strong> or <strong>Shell
    Script</strong> command to execute the build and store a variable with the build
    information, and then the <strong>Artifact Collection</strong> command collects
    the built artifact using the output variable and deposits it to the artifact repo.
    For information on the Jenkins and Shell Script commands, see <a href="https://docs.harness.io/article/5fzq9w0pq7-using-the-jenkins-command">Using
    the Jenkins Command</a> and <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Using
    the Shell Script Command</a>.</p><p>The following image shows the Jenkins step
    build and store a variable named <strong>Jenkins</strong>, and then the Artifact
    Collection step uses the Custom Artifact Source and the <code>${Jenkins.description}</code>
    variable to reference the new build.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1559086344154/image.png"/></figure><p>Now
    that the artifact is collected, a second Workflow can deploy the artifact.</p><div
    class="note-callout">The <code>${Jenkins.description}</code> requires that Jenkins
    have the <a href="https://wiki.jenkins.io/display/JENKINS/Description+Setter+Plugin"
    target="_blank">Description Setter</a> plugin installed. See <a href="https://docs.harness.io/article/5fzq9w0pq7-using-the-jenkins-command#harness_built_in_parameter_variables">Harness
    Built-in Parameter Variables</a> for Jenkins.</div><p></p><h3>Option 2: Use the
    Shell Script Command</h3><p>For any Workflow type, you can reference the Custom
    Artifact Source using the Shell Script command and a variable reference to the
    build number, <code>${artifact.buildNo}</code>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1559083275626/image.png"/></figure><p></p><h3>Step
    8: Select the Build for Deployment</h3><p>When you deploy the Workflows with a
    Service that uses a Custom Artifact Source, you can select which artifact build
    to select.</p><p>If the <a href="#step_4_script">Custom artifact source script</a>
    is empty, the deployment proceeds with the version you enter, and the same details
    are available in the artifact variable, which can be accessed using <code>${artifact.*}</code>.​​</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/jizsp5tsms/1559083418206/image.png"/></figure><h3>Artifactory
    Example</h3><p>This topic used Nexus for its examples, but another example might
    be helpful.</p><p>For example, here is a script for Artifactory:</p><pre>curl
    -X POST \<br/>  https://harness.jfrog.io/harness/api/search/aql \<br/>  -H &#39;Authorization:
    Basic xxxxxxx=&#39; \<br/>  -H &#39;Content-Type: text/plain&#39; \<br/>  -H &#39;cache-control:
    no-cache&#39; \<br/>  -d &#39;items.find({&#34;repo&#34;:{&#34;$eq&#34;:&#34;example-maven&#34;}})&#39;
    | jq &#39;.&#39; &gt; ${ARTIFACT_RESULT_PATH}</pre><p></p><p>For the remaining
    settings, you would use the following:</p><ul><li>Artifacts Array Path: <code>$.results</code></li><li>Build
    No. Path: <code>name</code></li><li>Additional Attributes:<ul><li>Path (Relative): <code>path</code></li><li>Name
    (Optional): <code>${path}</code></li></ul></li></ul><p>This example uses jq which
    is in most operating system packaging repositories. If you need to install it,
    see your operating system instructions. For Ubuntu, installation is:</p><pre class="hljs
    bash">sudo apt update<br/>sudo apt install jq</pre><p></p>'
  slug: custom-artifact-source
  tags:
  - ARTIFACT_RESULT_PATH
  - Build Number
  - Artifact Source
  - Custom Repository
  - Artifacts Array Path
  - artifact.buildNo
  - Jenkins
  - Shell Script
  - Jenkins.description
  is_live: true
