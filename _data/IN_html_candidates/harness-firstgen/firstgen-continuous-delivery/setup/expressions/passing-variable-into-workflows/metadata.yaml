type: article
article_id: revc37vl0f
user_id: mfr0nxh4be
category_id: w98t8pl547
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Passing Variables into Workflows and Pipelines from Triggers
slug: passing-variable-into-workflows
description: Pass variables from a Harness Trigger into a Harness Workflow or Pipeline,
  to be used during Workflow steps or configuration.
short_version: Use a Harness Trigger to pass variables into a Harness Workflow or
  Pipeline, for use in configuration or during Workflow execution.
tags:
- Trigger
- variable
- template
- namespace
- Workflow variable
- Git
- Workflow
- Pipeline
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-13T22:41:12.528344Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Passing Variables into Workflows and Pipelines from Triggers
  description: Pass variables from a Harness Trigger into a Harness Workflow or Pipeline,
    to be used during Workflow steps or configuration.
  short_version: Use a Harness Trigger to pass variables into a Harness Workflow or
    Pipeline, for use in configuration or during Workflow execution.
  body: '<p>You can pass values from a Harness Trigger into a Harness Workflow to
    be used during Workflow steps or configuration, and as part of a Pipeline.</p><p>This
    process can be valuable when you want to use information from the Trigger condition
    as parameters in your Workflow at runtime.</p><div class="tip-callout">For information
    on variables in Harness, see <a href="/article/9dvxcegm90-variables">Variables
    and Expressions in Harness</a>.</div><p>An example is using a Github or Bitbucket
    push or pull request as a Trigger condition and passing push or pull request information
    to a Workflow via the Trigger.</p><p>In the Workflow, you could take the branch
    name from the push or pull request and use it to create a namespace in a Helm
    chart, thereby creating a new Kubernetes namespace for each branch during deployment.</p><p>The
    Workflow can be templated (also called <em>templatized</em>) and each user that
    has a branch on the repo can initiate the Trigger with a push or pull request.
    For more information on using Workflows as templates, see <a href="https://docs.harness.io/article/m220i1tnia-workflow-configuration#template_a_workflow">Template
    a Workflow</a>.</p><h3>Permissions Required</h3><p>The <a href="/article/ven0bvulsj-users-and-permissions">Administer
    Other Account Functions</a> account permission is required to template the Environment
    setting in a Workflow.</p><h3>Passing Variables Overview</h3><p>To pass variable
    values from a Trigger into a Workflow, perform the following steps:</p><ol><li>Create
    a Workflow.</li><li>Add one or more text variables to the Workflow. You can also
    template the Workflow, thereby creating entity variables in <strong>Workflow Variables</strong>.</li><li>Use
    the variables in your Workflow steps or configuration.</li><li>Create a Trigger.</li><li>Select
    the Trigger condition, such as a Git pull request.</li><li>Select your Workflow
    as the target for the Trigger. This will expose the Workflow variables in your
    Trigger.</li><li>In the Trigger, use variable values from the Trigger condition
    to define the Workflow variables, such as values passed in from the Git pull request.</li><li>Use
    the Trigger URL to initiate the Trigger. For example, add the Trigger URL to the
    Git repo as a Webhook.</li></ol><p>These steps are demonstrated in detail below.</p><h3>Before
    You Begin</h3><ul><li><a href="/article/m220i1tnia-workflow-configuration">Add
    a Workflow</a></li><li><a href="/article/xerirloz9a-add-a-trigger-2">Add a Trigger</a></li><li><a
    href="/article/9dvxcegm90-variables">Variables and Expressions in Harness</a></li></ul><h3>Set
    Up Workflow with Variables</h3><p>The following procedure creates Workflow variables
    in an existing Workflow.</p><p>You can also add variables for Workflow entities
    such as Service, Environment, and Infrastructure Definition using the template
    option, described in <a href="#using_templated_workflow_variables">Using Templated
    Workflow Variables</a>.</p><p>To set up Workflow variables, do the following:</p><ol><li>In
    a Workflow, click the pencil icon next to <strong>Workflow Variables.</strong>
    <strong>Workflow Variables</strong> appear.</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1589820395397/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p><strong>Workflow
    Variables</strong> have the following settings.</p><table><tbody><tr><td><p><strong>Field</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p><strong>Variable
    Name</strong></p></td><td><p>Enter a name for the variable. When the variable
    is used in a Trigger or elsewhere in the Harness Application, the variable name
    is used.</p><p>The syntax for variable names is <code>${workflow.variables.</code><em><code>name</code></em><code>}</code>.
    For example, if you created a variable named <strong>Url</strong>, the variable
    name is <code>${workflow.variables.Url}</code>.</p></td></tr><tr><td><p><strong>Type</strong></p></td><td><p>Select
    <strong>Text</strong>.</p></td></tr><tr><td><p><strong>Default Value</strong></p></td><td><p>Enter
    a value for the variable. A value is not mandatory. If you will be placing a value
    in the variable via a Trigger, you will typically leave <strong>Default Value</strong>
    empty.</p></td></tr><tr><td><p><strong>Required</strong></p></td><td><p>Select
    this option to enforce that a value for the variable is provided before the Workflow
    is executed.</p></td></tr><tr><td><p><strong>Fixed</strong></p></td><td><p>Select
    this option if the value of the variable specified here must not be changed. If
    you will be placing a value in the variable via a Trigger, you will not enable
    <strong>Fixed</strong>.</p></td></tr><tr><td><p><strong>Description</strong></p></td><td><p>Provide
    a description of the variable that lets others know its purpose and requirements.</p></td></tr></tbody></table><ol><li>When
    you have added your variables, click <strong>SUBMIT</strong>. The <strong>Workflow
    Variables</strong> section of the Workflow displays the new variables.</li><li>Use
    the variables in your Workflow.</li><li>Next, create a Trigger to execute this
    Workflow and provide a value for the variables, as described below.</li></ol><h3>Using
    Templated Workflow Variables</h3><p>In most cases where you want to pass variables
    into a Workflow from a Trigger, you will template a Workflow, creating Workflow
    variables for its primary settings.</p><p>Once you create a Workflow, you can
    go back to its settings and click the template button (<strong>T</strong>).</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1589822043305/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>This
    creates a Workflow variable for that setting, and any dependent settings. For
    example, when you template a Workflow Environment, its Infrastructure Definitions
    are also templated.</p><p>Here is a Workflow with templated Environment and Infrastructure
    Definitions, as well as two regular Workflow variables.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1589822202620/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    use entity variables in a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step, you follow the standard Workflow variable syntax: <code>${workflow.variables.</code><em><code>name</code></em><code>}</code>.
    For example, if you created an Environment entity variable, the variable expression
    is <code>${workflow.variables.Environment}</code>.</p><h3>Populate Workflow Variables
    in a Trigger</h3><p>The following procedure creates a Trigger that executes a
    Workflow and populates its Workflow variables. In this example, we use Git release
    information to populate the variables.</p><p>To create a Trigger that populates
    Workflow variables, do the following:</p><ol><li>Click <strong>Setup</strong>.</li><li>Click
    the Application that contains the Workflow or Pipeline you want to Trigger.</li><li>Click
    <strong>Triggers</strong>.</li><li>Click <strong>Add Trigger</strong>. The <strong>Trigger</strong>
    dialog appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1540852259564/image.png"/></figure></li><li>In
    <strong>Name</strong>, enter name for the Trigger that helps others understand
    its function, and click <strong>Next</strong>.</li><li>In <strong>Condition</strong>,
    select the condition that will execute the Trigger. The actions available to the
    Trigger depend on which condition you select. For this example, click <strong>On
    Webhook Event</strong>.</li><li>In <strong>Repository Type</strong>, click <strong>Github</strong>
    or <strong>BitBucket</strong>. The variables you can enter in <strong>Actions</strong>
    depend on which Git provider you select.</li><li>In <strong>Event Type</strong>,
    select <strong>On Release</strong>. The event type you select determines what
    variables you can use in <strong>Actions</strong>.</li><li>In <strong>Action</strong>,
    select <strong>Published</strong>.</li><li>Click <strong>Next</strong>. The <strong>Actions</strong>
    settings appear.</li><li>In <strong>Execution Type</strong>, select <strong>Workflow</strong>.
    You can also select <strong>Pipeline</strong>. If you select <strong>Pipeline</strong>,
    the Workflow variables for all of the Workflows in the Pipeline will be available.</li><li>In
    <strong>Execute Workflow</strong>. select the Workflow you created. The <strong>Workflow
    Variables</strong> section displays the variables you defined in the Workflow.</li><li>For
    Workflow variables, click in the <strong>Value</strong> field. The available options
    are listed. For templated Workflow variables (for example, Environment), scroll
    to the bottom to see custom values.<br/>These are the builtin variables you can
    use to obtain information from the Git release.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1589833349084/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Select
    a variable to use. For example, if you had a Harness Environment named after each
    Git release tag and you wanted to use the name of the tag to pick the matching
    Environment, you could select the variable named <code>${release.tag_name}</code>
    to obtain the branch name.<br/>Whenever you specify an Environment you also have
    to specify an Infrastructure Definition.</li><li>When you are done, click <strong>Next</strong>,
    and then click <strong>SUBMIT</strong>.</li></ol><p>The final step is to take
    the Trigger&#39;s <strong>Github Webhook</strong> URL and add it to your repo.</p><ol><li>In
    <strong>Triggers</strong>, in the listing for your Trigger, click <strong>Github
    Webhook</strong> (or <strong>Bitbucket Webhook</strong>).<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1540855439002/image.png"/></figure></li><li>Copy
    the URL and use it in Github to execute the Trigger. Ensure the Webhook events
    (pushes, pull requests, releases, etc) are selected in your repo.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/revc37vl0f/1540855629105/image.png"/></figure><h3>Push
    and Pull Request Variables</h3><p>The following list of Git push and pull request
    variables are available in a Trigger, and can be passed to the Workflows (and
    Pipelines) executed by the Trigger.</p><p>For information on any of the values
    in the GitHub or Bitbucket response payload, see the <a href="https://developer.github.com/v3/"
    target="_blank">GitHub REST API V3</a> and <a href="https://developer.atlassian.com/bitbucket/api/2/reference/resource/"
    target="_blank">Bitbucket API</a>. You can see an example payload from GitHub
    at <a href="https://developer.github.com/v3/activity/events/types/#webhook-payload-example"
    target="_blank">Webhook payload example</a>.</p><p>The expressions used in <code>${...}</code>
    evaluate to values in the Git repo provider JSON. They will be different for each
    Git provider.</p><p>Enter an expression that maps to the JSON element you want
    to reference.</p><p>The following table provides some examples for Bitbucket.</p><table><tbody><tr><td><p><strong>Variables</strong></p></td><td><p><strong>Description
    of Values</strong></p></td></tr><tr><td><p><code>${ref}</code></p></td><td><p>Obtain
    the ref string from the push or pull request.</p></td></tr><tr><td><p><code>${ref.split(‘/’)[2]}</code></p></td><td><p>Splits
    a ref string into its substrings based on the / delimiter and limits the number
    of strings returned to two. For more information on the Java split() method see
    <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-">split</a>
    in the Java docs.</p></td></tr><tr><td><p><code>${commits[0].id}</code></p></td><td><p>Commit
    ID of commit.</p></td></tr><tr><td><p><code>${head_commit.id}</code></p></td><td><p>Head
    ID of commit.</p></td></tr><tr><td><p><code>${repository.name}</code></p></td><td><p>Repo
    name.</p></td></tr><tr><td><p><code>${repository.id}</code></p></td><td><p>Repo
    ID.</p></td></tr><tr><td><p><code>${pullrequest.id}</code></p></td><td><p>Pull
    request ID. For example: <code>&#34;id&#34;: 222571186</code>.</p></td></tr><tr><td><p><code>${pullrequest.title}</code></p></td><td><p>Output
    title.</p></td></tr><tr><td><p><code>${pullrequest.fromRef.branch.name}</code></p></td><td><p>The
    head branch where the changes are on.</p></td></tr><tr><td><p><code>${pullrequest.toRef.branch.name}</code></p></td><td><p>The
    branch where the changes will be merged.</p></td></tr><tr><td><p><code>${pullrequest.fromRef.repository.project.name}</code></p></td><td><p>The
    repo project where the changes are on.</p></td></tr><tr><td><p><code>${pullrequest.toRef.repository.project.name}</code></p></td><td><p>The
    repo project where the changes will be merged.</p></td></tr><tr><td><p><code>${pullrequest.fromRef.repository.owner.username}</code></p></td><td><p>The
    username for the repo where the changes are on.</p></td></tr><tr><td><p><code>${pullrequest.toRef.repository.owner.username}</code></p></td><td><p>The
    username for the repo where the changes will be merged.</p></td></tr><tr><td><p><code>${pullrequest.fromRef.commit.hash}</code></p></td><td><p>The
    <code>merge_commit_sha</code> for the commit from the branch.</p></td></tr><tr><td><p><code>${pullrequest.toRef.commit.hash}</code></p></td><td><p>The
    <code>merge_commit_sha</code> for the commit to the merged branch.</p></td></tr></tbody></table><div
    class="note-callout">You can also add text before and after the variable. You
    simply type in the text, such as <code>${pull_request.id}-sometext</code>.</div><p></p><h3>Passing
    Variables Along a Pipeline</h3><p>When you have multiple Workflows in a Pipeline,
    you can pass variables into each Workflow in the Pipeline via the Trigger for
    the Pipeline, and you can pass in variables to be used in every Workflow in the
    Pipeline.</p><p>For example, let&#39;s say you wanted all the Workflows in a Pipeline
    to use the same <strong>Environment</strong> and <strong>​​​​Infrastructure Definition</strong>,
    and the names of the Environment and ​Infrastructure Definition are based on a
    repo branch name. When a Trigger executes the Pipeline in response to a Git push
    event, you want the Trigger to pass in the branch name to each Workflow&#39;s
    <strong>Environment</strong> and <strong>Infrastructure Definition</strong>.</p><p>First,
    you could create an <strong>Environment</strong> and <strong>Infrastructure Definition</strong>
    using the branch name for the <strong>Environment</strong> and the branch name
    plus a suffix <code>-catalog</code> for the <strong>Infrastructure Definition</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568242156473/image.png"/></figure><p>In
    a Workflow, open its setup dialog and click the [T] next to Environment and Infrastructure
    Definition to create Workflow variables for those entities:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568243404962/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>You can ensure that the
    variables are named <code>Environment</code> and <code>ServiceInfra</code> or
    <code>InfraDefinition</code>. Click <strong>Submit</strong> and then look at the
    Workflow Variables section for the new variables:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568242610885/image.png"/></figure><p>You
    can clone this Workflow to make additional Workflows for your Pipeline, and then
    change each Workflow as needed, leaving the entity variables for <strong>Environment</strong>
    and <strong>Infrastructure Definition</strong> the same.</p><p>Next, you create
    a Pipeline and add each Workflow. When you select the Workflow in the Pipeline,
    the <strong>Workflow Variables</strong> are required because they are entity settings.
    You then enter the same variable names you used in the Workflows, <code>${Environment}</code>
    and <code>${InfraDefinition}</code>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1568244925810/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Lastly,
    you create a Trigger for the Pipeline. When you select the Pipeline in the Trigger,
    the required <strong>Workflow Variables</strong> appear. You will only see two
    variables for all of the Workflows in the Pipeline because they used the same
    names.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1568245251367/image.png"/></figure><p>Next,
    you can enter variables in the <strong>Value</strong> column for each variable,
    such as <code>${ref.split(‘/’)[2]}</code> to use a repo branch name for the <strong>Environment</strong>
    variable and <code>${ref.split(‘/’)[2]}-catalog</code> to use a repo branch name
    and add the suffix <code>-catalog</code> for <strong>InfraDefinition</strong>:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568245171513/image.png"/></figure><p>Now,
    when the Trigger is executed, it will pass the variable values to the <strong>Environment</strong>
    and <strong>Infrastructure Definition</strong> settings in all Workflows in the
    Pipeline.</p><h3>See Also</h3><p><a href="https://docs.harness.io/article/xerirloz9a-add-a-trigger-2#triggers_and_queued_workflows">Triggers
    and Queued Workflows</a></p>'
  slug: passing-variable-into-workflows
  tags:
  - Trigger
  - variable
  - template
  - namespace
  - Workflow variable
  - Git
  - Workflow
  - Pipeline
  is_live: true
