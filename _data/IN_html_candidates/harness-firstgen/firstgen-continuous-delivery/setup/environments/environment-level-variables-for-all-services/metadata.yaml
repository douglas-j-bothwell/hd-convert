type: article
article_id: ki525qfbs0
user_id: mfr0nxh4be
category_id: 1eqg76ac72
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Create Environment-level Variables and Files for All Services
slug: environment-level-variables-for-all-services
description: This topic describes how to create a Harness Environment-level variable
  that is not set in a Service, but is available in any Workflow using the Environment.
  This is helpful when you have want Enviro…
short_version: This topic describes how to create a Harness Environment-level variable
  that is not set in a Service, but is available in any Workflow using the Environment.
  This is helpful when you have want Enviro…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:01.634015Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create Environment-level Variables and Files for All Services
  description: ""
  short_version: ""
  body: '<p>This topic describes how to create a Harness Environment-level variable
    that is not set in a Service, but is available in any Workflow using the Environment.
    </p><p>This is helpful when you have want Environment-specific variables that
    will apply to all Services, but don&#39;t want to set up Config Vars in every
    Service. </p><p>For example, let&#39;s say you have many Services using Tomcat
    that all connect to a backend database. The JDBC port will be different for different
    Environments, such as QA/SIT/UAT/PROD. Instead of defining a Service-level JDBC_PORT
    variable for every Service, you can just create one JDBC_PORT variable in each
    Environment. When each Environment is used in a Workflow, it supplies a different
    value for the JDBC_PORT variable.</p><p>In this topic:</p><ul><li> <a href="#before_you_begin">Before
    You Begin</a></li><li> <a href="#undefined">Supported Platforms and Technologies</a></li><li>
    <a href="#step_1_create_a_service_configuration_override_for_all_services">Step
    1: Create a Service Configuration Override for All Services</a></li><li> <a href="#option_variable_override">Option:
    Variable Override</a></li><li> <a href="#option_file_override">Option: File Override</a></li><li>
    <a href="#step_2_use_the_variable_or_file_in_a_workflow">Step 2: Use the Variable
    or File in a Workflow</a></li><li> <a href="#review_example_deployment">Review:
    Example Deployment</a></li><li> <a href="#configure_as_code">Configure As Code</a></li></ul><h3>Before
    You Begin</h3><ul><li> <a href="/article/aza65y4af6-built-in-variables-list">Built-in
    Variables List</a></li><li> <a href="/article/4m2kst307m-override-service-files-and-variables-in-environments">Override
    a Service Configuration in an Environment</a></li><li> <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add
    Service Config Variables</a></li><li> <a href="/article/iwtoq9lrky-add-service-level-configuration-files">Add
    Service Config Files</a></li></ul><h3 id="undefined">Supported Platforms and Technologies</h3><p>See
    <a href="/article/220d0ojx5y-supported-platforms">Supported Platforms and Technologies</a>.</p><h3>Step
    1: Create a Service Configuration Override for All Services</h3><ol><li>In a Harness
    Application, click <strong>Environments</strong>.</li><li>In an <strong>Environment</strong>,
    in <strong>Service Configuration Overrides</strong>, click <strong>Add Configuration
    Overrides</strong>.<br/>The <strong>Service Configuration Override</strong> settings
    appear.</li><li>In <strong>Service</strong>, select <strong>All Services</strong>
    (at the bottom of the list). You can also select a specific Service. You simply
    aren&#39;t overriding its Service Config Variables or Files.</li><li>In <strong>Override
    Type</strong>, select <strong>Variable Override</strong> or <strong>File Override</strong>.</li></ol><h3>Option:
    Variable Override</h3><ol><li>In <strong>Configuration Variables</strong>, enter
    a name for the variable.<br/>This is the name you will use to reference this variable
    later using the expression <code>${serviceVariable.ConfigurationVariablesName}</code>
    or <code>${environmentVariable.ConfigurationVariablesName}</code>.</li><li>In
    <strong>Type</strong>, select <strong>Text</strong> or <strong>Encrypted Text</strong>.</li><li>In
    <strong>Override Value</strong>, enter the value for the variable or select/add
    a new Encrypted Text variable.</li><li>Click <strong>Submit</strong>.</li></ol><h3>Option:
    File Override</h3><ol><li>Click <strong>Choose File</strong>, and then select
    the file to add.<br/>To select a Harness <a href="/article/nt5vchhka4-use-encrypted-file-secrets">Encrypted
    Text file</a>, click <strong>Encrypt File</strong>, and then select the file.</li><li>In
    <strong>Relative File Path</strong>, enter the name of the file. You can also
    enter the path where it will be placed on the target host(s).<br/>This is the
    name you will use to reference this file later using the expression <code>${configFile.getAsString(&#34;RelativeFilePathName&#34;)}</code>.</li><li>Click
    <strong>Submit</strong>.</li></ol><h3>Step 2: Use the Variable or File in a Workflow</h3><ol><li>In
    a new or existing Workflow, select the Environment in the Workflow&#39;s settings.</li><li>Add
    a step to the Workflow that will use the Environment. For example, a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step.</li><li>Reference the Environment variable using an expression.</li></ol><p>For
    Variable Overrides, use the following for unencrypted or encrypted variables:
    <code>${serviceVariable.ConfigurationVariablesName}</code> or <code>${environmentVariable.ConfigurationVariablesName}</code>.</p><p>For
    File Overrides, use the following for unencrypted or encrypted files:</p><ul><li><code>${configFile.getAsString(&#34;RelativeFilePathName&#34;)}</code>
    — standard text string.</li><li><code>${configFile.getAsBase64(&#34;RelativeFilePathName&#34;)}</code>
    — Base64 encoded.</li></ul><h3>Review: Example Deployment</h3><p>Let&#39;s look
    at an example where encrypted and unencrypted variables and files.</p><p>Here
    is an Environment with 4 Environment-level variables and files:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/ki525qfbs0/1608165736356/image.png"/></figure><p>Here
    is a Shell Script step in a Workflow referencing them:</p><pre>echo &#34;Encrypted
    text Env var: &#34; ${serviceVariable.encryptedText}<br/><br/>echo &#34;Unencrypted
    text Env var: &#34; ${serviceVariable.footext}<br/><br/>echo &#34;Encrypted text
    Env var: &#34; ${environmentVariable.encryptedText}<br/><br/>echo &#34;Unencrypted
    text Env var: &#34; ${environmentVariable.footext}<br/><br/>cat &lt;&lt;EOF<br/>Encrypted
    file Env var:<br/>${configFile.getAsString(&#34;encryptedFile&#34;)}<br/>EOF<br/>cat
    &lt;&lt;EOF<br/>Unencrypted file Env var:<br/>${configFile.getAsString(&#34;license&#34;)}<br/>EOF</pre><p>When
    you deploy the Workflow, the output shows the variables and file contents:</p><pre>Executing
    command ...<br/>Encrypted text Env var:  **************<br/>Unencrypted text Env
    var:  bar<br/>Encrypted text Env var:  **************<br/>Unencrypted text Env
    var:  bar<br/><br/>Encrypted file Env var:<br/>this is a file secret<br/><br/>Unencrypted
    file Env var:<br/>this is a secret<br/>Command completed with ExitCode (0)</pre><p></p><h3>Configure
    As Code</h3><p>To see how to configure the settings in this topic using YAML,
    configure the settings in the UI first, and then click the YAML editor button
    (<span style="color:#fb9e00" data-hd-color="#fb9e00"><strong>&lt;/&gt;</strong></span>).</p>'
  slug: environment-level-variables-for-all-services
  tags: []
  is_live: true
