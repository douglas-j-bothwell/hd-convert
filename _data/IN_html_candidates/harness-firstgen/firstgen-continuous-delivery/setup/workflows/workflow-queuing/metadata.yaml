type: article
article_id: hui1k7seo1
user_id: x5amubrz4l
category_id: a8jhf8hizv
author:
  name: Michael Katz
  profile_image: https://www.gravatar.com/avatar/17fb3fc86ca54443de0da47ef350d8f0?d=mm&s=150
title: Workflow Queuing
slug: workflow-queuing
description: How Harness queues Workflows to prevent conflicts on shared target infrastructure.
  Includes instructions for overriding default queuing behavior.
short_version: How Harness queues Workflows to prevent conflicts on shared target
  infrastructure. Includes instructions for overriding default queuing behavior.
tags:
- constraint
- capacity
- queue
- FIFO
- Concurrency Strategy
- lock
- Service Infrastructure
- Service Infrastructure Mapping
- resource
- Acquire Resource Lock
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:22:10.666363Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Workflow Queuing
  description: How Harness queues Workflows to prevent conflicts on shared target
    infrastructure. Includes instructions for overriding default queuing behavior.
  short_version: How Harness queues Workflows to prevent conflicts on shared target
    infrastructure. Includes instructions for overriding default queuing behavior.
  body: '<p></p><p>This topic outlines how Harness queues Workflows, to prevent conflicts
    when two or more Workflows simultaneously deploy the same Harness Service to the
    same Harness Infrastructure Definition.</p><p>In this topic:</p><ul><li> <a href="#before_you_begin">Before
    You Begin</a></li><li> <a href="#overview">Overview</a></li><li> <a href="#limitations">Limitations</a></li><li>
    <a href="#using_concurrency_strategy_to_control_queuing">Using Concurrency Strategy
    to Control Queuing</a></li><li> <a href="#synchronization_not_required_best_practices">Synchronization
    Not Required Best Practices</a></li><li> <a href="#how_harness_locks_infrastructure">How
    Harness Locks Infrastructure</a></li><li> <a href="#acquiring_resource_locks">Acquiring
    Resource Locks</a></li><li> <a href="#queuing_in_action">Queuing in Action</a></li><li>
    <a href="#queuing_with_infrastructure_provisioners">Queuing with Infrastructure
    Provisioners</a></li><li> <a href="#next_steps">Next Steps</a></li></ul><p></p><h3>Before
    You Begin</h3><p>Ensure that you understand the following:</p><ul><li> <a href="/article/eb3kfl8uls-service-configuration">Services</a></li><li>
    <a href="/article/m220i1tnia-workflow-configuration">Workflows</a></li><li> <a
    href="/article/v3l3wqovbe-infrastructure-definitions">Infrastructure Definitions</a></li></ul><h3>Overview</h3><p>When
    multiple Harness Workflows simultaneously deploy to the same infrastructure, this
    can generate conflicts. To prevent such conflicts, Harness normally places a <em>resource
    lock</em> on the infrastructure, and queues the Workflows in FIFO (First In, First
    Out) order.</p><p>You can override this behavior, as covered <a href="#concurrency_strategy">below</a>.
    Queuing is particularly valuable for Pipelines that execute multiple Workflows
    in parallel.</p><p></p><h3>Limitations</h3><p></p><div class="note-callout">Currently,
    the following queue limitation is behind a Feature Flag. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature. Feature Flags can only
    be removed for Harness Professional and Essentials editions. Once the feature
    is released to a general audience, it is available for Trial and Community Editions.</div><p></p><p>Harness
    allows a maximum of <strong>20 Workflow executions</strong> in the queue that
    locks an infrastructure. Subsequent Workflows using that infrastructure will fail
    if the queue is full.</p><p>The queue limitation is to prevent a misconfigured
    Trigger or other execution mechanism from overloading your queue and preventing
    important deployments.</p><h3>Using Concurrency Strategy to Control Queuing</h3><p>By
    default, Harness Workflows have their <strong>Concurrency Strategy</strong> set
    to <strong>Acquire lock on the targeted service infrastructure</strong>. This
    is the setting that enables queuing for shared infrastructure.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572496325788/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p></p><p>To exempt a Workflow
    from queuing behavior, click the pencil icon to open the <strong>Concurrency Strategy</strong> dialog
    shown here. Set the <strong>Concurrency Control</strong> drop-down to <strong>Synchronization
    not required</strong>, and click <strong>Submit</strong>.</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572496935990/image.png" style="max-height:60%;max-width:60%"
    data-hd-height="60%" data-hd-width="60%"/></figure><p></p><h3>Synchronization
    Not Required Best Practices</h3><p>The golden rule with <strong>Synchronization
    Not Required</strong> is: Only use a concurrency strategy of <strong>Synchronization
    Not Required</strong> when it does not matter if multiple Workflows are running
    concurrently.</p><p>For example, if a Workflow simply hits an HTTP endpoint to
    post a message and message order does not matter, or for some other operation
    that is already an encapsulated transaction.</p><p>When to use <strong>Acquire
    lock on the targeted service infrastructure</strong>:</p><ul><li>If concurrently
    running Workflows are acting on the same infrastructure. Running Workflows like
    this in synch can cause interference in many ways.</li><li>For any Workflow that
    modifies state over time to reach a new state, it must have a concurrency strategy
    that causes the Workflows to queue rather than overlap.</li></ul><h3>How Harness
    Locks Infrastructure</h3><p>Here is an example of how infrastructure locking works.
    In this Harness <a href="/article/v3l3wqovbe-infrastructure-definitions">Infrastructure Definition</a>,
    the Kubernetes cluster&#39;s <strong>Namespace</strong> field is populated by
    the variable <code>${workflow.variables.namespace}</code>:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574120419279/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>In
    this Kubernetes Workflow, we define the corresponding <code>namespace</code> variable:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574120509827/image.png"
    style="max-height:100%;max-width:100%" data-hd-height="100%" data-hd-width="100%"/></figure><p>In
    the <strong>Workflow Variables</strong> dialog, we&#39;ve assigned the variable
    no default value:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574117730613/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>As
    we begin deployment of this Workflow, we assign the variable the value <code>target</code>:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574124634288/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>Once
    the Workflow deploys, the <strong>Details</strong> panel confirms that a lock
    has been placed on the resulting <code>namespace: target</code> and Harness Service
    combination:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574124891114/image.png"/></figure><div
    class="note-callout">Harness locks on the unique <strong>combination</strong>
    of namespace and Harness Service. We do not lock the Service from being deployed
    to another namespace. Harness simply makes the Workflow wait if there is another
    Workflow running using the same Service and the same namespace together.</div><p>If
    we open the details page for the Infrastructure Definition that we started with,
    it displays a newly created Infrastructure Mapping for the <code>target</code>
    namespace we specified:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qo1ldtxlyj/1574125215608/image.png"
    style="max-height:100%;max-width:100%" data-hd-height="100%" data-hd-width="100%"/></figure><p></p><h3>Acquiring
    Resource Locks</h3><p>When pending Workflows are contending for shared infrastructure,
    Harness uses the above mechanism to place the Workflows in a <em>resource lock
    queue</em>. The first-launched Workflow gets a <em>resource lock</em> on this
    infrastructure, which it holds until its deployment is resolved. This temporarily
    blocks other Workflows from using the infrastructure—only one Workflow at a time
    can have a lock on a given infrastructure.</p><p>When contending for shared infrastructure,
    most Workflows will therefore display an <strong>Acquire Resource Lock</strong> step
    in Harness&#39; Deployments page:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572555289153/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>This
    step appears even if no queue is present, because it&#39;s specified by Harness&#39;
    <strong>Acquire lock on the targeted service infrastructure</strong> <a href="#concurrency_strategy">default
    setting</a>. There are two exceptions:</p><ul><li>No <strong>Acquire Resource
    Lock</strong> will appear in Workflows of <em>Build</em> deployment type.</li><li>No <strong>Acquire
    Resource Lock</strong> step will appear in Workflows that have been <a href="#concurrency_strategy">configured
    to ignore queueing</a>.</li></ul><p>Harness seeks to acquire a Resource Lock only
    once per Workflow. The lock&#39;s scope is the current Workflow. The <strong>Acquire
    Resource Lock</strong> step occurs in the first deployment or setup phase that <em>follows</em> any
    <strong>Pre‑Deployment</strong> phase or step.</p><p>This example, using a Pivotal
    Cloud Foundry Blue/Green Workflow, shows the <strong>Acquire Resource Lock</strong>
    step&#39;s typical position in a deployment:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572560207702/image.png"
    style="max-height:100%;max-width:100%" data-hd-height="100%" data-hd-width="100%"/></figure><p></p><h3>Queuing
    in Action</h3><p>Let&#39;s look at a full example of how queuing works. Assume
    that we have two similar Harness Kubernetes Workflows, <code>gke demo</code> and
    <code>gke demo-template-clone</code>. Both deploy to the same infrastructure,
    because they share the same <a href="/article/v3l3wqovbe-infrastructure-definitions">Infrastructure
    Definition</a>.</p><p>When both Workflows are deployed simultaneously, Harness
    might initiate the deployment of <code>gke demo</code> slightly before <code>gke demo‑template‑clone</code>.
    This scenario applies to a Pipeline whose stages run these Workflows in parallel,
    but in that order:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572564316405/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>If
    we examine the <code>gke demo-template-clone</code> Workflow&#39;s Deployments
    page, we might initially see something like this:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572491149996/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p>This deployment is paused
    at its <strong>Acquire Resource Lock</strong> step. The <strong>Details</strong>
    panel shows why:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572491405084/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>The
    <code>gke demo-template-clone</code> deployment is second in the <strong>Resource
    Lock Queue</strong>, so it currently has <strong>BLOCKED</strong> status.</p><p>Meanwhile,
    the <code>gke demo</code> is first in the queue. If we immediately switch to its
    Deployments page, we might see something like this:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572492590462/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p>This Workflow&#39;s <strong>Acquire
    Resource Lock</strong> step has completed—it has acquired the lock. The <strong>Details</strong>
    panel confirms that this first-in-queue deployment has <strong>ACTIVE</strong>
    status:</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572492721846/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>So
    the <code>gke demo</code> Workflow can now proceed through completion:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572492979752/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p>Once the <code>gke demo</code>
    Workflow has completed deployment, this clears the queue. Therefore, the <code>gke demo‑template‑clone</code>
    can now acquire the lock, and proceed to deploy:</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572493095301/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p></p><h3>Queuing with Infrastructure
    Provisioners</h3><p>Workflows incorporating <a href="/article/o22jx8amxb-add-an-infra-provisioner">Infrastructure Provisioners</a>
    are queued the same way as Workflows based on predefined infrastructure. Infrastructure
    Provisioners commands are always added in the Workflow&#39;s <strong>Pre‑Deployment</strong> phase.
    This sets up the new infrastructure, enabling Harness to properly queue and lock
    deployments to that infrastructure in the following phase.</p><p></p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572497316001/image.png" style="max-height:100%;max-width:100%"
    data-hd-height="100%" data-hd-width="100%"/></figure><p></p><p></p><h3>Next Steps</h3><ul><li>To
    more precisely synchronize multiple Workflows within a Pipeline, use <a href="/article/m220i1tnia-workflow-configuration#barriers">Barriers</a>.</li><li>To
    queue deployments account-wide, add a Resource Constraint. See <a href="/article/nxtsta7d3t-resource-restrictions">Resource
    Restrictions</a>.</li></ul><p></p>'
  slug: workflow-queuing
  tags:
  - constraint
  - capacity
  - queue
  - FIFO
  - Concurrency Strategy
  - lock
  - Service Infrastructure
  - Service Infrastructure Mapping
  - resource
  - Acquire Resource Lock
  is_live: true
