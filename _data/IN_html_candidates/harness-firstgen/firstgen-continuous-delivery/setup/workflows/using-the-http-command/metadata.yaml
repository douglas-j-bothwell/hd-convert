type: article
article_id: m8ksas9f71
user_id: mfr0nxh4be
category_id: a8jhf8hizv
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Using the HTTP Command
slug: using-the-http-command
description: Add HTTP commands to a Harness Workflow to run HTTP methods that contain
  URLs, headers, assertions, and variables.
short_version: Add HTTP commands to a Harness Workflow to run HTTP methods that contain
  URLs, headers, assertions, and variables.
tags:
- HTTP
- Template Library
- HTTP method
- assertion
- Workflow variable
- variable
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-11-15T22:52:08.573184Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Using the HTTP Command
  description: Add HTTP commands to a Harness Workflow to run HTTP methods that contain
    URLs, headers, assertions, and variables.
  short_version: Add HTTP commands to a Harness Workflow to run HTTP methods that
    contain URLs, headers, assertions, and variables.
  body: '<p>You can use the HTTP step to run HTTP methods containing URLs, methods,
    headers, assertions, and variables.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/m8ksas9f71/1610522074620/screenshot-2021-01-13-at-12-20-32-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    this topic:</p><ul><li><a href="https://docs.harness.io/article/m8ksas9f71-using-the-http-command#create_http_command">Create
    HTTP Command</a></li><li><a href="https://docs.harness.io/article/m8ksas9f71-using-the-http-command#header_capability_check">Header
    Capability Check</a></li><li><a href="https://docs.harness.io/article/m8ksas9f71-using-the-http-command#reserved_words_for_export_variable_names">Reserved
    Words for Export Variable Names</a></li><li><a href="https://docs.harness.io/article/m8ksas9f71-using-the-http-command#next_steps">Next
    Steps</a></li></ul><h3>Create HTTP Command</h3><ol><li>In your <strong>Workflow</strong>,
    click <strong>Add Step</strong>. The <strong>Add Step</strong> settings appear.</li><li>To
    create a new HTTP command, click <strong>HTTP</strong>. To use an existing HTTP
    command, select a Template Library and link the HTTP command template to your
    Workflow. For this example, we will create a new HTTP command.<br/><br/>The <strong>HTTP</strong>
    settings appear.</li></ol><p>The following table describes the HTTP command options.</p><p></p><table><tbody><tr><td><p><strong>Field</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p><strong>Name</strong></p></td><td><p>Enter
    the name for the HTTP command.</p></td></tr><tr><td><p><strong>URL</strong></p></td><td><p>Enter
    the URL for the HTTP call.</p></td></tr><tr><td><p><strong>Method</strong></p></td><td><p>Select
    the <a href="https://restfulapi.net/http-methods/#summary" target="_blank">HTTP
    method</a>.</p></td></tr><tr><td><p><strong>Headers</strong></p></td><td><p>Enter
    the media type for the message. For example, if you are using the GET method,
    the headers are used to specify the GET response body message type Harness will
    check for.</p><ol><li>In <strong>Headers</strong>, click <strong>Add</strong>.</li><li>In
    <strong>Key</strong>, enter the key. For example, <code>Token, Variable:</code>.</li><li>In
    <strong>Value</strong>, enter the value. For example, <code>${secrets.getValue(&#34;aws-playground_AWS_secret_key&#34;)}</code>,
    <code>var1,var2:var3</code>.</li></ol><p>You can enter multiple header entries.
    Click <strong>Add</strong> to add <strong>Key</strong> and <strong>Value</strong>
    fields.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/m8ksas9f71/1611135948676/screenshot-2021-01-20-at-3-15-21-pm.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></td></tr><tr><td><p><strong>Body</strong></p></td><td><p>Enter
    the message body (if any) of the HTTP message.</p></td></tr><tr><td><p><strong>Assertion</strong></p></td><td><p>The
    assertion is used to validate the incoming response. For example, if you wanted
    to check the health of an HTTP connection, you could use the assertion <strong>${httpResponseCode}==200</strong>.</p><p>To
    see the available expressions, simply enter <code>${</code> in the Assertions
    field. The HTTP expressions are described in the <a href="/article/9dvxcegm90-variables#http">HTTP</a>
    section of <a href="/article/9dvxcegm90-variables">Variables and Expressions in
    Harness</a>.</p><p>You can also use JSON and XML functors as described in <a href="/article/wfvecw3yod-json-and-xml-functors">JSON
    and XML Functors</a>. For example:</p><p><code>json.select(&#34;status&#34;, ${httpResponseBody})
    == &#34;success&#34;</code></p></td></tr><tr><td><p><strong>Timeout</strong></p></td><td><p>Enter
    a value, in seconds, for how long Harness should wait for a response from the
    server you specified in <strong>URL</strong>.</p></td></tr><tr><td><p><strong>Process
    Additional Variables</strong></p></td><td><p>Create variables using built-in Harness
    expressions.</p><p>You can then publish these are output variables using the <strong>Publish
    output in the context</strong> settings. Whatever is configured in <strong>Process
    Additional Variables</strong> can be made available in the context defined in
    <strong>Publish output in the context</strong>.</p><p>In <strong>Name</strong>,
    enter a name for the variable. In <strong>Expression</strong>, enter an expression
    that obtains some value. Harness supports these functors and methods:</p><ul><li>JSON
    Path:<ul><li><code>select()</code>. Example: <code>${json.select(&#34;path-in-response&#34;,
    httpResponseBody)}</code></li><li><code>object()</code>. Example: <code>${json.object(httpResponseBody).item}</code></li><li><code>list()</code>.
    Example: <code>{json.list(\&#34;store.book\&#34;, httpResponseBody).get(2).isbn}</code></li></ul></li><li>XPath:<ul><li><code>select()</code>.
    Example: <code>${xml.select(&#34;/bookstore/book[1]/title&#34;, httpResponseBody)}</code></li></ul></li></ul><p>For
    details, see <a href="/article/wfvecw3yod-json-and-xml-functors">JSON and XML
    Functors</a>.</p><p>See <a href="/article/9dvxcegm90-variables#variable_expression_name_restrictions">Variable
    Expression Name Restrictions</a>.</p></td></tr><tr><td><p><strong>Publish output
    in the context</strong></p></td><td><p>Select this option to create a variable
    containing the content of a variable specified in <strong>Process Additional Variables</strong>.</p><p>in
    <strong>Publish Variable Name</strong>, enter a unique name to define the output
    context. You will use this name to reference the variable elsewhere.</p><p>For
    example, if the name of a variable in <strong>Process Additional Variables</strong>
    is <code>name</code> the <strong>Publish</strong> <strong>Variable Name</strong> is <code>httpoutput</code>,
    you would reference it with <code>${context.httpoutput.name}</code>.</p><p>Here
    is the HTTP step:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/m8ksas9f71/1593035411112/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>And
    here is a Shell Script step referencing the published variable using <code>${context.httpoutput.name}</code>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/m8ksas9f71/1593035471592/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>In
    <strong>Scope</strong>, select <strong>Pipeline</strong>, <strong>Workflow</strong>,
    or <strong>Phase</strong>. The output variable are available within the scope
    you set here.</p><p>The scope you select is useful for preventing variable name
    conflicts. You might use a Workflow with published variables in multiple pipelines,
    so scoping the variable to <strong>Workflow</strong> will prevent conflicts with
    other Workflows in the Pipeline.</p></td></tr><tr><td><p><strong>Delegate Selectors</strong></p></td><td><p>You
    can use Selectors to select which Harness Delegates to use when executing the
    HTTP step. Enter the Selectors of the Delegates you want to use.</p><p>You can
    also use <a href="/article/9dvxcegm90-variables">Harness variable expressions</a>.
    For example, if you have a Workflow variables named delegate, you can enter <code>$(workflow.variables.delegate)</code>.
    When you deploy the Workflow, you can provide a value for the variable that matches
    a Delegate Selector.</p><p>Harness will use Delegates matching the Selectors you
    select.</p><p>If you use one Selector, Harness will use any Delegate that has
    that Selector.</p><p>If you select two Selectors, a Delegate must have both Selectors
    to be selected. That Delegate might also have other Selectors, but it must have
    the two you selected.</p><div class="warning-callout">If your Workflow Infrastructure
    Definition&#39;s Cloud Provider is a Harness <a href="/article/l68rujg6mp-add-kubernetes-cluster-cloud-provider">Kubernetes
    Cluster Cloud Provider</a> or <a href="/article/wt1gnigme7-add-amazon-web-services-cloud-provider">AWS
    Cloud Provider</a> that uses Delegate Selectors, do not add a Selector to the
    Workflow step. The Workflow is already targeted to a specific Delegate.</div></td></tr><tr><td><p><strong>Use
    Delegate Proxy</strong></p></td><td><p>Select this option to explicitly use the
    delegate proxy settings. For details, see <a href="https://docs.harness.io/article/h9tkwmkrm7-delegate-installation#delegate_proxy_settings">Delegate
    Proxy Settings</a>.</p><ul><li>If the Delegate is not using any proxy, selecting
    this option does not enable the proxy settings.</li><li>If you have specified
    an URL that is set up to bypass proxy settings on the Delegate, then it throws
    an error.</li></ul></td></tr></tbody></table><p></p><p></p><h3>Header Capability
    Check</h3><p></p><div class="note-callout">Currently, this feature is behind the
    Feature Flag <code>HTTP_HEADERS_CAPABILITY_CHECK</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature. </div><p></p><p>When
    Harness runs an HTTP step and connects to a service, it checks to make sure that
    an HTTP connection can be established.</p><p>Some services require that HTTP headers
    are included in connections. Without the headers, the HTTP connections fail and
    simple HTTP verification cannot be performed.</p><p>Harness performs an HTTP header
    capability check for any header requirements on the target service.</p><p>If the
    target host server requires headers and you do not include headers in the <strong>Headers</strong>
    setting of the HTTP step, the Harness Delegate will fail the deployment with the
    error <code>No eligible Delegates could perform this task</code> (<code>error
    400</code>).</p><p>Simply add the required headers in <strong>Headers</strong>,
    and then run the deployment. Adding the headers will prevent the 400 error.</p><h3>Reserved
    Words for Export Variable Names</h3><p>The following words cannot be used for
    names in <strong>Publish Variable Name:</strong></p><ul><li>arm</li><li>ami</li><li>aws</li><li>host</li><li>setupSweepingOutputAppService</li><li>terragrunt</li><li>terraform</li><li>deploymentInstanceData</li><li>setupSweepingOutputEcs</li><li>deploySweepingOutputEcs</li><li>runTaskDeploySweepingOutputEcs</li><li>setupSweepingOutputAmi</li><li>setupSweepingOutputAmiAlb</li><li>ecsAllPhaseRollbackDone</li><li>Azure
    VMSS all phase rollback</li><li>k8s</li><li>pcfDeploySweepingOutput</li><li>CloudFormationCompletionFlag</li><li>terraformPlan</li><li>terraformApply</li><li>terraformDestroy</li><li>Elastigroup
    all phase rollback</li><li>setupSweepingOutputSpotinst</li><li>setupSweepingOutputSpotinstAlb</li></ul><h3>Next
    Steps</h3><ul><li><a href="/article/ygi6d8epse-use-templates">Use Templates</a></li><li><a
    href="/article/1fjrjbau7x-capture-shell-script-step-output">Using the Shell Script
    Command</a></li></ul><p></p><p></p><p></p><p></p>'
  slug: using-the-http-command
  tags:
  - HTTP
  - Template Library
  - HTTP method
  - assertion
  - Workflow variable
  - variable
  is_live: true
