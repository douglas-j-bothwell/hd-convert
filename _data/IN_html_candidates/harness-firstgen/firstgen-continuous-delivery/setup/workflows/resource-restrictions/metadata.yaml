type: article
article_id: nxtsta7d3t
user_id: mfr0nxh4be
category_id: a8jhf8hizv
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Control Resource Usage
slug: resource-restrictions
description: To queue the number of resources Harness requests during a deployment,
  you can place capacity limits on the resources Harness requests.
short_version: To queue resources, you can place capacity limits on the resources
  Harness requests during deployments.
tags:
- capacity
- throttle
- resource constraint
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-05-16T19:53:43.45476Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Control Resource Usage
  description: To queue the number of resources Harness requests during a deployment,
    you can place capacity limits on the resources Harness requests.
  short_version: To queue resources, you can place capacity limits on the resources
    Harness requests during deployments.
  body: '<p>To queue the number of resources Harness requests during a deployment,
    and prevent multiple Workflows, Workflow Phases, or Pipelines requesting the same
    deployment environment resources at the same time, you can place capacity limits
    on the resources Harness requests.</p><p>For example, a deployment cloud environment
    (AWS, GCP, Azure, etc) might limit host access to 5 at a time. You can use Resource
    Guard to ensure that the Workflow only requests access to 5 at the same time during
    deployment.</p><p>Another common example is deploying multiple artifacts to a
    single Kubernetes namespace because the same Workflow is deployed by two people
    simultaneously. To avoid collision, and queue deployments, you can set a maximum
    capacity of one request to the namespace at a time.</p><p>Resource Guards are
    Account-wide. This ensures that if a Resource Guard is placed in one Workflow,
    it will restrict any other Workflow in the Account from using the resource until
    it is safe to use.</p><h3>Control Resource Usage</h3><p>Resource Guards are set
    up at the Harness Account level, and may be used throughout all Applications.</p><p>To
    create a Resource Guard, do the following:</p><ol><li>In Harness, click <strong>Setup</strong>.</li><li>In
    <strong>Account</strong>, click the vertical ellipsis, and then click <strong>Resource
    Guard</strong>.</li></ol><p>The <strong>Resource Restrictions</strong> settings
    appear.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/nxtsta7d3t/1558565650598/image.png"/></figure><p></p><ol><li
    style="counter-increment:li 2" start="3">Click <strong>Add Constraint</strong>.</li><li>Fill
    out the constraint fields:</li></ol><ul><li><strong>Resource Constraint</strong>
    - Enter a name for your resource constraint. You will use this name to select
    the Resource Constraint in a Workflow.</li><li><strong>Capacity</strong> - The
    maximum number of resources that may be consumed simultaneously.</li><li><strong>Strategy</strong>
    - Choose <strong>FIFO</strong> if you want the resource requests to be selected
    in the order they arrived. Choose <strong>ASAP</strong> if you want Harness to
    select the first pending resource request that matches the number of available
    resources.<br/>As an <strong>ASAP</strong> example, imagine you have two resource
    requests: the first needs 2 hosts, and the second request needs 1 host. When 1
    host becomes available, the second request is given the host as its request matches
    the number of available resources first.</li></ul><p>The <strong>Current Usage</strong>
    value identifies if the resource restriction is applied a Workflow.</p><h3>Apply
    Constraints in Workflows</h3><p>You can use your Resource Guards anywhere they
    are needed in a Workflow to queue resource requests.</p><div class="note-callout">Only
    add Resource Guards to Workflow sections where the resource you reference can
    be obtained. For example, if you add Resource Guards to the <strong>Pre-deployment
    Steps</strong>. then Services and Infrastructure Definition cannot be referenced
    as Harness has not selected those at this stage of the Workflow.</div><p>To apply
    a Resource Guards to a Workflow, do the following:</p><ol><li>In a Workflow, click
    <strong>Add Step</strong>. The <strong>Resource Constraint</strong> dialog appears.</li><li>Fill
    out the constraint settings and click <strong>SUBMIT</strong>. The settings are
    described below.</li></ol><h4>Resource Constraint ID</h4><p>Select the <strong>Resource
    Guard</strong> to use at this stage of the Workflow. Note the capacity of the
    restriction. This is the maximum number of resources that may be consumed simultaneously.</p><h4>Required
    Resource Usage</h4><p>Enter the number of resources that are required at this
    step in the Workflow. If the number is more than the Capacity of the Resource
    Guard you selected, the Workflow will remain at this step until the required resource
    usage has been reached. This is how you queue resource usage.</p><p>For example,
    if the <strong>Capacity</strong> is 4 and the <strong>Required Resource Usage</strong>
    is 5, Harness will use 4 resources simultaneously and wait until 1 resource becomes
    free so that it can use it for the 5th required resource.</p><h4>Unit</h4><p>The
    resource unit is any value that can identify a resource uniquely. You can use
    Harness built-in variables by entering <code>$</code> and selecting from the list.</p><div
    class="note-callout">If you leave <strong>Unit</strong> empty, the Resource Constraint
    will be applied to all resources across your account.</div><p>For example, to
    queue the services deployed to a Kubernetes namespace, you can enter <code>${infra.kubernetes.namespace}</code>
    in <strong>Unit</strong> and set the Resource Restraint Capacity to <strong>1</strong>.</p><p>To
    queue the services deployed to a particular Harness Infrastructure Definition
    that uses the namespace, you would enter <code>${infra.kubernetes.infraId}-${infra.kubernetes.namespace}</code>
    in <strong>Unit</strong>.</p><p>The following image shows the <strong>Resource
    Constraint</strong> step in the Workflow with <strong>Unit</strong> set to <code>${infra.kubernetes.infraId}-${infra.kubernetes.namespace}</code>
    and the results of the deployed Workflow:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/nxtsta7d3t/1609178745612/image.png"/></figure><h4>Scope</h4><div
    class="note-callout">Currently, the <strong>Pipeline</strong> option is behind
    the feature flag <code>RESOURCE_CONSTRAINT_SCOPE_PIPELINE_ENABLED</code>. Contact
    <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable
    the feature. </div><p>Scope this constraint to a Workflow, Workflow Phase, or
    Pipeline.</p><p>The scope determines what must be completed before the resource
    can be used by another Workflow, Workflow Phase, or Pipeline.</p><p>For example,
    let&#39;s look at selecting <strong>Pipeline</strong> in <strong>Resource Constraint</strong>.
    Once selected, this Workflow is added to Pipeline A and Pipeline B. </p><p>Pipeline
    A is run and then Pipeline B is run immediately afterwards. Pipeline B will not
    be able to use the same deployment environment resources as Pipeline A until Pipeline
    A is fully executed. Pipeline B is queued until Pipeline A is complete. Once Pipeline
    A completes, Pipeline B proceeds.</p><h4>Timeout</h4><p>Enter how long the Resource
    Guard should run before failing the step. If the timeout is reached before the
    Resource Guard is able to process all resource requests, it will fail the Workflow
    and rollback will occur.</p><p></p>'
  slug: resource-restrictions
  tags:
  - capacity
  - throttle
  - resource constraint
  is_live: true
