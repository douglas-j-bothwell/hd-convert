type: article
article_id: s3emmcgotl
user_id: mfr0nxh4be
category_id: emle05cclq
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: 2 - Services for PCF
slug: services-for-pcf
description: The topic describes how to create a Harness Application with a PCF Service
  containing your artifact and PCF manifest and variable files.
short_version: The topic describes how to create a Harness Application with a PCF
  Service containing your artifact and PCF manifest and variable files.
tags: []
show_toc: true
is_private: false
is_published: false
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:22:10.757176Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: 2 - Services for PCF
  description: The topic describes how to create a Harness Application with a PCF
    Service containing your artifact and PCF manifest and variable files.
  short_version: The topic describes how to create a Harness Application with a PCF
    Service containing your artifact and PCF manifest and variable files.
  body: '<p>The topic describes how to create a Harness Application with a PCF Service
    containing your artifact and PCF manifest and variable files.</p><p>In this topic:</p><ul><li><a
    href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#add_a_harness_application">Add
    a Harness Application</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#add_the_pcf_service">Add
    the PCF Service</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#add_an_artifact">Add
    an Artifact</a></li><li><a href="#docker_support_in_artifact_sources">Docker Support
    in Artifact Sources</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#manifest_and_variable_files">Manifest
    and Variable Files</a><ul><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#file_requirements">File
    Requirements</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#required_values">Required
    Values</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#overriding_files_and_values">Overriding
    Files and Values</a></li></ul></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#inline_manifest_and_variable_files">Inline
    Manifest and Variable Files</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#local_manifest_and_variable_files">Local
    Manifest and Variable Files</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#remote_manifest_and_variable_files">Remote
    Manifest and Variable Files</a></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#configuration_variables_and_files">Configuration
    Variables and Files</a><ul><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#using_config_variables_in_manifests">Using
    Config Variables in Manifests</a></li></ul></li><li><a href="https://docs.harness.io/article/s3emmcgotl-services-for-pcf#next_step">Next
    Step</a></li></ul><h3>Add a Harness Application</h3><p>A Harness Application represents
    your PCF apps, their deployment pipelines, and all the building blocks for those
    pipelines.</p><p>To add a Harness Application for PCF, do the following:</p><ol><li>Ensure
    you have set up a PCF Cloud Provider connection in Harness, as described in <a
    href="/article/whwnovprrb-infrastructure-providers#pivotal_cloud_foundry_pcf">Add
    Cloud Providers</a>. This connection will log into the foundation.</li><li>Ensure
    you have set up an Artifact Server connection in Harness, as described in <a href="/article/7dghbx1dbl-configuring-artifact-server">Add
    Artifact Servers</a>. You will use the Artifact Server to pull the artifact for
    your app at deployment runtime.</li><li><strong>Create a Harness Application.</strong>
    The PCF deployment release process is managed within a Harness Application, along
    with its Environment, Workflows, Pipelines, etc. For more information, see <a
    href="/article/bucothemly-application-configuration">Application Components</a>.<ol><li>In
    Harness, click <strong>Setup</strong>, and then click <strong>Add Application</strong>.
    The <strong>Application</strong> dialog appears.</li><li>Enter a name for your
    Application, such as <strong>PCF_App</strong>, and click <strong>SUBMIT</strong>.
    The Application is created.</li><li>Click your Applicationâ€™s name. The Application
    entities appear. Next, add the PCF Service to your Application, including its
    artifact sources, manifest, and configuration variables and files.</li></ol></li></ol><h3>Add
    the PCF Service</h3><p>Services represent your PCF apps. You define where the
    artifacts for those apps come from, the PCF manifest, and configuration variables
    for those apps.</p><p>First, we&#39;ll create the Harness Service for PCF, and
    then in further sections we&#39;ll discuss the artifact Harness will deploy, and
    the manifest files that will define the application and routes.</p><ol><li>In
    your Harness Application, click <strong>Services</strong>. On the <strong>Services</strong>
    page, click <strong>Add Service</strong>. The <strong>Service</strong> dialog
    appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572039418444/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    <strong>Name</strong>, enter a name for your service. Typically, the name is the
    same as the app you are going to deploy.</li><li>In <strong>Artifact Type</strong>,
    select <strong>Pivotal Cloud Foundry</strong>. Once you select an artifact type,
    Harness will only present configuration options related to that type. When you
    are finished, the dialog will look something like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572039477932/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>SUBMIT</strong>. The new Service is added.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572040222471/image.png"/></figure><p>Next,
    we&#39;ll add your application artifact to the Service.</p><h3>Add an Artifact</h3><p>The
    artifact source for your Harness Service is taken from one of the Artifact Servers
    set up in <a href="/article/7dghbx1dbl-configuring-artifact-server">Add Artifact
    Servers</a> and is compatible with PCF.</p><p>For this example, we&#39;ll use
    an AWS S3 artifact source. Harness supports the following PCF artifact servers/types:</p><ul><li>Docker
    Registry</li><li>Jenkins</li><li>AWS S3</li><li>Google Container Service (GCS)</li><li>Amazon
    Elastic Container Registry (Amazon ECR)</li><li>Artifactory (includes Docker)</li><li>Nexus</li><li>Bamboo</li><li>SMB</li><li>SFTP</li><li>Custom
    Repository</li></ul><p>To use one these Artifact Sources, you need to add a Harness
    Artifact Server for it. See <a href="/article/7dghbx1dbl-configuring-artifact-server">Add
    Artifact Servers</a> or <a href="/article/jizsp5tsms-custom-artifact-source">Using
    Custom Artifact Sources</a>.</p><p>To add an application artifact, do the following:</p><ol><li>In
    your Service, click <strong>Add Artifact Source</strong>, and select the artifact
    source.</li><li>Configure the settings for the Artifact Source. For our AWS S3
    example, the dialog will look something like this:</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572041697488/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><div class="note-callout">The
    Metadata Only option indicates that Harness stores the metadata in the Harness
    Cloud. During runtime, Harness passes the metadata to the target host(s) where
    it is used to obtain the artifact. Ensure that the target host has network connectivity
    to the Artifact Server. For more information, see <a href="/article/qluiky79j8-service-types-and-artifact-sources">Service
    Types and Artifact Sources</a>.</div><ol><li style="counter-increment:li 2" start="3">Click
    <strong>Submit</strong>. The artifact is added to the Service.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572042170849/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>Next we will describe our
    application and PCF routes using the Service <strong>Manifests</strong> section.</p><h3>Docker
    Support in Artifact Sources</h3><p>The following Harness Artifact Sources support
    Docker:</p><ul><li>Artifactory</li><li>Google Container Registry (GCR)</li><li>Amazon
    Elastic Container Registry (Amazon ECR)</li><li>Docker Registry</li></ul><p>For
    Artifactory, ensure you select the Use Docker Format option:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/s3emmcgotl/1590774410644/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>PCF
    treats Artifactory as private registry. Harness supports no authentication and
    Basic authentication. You can use either in your Artifactory repos.</p><p>For
    more information on how PCF supports Docker, see <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/push-docker.html#registry"
    target="_blank">Push a Docker Image from a Registry</a> from Pivotal.</p><h3>Manifest
    and Variable Files</h3><div class="note-callout">Manifests provide consistency
    and reproducibility, and help automate in deploying apps. For more information
    about manifest files, see <a href="https://docs.pivotal.io/pivotalcf/2-4/devguide/deploy-apps/manifest.html"
    target="_blank">Deploying with Application Manifest</a> from Pivotal.</div><p>When
    you create the PCF Service, the <strong>Manifests</strong> section is created
    and the default manifest.yml and vars.yml files are added.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572045993003/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>Harness uses a manifest
    file (manifest.yml) and variables file (vars.yml) for defining the PCF application,
    instances, and routes. Both files must be in YAML format and can use the <strong>.yaml</strong>
    or <strong>.yml</strong> extension.</p><p>Let&#39;s look at these files:</p><ul><li><strong>manifest.yml</strong>
    - This file describes your application, host requirements, and routes. For example,
    the default name, memory limit, and number of instances. You can hardcode values
    or use variables defined in vars.yml.<br/>This file follows the PCF app manifest
    requirements described in <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html"
    target="_blank">Deploying with App Manifests</a> and <a href="https://docs.pivotal.io/pivotalcf/2-4/devguide/deploy-apps/manifest.html#minimal-manifest"
    target="_blank">Example Manifest</a> from Pivotal.</li><li><strong>vars.yml</strong>
    - This file is used to maintain variables used in the manifest.yml file.</li></ul><p>Here
    is an example showing how the variables in <strong>manifest.yml</strong> are given
    values in <strong>vars.yml</strong>:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572044493122/image.png"/></figure><div
    class="note-callout">You can also use variables for partial values. For example,
    you can specify <code>host</code> in your vars.yml file and <code>- route: ((host)).env.com</code>
    in your manifest.yml file.</div><p>PCF Manifest deployments are a common PCF strategy.
    You can learn more about it in <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest.html"
    target="_blank">Deploying with App Manifests</a> from Pivotal.</p><p>Harness supports
    all of the typical features of PCF manifests, as described in <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest.html"
    target="_blank">Deploying with App Manifests</a> from Pivotal, but to deploy multiple
    apps, you will need to use multiple Harness Services.</p><p>These manifest.yml
    and vars.yml files can be added to the Harness Service in the following ways:</p><ul><li><strong>Inline</strong>
    - The default method is to use the files in the Harness editor and edit them inline.</li><li><strong>Local</strong>
    - You can upload local files to replace the inline files. Once they are uploaded,
    you edit them inline.</li><li><strong>Remote</strong> - You can link to files
    in a remote Git repo and Harness will pull them at runtime. You can link to the
    latest files by branch or by commit ID.</li></ul><h4>File Requirements</h4><p>Harness
    allows one manifest file and one or more variable files in <strong>Manifests</strong>.
    At runtime, Harness will evaluate the files to identify which is the manifest
    file and which are the variable files.</p><p>If there are other files in <strong>Manifests</strong>
    that are not manifest or variable files, Harness will ignore these other files.</p><h4>Required
    Values</h4><p>The definition of your app in manifest.yml and vars.yml is the same
    in Harness as it is in standard PCF app manifests, as described in <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest-attributes.html"
    target="_blank">App Manifest Attribute Reference</a> from Pivotal.</p><p>The comments
    in the default manifest.yml file identify the required fields and their placeholders,
    but here is a summary of the defaults:</p><ul><li><strong>name</strong> - The
    name of the PCF app.</li><li><strong>memory</strong> - The memory requirements
    of the app. The default memory limit is 1G. You might want to specify a smaller
    limit to conserve quota space if you know that your app instances do not require
    1G of memory.</li><li><strong>instances</strong> - The number of app instances.</li><li><strong>random-route</strong>
    - Generate a unique route and avoid name collisions. See <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest-attributes.html#random-route"
    target="_blank">random-route</a> from Pivotal.</li><li><strong>routes</strong>
    - Provide multiple HTTP and TCP routes. Each route for this app is created if
    it does not already exist. See <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest-attributes.html#routes"
    target="_blank">routes</a> from Pivotal.</li></ul><p>Here is the default manifest.yml:</p><pre>applications:<br/>-
    name: ((PCF_APP_NAME))<br/>  memory: ((PCF_APP_MEMORY))<br/>  instances : ((INSTANCES))<br/>  random-route:
    true</pre><p>Here are the values for placeholders in vars.yml:</p><pre>PCF_APP_NAME:
    ${app.name}__${service.name}__${env.name}<br/>PCF_APP_MEMORY: 350M<br/>INSTANCES:
    1</pre><p>You can use all of the PCF manifest attributes supported in typical
    PCF manifests, as described in <a href="https://docs.pivotal.io/platform/application-service/2-7/devguide/deploy-apps/manifest-attributes.html#optional-attributes"
    target="_blank">Application Attributes</a> from Pivotal.</p><h4>Overriding Files
    and Values</h4><p>The manifest.yml and vars.yml files can be overwritten in the
    Harness Environments that use the Service. Each of of the values in the manifest.yml
    and vars.yml files can also be overwritten.</p><p>Details on overwriting files
    and values is covered in the <a href="/article/ur8gjgayds-pcf-environments">PCF
    Environments</a> topic.</p><h3>Inline Manifest and Variable Files</h3><p>The default
    manifest.yml and vars.yml files can be edited inline in the Harness editor.</p><p>Simply
    click <strong>Edit</strong>, make any changes, and then click <strong>Save</strong>.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572290202546/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p></p><h3>Local Manifest and
    Variable Files</h3><p>You can upload manifest.yml and vars.yml files from your
    local drive into your Harness Service.</p><p>Harness allows one manifest file
    and one or more variable files. At runtime, Harness will evaluate the files to
    identify which is the manifest file and which are the variable files.</p><p>From
    the options menu, click <strong>Upload Local Manifest Files</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572291857584/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>The <strong>Upload Local
    Manifest Files</strong> dialog appears.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572291677393/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Choose
    the local folder or files using your file explorer or drag and drop the files
    into the dialog. The selected files are listed.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572291980190/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Submit</strong> to add the files.</p><p>If you are uploading a manifest.yml
    or vars.yml file into the same folder with the default manifest.yml and vars.yml
    files, you will see the following warning.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572292265840/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Simply
    click <strong>Overwrite All</strong> and then <strong>Submit</strong> to replace
    the default files.</p><h3>Remote Manifest and Variable Files</h3><p>Once you have
    set up a Harness <a href="/article/ay9hlwbgwa-add-source-repo-providers">Source
    Repro Provider</a> using your remote Git repo, you can use PCF files from the
    remote repo in your PCF Service <strong>Manifests</strong> section.</p><p>To use
    remote files, do the following:</p><ol><li>Create a <a href="/article/ay9hlwbgwa-add-source-repo-providers">Harness
    Source Repro Provider</a> that connects to the branch where your remote files
    are located.<br/><br/>When you set up the Source Repro Provider, you specify the
    repo URL and branch name:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572298148272/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    the PCF Service, in <strong>Manifests</strong>, click the options button, and
    then click <strong>Link Remote Manifests</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572298373582/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>The
    <strong>Remote Manifests</strong> dialog appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572298421272/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    <strong>Source Repository</strong>, select the Source Repo Provider you set up,
    and that points to the remote Git repo containing your manifest files.</li><li>In
    <strong>Commit ID</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit ID</strong>.<br/><br/><strong>Which one should I pick?</strong> Make your
    selection based on what you want to happen at runtime. If you want to always use
    the latest files from a repo branch at runtime, select <strong>Latest from Branch</strong>.
    If you want to use the files as they were at a specific commit, select <strong>Specific
    Commit ID</strong>. Any changes from additional commits will not be used at runtime.
    To use changes from additional commits, you will have to update commit ID.</li><li>If
    you selected <strong>Latest from Branch</strong>, specify the <strong>Branch</strong>
    and <strong>File/Folder</strong> path to the remote manifest files.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572299408376/image.png"/></figure></li><li>If
    you selected <strong>Specific Commit ID</strong>, specify the <strong>Commit ID</strong>
    and <strong>File/Folder</strong> path to the remote manifest files.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572299544004/image.png"/></figure></li></ol><p>Click
    <strong>Submit</strong>. Your remote git repo is added as the source for <strong>Manifests</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572299963631/image.png"/></figure><h3>Configuration
    Variables and Files</h3><p>Configuration variables and files enable you to specify
    information in the Service that can be referenced in other parts of the Harness
    Application.</p><p>For example, you can specify a variable in the Service once,
    and then use it in multiple Workflows without having to manage multiple values.</p><ul><li><strong>Config
    Variables</strong> - You can create Service variables to use in your Manifests
    files, and in Environments and Workflows. Any Service variables are added as environment
    variables when the app is created in the Pivotal environment (<strong>cf push</strong>).
    Later, when you want to reference a Service variable, you use the syntax <code>${serviceVariable.var_name}</code>.</li><li><strong>Config
    Files</strong> - You can upload config files with variables to be used when deploying
    the Service. Later, when you want to reference a Service config file, you use
    the syntax <code>${configFile.getAsString(&#34;fileName&#34;)}</code> for unencrypted
    text files and <code>${configFile.getAsBase64(&#34;fileName&#34;)}</code> for
    encrypted text files.</li></ul><p>For details on configuration variables and files,
    see <a href="https://docs.harness.io/article/eb3kfl8uls-service-configuration#configuration_variables_and_files">Configuration
    Variables and Files</a>.</p><h4>Using Config Variables in Manifests</h4><p>You
    can use <strong>Config Variables</strong> in your Service in place of values in
    manifest.yml and vars.yml.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572290698365/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    can then overwrite this variable in a Harness Environment&#39;s <strong>Service
    Configuration Overrides</strong>, and the new value is used when the Service and
    Environment are used for deployment.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572290802933/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Overwriting
    Service variables is described in more detail in PCF Environments.</p><h3>Next
    Step</h3><ul><li><a href="/article/ur8gjgayds-pcf-environments">3 - PCF Environments</a></li></ul><p></p>'
  slug: services-for-pcf
  tags: []
  is_live: true
