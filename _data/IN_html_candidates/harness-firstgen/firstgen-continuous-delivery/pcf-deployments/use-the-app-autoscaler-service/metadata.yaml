type: article
article_id: 4xh8u7l86h
user_id: wz6xkfcc9i
category_id: emle05cclq
author:
  name: Chakravarthy Tenneti
  profile_image: https://www.gravatar.com/avatar/790db061bb8f8fb094e4d4b19a390f3b?d=mm&s=150
title: Use the App Autoscaler Service
slug: use-the-app-autoscaler-service
description: The App Autoscaler plugin has first-class support in Harness, enabling
  you to ensure app performance and control the cost of running apps.
short_version: The App Autoscaler plugin has first-class support in Harness, enabling
  you to ensure app performance and control the cost of running apps.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-01-28T19:46:40.701633Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Use the App Autoscaler Service
  description: The App Autoscaler plugin has first-class support in Harness, enabling
    you to ensure app performance and control the cost of running apps.
  short_version: The App Autoscaler plugin has first-class support in Harness, enabling
    you to ensure app performance and control the cost of running apps.
  body: '<div class="tip-callout">Harness supports Cloud Foundry CLI version 6 and
    7. Support for version 7 is behind a Feature Flag. You can read about it in <a
    href="/article/jxsna1a0mi-add-container-images-for-pcf-deployments">Add Container
    Images for Tanzu Deployments</a>.</div><p></p><div class="note-callout">Harness
    supports <a href="https://network.pivotal.io/products/pcf-app-autoscaler#/releases/491414"
    target="_blank">App Autoscaler Plugin release 2.0.233</a>.</div><p>The <a href="https://docs.pivotal.io/application-service/2-7/appsman-services/autoscaler/using-autoscaler-cli.html"
    target="_blank">App Autoscaler plugin</a> has first-class support in Harness,
    enabling you to ensure app performance and control the cost of running apps.</p><p>In
    this topic:</p><ul><li><a href="#before_you_begin">Before You Begin</a></li><li><a
    href="#visual_summary">Visual Summary</a></li><li><a href="#review_requirements_for_app_autoscaler">Review:
    Requirements for App Autoscaler</a></li><li><a href="#step_1_define_the_app_autoscaler_service_in_your_manifest_file">Step
    1: Define the App Autoscaler Service in Your Manifest File</a></li><li><a href="#step_2_bind_the_app_autoscaler_service_to_your_app">Step
    2: Bind the App Autoscaler Service to Your App</a></li><li><a href="#step_3_add_your_app_autoscaler_manifest_file">Step
    3: Add Your App Autoscaler Manifest File</a></li><li><a href="#step_4_create_the_app_autoscaler_service_using_cf_command">Step
    4: Create the App Autoscaler Service Using CF Command</a></li><li><a href="#step_5_enable_app_autoscaler_in_the_app_setup_step">Step
    5: Enable App Autoscaler in the App Setup Step</a></li><li><a href="#option_use_an_existing_app_autoscaler_service">Option:
    Use an Existing App Autoscaler Service</a></li></ul><p></p><h3>Before You Begin</h3><ul><li>See
    <a href="/article/nh4afrhvkl">Connect to Your Target Tanzu Account</a>.</li><li>See
    <a href="/article/r1crlrpjk4">Define Your Tanzu Target Infrastructure</a>.</li></ul><p></p><h3>Visual
    Summary</h3><p>The following diagram illustrates how you can define, bind, create,
    and use App Autoscaler with the TAS apps deployed by Harness.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/4xh8u7l86h/1623879771177/clean-shot-2021-06-16-at-14-42-28.png"/></figure><h3>Review:
    Requirements for App Autoscaler</h3><div class="note-callout">Ensure that the
    Harness Delegate(s) used for your deployment have the correct version of the CF
    CLI installed. See <a href="/article/8tsb75aldu-install-cloud-foundry-cli-6-and-7-on-harness-delegates">Install
    Cloud Foundry CLI Versions on the Harness Delegate</a>.</div><p>If you are using
    the App Autoscaler plugin, then autoscaling is applied <u>after</u> the final
    phase of deployment.</p><p>Once all phases are completed and the number of old
    version instances has reached the desired number, then the final number of instances
    will be as configured as defined by the Autoscaler.</p><p>For example, if a deployment
    results in 4 new instances, but Autoscaler is set to min 8 and max 10, Harness
    will set the desired number of instances to the minimum value. So the total number
    of new instances is 8.</p><p>To use App Autoscaler, you must have the following
    requirements:</p><p>The App Autoscaler plugin must be installed on the Delegate(s)
    that will execute TAS deployments. The steps in this section assume that the App
    Autoscaler plugin is installed on your Delegates.</p><p>Because of limitations
    in the CF CLI, the best way to install the App Autoscaler plugin on the Delegate
    is the following:</p><ol><li>Download the release from the <a href="https://network.pivotal.io/products/pcf-app-autoscaler"
    target="_blank">Pivotal App Autoscaler CLI Plugin</a> page.</li><li>Store the
    release in a repo in your network that can be accessed by the Harness Delegate.
    This will allow you to use cURL to copy the release to the Delegate host(s).</li><li>Install
    the App Autoscaler plugin on your Delegates using a Delegate Profile.<br/>This
    profile will run each time the Delegate is restarted and the CF CLI cannot reinstall
    the plugin simply, so you must uninstall the plugin and then reinstall it in your
    Delegate Profile:</li></ol><pre>cf uninstall-plugin &#34;App Autoscaler&#34;<br/>curl
    /path/to/release-in-repo<br/>cf install-plugin local-path/binary</pre><p>Click
    <strong>View Logs</strong> on the Delegate Profile to see the successful installation.</p><p>You
    can also choose to install the plugin manually on each Delegate using the steps
    provided by Pivotal, in <a href="https://docs.pivotal.io/application-service/2-7/appsman-services/autoscaler/using-autoscaler-cli.html#:~:text=The%20App%20Autoscaler%20automatically%20scales,line%20interface%20(cf%20CLI)."
    target="_blank">Using the App Autoscaler CLI</a>.</p><h3>Step 1: Define the App
    Autoscaler Service in Your Manifest File</h3><ol><li>In your Harness TAS Service,
    select your manifest.yml file and click <strong>Edit</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/6kt564f64q/1575324249721/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Add
    a <code>create-services</code> block that describes the App Autoscaler service
    you want to create:<br/><br/><pre>...<br/>create-services:<br/>- name:   &#34;myautoscaler&#34;<br/>  broker:
    &#34;app-autoscaler&#34;<br/>  plan:   &#34;standard&#34;   <br/>...</pre>Now
    that the App Autoscaler service is defined in your manifest.yml, you can bind
    it to the app.</li></ol><h3>Step 2: Bind the App Autoscaler Service to Your App</h3><ol><li>In
    <code>applications</code>, add a <code>services</code> block with the name of
    the App Autoscaler service:</li></ol><pre>...<br/>  services:<br/>  - myautoscaler<br/><br/>create-services:<br/>-
    name:   &#34;myautoscaler&#34;<br/>  broker: &#34;app-autoscaler&#34;<br/>  plan:   &#34;standard&#34;<br/>...</pre><p>For
    more information on services, see the <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/manifest-attributes.html#services-block"
    target="_blank">Pivotal documentation</a>.</p><p>Now that the App Autoscaler service
    is defined and bound to your app, you can add an App Autoscaler manifest file
    that configures the settings for the service.</p><ol><li style="counter-increment:li
    1" start="2">Click <strong>Save</strong> to save your manifest.yml file.</li></ol><h3>Step
    3: Add Your App Autoscaler Manifest File</h3><p>App Autoscaler manifest files
    are described in <a href="https://docs.pivotal.io/application-service/2-7/appsman-services/autoscaler/using-autoscaler-cli.html#configure-autoscaling"
    target="_blank">Configure with a Manifest</a> from Pivotal.</p><ol><li>In your
    Harness Service, click the options button on <strong>Files</strong>, and then
    click <strong>Add File</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/6kt564f64q/1575325958099/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    <strong>Add File</strong>, enter the name of the App Autoscaler manifest file,
    such as <strong>autoscaler.yml</strong>. The file is added to the <strong>Manifests</strong>
    section.<br/>You can use any name for the App Autoscaler manifest file. Harness
    will determine which file to use for the service.</li><li>Select the App Autoscaler
    manifest file and click <strong>Edit</strong>.</li><li>Configure your rules, add
    instance limits, and set scheduled limit changes for the service. Here is an example:<br/><pre>
    ---<br/>  instance_limits:<br/>    min: 1<br/>    max: 2<br/>  rules:<br/>    -
    rule_type: &#34;http_latency&#34;<br/>      rule_sub_type: &#34;avg_99th&#34;<br/>      threshold:<br/>        min:
    10<br/>        max: 20<br/>  scheduled_limit_changes:<br/>    - recurrence: 10<br/>      executes_at:
    &#34;2032-01-01T00:00:00Z&#34;<br/>      instance_limits:<br/>        min: 10<br/>        max:
    20</pre></li><li>Click <strong>Save</strong>. The App Autoscaler manifest file
    is complete.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/6kt564f64q/1575326590689/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li></ol><h3>Step
    4: Create the App Autoscaler Service Using CF Command</h3><div class="note-callout">Ensure
    that the Harness Delegate(s) used for your deployment have the correct version
    of the CF CLI installed. See <a href="/article/8tsb75aldu-install-cloud-foundry-cli-6-and-7-on-harness-delegates">Install
    Cloud Foundry CLI Versions on the Harness Delegate</a>.</div><p>To create the
    App Autoscaler Service, you add a CF Command to your Workflow that uses the <a
    href="https://plugins.cloudfoundry.org/#Create-Service-Push" target="_blank">Create-Service-Push</a> plugin.</p><p>If
    the App Autoscaler service is already created and running in your target space,
    you can skip this step. When Harness deploys the app that is already bound to
    the App Autoscaler service, it will use the existing App Autoscaler service.</p><p>If
    the App Autoscaler service is already running, you do not need to remove the CF
    Command from your Workflow. Harness will check to see if the App Autoscaler service
    exists before creating it.</p><p>To create the App Autoscaler service using CF
    Command, do the following:</p><ol><li>Open the Harness Workflow that will deploy
    the Harness Service containing manifests for the app and its bound App Autoscaler
    service.</li><li>In your Workflow, click <strong>Add Command</strong> anywhere
    before the <strong>App Setup</strong> command. Typically, this will be in <strong>Setup</strong>.</li><li>In
    <strong>Add Command</strong>, click <strong>CF Command</strong>. <strong>CF Command</strong>
    appears.</li><li>In <strong>Script</strong>, enter the following command:<br/><br/><pre>cf
    create-service-push --service-manifest ${service.manifest}/manifest.yml  --vars-file
    ${service.manifest}/vars.yml --no-push</pre>In this example, the app manifest
    file is named manifest.yml. You can replace manifest.yml with the name of your
    app manifest. You do not need to specify the name of the App Autoscaler manifest.<br/><br/>For
    inline manifest files, you can use the <code>${service.manifest}</code> variable.
    For remote manifest files stored in Git, you can use both the <code>${service.manifest}</code>
    and <code>${service.manifest.repoRoot}</code> variables. For more information,
    see <a href="/article/xai5fs8gko-run-cf-cli-commands-and-scripts-in-a-workflow#option_scripts_and_variables">Scripts</a>.<br/><br/>The
    <code>--no-push</code> parameter creates the services but does not push the app.
    The app will be pushed by the <strong>App Setup</strong> command. If you omit
    <code>--no-push</code> then App Setup will create a new revision of the app. For
    this reason, it is a best practice is always include <code>--no-push</code>.</li><li>Ensure
    that you enter the Delegate Selectors for the Delegates that have the CF CLI and
    Create-Service-Push plugin installed. For more information, see <a href="/article/ttu8ty2glb-use-cli-plugins-in-harness-pcf-deployments#step_3_delegate_selectors">Delegate
    Selectors</a>.</li><li>Click <strong>Submit</strong>. The CF Command is added.</li></ol><h3>Step
    5: Enable App Autoscaler in the App Setup Step</h3><p>The <strong>App Setup</strong>
    command in a Workflow includes a <strong>Use App Autoscaler Plugin</strong> setting
    so you can enable and disable autoscaling as needed.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/6kt564f64q/1580333525833/image.png"/></figure><p></p><p>Select
    <strong>Use App Autoscalar Plugin</strong> to enable the App Autoscaler service
    bound to your app.</p><p>When you deploy your Workflow, the App Autoscalar service
    is created using the command <code>create-service app-autoscaler standard myautoscaler</code>:</p><p></p><pre>#
    ------------------------------------------ <br/><br/># CF_HOME value: /Users/johndoe/pcf/harness-delegate/repository/pcfartifacts/RR4DmcgKSzylo4enFUK5gw<br/>#
    CF_PLUGIN_HOME value: /Users/johndoe<br/># Performing &#34;login&#34;<br/>API
    endpoint: api.run.pivotal.io<br/><br/>Authenticating...<br/>OK<br/><br/>Targeted
    org Harness<br/><br/>Targeted space AD00001863<br/><br/>API endpoint:   https://api.run.pivotal.io
    (API version: 3.77.0)<br/>User:           john.doe@harness.io<br/>Org:            Harness<br/>Space:          AD00001863<br/>#
    Login Successful<br/># Executing pcf plugin script :<br/>Found Service Manifest
    File: /Users/johndoe/pcf/harness-delegate/repository/pcfartifacts/RR4DmcgKSzylo4enFUK5gw/manifests/deploy.yml<br/>myautoscaler
    - will now be created as a brokered service.<br/>Now Running CLI Command: create-service
    app-autoscaler standard myautoscaler<br/>Creating service instance myautoscaler
    in org Harness / space AD00001863 as adwait.bhandare@harness.io...<br/>OK<br/>|<br/>--no-push
    applied: Your application will not be pushed to CF ...<br/># Exit value =0<br/><br/>
    ----------  PCF Run Plugin Command completed successfully</pre><h3>Option: Use
    an Existing App Autoscaler Service</h3><p>You might already have the App Autoscaler
    service running in your target space, and so some of the steps described earlier
    can be skipped.</p><p>If you already have the App Autoscaler service running in
    your target Pivotal space, then you can simply bind the service in the app manifest
    file using the <code>services</code> parameter and enable the <strong>Use App
    Autoscalar Plugin</strong> in <strong>App Setup</strong>. You do not need to set
    up the following:</p><ul><li>You do not need <code>create-services</code> in the
    manifest.yml file for your app.</li><li>You do not need a manifest file for the
    App Autoscaler service.</li><li>You do not need to use the CF Command and <code>cf
    create-service-push</code> to create the App Autoscaler service.</li></ul><p>Including
    any of these unnecessary components will not cause a problem. Harness automatically
    checks for an existing App Autoscaler service before creating a new service.</p><p></p>'
  slug: use-the-app-autoscaler-service
  tags: []
  is_live: true
