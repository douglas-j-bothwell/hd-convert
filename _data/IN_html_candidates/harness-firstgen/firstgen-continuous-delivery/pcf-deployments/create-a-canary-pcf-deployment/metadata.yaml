type: article
article_id: 99bxiqfi1u
user_id: wz6xkfcc9i
category_id: emle05cclq
author:
  name: Chakravarthy Tenneti
  profile_image: https://www.gravatar.com/avatar/790db061bb8f8fb094e4d4b19a390f3b?d=mm&s=150
title: Create a Canary Tanzu Deployment
slug: create-a-canary-pcf-deployment
description: PCF Canary deployments contain two or more phases that deploy app instances
  gradually, ensuring the stability of a small percentage of instances before rolling
  out to your desired instance count.
short_version: PCF Canary deployments contain two or more phases that deploy app instances
  gradually.
tags:
- PCF Deployment
- Canary PCF
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-11-12T18:38:06.730335Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create a Canary Tanzu Deployment
  description: PCF Canary deployments contain two or more phases that deploy app instances
    gradually, ensuring the stability of a small percentage of instances before rolling
    out to your desired instance count.
  short_version: PCF Canary deployments contain two or more phases that deploy app
    instances gradually.
  body: '<p>Tanzu Application Service (formerly PCF) Canary deployments contain two
    or more phases that deploy app instances gradually, ensuring the stability of
    a small percentage of instances before rolling out to your desired instance count.</p><p>In
    this topic:</p><ul><li><a href="#before_you_begin">Before You Begin</a></li><li><a
    href="#visual_summary">Visual Summary</a></li><li><a href="#review_app_resizing_in_canary_deployments">Review:
    App Resizing in Canary Deployments</a></li><li><a href="#review_canary_workflow_phases">Review:
    Canary Workflow Phases</a></li><li><a href="#step_1_add_the_canary_workflow">Step
    1: Add the Canary Workflow</a></li><li><a href="#step_2_configure_canary_phase_1">Step
    2: Configure Canary Phase 1</a></li><li><a href="#step_3_configure_app_setup_for_phase_1">Step
    3: Configure App Setup for Phase 1</a></li><li><a href="#step_4_configure_app_resize_for_phase_1">Step
    4: Configure App Resize for Phase 1</a></li><li><a href="#step_5_configure_canary_phase_2">Step
    5: Configure Canary Phase 2</a></li><li><a href="#step_6_configure_app_resize_for_phase_2">Step
    6: Configure App Resize for Phase 2</a></li><li><a href="#step_7_deploy_a_canary_pcf_workflow">Step
    7: Deploy a Canary PCF Workflow</a></li><li><a href="https://docs.harness.io/article/99bxiqfi1u-create-a-canary-pcf-deployment#app_versioning_without_numbering">App
    Versioning without Numbering</a></li><li><a href="#next_steps">Next Steps</a></li></ul><h3>Before
    You Begin</h3><ul><li>See <a href="/article/nh4afrhvkl">Connect to Your Target
    Tanzu Account</a>.</li><li>See <a href="/article/r1crlrpjk4">Define Your Tanzu
    Target Infrastructure</a>.</li></ul><p></p><h3>Visual Summary</h3><p>Here is an
    example of a successful TAS Canary deployment containing two phases:</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572471685499/image.png"/></figure><p></p><p></p><h3>Review:
    App Resizing in Canary Deployments</h3><p>To understand how app resizing works
    in a Canary deployment, let&#39;s look at an example of a 3 phase deployment.</p><h4>First
    Deployment</h4><p>Let&#39;s look at the very first deployment. There are no running
    instances before deployment, and so there is nothing to downsize.</p><ol><li>Phase
    1 is set to 25% for new instances (<strong>Desired Instances (cumulative)</strong>
    in App Resize step).</li><li>Phase 2 is set to 50% for new instances.</li><li>Phase
    3 is set to 100% for new instances.</li></ol><p>Now, let&#39;s imagine the TAS
    manifest specified in the Harness Service requests <strong>4 instances</strong>
    and there is no autoscaler plugin configured.</p><p>Here&#39;s what will happen
    each time you deploy:</p><p>First deployment:</p><ol><li>Phase 1 deploys 1 new
    instance.</li><li>Phase 2 deploys 2 new instances.</li><li>Phase 3 deploys all
    4 desired instances.</li></ol><h4>Second Deployment</h4><p>Now, let&#39;s look
    at what happens with the second deployment:</p><ol><li><strong>There are 4 running
    instances now.</strong> These were deployed by the first deployment. All downsize
    percentages refer to this number.</li><li>Phase 1 deploys new app version to 1
    instance and downsizes old app version to 3 instance. Downsize is 25%. It results
    in 25% <u>of 4</u> which is 1 instance.<br/>Current state: 1 new versioned instance
    and 3 old versioned instances running.</li><li>Phase 2 deploys new version to
    2 instances and downsizes to 2 instances. Downsize is 50% of the number of old
    versioned instances (4). So 2 instances are downsized.<br/>Current state: 2 new
    versioned instances and 2 old versioned instance running.</li><li>Phase 2 deploys
    to new version to 4 instances and downsizes to 0 old instances.<br/>Final state:
    4 new instances and 0 old instances.</li></ol><div class="note-callout">If you
    do not enter a value for the number of instances for the old version, Harness
    uses the number of new instances as its guide. For example, if you deployed 4
    new instances and then select <strong>50 Percent</strong> in <strong>Desired Instances
    - Old Version</strong>, Harness downsizes the old app version to 50% <u>of 4 instances</u>.</div><h4>What
    about Autoscaler?</h4><p>If you were using an App Autoscaler plugin, it would
    be applied at the end of the deployment. For example, if Autoscaler is set to
    min 8 and max 10, Harness will set the desired number of instances to the minimum
    value. So the total number of new instances is 8.</p><h4>Downsize or Retain Instances</h4><div
    class="note-callout">Currently, this feature is behind a Feature Flag. Contact
    <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable
    the feature. Feature Flags can only be removed for Harness Professional and Essentials
    editions. Once the feature is released to a general audience, it&#39;s available
    for Trial and Community Editions.<br/><br/>See <a href="https://changelog.harness.io/?categories=fix,improvement,new"
    target="_blank">New features added to Harness</a> and <a href="https://changelog.harness.io/?categories=early-access"
    target="_blank">Features behind Feature Flags</a> (Early Access) for Feature Flag
    information.</div><p>You can choose one of the following resize options in the
    App Resize step settings:</p><ul><li><strong>Retain instances:</strong> the number
    entered in <strong>Advanced Settings</strong> for <strong>Desired Instances -
    Old App</strong> determines how many instances of the old app will remain running.</li><li><strong>Downsize
    instances:</strong> the number entered in <strong>Advanced Settings</strong> for
    <strong>Desired Instances - Old App</strong> determines how many instances of
    the old app are downsized.</li></ul><h3>Review: Canary Workflow Phases</h3><p>To
    explain TAS Canary Workflow steps and settings, we will create a Canary Workflow
    that deploys a new app to 50% of instances and, if it is successful, deploys it
    to 100% of the instances.</p><p>The Canary Workflow will contains two phases:</p><ol><li>Phase
    1:<ol><li><strong>App Setup</strong> command: 6 instances set up. The number of
    instances defined in the manifest.yml via the vars.yml variable value for instances:<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572386976797/image.png"/></figure></li><li><strong>App
    Resize</strong> command: 50% desired instances. This ensures that the app deploys
    on a small number of instances before moving on to Phase 2.</li></ol></li><li>Phase
    2:<ol><li><strong>App Resize</strong> command: 100% of instances.</li></ol></li></ol><h3>Step
    1: Add the Canary Workflow</h3><p>To implement this Canary workflow, do the following:</p><ol><li>In
    your Harness application, click <strong>Workflows</strong>. The <strong>Workflows</strong>
    page appears.</li><li>Click <strong>Add Workflow</strong>. The <strong>Workflow</strong>
    dialog appears.</li><li>In <strong>Name</strong>, enter a name that describes
    what the Workflow does. For example, for a simple Canary deployment, <strong>Canary
    TAS</strong>.</li><li>In <strong>Workflow Type</strong>, select <strong>Canary
    Deployment</strong>.</li><li>In <strong>Environment</strong>, select the Environment
    containing the Infrastructure Definition for the target space where you will deploy
    your TAS app.</li><li>When the <strong>Workflow</strong> dialog is finished, click
    <strong>SUBMIT</strong>. The TAS Canary Workflow appears.</li></ol><p>First, we
    will set up <strong>Phase 1</strong>, where we will deploy 50% of the 6 instances
    defined in our Service&#39;s <strong>Manifests</strong> section.</p><h3>Step 2:
    Configure Canary Phase 1</h3><p>To configure the Canary phases, do the following:</p><ol><li>In
    the Workflow, in <strong>Deployment Phases</strong>, click <strong>Add Phase</strong>.
    The <strong>Workflow Phase</strong> dialog appears.</li><li>In <strong>Service</strong>,
    ensure you select the Harness Service that contains the manifest for the TAS app
    you want to deploy.</li><li>In <strong>Infrastructure Definition</strong>, select
    the <a href="https://docs.harness.io/article/n39w05njjv-environment-configuration#step_2_add_infrastructure_definition">Infrastructure
    Definition</a> that defines the target space where you want to deploy your app.</li><li>Click
    <strong>Submit</strong>. Phase 1 appears.</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572387401606/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>Now
    we configure this phase to deploy 50% of the TAS app instances we have set in
    the Service manifest.yml.</p><h3>Step 3: Configure App Setup for Phase 1</h3><ol><li>Click
    <strong>App Setup</strong>. The <strong>App Setup</strong> dialog appears.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9ao4gsr93j/1580331932559/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    don&#39;t need to change any settings in App Setup, but let&#39;s review the default
    settings:</p><p></p><table><tbody><tr><td><p><strong>Setting</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p><strong>Match
    running instances</strong></p></td><td><p>The first time you deploy this Workflow,
    this setting isn&#39;t used because we have no running instances.</p><p>In future
    deployments, you might wish to select this setting. For Canary Workflows, it isn&#39;t
    relevant because you will be setting the desired instance count for the phase.</p></td></tr><tr><td><p><strong>Resize
    Strategy</strong></p></td><td><p>Specify the order in which you want Harness to
    downsize and add old and new instances.</p><p>The first time you deploy this Workflow,
    this setting isn&#39;t used because we have no running instances.</p></td></tr><tr><td><p><strong>Active
    Versions To Keep</strong></p></td><td><p>Enter the number of previous app versions
    to downsize and keep. You can upsize these versions later if needed. The most
    recent app version will not be downsized.</p></td></tr><tr><td><p><strong>Additional
    Routes</strong></p></td><td><p>Select any routes that you want to map to your
    app, in addition to the routes specified in the manifest in your Harness Service.</p></td></tr><tr><td><p><strong>Delegate
    Selectors</strong></p></td><td><p>Select the Selector for the Delegate(s) you
    want to use. You add Selectors to Delegates to make sure that they&#39;re used
    to execute the command. For more information, see <a href="/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates with Selectors</a>.</p><p>Harness will use Delegates matching the Selectors
    you add.</p><p>If you use one Selector, Harness will use any Delegate that has
    that Selector.</p><p>If you select two Selectors, a Delegate must have both Selectors
    to be selected. That Delegate might also have other Selectors, but it must have
    the two you selected.</p><div class="note-callout">You can use expressions for
    Harness built-in variables or Account Default variables in <strong>Delegate Selectors</strong>.
    When the variable expression is resolved at deployment runtime, it must match
    an existing Delegate Selector.<br/><br/>For example, if you have a Delegate Selector <strong>prod</strong> and
    the Workflow is using an Environment also named <strong>prod</strong>, the Delegate
    Selector can be <code>${env.name}</code>. This is very useful when you match Delegate
    Selectors to Application component names such as Environments, Services, etc.
    It&#39;s also a way to template the Delegate Selector setting.</div></td></tr><tr><td><p><strong>Use
    App Autoscaler Plugin</strong></p></td><td><p>Enable this setting if you have
    the <a href="https://docs.pivotal.io/application-service/2-7/appsman-services/autoscaler/using-autoscaler-cli.html"
    target="_blank">App Autoscaler</a> service running in your target Pivotal space
    and bound to the app you are deploying.</p><p>For more information on using the
    plugin with Harness, see <a href="/article/4xh8u7l86h-use-the-app-autoscaler-service">App
    Autoscaler CLI Plugin</a>.</p></td></tr><tr><td><p><strong>Timeout</strong></p></td><td><p>Set
    how long you want the Harness Delegate to wait for the TAS cloud to respond to
    API requests before timing out.</p></td></tr><tr><td><p><strong>Version Management</strong></p></td><td><p>For
    details on how Harness manages Tanzu app names and how this feature impacts naming,
    see <a href="/article/hzyz7oc5k9-tanzu-app-naming-with-harness">Tanzu App Naming</a>.</p></td></tr></tbody></table><p></p><ol><li
    style="counter-increment:li 1" start="2">Click <strong>Submit</strong> or close
    the dialog.</li></ol><p>Next, we will resize the number of instances to 50% of
    the instance count set in your Service manifest.yml.</p><h3>Step 4: Configure
    App Resize for Phase 1</h3><ol><li>Click <strong>App Resize</strong>. The <strong>App
    Resize</strong> dialog appears.</li><li>In <strong>Desired Instances</strong>,
    enter <strong>50</strong> and choose <strong>Percent</strong>. The app will deploy
    on 3 instances successfully before the Workflow moves onto Phase 2.</li><li>Click
    <strong>SUBMIT</strong>.</li></ol><h4>Downsize or Retain Instances</h4><div class="note-callout">Currently,
    this feature is behind a Feature Flag. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature. Feature Flags can only
    be removed for Harness Professional and Essentials editions. Once the feature
    is released to a general audience, it&#39;s available for Trial and Community
    Editions.<br/><br/>See <a href="https://changelog.harness.io/?categories=fix,improvement,new"
    target="_blank">New features added to Harness</a> and <a href="https://changelog.harness.io/?categories=early-access"
    target="_blank">Features behind Feature Flags</a> (Early Access) for Feature Flag
    information.</div><p>You can choose one of the following resize options:</p><ul><li><strong>Retain
    instances:</strong> the number entered in <strong>Advanced Settings</strong> for
    <strong>Desired Instances - Old App</strong> determines how many instances of
    the old app will remain running.</li><li><strong>Downsize instances:</strong>
    the number entered in <strong>Advanced Settings</strong> for <strong>Desired Instances
    - Old App</strong> determines how many instances of the old app are downsized.</li></ul><h3>Step
    5: Configure Canary Phase 2</h3><p>Next, we&#39;ll add Phase 2 where we will deploy
    to 100% of the instances specified in the Service manifest.yml.</p><ol><li>From
    the breadcrumb menu, click back to the main Canary Workflow page.</li><li>In <strong>Deployment
    Phases</strong>, under <strong>Phase 1</strong>, click <strong>Add Phase</strong>.
    The <strong>Workflow Phase</strong> dialog appears.</li><li>Select the same Service
    and <a href="https://docs.harness.io/article/n39w05njjv-environment-configuration#step_2_add_infrastructure_definition">Infrastructure
    Definition</a> that you selected in Phase 1, and then click <strong>Submit</strong>.</li></ol><p>The
    <strong>Phase 2</strong> steps appear.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572389017588/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>These
    step will be executed when the Phase 1 steps are successful.</p><h3>Step 6: Configure
    App Resize for Phase 2</h3><ol><li>Click <strong>App Resize</strong>. The <strong>App
    Resize</strong> settings appear.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9ao4gsr93j/1583782343330/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>In
    Phase 1, the app successfully deployed to 50% of the instances set in the Service
    manifest.yml. In Phase 2, you can deploy it to 100% of the instances.</li><li>In
    <strong>Desired Instances</strong>, enter <strong>100</strong> and choose <strong>Percent</strong>,
    and then click <strong>Submit</strong>. This will deploy the new app to 100% of
    the instances you set up in Phase 1. The Phase 2 steps are now complete.</li></ol><p>If
    your manifest does not specify the number of instances, Harness defaults to 2
    instances.</p><p>In <strong>Advanced Settings</strong>, you can specify <strong>Desired
    Instances - Old Version</strong>. This allows you to manage how many instances
    of the old app version to keep running.</p><p>Harness downsizes the number of
    instances hosting the previous version to achieve the number of instances you
    request. For example, if you enter 40% for the old app version, then the old app
    version will have 40% instances up at the end of the step. Harness downsizes the
    old app instances by 60% to get the 40% you requested.</p><p>If you do not enter
    a value, Harness uses the number of new instances as its guide. For example, if
    you deployed 4 new instances and then select <strong>50 Percent</strong> in <strong>Desired
    Instances - Old Version</strong>, Harness downsizes the old app version to 50%
    <u>of 4 instances</u>.</p><div class="note-callout">If you are using the App Autoscaler
    plugin, then autoscaling is applied <u>after</u> the final phase of deployment.
    After all phases are completed and the number of old version instances has reached
    the desired number, then the final number of instances will be as configured as
    defined by the Autoscaler.</div><h3>Step 7: Deploy a Canary TAS Workflow</h3><p>Now
    that the Canary Workflow is configured, from the breadcrumb menu, click back to
    the main Canary Workflow page. You can see both Phases are complete.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572389204739/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>You can now deploy the Canary
    Workflow.</p><ol><li>Click <strong>Deploy</strong>.</li><li>In <strong>Start New
    Deployment</strong>, select an artifact to deploy.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572389477322/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><ol><li style="counter-increment:li
    2" start="3">Click <strong>Submit</strong> to deploy your app.</li></ol><p>Here
    you can see the <strong>App Setup</strong> step in Phase 1:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572390874041/image.png"/></figure><p>When
    this step is deployed, the output will look something like this:</p><pre>----------
    Starting PCF App Setup Command<br/><br/># Fetching all existing applications <br/>#
    No Existing applications found<br/><br/># Creating new Application<br/># Manifest
    File Content: <br/>---<br/>applications:<br/>- name: ExampleForDoc__PCF__Latest__Staging__0<br/>  memory:
    ((PCF_APP_MEMORY))<br/>  instances: 0<br/>  path: /home/ubuntu/harness-delegate/./repository/pcfartifacts/VsOd7PkCTgWyl0SEEZ5E0w/1572389711331todolist.war<br/>  random-route:
    true<br/>...<br/><br/>name:              ExampleForDoc__PCF__Latest__Staging__0<br/>requested
    state:   started<br/>routes:            examplefordocpcflateststaging0-anxious-wolverine.cfapps.io<br/>last
    uploaded:     Tue 29 Oct 22:55:40 UTC 2019<br/>stack:             cflinuxfs3<br/>buildpacks:        client-certificate-mapper=1.11.0_RELEASE
    container-security-provider=1.16.0_RELEASE java-buildpack=v4.24-offline-https://github.com/cloudfoundry/java-buildpack.git#a2dd394
    java-opts java-security jvmkill-agent=1.16.0_RELEASE open-jdk-like-jre=...<br/><br/>type:            web<br/>instances:       0/0<br/>memory
    usage:    350M<br/>...<br/>There are no running instances of this process.<br/>#
    Application created successfully<br/># App Details: <br/>NAME: ExampleForDoc__PCF__Latest__Staging__0<br/>INSTANCE-COUNT:
    0<br/>ROUTES: [examplefordocpcflateststaging0-anxious-wolverine.cfapps.io]<br/><br/><br/>
    ----------  PCF Setup process completed successfully<br/># Deleting any temporary
    files created</pre><p>Note that since this is the first time this Workflow is
    deployed, there are no running instances.</p><p>Next is the <strong>App Resize</strong>
    step in Phase 1:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1572390886602/image.png"/></figure><p>When
    this step is deployed, the output will look something like this:</p><pre>----------
    Starting PCF Resize Command<br/><br/># Downsizing previous application version/s<br/>#
    No Application is available for downsize<br/># Upsizing new application:<br/>APPLICATION-NAME:
    ExampleForDoc__PCF__Latest__Staging__0<br/>CURRENT-INSTANCE-COUNT: 0<br/>DESIRED-INSTANCE-COUNT:
    3<br/># Application upsized successfully <br/><br/># Application state details
    after upsize:  <br/>NAME: ExampleForDoc__PCF__Latest__Staging__0<br/>INSTANCE-COUNT:
    3<br/>ROUTES: [examplefordocpcflateststaging0-anxious-wolverine.cfapps.io]<br/><br/>Instance
    Details:<br/>Index: 0<br/>State: STARTING<br/>Disk Usage: 0<br/>CPU: 0.0<br/>Memory
    Usage: 0<br/><br/>Index: 1<br/>State: STARTING<br/>Disk Usage: 0<br/>CPU: 0.0<br/>Memory
    Usage: 0<br/><br/>Index: 2<br/>State: STARTING<br/>Disk Usage: 0<br/>CPU: 0.0<br/>Memory
    Usage: 0<br/><br/>--------- PCF Resize completed successfully</pre><p>Note the
    <code>DESIRED-INSTANCE-COUNT: 3</code> and <code>INSTANCE-COUNT: 3</code> information.
    This is the result of setting 50% in <strong>Desired Instances</strong>.</p><p>In
    Phase 2 we see the final step, <strong>App Resize</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1572390918658/image.png"/></figure><p>When
    this App Resize step is deployed, the output will look something like the following:</p><pre>----------
    Starting PCF Resize Command<br/><br/># Downsizing previous application version/s<br/>#
    No Application is available for downsize<br/># Upsizing new application:<br/>APPLICATION-NAME:
    ExampleForDoc__PCF__Latest__Staging__1<br/>CURRENT-INSTANCE-COUNT: 3<br/>DESIRED-INSTANCE-COUNT:
    6<br/># Application upsized successfully <br/><br/># Application state details
    after upsize:  <br/>NAME: ExampleForDoc__PCF__Latest__Staging__1<br/>INSTANCE-COUNT:
    6<br/>ROUTES: [examplefordocpcflateststaging1-fearless-eland.cfapps.io]<br/><br/>Instance
    Details:<br/>Index: 0<br/>State: STARTING<br/>Disk Usage: 138027008<br/>CPU: 0.0<br/>Memory
    Usage: 7250563<br/><br/>Index: 1<br/>State: STARTING<br/>Disk Usage: 0<br/>CPU:
    0.0<br/>Memory Usage: 0<br/><br/>Index: 2<br/>State: STARTING<br/>Disk Usage:
    0<br/>CPU: 0.0<br/>Memory Usage: 0<br/><br/>Index: 3<br/>State: STARTING<br/>Disk
    Usage: 0<br/>CPU: 0.0<br/>Memory Usage: 0<br/><br/>Index: 4<br/>State: STARTING<br/>Disk
    Usage: 0<br/>CPU: 0.0<br/>Memory Usage: 0<br/><br/>Index: 5<br/>State: STARTING<br/>Disk
    Usage: 0<br/>CPU: 0.0<br/>Memory Usage: 0<br/><br/>--------- PCF Resize completed
    successfully</pre><p></p><p>You can see that the app was deployed to 100% of the
    instances set in the manifest.yml (6).</p><h3>App Versioning without Numbering</h3><p></p><div
    class="note-callout">Currently, this feature is behind a Feature Flag. Contact
    <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable
    the feature. Feature Flags can only be removed for Harness Professional and Essentials
    editions. Once the feature is released to a general audience, it&#39;s available
    for Trial and Community Editions.<br/><br/>See <a href="https://changelog.harness.io/?categories=fix,improvement,new"
    target="_blank">New features added to Harness</a> and <a href="https://changelog.harness.io/?categories=early-access"
    target="_blank">Features behind Feature Flags</a> (Early Access) for Feature Flag
    information.</div><p>When you deploy an app it maintains its name without adding
    any suffix to the name to indicate its release version. A suffix are added to
    the previous version of the app.</p><p>The first time you deploy the app, Harness
    creates the app with the name you entered in <strong>App Setup</strong>.</p><p>When
    deploying new versions of that app, Harness uses the same name for the app and
    renames the previous version of the app with suffix <code>_INACTIVE</code>.</p><p>For
    example, if the app is named <strong>OrderService</strong>, the first deployment
    will use the name <strong>OrderService</strong>. When the next version of the
    app is deployed, the new version is named <strong>OrderService</strong> and the
    previous version is now named <strong>OrderService_INACTIVE</strong>.</p><p>During
    rollback, the new app version is deleted and the previous app is renamed without
    the suffix.</p><h3>Next Steps</h3><ul><li><a href="/article/52muxcsr1v-create-a-blue-green-pcf-deployment">Create
    a Blue/Green Tanzu Deployment</a></li><li><a href="/article/xai5fs8gko-run-cf-cli-commands-and-scripts-in-a-workflow">Run
    CF CLI Commands and Scripts in a Workflow</a></li></ul><p></p>'
  slug: create-a-canary-pcf-deployment
  tags:
  - PCF Deployment
  - Canary PCF
  is_live: true
