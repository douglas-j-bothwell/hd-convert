type: article
article_id: 5wdb3r765g
user_id: mfr0nxh4be
category_id: hupik7gwhc
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Provision using CloudFormation Create Stack
slug: provision-cloudformation-create-stack
description: Provision infrastructure using the Workflow CloudFormation Create Stack
  step.
short_version: Provision infrastructure using the Workflow CloudFormation Create Stack
  step.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:17:04.134914Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Provision using CloudFormation Create Stack
  description: Provision infrastructure using the Workflow CloudFormation Create Stack
    step.
  short_version: Provision infrastructure using the Workflow CloudFormation Create
    Stack step.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/vynj4hxt98">NextGen</a>.</div><p>This topic describes
    how to provision infrastructure using the Workflow CloudFormation Create Stack
    step.</p><p>Once you have <a href="/article/wtper654tn-add-cloud-formation-templates">created
    a CloudFormation Infrastructure Provisioner</a> and <a href="/article/4xtxj2f88b-map-cloud-formation-infrastructure">added
    it to a Harness Infrastructure Definition</a>, you add that Infrastructure Definition
    to a Workflow.</p><p>Next, you use the CloudFormation Create Stack step in that
    Workflow to run the same CloudFormation template added in the Infrastructure Provisioner.</p><p>During
    Workflow pre-deployment, the CloudFormation Create Stack step provisions the target
    infrastructure.</p><p>Next, during Workflow deployment, the Workflow deploys to
    the provisioned infrastructure as defined in its Infrastructure Provisioner.</p><h3>Before
    You Begin</h3><p>Ensure you have read the following topics before you add the
    CloudFormation Create Stack step to a Workflow:</p><ul><li> <a href="/article/qj0ems5hmg-cloud-formation-provisioning-with-harness">CloudFormation
    Provisioning with Harness</a></li><li> <a href="/article/308nblm0vc-cloud-formation-account-setup">Set
    Up Your Harness Account for CloudFormation</a></li><li> <a href="/article/wtper654tn-add-cloud-formation-templates">Add
    CloudFormation Templates</a></li><li> <a href="/article/4xtxj2f88b-map-cloud-formation-infrastructure">Map
    CloudFormation Infrastructure</a></li></ul><h3>Limitations</h3><ul><li><strong>AWS
    Services Supported</strong>: Harness supports first class CloudFormation provisioning
    for AWS-based infrastructures:<ul><li>SSH</li><li>AMI/Auto Scaling Group</li><li>ECS</li><li>Lambda</li></ul></li><li><strong>Deployment
    Strategies Supported</strong>: For most deployments, Harness Infrastructure Provisioners
    are only supported in Canary and Multi-Service types. For AMI/ASG and ECS deployments,
    Infrastructure Provisioners are also supported in Blue/Green deployments.</li><li><strong>Control
    stack deployment wait time:</strong><br/><div class="note-callout">Currently,
    this feature is behind the Feature Flag <code>CLOUDFORMATION_SKIP_WAIT_FOR_RESOURCES</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><ul><li>By default, Harness waits for 30 seconds after
    a successful stack deployment to ensure that resources have come up.</li><li>You
    can can remove this wait time by enabling the Feature Flag <code>CLOUDFORMATION_SKIP_WAIT_FOR_RESOURCES</code>.</li><li>If
    <code>CLOUDFORMATION_SKIP_WAIT_FOR_RESOURCES</code> is enabled and you still want
    to have a waiting condition, use the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-creationpolicy.html"
    target="_blank">AWS CreationPolicy attribute</a>.</li></ul></li></ul><h3>Where
    can I use CloudFormation Create Stack?</h3><p>CloudFormation Create Stack can
    be used to provision infrastructure or for ad hoc provisioning.</p><p>When used
    in the Pre-deployment steps of a Workflow, the CloudFormation Create Stack provisions
    infrastructure that can be rolled back in the Workflow fails.</p><p>When used
    outside of the Pre-deployment steps of a Workflow, the CloudFormation Create Stack
    step does not participate in Workflow rollback. Only use the CloudFormation Create
    Stack step outside of the Pre-deployment steps of a Workflow for ad hoc provisioning.</p><p>To
    delete the ad hoc provisioned infrastructure in the case of a Workflow failure,
    add the CloudFormation Delete Stack to the Workflow <strong>Rollback Steps</strong>
    section. See <a href="/article/i1agf0s6h4-cloudformation-delete-stack">Remove
    Provisioned Infra with CloudFormation Delete Stack</a>.</p><h3>Visual Summary</h3><p>This
    topic describes steps 4 through 6 in the Harness CloudFormation Provisioning implementation
    process:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/wtper654tn/1589837133398/image.png"/></figure><p>For
    step 1, see <a href="/article/wtper654tn-add-cloud-formation-templates">Add CloudFormation
    Templates</a>. For step 2, see <a href="/article/4xtxj2f88b-map-cloud-formation-infrastructure">Map
    CloudFormation Infrastructure</a>.</p><p>Here is an illustration using a deployment:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/5wdb3r765g/1590620200573/image.png"/></figure><p></p><ol><li>The <strong>CloudFormation
    Create Stack</strong> step executes pre-deployment to build the infrastructure.</li><li>The <strong>Infrastructure
    Definition</strong> is used to select the provisioned nodes.</li><li>The app is <strong>installed</strong> on
    the provisioned node.</li></ol><h3>Step 1: Add Environment to Workflow</h3><p>To
    use a CloudFormation Provisioner in your Workflow, do the following:</p><ol><li>In
    your Harness Application, click <strong>Workflows</strong>.</li><li>Click <strong>Add
    Workflow</strong>. The Workflow dialog appears.</li><li>Enter a name and description
    for the Workflow.</li><li>In <strong>Workflow Type</strong>, select <strong>Canary</strong>.</li></ol><div
    class="note-callout">For most deployments, Harness Infrastructure Provisioners
    are only supported in Canary and Multi-Service types. For AMI deployments, Infrastructure
    Provisioners are also supported in Blue/Green deployments.</div><ol><li style="counter-increment:li
    4" start="5">In <strong>Environment</strong>, select the Environment that has
    the CloudFormation Provisioner set up in its Infrastructure Definitions.</li><li>Click
    <strong>SUBMIT</strong>. The new Workflow is created.</li></ol><p>By default,
    the Workflow includes a <strong>Pre-deployment Steps</strong> section. This is
    where you will add a step that uses your CloudFormation Provisioner.</p><h3>Step
    2: Add CloudFormation Create Stack Step to Pre-deployment Steps</h3><p>In this
    step you will use the CloudFormation Create Stack step to select the same CloudFormation
    Infrastructure Provisioner you used in the Workflow Infrastructure Definition.</p><p>The
    CloudFormation Create Stack step will provision using the template in the CloudFormation
    Infrastructure Provisioner.</p><p>The CloudFormation Create Stack step is basically
    the same as the <a href="https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html"
    target="_blank"><code>aws cloudformation create-stack</code></a> command.</p><p>The
    CloudFormation Create Stack step provisions your target infrastructure, and so
    it is added to the <strong>Pre-deployment steps</strong> in the Canary Workflow.</p><p>To
    add the CloudFormation Create Stack step, do the following:</p><ol><li>In your
    Workflow, in <strong>Pre-deployment Steps</strong>, click <strong>Add Step</strong>.</li><li>Select
    <strong>CloudFormation Create Stack</strong>, and click <strong>Next</strong>.</li><li>In
    <strong>Provisioner</strong>, select the same Harness CloudFormation Infrastructure
    Provisioner you used in the Infrastructure Definition of this Workflow.</li><li>In
    <strong>AWS Cloud Provider</strong>, typically, you will select the same Cloud
    Provider you used when setting up the Infrastructure Definition used by this Workflow.</li></ol><div
    class="note-callout">You need to select an AWS Cloud Provider even if the CloudFormation
    Infrastructure Provisioner you selected uses a manually-entered template body.
    Harness needs access to the AWS API for CloudFormation via the credentials in
    the AWS Cloud Provider. Ensure that the AWS Cloud Provider has the credentials
    described in <a href="/article/308nblm0vc-cloud-formation-account-setup">Set Up
    Your Harness Account for CloudFormation</a>.</div><ol><li style="counter-increment:li
    4" start="5">In <strong>Region</strong>, select the region where you will be provisioning
    your resources.<br/>You can use a <a href="/article/9dvxcegm90-variables">Harness
    variable expression</a> in the Region setting, such as a <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variable</a>. This allows you to select the AWS region for the provisioning when
    you deploy your Workflow.<div class="note-callout">Currently, <u>expressions in
    the Region setting</u> is in Beta and behind a Feature Flag. Contact <a href="https://mail.google.com/mail/?view=cm&amp;fs=1&amp;tf=1&amp;to=support@harness.io"
    target="_blank">Harness Support</a> to enable the feature. Feature Flags can only
    be removed for Harness Professional and Essentials editions. Once the feature
    is released to a general audience, it is available for Trial and Community Editions.</div></li><li>To
    name your stack, select <strong>Use Custom Stack Name</strong> and enter a name
    for your stack. If you do not select this option, Harness will automatically generate
    a unique name for your stack prefixed with <code>HarnessStack</code>and the ID
    for your Harness Environment, such as <code>HarnessStack-7HklGe0N6AvviJmZ</code>.<br/><br/>If
    you plan on using the <a href="/article/i1agf0s6h4-cloudformation-delete-stack">CloudFormation
    Delete Stack</a> step later in this Workflow, it is a good idea to name your stack.</li><li>In
    <strong>Role ARN</strong>, enter the Amazon Resource Name (ARN) of an AWS IAM
    role that CloudFormation assumes to create the stack. If you don&#39;t specify
    a value, Harness uses the credentials you provided via <strong>AWS Cloud Provider</strong>.
    This allows you to tune the step for provisioning a specific AWS resource. For
    example, if you will only provision AWS S3, then you can use a role that is limited
    to S3.<br/><br/>You can also use <a href="/article/9dvxcegm90-variables">Harness
    variable expressions</a> in <strong>Role ARN</strong>. For example, you can create
    a Service or Workflow variable and then enter its expression in <strong>Role ARN</strong>,
    such as <code>${serviceVariables.roleARN}</code> or <code>${workflow.variables.roleArn}</code>.</li><li>To
    acknowledge the capabilities in the CloudFormation template, enable <strong>Specify
    Capabilities</strong>.<br/><br/>This acknowledges that the template contains certain
    capabilities (for example, <code>CAPABILITY_AUTO_EXPAND</code>), giving AWS CloudFormation
    the specified capabilities before it creates the stack. This is the same as using
    the <code>--capabilities</code> option in the <code>aws cloudformation create-stack</code>
    CLI command. See <a href="https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html"
    target="_blank">create-stack</a>.<br/><br/>In <strong>Capabilities</strong>, select
    one or more of the capabilities from the spec.</li><li>To add CloudFormation Tags,
    enable <strong>Add CloudFormation Tags</strong>.<br/><br/>Enter the tags in JSON
    format only (lowercase is required):<br/><pre class="hljs json">[{<br/>    &#34;key&#34;:
    &#34;string&#34;,<br/>    &#34;value&#34;: &#34;string&#34;<br/>},{<br/>    &#34;key&#34;:
    &#34;string&#34;,<br/>    &#34;value&#34;: &#34;string&#34;<br/>}]</pre><br/>The
    tags you add here are applied to all of the resources in the stack. AWS has a
    limit of 50 unique tags for each stack.<br/><br/>You can use Harness variable
    expressions in the keys and values. See <a href="/article/aza65y4af6-built-in-variables-list">Built-in
    Variables List</a> and <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set
    Workflow Variables</a>.</li><li>In <strong>Skip based on Stack Status</strong>,
    you can add the stack states that will not prevent provisioning.<div class="note-callout">Harness
    checks if the stack is in ROLLBACK_COMPLETE state before the deployment. If present,
    Harness deletes the stack and then triggers the deployment.</div><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/5wdb3r765g/1628106420462/clean-shot-2021-08-04-at-12-46-53.png"/></figure></li><li>In
    <strong>Timeout</strong>, enter how long Harness should wait for the successful
    CloudFormation Provisioner set up before failing the Workflow.</li><li>Click <strong>Next</strong>.
    The <strong>Input Values</strong> settings appear.</li></ol><h3>Option 1: Enter
    Input Values from Parameter Files</h3><p>You can use CloudFormation parameters
    files to specify input parameters for the stack.</p><p>This is the same as using
    the AWS CloudFormation CLI <code>create-stack</code> option <code>--parameters</code>
    and a JSON parameters file:</p><pre>aws cloudformation create-stack --stackname
    startmyinstance<br/>--template-body file:///some/local/path/templates/startmyinstance.json<br/>--parameters
    https://your-bucket-name.s3.amazonaws.com/params/startmyinstance-parameters.json</pre><p>Where
    the JSON file contains these parameters:</p><pre>[<br/>  {<br/>    &#34;ParameterKey&#34;:
    &#34;KeyPairName&#34;,<br/>    &#34;ParameterValue&#34;: &#34;MyKey&#34;<br/>  },
    <br/>  {<br/>    &#34;ParameterKey&#34;: &#34;InstanceType&#34;,<br/>    &#34;ParameterValue&#34;:
    &#34;m1.micro&#34;<br/>  }<br/>]</pre><h4>Use a CloudFormation Parameter File</h4><ol><li>In
    <strong>Input Values</strong>, select <strong>Use CloudFormation Template Parameters
    files</strong>.</li><li>In <strong>Path to Parameters.json</strong>, enter the
    path to the parameter file.</li></ol><h5>Source Types</h5><p>Parameter files can
    be used with git repo and AWS S3 source types. See <a href="/article/wtper654tn-add-cloud-formation-templates">Add
    CloudFormation Templates</a>.</p><h5>Git-based Parameter Files</h5><p>Enter the
    full path to the file.</p><p>For Git-based parameter files, the path entered is
    relative to the <strong>URL</strong> setting of the Source Repo Provider used
    by the CloudFormation Provisioner.</p><p>For example, the CloudFormation Provisioner
    you select in <strong>Provisioner</strong> uses a Source Repo Provider with a
    <strong>URL</strong> setting of <code>https://github.com/account-name/cf-files</code>.</p><p>In
    the <strong>cf-files</strong> repo folder there is a file named <strong>parameters.json</strong>.
    So, in <strong>Path to Parameters.json</strong>, you would simply enter <strong>parameters.json</strong>.</p><h5>Encrypted
    Text Secrets</h5><p>Use can use Harness encrypted text secrets in <strong>Path
    to Parameters.json</strong>. See <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use
    Encrypted Text Secrets</a>.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/5wdb3r765g/1602800140159/image.png"/></figure><h5>Multiple
    Parameter Files</h5><p>You can enter paths to single and multiple files. Separate
    multiple files using commas:</p><pre>https://my-bucket.s3.amazonaws.com/parameters1.json,https://my-bucket.s3.amazonaws.com/parameters3.json</pre><h5>Workflow
    Variable Expressions in Paths</h5><p>You can use Harness Workflow variables in
    <strong>Path to Parameters.json</strong>.</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/5wdb3r765g/1602799981111/image.png"/></figure><p>When
    the Workflow is deployed, by itself, in a Pipeline, or in a Trigger, you will
    provide values for the Workflow variables. This allows you to templatize the path.</p><p>See
    <a href="/article/766iheu1bk-add-workflow-variables-new-template">Set Workflow
    Variables</a> and <a href="/article/bov41f5b7o-templatize-a-workflow-new-template">Templatize
    a Workflow</a>.</p><h5>Workflow Variable Expressions in Files</h5><p>You can use
    Harness builtin and Workflow variables in the <u>parameter values</u> inside the
    parameter file. Harness will replace the variables when it executes the <strong>Pre-deployment
    Steps</strong> section.</p><p>For example:</p><pre>[<br/>  {<br/>    &#34;ParameterKey&#34;:
    &#34;KeyPairName&#34;,<br/>    &#34;ParameterValue&#34;: &#34;${workflow.variables.KeyPairNameValue}&#34;<br/>  },
    <br/>  {<br/>    &#34;ParameterKey&#34;: &#34;InstanceType&#34;,<br/>    &#34;ParameterValue&#34;:
    &#34;${workflow.variables.InstanceTypeValue}&#34;<br/>  }<br/>]</pre><h5>Use Parameters
    Files and Inline Values Together</h5><p>You can use <strong>Use CloudFormation
    Template Parameters files</strong> and <strong>Inline Values</strong> together.
    Inline Values override parameter file values.</p><p></p><h3>Option 2: Enter Inline
    Input Values</h3><p>The Input Values are automatically populated with the same
    variables from the CloudFormation Infrastructure Provisioner <strong>Variables</strong>
    section, as described in <a href="/article/wtper654tn-add-cloud-formation-templates">Add
    CloudFormation Templates</a>.</p><p>Enter or select a value for each variable
    in <strong>Input Values</strong>. For encrypted text values, select an Encrypted
    Text secret from Harness Secrets Management.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/78g32khjcu/1559762938698/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>For
    more information, see <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use
    Encrypted Text Secrets</a>.</p><p>Click <strong>Submit</strong>. The <strong>CloudFormation
    Create Stack</strong> step is added to your Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/78g32khjcu/1559763051511/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Now
    your Workflow is set up to provision an infrastructure using your CloudFormation
    template in the CloudFormation Infrastructure Provisioner, and then deploy to
    the provisioned infrastructure.</p><h3>Step 3: Add Infrastructure Definition to
    Phases</h3><p>Now that the Workflow <strong>Pre-deployment</strong> section has
    your CloudFormation Create Stack step added, you need to add the target Infrastructure
    Definition where the Workflow will deploy.</p><p>This is the same Infrastructure
    Definition where you mapped your CloudFormation Infrastructure Provisioner outputs,
    as described in  <a href="/article/4xtxj2f88b-map-cloud-formation-infrastructure">Map
    CloudFormation Infrastructure</a>.</p><p>For Canary Workflows, Infrastructure
    Definitions are added in Phases, in the <strong>Deployment Phases</strong> section.</p><p>In
    the <strong>Deployment Phases</strong> section, click <strong>Add Phase</strong>.
    The Workflow Phase settings appear.</p><ol><li>In <strong>Service</strong>, select
    the Harness Service to deploy.</li><li>In <strong>Infrastructure Definition</strong>,
    select the target Infrastructure Definition where the Workflow will deploy. This
    is the same Infrastructure Definition where you mapped your CloudFormation Infrastructure
    Provisioner outputs, as described in  <a href="/article/4xtxj2f88b-map-cloud-formation-infrastructure">Map
    CloudFormation Infrastructure</a>.<br/>Here is an example:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/5wdb3r765g/1591046603576/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click <strong>Submit</strong>.
    Use the same Infrastructure Definition for the remaining phases in your Canary
    Workflow.</li></ol><p>Once you are done, your Workflow is ready to deploy.</p><h3>Deployment
    Rollback</h3><p>If you have successfully deployed CloudFormation resources and
    on the next deployment there is an error that initiates a rollback, Harness will
    roll back the provisioned infrastructure to the previous, successful version of
    the CloudFormation state.</p><p>Harness will not increment the serial in the state,
    but perform a hard rollback to the exact version of the state provided.</p><p>Harness
    determines what to rollback using a combination of the following Harness entities:</p><p><code>CloudFormation
    Infrastructure Provisioner + Environment</code></p><p>If you have templated these
    settings (using Workflow variables), Harness uses the values it obtains at runtime
    when it evaluates the template variables.</p><h3>Next Steps</h3><ul><li>The variables
    you use to map CloudFormation template outputs in an Infrastructure Definition
    can also be used in other Workflow commands. See <a href="/article/ez8bgluqg5-using-cloudformation-outputs-in-workflow-steps">Using
    CloudFormation Outputs in Workflow Steps</a>.</li><li>If you want to delete the
    stack as part of a Workflow, see <a href="/article/i1agf0s6h4-cloudformation-delete-stack">Remove
    Provisioned Infra with CloudFormation Delete Stack</a>.</li></ul><p></p>'
  slug: provision-cloudformation-create-stack
  tags: []
  is_live: true
