type: article
article_id: 491a6etr7a
user_id: mfr0nxh4be
category_id: 3pyb3kmkbs
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Create a Basic Lambda Deployment
slug: 4-lambda-workflows-and-deployments
description: Create and deploy a Basic Workflow for Lambda.
short_version: Create and deploy a Basic Workflow for Lambda.
tags:
- Lambda
- Basic Workflow
- Basic deployment
- Rollback AWS Lambda
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:23:46.402171Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create a Basic Lambda Deployment
  description: Create and deploy a Basic Workflow for Lambda.
  short_version: Create and deploy a Basic Workflow for Lambda.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/5fnx4hgwsa">NextGen</a>.</div><p></p><p>By default,
    Harness Basic Workflows for Lambda have two steps:</p><ul><li><strong>AWS Lambda</strong>
    - This step deploys the function and also sets the Lambda aliases and tags for
    the function.</li><li><strong>Rollback AWS Lambda</strong> - If a deployment fails,
    this step uses aliases to roll back to the last successful version of a Lambda
    function.</li></ul><p>In this topic:</p><ul><li><a href="#before_you_begin">Before
    You Begin</a></li><li><a href="#step_1_create_the_lambda_workflow">Step 1: Create
    the Lambda Workflow</a></li><li><a href="#step_2_configure_lambda_aliases_and_tags">Step
    2: Configure Lambda Aliases and Tags</a></li><li><a href="#review_rollback_aws_lambda_step">Review:
    Rollback AWS Lambda Step</a></li><li><a href="#example_lambda_workflow_deployment">Example:
    Lambda Workflow Deployment</a></li><li><a href="#next_steps">Next Steps</a></li></ul><p></p><h3>Before
    You Begin</h3><ul><li><a href="/article/lo9taq0pze-1-delegate-and-connectors-for-lambda">Connect
    to AWS for Lambda Deployments</a></li><li><a href="/article/qp8hk4nzbo-2-service-for-lambda">Add
    Lambda Functions</a></li><li><a href="/article/45dm9z3m2h-3-lambda-environments">Define
    your Lambda Target Infrastructure</a></li></ul><p></p><h3>Step 1: Create the Lambda
    Workflow</h3><p>To create a Basic Workflow for Lambda, do the following:</p><ol><li>In
    your Application, click <strong>Workflows</strong>.</li><li>Click <strong>Add
    Workflow</strong>. The <strong>Workflow</strong> dialog appears.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1568939997260/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    <strong>Name</strong>, enter a name for your Workflow, such as <strong>Lambda
    Basic</strong>.</li><li>In <strong>Workflow Type</strong>, select <strong>Basic
    Deployment</strong>.</li><li>In <strong>Environment</strong>, select the Environment
    you created for your Lambda deployment in <a href="/article/45dm9z3m2h-3-lambda-environments">Define
    Your Lambda Target Infrastructure</a>.</li><li>In <strong>Service</strong>, select
    the Lambda Service you created in <a href="/article/qp8hk4nzbo-2-service-for-lambda">Add
    Lambda Functions</a>.</li><li>Select the Infrastructure Definition you created
    in <a href="/article/45dm9z3m2h-3-lambda-environments">Define your Lambda Target
    Infrastructure</a>.</li><li>Click <strong>SUBMIT</strong>. The new Basic Workflow
    is created and pre-configured with the <strong>AWS Lambda</strong> step.</li></ol><p></p><h3>Step
    2: Configure Lambda Aliases and Tags</h3><p>When you deploy the Workflow, the
    AWS Lambda step creates the Lambda functions defined in the Service you attached
    to the Workflow. This is the equivalent of the <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/create-function.html">aws
    lambda create-function</a> API command.</p><p>The next time you run the Workflow,
    manually or as the result of a <a href="/article/xerirloz9a-add-a-trigger-2">Trigger</a>,
    the AWS Lambda step updates the Lambda functions. This is the equivalent of the
    <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/update-function-configuration.html"
    target="_blank">aws lambda update-function-configuration</a> API command.</p><p>In
    the Workflow, click the <strong>AWS Lambda</strong> step. The <strong>AWS Lambda</strong>
    dialog appears.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/491a6etr7a/1580170498200/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    dialog provides settings for Lambda Aliases and Tags.</p><h4>Versioning with Aliases</h4><div
    class="note-callout">This topic assumes that you are familiar with <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-intro.html"
    target="_blank">Lambda versioning</a>.</div><p>Published Lambda functions are
    immutable objects (they cannot be changed), and are versioned with the latest
    always being published to <code>$LATEST</code>. These versions are made up of
    both code as well as configuration settings. Once the code and configuration are
    published, the function becomes immutable.</p><p>Continuous delivery on Lambda
    requires that Harness manage the versioning (via aliases) and rollbacks. Since
    each new version is immutably pushed to <code>$LATEST</code>, rolling back to
    a previous version becomes complicated.</p><p>Harness solves this complexity by
    keeping track of the aliases required to recreate the function, the code, and
    the configuration. An alias is a pointer to one or two versions.</p><p>Harness
    handles the burden of managing the code and configuration in order to properly
    version, tag, or recreate the previous version, thus allowing for fully-automated
    rollbacks based on prescriptive failure strategies.</p><p>The AWS Lambda step
    in the Workflow applies the alias just like you would using the AWS Lambda console:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/491a6etr7a/1580171549268/image.png"/></figure><p>By
    default, Harness names the alias with the name of the Environment by using the
    built-in Harness variable <strong>${env.name}</strong>. You can replace this with
    whatever alias you want, or use other built-in Harness variables by entering <strong>$</strong>
    and seeing what variables are available.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/491a6etr7a/1580171577887/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Once
    the Workflow is deployed and a Lambda function has been versioned using the alias
    in the <strong>AWS Lambda</strong> step, you can see the versioning in the AWS
    Lambda console:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561757672321/image.png"/></figure><h4>Tags</h4><p>Tags
    are key-value pairs that you attach to AWS resources to organize them. For Lambda
    functions, tags simplify the process of tracking the frequency and cost of each
    function invocation.</p><p>You can set the tags for your Lambda functions in the
    <strong>AWS Lambda</strong> step and, once deployed, you can see the tags in the
    AWS Lambda console:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561759915338/image.png"/></figure><h5>Existing
    Tags are Replaced During Deployment</h5><p>When you deploy a new version of your
    function, Harness replaces any existing tags with the tags you added in your Workflow.
    If you leave the tags empty on a subsequent deployment, the tags are replaced
    with empty values.</p><h3>Review: Rollback AWS Lambda Step</h3><p>In the Basic
    Workflow you can see the <strong>Rollback AWS Lambda</strong> step.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561760351880/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>This
    step initiates rollback if the AWS Lambda step fails, or if a step elsewhere in
    the Workflow fails.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561761217340/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    best way to see what the Rollback AWS Lambda step does is to look at a log for
    a rollback.</p><p><strong>Lambda rollbacks are a little unusual:</strong> instead
    of rolling back to a previous, successful version, Harness takes that previous,
    successful version and creates a new version. The new version is deployed as the
    &#34;rollback&#34;. Let&#39;s look at an example. Both the previous, successful
    version and the new version will have the same Sha256.</p><p>In the following
    scenario, the previous, successful version of the function was <strong>version
    2</strong>. When Harness fails to publish <strong>version 3</strong> (we added
    an HTTP call that intentionally failed), it publishes the previous version as
    a new version and names it <strong>version 4</strong>. Version 3 is never deployed.</p><p>First,
    Harness gets the function configuration and VPC settings from the last successful
    version:</p><pre>Begin command execution.<br/>Deploying Lambda with following
    configuration<br/>Function Name: ExampleApp-aws-lambda-Lambda-my-function<br/>S3
    Bucket: harness-example<br/>Bucket Key: lambda/function.zip<br/>Function handler:
    index.handler<br/>Function runtime: nodejs8.10<br/>Function memory: 128<br/>Function
    execution timeout: 3<br/>IAM role ARN: arn:aws:iam::00000000000:role/service-role/TestAwsLamdaRole<br/>VPC:
    vpc-00a7e8ea4fd1ffd9d<br/>Subnet: [subnet-0c945c814c09c9aed, subnet-05788710b1b06b6b1]<br/>Security
    Groups: sg-05e7b8b9cad94b393</pre><p>Next, Harness updates and publishes the previous
    version as version 4:</p><pre>Function: [ExampleApp-aws-lambda-Lambda-my-function]
    exists. Update and Publish<br/><br/>Existing Lambda Function Code Sha256: [U+zi3X2Fu+ojXZzd58XXXXXXXXXXB05evN2U=].<br/><br/>New
    Lambda function code Sha256: [U+zi3X2Fu+ojXZzd58MIKDKXXXXXXXXXXAB05evN2U=]<br/><br/>Function
    code didn&#39;t change. Skip function code update<br/><br/>Updating function configuration<br/><br/>Function
    configuration updated successfully<br/><br/>Publishing new version<br/><br/>Published
    new version: [4]<br/><br/>Published function ARN: [arn:aws:lambda:us-east-1:00000000000:function:ExampleApp-aws-lambda-Lambda-my-function:4]<br/><br/>Untagging
    existing tags from the function: [arn:aws:lambda:us-east-1:00000000000:function:ExampleApp-aws-lambda-Lambda-my-function]<br/><br/>Executing
    tagging for function: [arn:aws:lambda:us-east-1:00000000000:function:ExampleApp-aws-lambda-Lambda-my-function]<br/><br/>Successfully
    deployed lambda function: [ExampleApp-aws-lambda-Lambda-my-function]<br/><br/>=================<br/>Successfully
    completed AWS Lambda Deploy step</pre><p>As you can see, the rollback succeeded
    and version 4 is published.</p><h3>Example: Lambda Workflow Deployment</h3><p>Now
    that the Basic Workflow for Lambda is set up, you can click <strong>Deploy</strong>
    in the Workflow to deploy the Lambda functions in the Harness Service to your
    AWS Lambda environment.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1551916036419/image.png"/></figure><p>In
    <strong>Start New Deployment</strong>, in <strong>Build / Version</strong>, select
    the zip file in the S3 bucket you set up as an Artifact Source for your Harness
    Lambda Service:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561761711663/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>SUBMIT</strong>. The Workflow is deployed.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561761874203/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>To
    see the completed deployment, log into your AWS Lambda console. The Lambda function
    is listed:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/d89x75yp05/1561765132816/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    can also log into AWS and use the <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/get-function.html"
    target="_blank">aws lambda get-function</a> command to view the function:</p><pre>$
    aws lambda get-function --function-name ExampleApp-aws-lambda-Lambda-my-function<br/>{<br/>    &#34;Code&#34;:
    {<br/>        &#34;RepositoryType&#34;: &#34;S3&#34;, <br/>        &#34;Location&#34;:
    &#34;https://prod-04-2014-tasks.s3.amazonaws.com/snapshots/...&#34;<br/>    },
    <br/>    &#34;Configuration&#34;: {<br/>        &#34;TracingConfig&#34;: {<br/>            &#34;Mode&#34;:
    &#34;PassThrough&#34;<br/>        }, <br/>        &#34;Version&#34;: &#34;$LATEST&#34;,
    <br/>        &#34;CodeSha256&#34;: &#34;U+zi3X2Fu+ojXZzd58MIKDK56UaVASDA0KAB05evN2U=&#34;,
    <br/>        &#34;FunctionName&#34;: &#34;ExampleApp-aws-lambda-Lambda-my-function&#34;,
    <br/>        &#34;VpcConfig&#34;: {<br/>            &#34;SubnetIds&#34;: [<br/>                &#34;subnet-05788710b1b06b6b1&#34;,
    <br/>                &#34;subnet-0c945c814c09c9aed&#34;<br/>            ], <br/>            &#34;VpcId&#34;:
    &#34;vpc-00a7e8ea4fd1ffd9d&#34;, <br/>            &#34;SecurityGroupIds&#34;:
    [<br/>                &#34;sg-05e7b8b9cad94b393&#34;<br/>            ]<br/>        },
    <br/>        &#34;MemorySize&#34;: 128, <br/>        &#34;RevisionId&#34;: &#34;4c3d4cfd-f72b-4f4c-9c0a-031d9cfe9e46&#34;,
    <br/>        &#34;CodeSize&#34;: 761, <br/>        &#34;FunctionArn&#34;: &#34;arn:aws:lambda:us-east-1:00000000000:function:ExampleApp-aws-lambda-Lambda-my-function&#34;,
    <br/>        &#34;Handler&#34;: &#34;index.handler&#34;, <br/>        &#34;Role&#34;:
    &#34;arn:aws:iam::00000000000:role/service-role/TestAwsLamdaRole&#34;, <br/>        &#34;Timeout&#34;:
    3, <br/>        &#34;LastModified&#34;: &#34;2019-06-28T22:43:32.241+0000&#34;,
    <br/>        &#34;Runtime&#34;: &#34;nodejs8.10&#34;, <br/>        &#34;Description&#34;:
    &#34;&#34;<br/>    }, <br/>    &#34;Tags&#34;: {<br/>        &#34;Name&#34;: &#34;docFunction&#34;<br/>    }<br/>}</pre><p></p><h3>Next
    Steps</h3><ul><li><a href="/article/g9o2g5jbye-troubleshooting-harness#aws_lambda">Troubleshoot
    AWS Lambda Deployments</a></li></ul><p></p>'
  slug: 4-lambda-workflows-and-deployments
  tags:
  - Lambda
  - Basic Workflow
  - Basic deployment
  - Rollback AWS Lambda
  is_live: true
