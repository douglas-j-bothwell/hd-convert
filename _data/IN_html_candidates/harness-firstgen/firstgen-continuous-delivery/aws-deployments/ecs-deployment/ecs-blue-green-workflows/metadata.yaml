type: article
article_id: 7qtpb12dv1
user_id: mfr0nxh4be
category_id: df9vj316ec
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: 6 - ECS Blue/Green Workflows
slug: ecs-blue-green-workflows
description: Create Blue/Green ECS deployments using ELB or Route 53 DNS.
short_version: Learn different ways to create Blue/Green ECS deployments.
tags:
- ECS Blue Green
- Blue/Green
- ECS Blue/Green
- Route 53 DNS
- Route 53
- ELB
- Upgrade Containers
- weight
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-02T20:28:00.87271Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: 6 - ECS Blue/Green Workflows
  description: Create Blue/Green ECS deployments using ELB or Route 53 DNS.
  short_version: Learn different ways to create Blue/Green ECS deployments.
  body: '<p>This topic describes different methods for creating ECS Blue/Green Workflows.
    </p><div class="note-callout">For Canary and Basic Workflows, see <a href="/article/oinivtywnl-ecs-workflows">ECS
    Workflows</a>.</div><h3>Overview</h3><p>There are two types of ECS Blue/Green
    deployments in Harness:</p><ul><li><strong>Elastic Load Balancer (ALB and NLB)</strong>
    - Using two Target Groups in the ELB, each with its own listener, traffic between
    the stage and production environments is swapped each time a new service is deployed
    and verified.</li></ul><div class="note-callout">Application Load Balancer (ALB)
    and Network Load Balancer (NLB) are supported.</div><ul><li><strong>Route 53</strong>
    <strong>DNS</strong> - Using a AWS Service Discovery namespace containing two
    service discovery services, and a Route 53 zone that hosts CNAME (alias) records
    for each service, Harness swaps traffic between the two service discovery services.
    The swap is achieved using <a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted"
    target="_blank">Weighted Routing</a>, where Harness assigns each CNAME record
    a relative weight that corresponds with how much traffic to send to each resource.</li></ul><p>There
    are no changes required to your Harness Service or Environment when setting up
    ECS Blue/Green Workflows.</p><p>In this section, we will cover the set up for
    both Blue/Green deployment methods. For a detailed discussion of ECS Blue/Green
    using Harness, see the Harness Blog <a href="https://harness.io/2019/02/simplify-amazon-ecs-blue-green-deployments-with-harness/"
    target="_blank">Simplify Amazon ECS Blue/Green deployments with Harness</a>.</p><h3>Review:
    Permissions</h3><p>To create and deploy an ECS Workflow, you must belong to a
    Harness User Group with the following Account Permissions enabled:</p><ul><li><code>Workflow
    Update</code></li><li><code>Workflow Create</code></li></ul><p>See <a href="/article/ven0bvulsj-users-and-permissions">Managing
    Users and Groups (RBAC)</a>.</p><h3>ECS Blue/Green Using ELB</h3><p>With ELB configured
    for ECS Blue/Green deployment, you have old and new versions of your service running
    behind the load balancer. Your ELB uses two listeners, Prod and Stage, each forwarding
    to a different target group where ECS services are run. Blue/Green deployments
    are achieved by swapping listeners between the target groups, always pointing
    the Prod listener to the target group running the latest version.</p><p>In Harness,
    you identify which listeners are the Prod and Stage listeners. When Harness deploys,
    it uses the target group for the Stage listener (for example, <strong>target1</strong>)
    to test the deployment, verifies the deployment, and then swaps the Prod listener
    to use that target group. Next, the Stage listener now uses the old target group
    (<strong>target2</strong>).</p><p>When a new version of the service is deployed,
    the Stage listener and its target group (<strong>target2</strong>) are first used,
    then, after verification, the swap happens and the Prod listener forwards to <strong>target2</strong>
    and the Stage listener now forwards to <strong>target1</strong>.</p><p>To use
    ELB for Blue/Green deployment, you must have the following set up in AWS:</p><ul><li><strong>ELB</strong>
    <strong>Load Balancer</strong> - An application load balancer must be set up in
    your AWS VPC. The VPC used by the ELB must have two subnets, each in a separate
    availability zone, which the ELB will use.</li><li><strong>Two Listeners</strong>
    - A listener checks for connection requests from clients, using the protocol and
    port that you configure, and forwards requests to one or more target groups, based
    on the rules that you define. Your load balancer must have two listeners set up:
    One listener for the production traffic (Prod) that points to one target group,
    and one listener for the stage traffic (Stage) that points to another target group.</li></ul><p>You
    do not need to register instances for the target groups. Harness will perform
    that step during deployment.</p><p>For more information on ELB Application Load
    Balancers, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html"
    target="_blank">What Is an Application Load Balancer?</a> from AWS.</p><div class="note-callout">Application
    Load Balancer (ALB) and Network Load Balancer (NLB) are supported.</div><h4>Ports
    Used in Blue/Green Using ELB</h4><p>There are three places where ports are configured
    in this deployment:</p><ul><li>Harness ECS Service <strong>Container Specification</strong>
    - You will specify ports in the <strong>Port Mappings</strong> in the Container
    Specification.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555976151775/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure>The
    port number used here must also be used in the ELB Target Groups you use for Blue/Green.</li><li><strong>Target
    Group</strong> - You will create two target groups, and Harness will swap them
    to perform Blue/Green. When you create a target group, you will specify the same
    port number as the <strong>Port Mappings</strong> in the Container Specification
    in Service:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555976332223/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>Both
    target groups must use the same port number, which is also the same number as
    the <strong>Port Mappings</strong> in the Container Specification in Service.</li><li><strong>ELB
    Listener</strong> - In your ELB, you create a listener for each target group.
    Listeners also use port numbers, but these are simply entry points for the ELB.
    For example, one listener uses port 80, and the other listener uses 8080.</li></ul><p>If
    the port number used in the <strong>Port Mappings</strong> in the Container Specification
    in Service does not match the port number used in the target groups, you will
    see this error:</p><pre>Error: No container definition has port mapping that matches
    the target port: 80 for target group: <br/>arn:aws:elasticloadbalancing:us-west-1:4xxxxxxx5317:targetgroup/target1/ac96xxxxxx1d16</pre><p>Simply
    correct the port numbers and rerun the deployment.</p><h4>Set Up AWS for Blue/Green
    Using ELB</h4><p>To set up AWS for Blue/Green using ELB and Harness, do the following:</p><ol><li>Ensure
    you have a Harness Delegate installed on an instance in the same VPC where your
    ECS cluster and load balancer are installed.</li><li>In the AWS EC2 console, click
    <strong>Target Groups</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555101250720/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>In
    Target Groups, click <strong>Create target group</strong>.</li><li>Give the target
    group a name, such as <strong>target1</strong>, and port <strong>8080</strong>.</li><li>Select
    the VPC where your ECS cluster instances will be hosted, and click <strong>Create</strong>.</li><li>Create
    a second target group using a new name, such as <strong>target2</strong>, use
    the same port number, <strong>8080</strong>, and the same VPC as the first target.</li></ol><div
    class="note-callout">It is important that you use the same port numbers for both
    target groups.</div><p>When you are done, the target configuration will look something
    like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555975897188/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Now
    that your targets are created, you can create the load balancer that will switch
    between the targets.</p><ol><li>Create a Application Load Balancer. In the EC2
    Console, click <strong>Load Balancers</strong>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555101343016/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>Create Load Balancer</strong>, and then under <strong>Application Load
    Balancer</strong>, click <strong>Create</strong>.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554939511723/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>You
    do not need to add listeners at this point. We will do that after the load balancer
    is created.</p><p>Ensure that the VPC you select for the load balancer has two
    subnets, each in a separate availability zone, like the following:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555021557699/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Once
    your load balancer is created, you can add its Prod and Stage listeners.</p><ol><li>In
    your load balancer, click its <strong>Listeners</strong> tab to add the targets
    you created as listeners.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555101590039/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure></li><li>Click
    <strong>Add Listener</strong>.</li><li>In the <strong>Protocol : port</strong>
    section, enter the port number for your first target, port <strong>80</strong>.
    Listeners do not need to use the same port numbers as their target groups.</li><li>In
    <strong>Default action</strong>, click <strong>Add action</strong>, and select
    <strong>Forward to</strong>, and then select your target.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555023207707/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>Save</strong>.</li><li>Repeat this process to add a listener using the
    other target you created, using a port number such as <strong>8080</strong>. When
    you are done you will have two listeners:</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555023318827/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    AWS ELB setup is complete. Now you can set up you Harness Workflow.</p><h4>Blue/Green
    Workflow with ELB</h4><p>To set up a Blue/Green deploy using ELB in Harness, do
    the following:</p><ol><li>In Harness, in your Application, click <strong>Workflows</strong>,
    and then click <strong>Add Workflow</strong>. The <strong>Workflow</strong> dialog
    appears.</li><li>Enter the following options to select a Blue/Green Deployment
    using DNS:</li></ol><ul><li><strong>Name</strong> - Enter the name of the Workflow,
    such as <strong>ECS BG ELB</strong>.</li><li><strong>Description</strong> - Enter
    a description to provide context for the Workflow.</li><li><strong>Workflow Type</strong>
    - Select <strong>Blue/Green Deployment</strong>.</li><li><strong>Environment</strong>
    - Select the Environment where the ECS Service Infrastructure you want to use
    is configured.</li><li><strong>Service</strong> - Select the ECS Service you created
    for your Application.</li><li><strong>Infrastructure Definition</strong> - Select
    the Infrastructure Definition where you want to deploy your ECS Service.</li></ul><ol><li
    style="counter-increment:li 2" start="3">When you select the Infrastructure Definition,
    the <strong>Blue Green Switch</strong> field appears.</li><li>In <strong>Blue
    Green Switch</strong>, select <strong>Elastic Load Balancer (ELB)</strong>. When
    you are done the dialog will look something like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1582745305425/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>SUBMIT</strong>. The ECS Blue Green Workflow appears. The following image
    shows the default steps.</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1555102766819/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>The
    following section describes how to configure the default steps.</p><h4>ECS Blue
    Green Load Balancer Setup</h4><p>The ECS Blue Green Load Balancer Setup step is
    where you specify the load balancer and target listeners for Harness to use when
    deploying.</p><p>Click <strong>ECS Blue Green Load Balancer Setup</strong> top
    open it. ECS Blue Green Load Balancer Setup has the following fields:</p><ul><li><strong>ECS
    Service Name</strong> - Enter a name for the ECS service that will be deployed.
    You will see this name in your cluster once the service is deployed.</li><li><strong>Desired
    Instance Count</strong> - Specify the number of instances to deploy. The first
    time you run this Workflow, there are no instances of the service running. You
    can set a number in <strong>Max Instances</strong> or <strong>Fixed Instances
    Count</strong>. After this Workflow has been deployed successfully, you can set
    a number in <strong>Fixed Instances Count</strong> only.</li><li><strong>Elastic
    Load Balancer</strong> - Click here and select the AWS load balancer you added.
    Harness uses the Delegate to locate the load balancers and list them in Elastic
    Load Balancer. If you do not see your load balancer, ensure that the Delegate
    is in the same VPC. Once the load balancer is selected, Harness will populate
    the Prod and Stage Listener drop-downs.</li><li><strong>Prod Listener</strong>
    - Select the ELB listener that you want to use as the Prod Listener.</li><li><strong>Stage
    Listener</strong> - Select the ELB listener that you want to use as the Stage
    Listener.</li><li><strong>Listener Rules</strong> — If you are using <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules"
    target="_blank">Listener Rules</a> in your target groups, you can select them
    in <strong>Production Listener Rule ARN</strong> and <strong>Stage Listener Rule
    ARN</strong>.<ul><li>If you do not select a listener rule, Harness uses the Default
    rule. You do not need to select the Default rule.</li><li>Default rules don&#39;t
    have <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#rule-condition-types"
    target="_blank">conditions</a>, but other rules do. If you select other rules,
    ensure the traffic that will use the rules matches the conditions you have set
    in the rules.</li><li>For example, if you have a path condition on a rule to enable <a
    href="https://docs.aws.amazon.com/elasticloadbalancing/latest/application/tutorial-load-balancer-routing.html"
    target="_blank">path-based routing</a>, ensure that traffic uses that path.</li></ul></li></ul><p>The
    following image shows how the AWS load balancer and listeners map to the ECS Blue
    Green Load Balancer Setup settings:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1593727647204/image.png"/></figure><ul><li><strong>IAM
    Role</strong> - You can leave this field blank as this setting isn&#39;t often
    necessary with Blue/Green ECS deployments. You can select the IAM role to use
    when using the ELB. The role must have the <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html">AmazonEC2ContainerServiceRole</a> policy.</li><li><strong>Target
    Container Name</strong> and <strong>Target Port</strong> - You can leave these
    fields blank. They are used if the container specification has multiple container
    definitions, which is not common. When you deploy your ECS service with Harness,
    Harness uses the container name and port from the <strong>Service Specification</strong>
    in the Harness Service. If you choose to use these fields, note that as an ECS
    requirement Target Container cannot be empty if Target Port is defined.</li><li><strong>Service
    Steady State Wait Timeout</strong> - Enter how many minutes Harness should wait
    for the ECS service to reach steady state. You cannot use Harness variable expressions
    in this setting. They are supported in Basic and Canary Workflow types, when using
    Replica Scheduling.</li><li><strong>AWS Auto Scalar Configuration</strong> - For
    more information, see <a href="/article/oinivtywnl-ecs-workflows#aws_auto_scaling_with_ecs">AWS
    Auto Scaling with ECS</a>.</li></ul><p>When you are finished, click <strong>SUBMIT</strong>.
    You now have defined the load balancer and target listeners for Harness to use
    when executing the Blue/Green deployment.</p><p>Here&#39;s what the <strong>ECS
    Blue Green Load Balancer Setup</strong> step looks like in a Deployment of the
    Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556035791743/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Here&#39;s
    the output from the step, where the old version of the service is deleted, and
    the load balancer is set up to use the new version via target group <strong>target1</strong>:</p><pre
    class="hljs json">Cluster Name: docs-ecs<br/>Docker Image Name: harness/todolist-sample:4<br/>Container
    Name: harness_todolist-sample_4<br/>Creating task definition ecs__blue__green__elb
    with container image harness/todolist-sample:4<br/><strong>Deleting Old Service</strong>  {Green
    Version}: ecs__blue__green__elb__15<br/>Deletion successful<br/>Setting load balancer
    to service<br/>Creating ECS service ecs__blue__green__elb__18 in cluster docs-ecs
    <br/>Checking for Auto-Scalar config for existing services<br/>No Auto-scalar
    config found for existing services<br/>Load Balancer Name: docs-example<br/>Target
    Group ARN: arn:aws:elasticloadbalancing:us-west-1:44xxxxxxx17:targetgroup/<strong>target1</strong>/6998xxxxxfbfe</pre><h4>Upgrade
    Containers</h4><p>The Upgrade Containers step adds new ECS service instances.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1662150477171/image.png"/></figure><p>In
    <strong>Desired Instances</strong>, set the number or percentage of ECS service
    instances to use for this stage.</p><p>The value in <strong>Desired Instances</strong>
    relates to the number of ECS service instances set in the <strong>Setup Load Balancer</strong>
    dialog. For example, if you entered 2 as the <strong>Desired Instance Count</strong>
    in <strong>Setup Load Balancer</strong> and then enter 50 Percent in <strong>Upgrade
    Containers</strong>, that means Harness will deploy 1 ECS service instance.</p><div
    class="tip-callout"><strong>Use Expressions:</strong> You can use <a href="/article/9dvxcegm90-variables">Harness
    Service, Environment Override, and Workflow</a> variable expressions in <strong>Desired
    Instances</strong> by selecting <strong>Use Expression</strong> and then entering
    the expression, like <code>${workflow.variables.DesiredInstances}</code>. When
    you run the Workflow, you can provide a value for the variable.</div><p>Here&#39;s
    what the <strong>Upgrade Containers</strong> step looks like in a Deployment of
    the Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556036125691/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Here&#39;s
    the output from the step, where the desired count is updated to 2, and 2 targets
    are registered in <strong>target1</strong>.</p><pre>Resize service [ecs__blue__green__elb__18]
    in cluster [docs-ecs] from 0 to 2 instances<br/>Waiting for service: ecs__blue__green__elb__18
    to reflect updated desired count: 2<br/>Current service desired count return from
    aws for Service: ecs__blue__green__elb__18 is: 2<br/>Service update request successfully
    submitted.<br/>Waiting for pending tasks to finish. 0/2 running ...<br/>Waiting
    for pending tasks to finish. 0/2 running ...<br/>AWS Event: (service ecs__blue__green__elb__18)
    has reached a steady state.<br/>Waiting for pending tasks to finish. 2/2 running
    ...<br/>AWS Event: (service ecs__blue__green__elb__18) <strong>has started 2 tasks</strong>:
    <br/>    (task 897f0145edb440daae1952e7a9f6d3f6) (task a97da5fbda594f6aa8bdf82296572bf1).<br/>Waiting
    for service to be in steady state...<br/>AWS Event: (service ecs__blue__green__elb__18)
    <strong>registered 2 targets</strong><br/>    in (target-group arn:aws:elasticloadbalancing:us-west-1:448640225317:targetgroup/<strong>target1</strong>/6998b12a548efbfe)<br/>AWS
    Event: (service ecs__blue__green__elb__18) has reached a steady state.<br/>Service
    has reached a steady state<br/>No Autoscalar config provided.<br/><br/>Container
    IDs:<br/>  10.0.0.132 (new)<br/>  10.0.0.132 (new)<br/><br/>Completed operation<br/>----------<br/><br/>Service
    [ecs__blue__green__elb__17] in cluster [docs-ecs] stays at 2 instances<br/>No
    Autoscalar config provided.<br/>Completed operation<br/>----------</pre><h4>Upgrade
    Containers and Rollback Containers Steps are Dependent</h4><p>In order for rollback
    to add ECS Auto Scaling to the previous, successful service, you must have both
    the <strong>Upgrade Containers</strong> and <strong>Rollback Containers</strong>
    steps in the same Phase.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/28ehkmqy3v/1610478708602/image.png"/></figure><p>Since
    ECS Auto Scaling is added by the <strong>Upgrade Containers</strong> step, if
    you delete <strong>Upgrade Containers</strong>, then <strong>Rollback Containers</strong>
    has no ECS Auto Scaling to roll back to.</p><div class="note-callout">If you want
    to remove ECS Auto Scaling from a Phase, delete <u>both</u> the <strong>Upgrade
    Containers</strong> and <strong>Rollback Containers</strong> steps. The Phase
    will no longer perform ECS Auto Scaling during deployment or rollback.</div><h4>Swap
    Target Groups</h4><p>The <strong>Swap Target Groups</strong> step performs the
    Blue/Green route swap once the deployment is verified. That is why <strong>Swap
    Target Groups</strong> comes after the <strong>Verify Service</strong> section
    in the Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1580169777516/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>When
    you deploy, Harness will use the target group for the <strong>Stage Listener</strong>
    in the <strong>Setup Load Balancer</strong> step for deployment. After verifying
    the success of the deployment, the <strong>Swap Target Groups</strong> step simply
    swaps the target groups between the listeners. Now, the target group with the
    latest version receives production traffic. The target group with the old version
    receives the stage traffic.</p><p>The following image shows two ECS deployments.
    In the first deployment, the service uses the <strong>target1</strong> target
    group, and in the second deployment, the service uses the <strong>target2</strong>
    target group.</p><p></p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556035499496/image.png"/></figure><p><strong>Downsize
    Older Service:</strong> choose whether to downsize the older, previous version
    of the service.</p><p>If you enable this option, the previous service is downsized
    to 0. The service is downsized, but not deleted. If the older service needs to
    be brought back up again, it is still available.</p><p><strong>Delay:</strong>
    use this setting to to reduce incidents where non-idle connections are sent to
    the old service before ELB terminates the connection. This helps you ensure that
    all traffic has migrated to the new service before Harness begins shutting down
    the old service.</p><p></p><div class="note-callout">Currently, the <strong>Delay</strong>
    feature is behind a Feature Flag. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature. Feature Flags can only
    be removed for Harness Professional and Essentials editions. Once the feature
    is released to a general audience, it&#39;s available for Trial and Community
    Editions.<br/><br/>See <a href="https://changelog.harness.io/?categories=fix,improvement,new"
    target="_blank">New features added to Harness</a> and <a href="https://changelog.harness.io/?categories=early-access"
    target="_blank">Features behind Feature Flags</a> (Early Access) for Feature Flag
    information.</div><p></p><p>Here&#39;s what the <strong>Swap Target Groups</strong>
    step looks like in a Deployment of the Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556036342970/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Here&#39;s
    the output from the step, where the Prod listener is now pointed to <strong>target1</strong>
    and the Stage listener is pointed to <strong>target2</strong>.</p><pre>Updating
    ELB <strong>Prod Listener</strong> to Forward requests to Target group associated
    with new Service, TargetGroup:<br/>    arn:aws:elasticloadbalancing:us-west-1:44xxxx17:targetgroup/<strong>target1</strong>/69xxxxxxxefbfe<br/>Updating
    ELB <strong>Stage Listener</strong> to Forward requests to Target group associated
    with new Service, TargetGroup:<br/>    arn:aws:elasticloadbalancing:us-west-1:44xxxx17:targetgroup/<strong>target2</strong>/04xxxxxxxda71e3<br/>Successfully
    update Prod and Stage Listeners<br/>Updating service: [ecs__blue__green__elb__18]
    with tag: [BG_VERSION:BLUE]<br/>Tag update successful<br/>Updating service: [ecs__blue__green__elb__17]
    with tag: [BG_VERSION:GREEN]<br/>Tag update successful<br/>Downsizing Green Service:
    ecs__blue__green__elb__17<br/>Waiting for service: ecs__blue__green__elb__17 to
    reflect updated desired count: 0<br/>Current service desired count return from
    aws for Service: ecs__blue__green__elb__17 is: 0<br/>Waiting: [30] seconds for
    the downsize to complete ECS services to synchronize</pre><p>You can also see
    the service count for the old version downsized to 0.</p><p>If you look at the
    service in the AWS ECS console, you can see the <code>BLUE</code> and <code>GREEN</code>
    tags added to them to indicate their status using the <code>BG_VERSION</code>
    key:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556036810904/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h3>ECS
    Blue/Green Using DNS</h3><p>Using AWS Route 53 DNS, you can swap production traffic
    from an older version of a service to the newer version of the service. In this
    architecture, both services (Blue and Green) have a Service Discovery Service
    associated with them. This associates the services with URLs in a hosted DNS zone
    that was created when the namespace of the Service Discovery Services was created.</p><p>To
    use DNS for Blue/Green deployment, you must have the following set up in AWS:</p><ul><li><strong>Service
    Discovery namespace</strong> - A Service Discovery namespace containing two Service
    Discovery services. This is added in AWS Cloud Map.</li><li><strong>Route 53 zone</strong>
    - An Amazon Route 53 zone to host the CNAME (alias) records Harness will register
    and use to swap traffic between the two Service Discovery services. When you create
    a namespace in AWS Cloud Map a zone is created automatically; however, Harness
    cannot modify this zone due to AWS restrictions. Consequently, you need to create
    a separate DNS zone where Harness can register CNAME records.</li></ul><p>Harness
    will register the CNAME records in the zone when you first deploy your Workflow.
    You simply provide Harness with the name to use in the CNAME records.</p><p>Let&#39;s
    look at an example AWS setup. Here is the namespace <strong>bg-namespace</strong>
    created in AWS Cloud Map:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554754388743/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>When
    you create the namespace, AWS created a Route 53 DNS zone for the namespace automatically,
    containing the NS and SOA record for the namespace. In our example, the namespace
    is <strong>bg-namespace</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554755045338/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Harness
    is not able to modify this zone due to AWS restrictions, and so you need to add
    another zone where Harness can register CNAME records, and manage their weights
    for routing. In our example, we will create another namespace name <strong>bg-namespace_upper</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554765018445/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>When
    you are done, Route 53 will have two zones: the zone automatically created by
    AWS Cloud Map (<strong>bg-namespace</strong>) and the zone you created manually
    (<strong>bg-namespace_upper</strong>):</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554767613128/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>Next,
    you need to create the two services in the namespace. You can do this via AWS
    CLI or the AWS Cloud Map console. Below are examples using the AWS Cloud Map console.</p><h4>Set
    up AWS for Blue/Green Using DNS</h4><p>To create the two new services, in AWS
    Cloud Map, in your namespace, click <strong>Create service</strong>.</p><ol><li>For
    <strong>Service name</strong>, enter a name such as <strong>service1</strong>.</li><li>In
    <strong>DNS configuration</strong>, select <strong>Weighted routing</strong>,
    and in Record type, select <strong>SRV</strong>.</li><li>Click <strong>Create
    service</strong>. The new service is added to the namespace.</li><li>Repeat these
    steps to add a second service, <strong>service2</strong>. When you are finished,
    the AWS Cloud Map page for the namespace will look something like this:</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554767190991/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Now
    that you AWS setup is complete, you can create your Blue/Green Deployment Workflow
    in Harness.</p><h4>Blue/Green Workflow with DNS</h4><p>To set up a Blue/Green
    using DNS in Harness, do the following:</p><ol><li>In Harness, in your Application,
    click <strong>Workflows</strong>, and then click <strong>Add Workflow</strong>.
    The <strong>Workflow</strong> dialog appears.</li><li>Enter the following options
    to select a Blue/Green Deployment using DNS:</li></ol><ul><li><strong>Name</strong>
    - Enter the name of the Workflow, such as <strong>ECS BG DNS</strong>.</li><li><strong>Description</strong>
    - Enter a description to provide context for the Workflow.</li><li><strong>Workflow
    Type</strong> - Select <strong>Blue/Green Deployment</strong>.</li><li><strong>Environment</strong>
    - Select the Environment where the ECS Service Infrastructure you want to use
    is configured.</li><li><strong>Service</strong> - Select the ECS Service you created
    for your Application.</li><li><strong>Infrastructure Definition</strong> - Select
    the Infrastructure Definition where you want to deploy your ECS Service.</li></ul><ol><li
    style="counter-increment:li 2" start="3">When you select the Infrastructure Definition,
    the <strong>Blue Green Switch</strong> field appears.</li><li>In <strong>Blue
    Green Switch</strong>, select <strong>Domain Name System (DNS)</strong>. When
    you are done the dialog will look something like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1582745279792/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>SUBMIT</strong>. The ECS Blue Green Workflow appears. The following image
    shows the default steps.</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554836979167/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>The
    following section describe the default steps.</p><h4>ECS Blue Green Route 53 Setup</h4><p>The
    ECS Blue Green Route 53 Setup step is where you will specify the namespace, services,
    and hosted zone information needed by Harness to register the CNAME records for
    your services.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554843534855/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>The
    <strong>ECS Blue Green Route 53 Setup</strong> step has the following settings.</p><ul><li><strong>ECS
    Service Name</strong> - Enter a name for the ECS Service that will be deployed
    AWS, or use the default values provided by Harness.</li><li><strong>Desired Instance
    Count</strong> - Specify the number of service instances to deploy, using <strong>Same
    as already running instances</strong> or <strong>Fixed</strong>.</li><li><strong>Service
    Discovery</strong> - This section is where you will specify the AWS namespace,
    service, and zone information.</li><li><strong>Specification - 1</strong> and
    <strong>Specification - 2</strong> - These are the JSON specifications for the
    services you created in your namespace. You will need to enter the JSON description
    for each service, like this:</li></ul><pre>{<br/>    &#34;registryArn&#34;: &#34;arn:aws:servicediscovery:us-east-1:52516162:service/srv-xxxxxxxxx&#34;,<br/>    &#34;containerName&#34;:
    &#34;${CONTAINER_NAME}&#34;,<br/>    &#34;containerPort&#34;: 8080<br/>}</pre><p>You
    can use <code>containerPort</code> or <code>port</code>.</p><p>To obtain the <code>registryArn</code>,
    look at the <strong>Service ID</strong> in AWS Cloud Map:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1554850839542/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>Copy
    the <strong>Service ID</strong> for each service and enter them into the JSON
    for <strong>Specification - 1</strong> and <strong>Specification - 2</strong>,
    like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556039528352/image.png"/></figure><ul><li><strong>Alias
    (canonical) Name</strong> - The name for the alias that you want redirected using
    the CNAME records. Typically, this is your app name, like <strong>myapp</strong>.
    You must include the zone name also. In our example, we are using <strong>bg-namespace_upper</strong>
    as the zone name, and so, in <strong>Alias (canonical) Name</strong>, we enter
    <code>myapp.bg-namespace_upper.</code>. Note the dot at the end of the name entered.</li><li><strong>Zone
    Hosting Alias</strong> - The name of the zone hosting the CNAME record.</li></ul><p>The
    following image shows the <strong>Alias (canonical) Name</strong> and <strong>Zone
    Hosting Alias</strong> settings and their corresponding DNS records. In this example,
    the CNAME records are already registered, but when you first deploy this will
    not be the case and Harness will register the records.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556040074930/image.png"/></figure><p></p><ul><li><strong>IAM
    Role</strong> - You can leave this field blank as this setting isn&#39;t often
    necessary with Blue/Green ECS deployments. You can select the IAM role to use
    when using the ELB. The role must have the <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html">AmazonEC2ContainerServiceRole</a> policy.</li><li><strong>Target
    Container Name</strong> and <strong>Target Port</strong> - You can leave these
    fields blank. They are used if the container specification has multiple container
    definitions, which is not common. When you deploy your ECS service with Harness,
    Harness uses the container name and port from the <strong>Service Specification</strong> in
    the Harness Service. If you choose to use these fields, note that as an ECS requirement
    Target Container cannot be empty if Target Port is defined.</li><li><strong>AWS
    Auto Scalar Configuration</strong> - For more information, see <a href="/article/oinivtywnl-ecs-workflows#aws_auto_scaling_with_ecs">AWS
    Auto Scaling with ECS</a>.</li></ul><p>Here&#39;s what the <strong>Setup Route
    53</strong> step looks like in a Deployment of the Workflow.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556054238498/image.png"/></figure><p></p><p>Here&#39;s
    the output from the step, where the current service ID is listed, and the service
    ID you provided in the <strong>Specification - 1</strong> field is used to create
    the new service.</p><pre>Cluster Name: docs-ecs<br/>Docker Image Name: harness/todolist-sample:4<br/>Container
    Name: harness_todolist-sample_4<br/>Creating task definition ecs_bg_dns with container
    image harness/todolist-sample:4<br/>Current ECS service uses: [arn:aws:servicediscovery:us-west-1:448640225317:service/<strong>srv-c53l4mh5xym45wtm</strong>]<br/>Using:
    [arn:aws:servicediscovery:us-west-1:448640225317:service/<strong>srv-ytqooonrmzj63r76</strong>]
    for new service.<br/>Creating ECS service ecs_bg_dns__8 in cluster docs-ecs <br/>Checking
    for Auto-Scalar config for existing services<br/>No Auto-scalar config found for
    existing services</pre><p></p><h4>Upgrade Containers</h4><p>The Upgrade Containers
    step adds new ECS service instances.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1580170127763/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In <strong>Desired
    Instances</strong>, set the number or percentage of ECS service instances to use
    for this stage.</p><p>The value in <strong>Desired Instances</strong> relates
    to the number of ECS service instances set in the <strong>Setup Route 53</strong> dialog.
    For example, if you entered 2 as the <strong>Desired Instance Count</strong> in <strong>Setup
    Route 53</strong> and then enter 50 Percent in <strong>Upgrade Containers</strong>,
    that means, Harness will deploy 1 ECS service instance.</p><p>Here&#39;s what
    the <strong>Upgrade Containers</strong> step looks like in a Deployment of the
    Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556056825024/image.png"/></figure><p></p><p>Here&#39;s
    the output from the step, where the service count is increased to 2.</p><pre>Resize
    service [ecs_bg_dns__8] in cluster [docs-ecs] from 0 to 2 instances<br/>Waiting
    for service: ecs_bg_dns__8 to reflect updated desired count: 2<br/>Current service
    desired count return from aws for Service: ecs_bg_dns__8 is: 2<br/>Service update
    request successfully submitted.<br/>Waiting for pending tasks to finish. 0/2 running
    ...<br/>Waiting for pending tasks to finish. 0/2 running ...<br/>AWS Event: (service
    ecs_bg_dns__8) has started 2 tasks: (task b870fbd5f86342e6a2bc94600598fa25) (task
    90f926fdf9c44b8ea35d0ad0474013d6).<br/>Waiting for pending tasks to finish. 0/2
    running ...<br/>Waiting for pending tasks to finish. 2/2 running ...<br/>Waiting
    for service to be in steady state...<br/>AWS Event: (service ecs_bg_dns__8) has
    reached a steady state.<br/>Service has reached a steady state<br/>No Autoscalar
    config provided.<br/><br/>Container IDs:<br/>  10.0.0.132 (new)<br/>  10.0.0.132
    (new)<br/><br/>Completed operation<br/>----------<br/><br/>Service [ecs_bg_dns__7]
    in cluster [docs-ecs] stays at 2 instances<br/>No Autoscalar config provided.<br/>Completed
    operation<br/>----------<br/></pre><h4>Upgrade Containers and Rollback Containers
    Steps are Dependent</h4><p>In order for rollback to add ECS Auto Scaling to the
    previous, successful service, you must have both the <strong>Upgrade Containers</strong>
    and <strong>Rollback Containers</strong> steps in the same Phase.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/28ehkmqy3v/1610478708602/image.png"/></figure><p>Since
    ECS Auto Scaling is added by the <strong>Upgrade Containers</strong> step, if
    you delete <strong>Upgrade Containers</strong>, then <strong>Rollback Containers</strong>
    has no ECS Auto Scaling to roll back to.</p><div class="note-callout">If you want
    to remove ECS Auto Scaling from a Phase, delete <u>both</u> the <strong>Upgrade
    Containers</strong> and <strong>Rollback Containers</strong> steps. The Phase
    will no longer perform ECS Auto Scaling during deployment or rollback.</div><h4>Change
    Route 53 Weights</h4><p>A weight value determines the proportion of DNS queries
    that Route 53 responds to using the current record. The <strong>Change Route 53
    Weights</strong> step is configured with two weights to apply to the CNAME records
    Harness registers.</p><p>By default, the weights are <strong>100</strong> for
    the new service and <strong>0</strong> for the old service. A weight of <strong>0</strong>
    disables routing to a resource using this CNAME record. This performs a complete
    redirect to the new service each time a new service is deployed.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/7qtpb12dv1/1580170102424/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Here&#39;s
    what the Change Route 53 Weights step looks like in a Deployment of the Workflow.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556058881570/image.png"/></figure><p>The
    Details section displays the service names and weights.</p><p>Here&#39;s the output
    from the step, where the CNAME records are registered with the zone you added,
    and the weights are applied. Tags for the ECS services are also added to identify
    that they are BLUE or GREEN. The service for the old version is downsized to 0
    but not deleted.</p><pre>Upserting parent record: [myapp.bg-namespace_upper.]
    with CNAME records: [service2.bg-namesapce:100] and [service1.bg-namesapce:0]<br/>Swapping
    ECS tags Blue and Green<br/>Updating service: [ecs_bg_dns__8] with tag: [BG_VERSION:BLUE]<br/>Tag
    update successful<br/>Updating service: [ecs_bg_dns__7] with tag: [BG_VERSION:GREEN]<br/>Tag
    update successful<br/>Downsizing old service if needed<br/>Downsizing Green Service:
    ecs_bg_dns__7<br/>Waiting for service: ecs_bg_dns__7 to reflect updated desired
    count: 0<br/>Current service desired count return from aws for Service: ecs_bg_dns__7
    is: 0<br/>Waiting: [30] seconds for the downsize to complete ECS services to synchronize</pre><p>In
    the Route 53 console, you can see the result of the CNAME weights in the zone
    you created, in the <strong>Weight</strong> column. Note that the <strong>Set
    ID</strong> column also lists <strong>Harness-Green</strong> or <strong>Harness-Blue</strong>.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556058383102/image.png"/></figure><p>You
    can also see the Blue/Green tag in the ECS console, in the <strong>Tags</strong>
    tab for the service:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/1xl5xcpzh5/1556063556939/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><h3>Rollbacks</h3><p>See
    <a href="/article/d7rnemtfuz-ecs-rollback">ECS Rollbacks</a>.</p><h3>Post-Production
    Rollback</h3><p>Harness also supports post-production rollback for cases where
    you want to recover from a deployment that succeeded on technical criteria, but
    that you want to undo for other reasons.</p><p>See <a href="/article/2f36rsbrve-post-deployment-rollback">Rollback
    Production Deployments</a>.</p><p></p><h3>Next Step</h3><ul><li><a href="/article/oinivtywnl-ecs-workflows">ECS
    Workflows</a></li><li><a href="/article/5229btw1mq-ecs-setup-in-yaml">ECS Setup
    in YAML</a></li><li><a href="/article/rdk1j5s32z-ecs-troubleshooting">ECS Troubleshooting</a></li><li><a
    href="/article/zc1u96u6uj-pipeline-configuration">Pipelines</a></li><li><a href="/article/xerirloz9a-add-a-trigger-2">Triggers</a></li></ul><p></p>'
  slug: ecs-blue-green-workflows
  tags:
  - ECS Blue Green
  - Blue/Green
  - ECS Blue/Green
  - Route 53 DNS
  - Route 53
  - ELB
  - Upgrade Containers
  - weight
  is_live: true
