type: article
article_id: x87732ti68
user_id: mfr0nxh4be
category_id: mkyr84ulx3
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: 4 - Azure ACR to AKS Workflows and Deployments
slug: 4-azure-workflows-and-deployments
description: Create a Rolling Update Workflow in Harness for AKS (Azure Kubernetes
  Service).
short_version: Create a Rolling Update Workflow in Harness for AKS.
tags:
- Azure
- AKS
- Rolling Update
- Rolling
- Rolling Deployment
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:29:12.130114Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: 4 - Azure ACR to AKS Workflows and Deployments
  description: Create a Rolling Update Workflow in Harness for AKS (Azure Kubernetes
    Service).
  short_version: Create a Rolling Update Workflow in Harness for AKS.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/m7nkbph0ac">NextGen</a>.</div><p></p><p>This section
    will walk you through creating a Kubernetes Workflow in Harness and what the Workflow
    steps deployment logs include:</p><ul><li><a href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#workflow_setup">Workflow
    Setup</a><ul><li><a href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#initialize">Initialize</a></li><li><a
    href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#prepare">Prepare</a></li><li><a
    href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#apply">Apply</a></li><li><a
    href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#wait_for_steady_state">Wait
    for Steady State</a></li><li><a href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#wrap_up">Wrap
    Up</a></li></ul></li><li><a href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#aks_workflow_deployment">AKS
    Workflow Deployment</a></li><li><a href="https://docs.harness.io/article/x87732ti68-4-azure-workflows-and-deployments#next_step">Next
    Step</a></li></ul><h3>Workflow Setup</h3><p>In this guide, the Workflow performs
    a simple Rolling Deployment, which is a Kubernetes Rolling Update. For a detailed
    explanation, see <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/">Performing
    a Rolling Update</a> from Kubernetes.</p><div class="note-callout">For information
    on other Workflow types, see <a href="/category/n03qfofd5w-kubernetes-deployments">Kubernetes
    Deployments</a>.</div><p>To create a Rolling Workflow for Kubernetes, do the following:</p><ol><li>In
    your Application, click <strong>Workflows</strong>.</li><li>Click <strong>Add
    Workflow</strong>. The <strong>Workflow</strong> dialog appears.</li><li>In <strong>Name</strong>,
    enter a name for your Workflow, such as <strong>Todo List AKS</strong>.</li><li>In
    <strong>Workflow Type</strong>, select <strong>Rolling Deployment</strong>.</li><li>In
    <strong>Environment</strong>, select the Environment you create for your Kubernetes
    deployment.</li><li>In Infrastructure Definition, select the Infrastructure Definition
    you created earlier. If the Infrastructure Definition does not appear, ensure
    that you added the Service to the Infrastructure Definition <strong>Scope to specific
    Services</strong> setting.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1568403300479/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click
    <strong>SUBMIT</strong>. The new Rolling Workflow is pre-configured.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568403331315/image.png" style="max-height:50%;max-width:50%"
    data-hd-height="50%" data-hd-width="50%"/></figure><p>As you can see, there is
    a Rollout Deployment step set up automatically. That&#39;s all the Workflow setup
    required. The Workflow is ready to deploy. When it is deployed, it will look like
    this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/v13edrsui8/1551999548085/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    can see each section of the Rollout Deployment listed on the right. To see what
    that Rollout Deployment step does at runtime, let&#39;s look at the logs for each
    section.</p><h4>Initialize</h4><p>The Initialize step renders the Kubernetes object
    manifests in the correct order and validates them.</p><pre>Initializing..<br/><br/><br/>Manifests
    [Post template rendering] :<br/><br/>---<br/><br/>apiVersion: v1<br/>kind: Namespace<br/>metadata:<br/>  name:
    example<br/>---<br/>apiVersion: &#34;v1&#34;<br/>kind: &#34;Secret&#34;<br/>metadata:<br/>  annotations:<br/>    harness.io/skip-versioning:
    &#34;true&#34;<br/>  finalizers: []<br/>  labels: {}<br/>  name: &#34;harness-example-dockercfg&#34;<br/>  ownerReferences:
    []<br/>data:<br/>  .dockercfg: &#34;***&#34;<br/>stringData: {}<br/>type: &#34;kubernetes.io/dockercfg&#34;<br/>---<br/>apiVersion:
    v1<br/>kind: ConfigMap<br/>metadata:<br/>  name: harness-example-config<br/>data:<br/>  key:
    value<br/>---<br/>apiVersion: v1<br/>kind: Service<br/>metadata:<br/>  name: harness-example-svc<br/>spec:<br/>  type:
    LoadBalancer<br/>  ports:<br/>  - port: 80<br/>    targetPort: 80<br/>    protocol:
    TCP<br/>  selector:<br/>    app: harness-example<br/>---<br/>apiVersion: apps/v1<br/>kind:
    Deployment<br/>metadata:<br/>  name: harness-example-deployment<br/>spec:<br/>  replicas:
    1<br/>  selector:<br/>    matchLabels:<br/>      app: harness-example<br/>  template:<br/>    metadata:<br/>      labels:<br/>        app:
    harness-example<br/>    spec:<br/>      imagePullSecrets:<br/>      - name: harness-example-dockercfg<br/>      containers:<br/>      -
    name: harness-example<br/>        image: harnessexample.azurecr.io/todolist-sample:latest<br/>        envFrom:<br/>        -
    configMapRef:<br/>            name: harness-example-config<br/><br/><br/>Validating
    manifests with Dry Run<br/><br/>kubectl --kubeconfig=config apply --filename=manifests-dry-run.yaml
    --dry-run<br/>namespace/example configured (dry run)<br/>secret/harness-example-dockercfg
    created (dry run)<br/>configmap/harness-example-config created (dry run)<br/>service/harness-example-svc
    configured (dry run)<br/>deployment.apps/harness-example-deployment configured
    (dry run)<br/><br/>Done.</pre><p>Note the <code>imagePullSecrets</code> settings.
    Harness used the Go templating in Service to fully form the correct YAML for Kubernetes.</p><h4>Prepare</h4><p>The
    Prepare section identifies the resources used and versions any for release history.
    Every Harness deployment creates a new release with an incrementally increasing
    number. Release history is stored in the Kubernetes cluster in a ConfigMap. This
    ConfigMap is essential for release tracking, versioning and rollback.</p><p>For
    more information, see <a href="/article/ttn8acijrz-versioning-and-annotations#releases_and_versioning">Releases
    and Versioning</a>.</p><pre>Manifests processed. Found following resources: <br/><br/>Kind                Name                                    Versioned
    <br/>Namespace           example                                 false     <br/>Secret              harness-example-dockercfg               false     <br/>ConfigMap           harness-example-config                  true      <br/>Service             harness-example-svc                     false     <br/>Deployment          harness-example-deployment              false     <br/><br/><br/>Current
    release number is: 3<br/><br/>No previous successful release found.<br/><br/>Cleaning
    up older and failed releases<br/><br/>kubectl --kubeconfig=config delete ConfigMap/harness-example-config-2<br/><br/>configmap
    &#34;harness-example-config-2&#34; deleted<br/><br/>Managed Workload is: Deployment/harness-example-deployment<br/><br/>Versioning
    resources.<br/><br/>Done</pre><h4>Apply</h4><p>The Apply section deploys the manifests
    from the Service <strong>Manifests</strong> section as one file.</p><pre>kubectl
    --kubeconfig=config apply --filename=manifests.yaml --record<br/><br/>namespace/example
    unchanged<br/>secret/harness-example-dockercfg created<br/>configmap/harness-example-config-3
    created<br/>service/harness-example-svc unchanged<br/>deployment.apps/harness-example-deployment
    configured<br/><br/>Done</pre><h4>Wait for Steady State</h4><p>The Wait for Steady
    State section shows the containers and pods rolled out.</p><pre>kubectl --kubeconfig=config
    get events --output=custom-columns=KIND:involvedObject.kind,NAME:.involvedObject.name,MESSAGE:.message,REASON:.reason
    --watch-only<br/><br/>kubectl --kubeconfig=config rollout status Deployment/harness-example-deployment
    --watch=true<br/><br/><br/>Status : Waiting for deployment &#34;harness-example-deployment&#34;
    rollout to finish: 1 old replicas are pending termination...<br/>Event  : Pod    harness-example-deployment-cfdb66bf4-qw5g9   pulling
    image &#34;harnessexample.azurecr.io/todolist-sample:latest&#34;   Pulling<br/>Event  :
    Pod   harness-example-deployment-cfdb66bf4-qw5g9   Successfully pulled image &#34;harnessexample.azurecr.io/todolist-sample:latest&#34;   Pulled<br/>Event  :
    Pod   harness-example-deployment-cfdb66bf4-qw5g9   Created container   Created<br/>Event  :
    Pod   harness-example-deployment-cfdb66bf4-qw5g9   Started container   Started<br/>Event  :
    Deployment   harness-example-deployment   Scaled down replica set harness-example-deployment-6b8794c59
    to 0   ScalingReplicaSet<br/><br/>Status : Waiting for deployment &#34;harness-example-deployment&#34;
    rollout to finish: 1 old replicas are pending termination...<br/>Event  : ReplicaSet   harness-example-deployment-6b8794c59   Deleted
    pod: harness-example-deployment-6b8794c59-2z99v   SuccessfulDelete<br/><br/>Status
    : Waiting for deployment &#34;harness-example-deployment&#34; rollout to finish:
    1 old replicas are pending termination...<br/><br/>Status : deployment &#34;harness-example-deployment&#34;
    successfully rolled out<br/><br/>Done.</pre><h4>Wrap Up</h4><p>The Wrap Up section
    shows the Rolling Update strategy used. Here is a sample:</p><pre>...<br/>Name:                   harness-example-deployment<br/>Namespace:              example<br/>CreationTimestamp:      Wed,
    06 Mar 2019 20:16:30 +0000<br/>Labels:                 &lt;none&gt;<br/>Annotations:            deployment.kubernetes.io/revision:
    3<br/>                        kubectl.kubernetes.io/last-applied-configuration:<br/>                          {&#34;apiVersion&#34;:&#34;apps/v1&#34;,&#34;kind&#34;:&#34;Deployment&#34;,&#34;metadata&#34;:{&#34;annotations&#34;:{&#34;kubernetes.io/change-cause&#34;:&#34;kubectl
    apply --kubeconfig=config --f...<br/>                        kubernetes.io/change-cause:
    kubectl apply --kubeconfig=config --filename=manifests.yaml --record=true<br/>Selector:               app=harness-example<br/>Replicas:               1
    desired | 1 updated | 1 total | 1 available | 0 unavailable<br/>StrategyType:           RollingUpdate<br/>MinReadySeconds:        0<br/>RollingUpdateStrategy:  25%
    max unavailable, 25% max surge<br/>...<br/>Events:<br/>  Type    Reason             Age   From                   Message<br/>  ----    ------             ----  ----                   -------<br/>  Normal  ScalingReplicaSet  25m   deployment-controller  Scaled
    up replica set harness-example-deployment-86c6d74db8 to 1<br/>  Normal  ScalingReplicaSet  14m   deployment-controller  Scaled
    up replica set harness-example-deployment-6b8794c59 to 1<br/>  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled
    down replica set harness-example-deployment-86c6d74db8 to 0<br/>  Normal  ScalingReplicaSet  4s    deployment-controller  Scaled
    up replica set harness-example-deployment-cfdb66bf4 to 1<br/>  Normal  ScalingReplicaSet  1s    deployment-controller  Scaled
    down replica set harness-example-deployment-6b8794c59 to 0<br/><br/>Done.</pre><h3>AKS
    Workflow Deployment</h3><p>Now that the setup is complete, you can click <strong>Deploy</strong>
    in the Workflow to deploy the artifact to your cluster.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1551916036419/image.png"/></figure><p>Next,
    select the artifact build version and click <strong>SUBMIT</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/v13edrsui8/1552000214475/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    Workflow is deployed.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/x87732ti68/1578088062050/image.png"/></figure><p>To
    see the completed deployment, log into your Azure AKS cluster, click <strong>Insights</strong>,
    and then click <strong>Controllers</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/v13edrsui8/1552000489073/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><div
    class="note-callout">If you are using a older AKS cluster, you might have to enable
    Insights.</div><p>The container details show the Docker image deployed:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/v13edrsui8/1552000533689/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></figure><p>You
    can also launch the Kubernetes dashboard to see the results:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/v13edrsui8/1552000591531/image.png"
    style="max-height:75%;max-width:75%" data-hd-height="75%" data-hd-width="75%"/></figure><p>To
    view the Kubernetes dashboard, in your AKS cluster, click <strong>Overview</strong>,
    click <strong>Kubernetes Dashboard</strong>, and then follow the CLI steps.</p><h3>Next
    Step</h3><ul><li><a href="/article/mesbafbntm-5-azure-troubleshooting">5 - Azure
    Troubleshooting</a></li></ul><p></p>'
  slug: 4-azure-workflows-and-deployments
  tags:
  - Azure
  - AKS
  - Rolling Update
  - Rolling
  - Rolling Deployment
  is_live: true
