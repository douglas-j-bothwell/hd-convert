type: article
article_id: 69fgm2e21d
user_id: mfr0nxh4be
category_id: 3i7h1lzlt2
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Use Azure ARM Template Outputs in Workflow Steps
slug: use-azure-arm-and-blueprint-parameters-in-workflow-steps
description: You can use the template outputs in some Workflow step settings, or simply
  echo their values.
short_version: You can use the template outputs in some Workflow step settings, or
  simply echo their values.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-08-03T16:07:51.439797Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Use Azure ARM Template Outputs in Workflow Steps
  description: You can use the template outputs in some Workflow step settings, or
    simply echo their values.
  short_version: You can use the template outputs in some Workflow step settings,
    or simply echo their values.
  body: '<p>When you use an ARM template in a Harness Workflow to provision Azure
    resources, you can use the template outputs in some Workflow step settings, or
    simply echo their values.</p><p>This topic describes how to reference template
    outputs, how they are used in Azure Web App Workflow steps, and how to echo their
    values.</p><p>In this topic:</p><ul><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#before_you_begin">Before
    You Begin</a></li><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#limitations">Limitations</a></li><li><a
    href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#step_1_use_an_arm_template_in_a_workflow">Step
    1: Use an ARM Template in a Workflow</a></li><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#review_referencing_arm_template_outputs">Review:
    Referencing ARM Template Outputs</a></li><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#option_1_use_outputs_in_the_slot_setup_step">Option
    1: Use Outputs in the Slot Setup Step</a></li><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#option_2_echo_template_outputs">Option
    2: Echo Template Outputs</a></li><li><a href="https://docs.harness.io/article/69fgm2e21d-use-azure-arm-and-blueprint-parameters-in-workflow-steps#configure_as_code">Configure
    As Code</a></li></ul><p></p><h3>Before You Begin</h3><ul><li><a href="/article/l3do0np70h-set-up-your-harness-account-for-azure-arm-and-blueprints">Set
    Up Your Harness Account for Azure ARM</a></li><li><a href="/article/naj2d3ra4n-add-azure-arm-templates-and-blueprints">Add
    Azure ARM Templates to Harness</a></li><li><a href="/article/idqiy49prl-target-azure-arm-or-blueprint-provisioned-infrastructure">Provision
    and Deploy to ARM Provisioned Infrastructure</a></li><li><a href="/article/qlvrdq7uv6-provision-using-the-arm-blueprint-create-resource-step">Provision
    Resources using a Harness ARM Infrastructure Provisioner</a></li><li>For a conceptual
    overview of provisioning with ARM and Blueprints, seeÂ <a href="/article/c7bzn7vjwn-azure-arm-and-blueprint-provision-with-harness">Azure
    ARM and Blueprint Provisioning with Harness</a>.</li></ul><p></p><h3>Limitations</h3><ul><li>See
    <a href="/article/qhnnq1mks3-azure-arm-and-blueprint-how-tos">Azure Resource Management
    (ARM) How-tos</a>.</li></ul><h3>Step 1: Use an ARM Template in a Workflow</h3><p>Once
    you have added an ARM template as a Harness Infrastructure Provisioner, you can
    use the Infrastructure Provisioner in a Workflow in the following ways:</p><ul><li><strong>Target
    the Azure infrastructure:</strong> use the Infrastructure Provisioner in a Harness
    Infrastructure Definition. Next, you add this Infrastructure Definition to a Workflow
    to define the ARM template&#39;s resources as the target infrastructure for the
    deployment.<br/>See <a href="/article/idqiy49prl-target-azure-arm-or-blueprint-provisioned-infrastructure">Target
    an Azure ARM Provisioned Infrastructure</a>.</li><li><strong>Provision the Azure
    infrastructure:</strong> use the Infrastructure Provisioner in a Harness Workflow
    to provision the Azure resources. This will run your ARM template and create its
    Azure resources. These resources could be the target infrastructure for a deployment
    from the Infrastructure Definition or simply other Azure resources.<br/>See <a
    href="/article/qlvrdq7uv6-provision-using-the-arm-blueprint-create-resource-step">Provision
    using a Harness ARM Infrastructure Provisioner</a>.</li></ul><p></p><h3>Review:
    Referencing ARM Template Outputs</h3><p>You reference ARM template outputs in
    Workflow steps using the format <code>${arm.&lt;output_name&gt;}</code>. First,
    you need to use the Infrastructure Provisioner that links to your ARM template.</p><p>You
    use the Harness ARM Infrastructure Provisioner in a Workflow in the <strong>ARM/Blueprint
    Create Resource</strong> step.</p><p>Once you have set up the the <strong>ARM/Blueprint
    Create Resource</strong> step, you can reference the template&#39;s outputs.</p><p>Ensure
    that the ARM template you added in the Infrastructure Provisioner you selected
    in <strong>Provisioner</strong> includes outputs.</p><p>For example, here are
    the outputs from an ARM template to provision Azure Web Apps:</p><pre>...<br/>&#34;outputs&#34;:
    {<br/>    &#34;webApp&#34;: {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;:
    &#34;[parameters(&#39;siteName&#39;)]&#34;<br/>    },<br/>    &#34;slot&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;[parameters(&#39;deploymentSlot&#39;)]&#34;<br/>    },<br/>    &#34;resourceGroup&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;harness-arm-test&#34;<br/>    }<br/>  }<br/>...</pre><p></p><p>You
    can see the <code>resourceGroup</code> output. You can reference that output,
    or any output, using the expression <code>${arm.&lt;output_name&gt;}</code>.</p><p>For
    example, to reference <code>resourceGroup</code> you can use <code>${arm.resourceGroup}</code>.</p><p>At
    runtime, Harness will pull the values for the settings from your ARM template.</p><h3>Option
    1: Use Outputs in the Slot Setup Step</h3><div class="note-callout">Using outputs
    in the Slot Setup step as part of an Azure Web App deployment is described in
    detail in <a href="/article/idqiy49prl-target-azure-arm-or-blueprint-provisioned-infrastructure">Provision
    and Deploy to ARM Provisioned Infrastructure</a>.</div><p>If the Azure Web App
    Workflow uses an Infrastructure Definition that uses an Infrastructure Provisioner
    (such as ARM Infrastructure Provisioner) then the <strong>Slot Setup</strong>
    step must use template outputs in its settings.</p><p>The <strong>Slot Setup</strong>
    step uses the Infrastructure Definition settings to pull App Service and slot
    information from Azure. If the Infrastructure Definition uses an Infrastructure
    Provisioner, then Harness cannot obtain this information until runtime.</p><p>For
    details on Web App deployments, see <a href="/article/lluikqw7q7-azure-web-app-deployments-overview">Azure
    Web App Deployments Overview</a>.</p><p>Let&#39;s look at an example of the <strong>Slot
    Setup</strong> in a Web App <a href="/article/qpfddekbax-create-an-azure-web-app-blue-green-deployment#step_3_slot_deployment_step">Blue/Green
    Workflow deployment</a>.</p><p>Normally, you would select or enter the App Service,
    Deployment, and Target Slots for the Web App deployment.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/idqiy49prl/1616005733019/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>When
    provisioning, you enter the <code>${arm.&lt;output_name&gt;}</code> expression
    for each setting, mapping the outputs to the steps settings:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/idqiy49prl/1616006155649/image.png"/></figure><p>At
    runtime, Harness will substitute the output values, which in this case are taken
    from a parameters file, and use them for the <strong>Slot Setup</strong> step.</p><h3>Option
    2: Echo Template Outputs</h3><p>You can reference outputs in a Workflow step by
    simply echoing them.</p><p>For example, here are some outputs from a template:</p><pre>&#34;outputs&#34;:
    {<br/>    &#34;storageAccount&#34;: {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;:
    &#34;anilstoragetestharness&#34;<br/>    },<br/>    &#34;ipAddresses&#34;: {<br/>      &#34;type&#34;:
    &#34;array&#34;,<br/>      &#34;copy&#34;: {<br/>        &#34;count&#34;: &#34;[parameters(&#39;count&#39;)]&#34;,<br/>        &#34;input&#34;:
    &#34;[reference(concat(&#39;nic-&#39;, copyIndex())).ipConfigurations[0].properties.privateIPAddress]&#34;<br/>      }<br/>    },<br/>    &#34;publicIp&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;[parameters(&#39;publicIPAddresses_name&#39;)]&#34;<br/>    },<br/>    &#34;appPlan&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;[variables(&#39;appServicePlanName&#39;)]&#34;<br/>    },<br/>    &#34;webApp&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;[variables(&#39;webAppPortalName&#39;)]&#34;<br/>    },<br/>    &#34;slot&#34;:
    {<br/>      &#34;type&#34;: &#34;string&#34;,<br/>      &#34;value&#34;: &#34;[concat(variables(&#39;webAppPortalName&#39;),
    &#39;/testSlot&#39;)]&#34;<br/>    }<br/>  }</pre><p></p><p>Here is a bash script
    for a Shell Script step that references the outputs:</p><pre>echo &#34;*****************
    ARM output *****************&#34;<br/>echo &#34;Storage account:&#34; ${arm.storageAccount}<br/>echo
    &#34;Public Ip:&#34; ${arm.publicIp}<br/>echo &#34;App Service Plan:&#34; ${arm.appPlan}<br/>echo
    &#34;Web App Name:&#34; ${arm.webApp}<br/>echo &#34;Web App Slot:&#34; ${arm.slot}</pre><p></p><p>Here
    is the <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell Script
    step</a> log from the deployment showing the echo of the outputs:</p><pre>Executing
    command ...<br/>***************** ARM output *****************<br/>Storage account:
    anilstoragetestharness<br/>Public Ip: anil-publicIp<br/>App Service Plan: AppServicePlan-anil-paramWebapp-git<br/>Web
    App Name: anil-paramWebapp-git-webapp<br/>Web App Slot: anil-paramWebapp-git-webapp/testSlot<br/>Command
    completed with ExitCode (0)</pre><h3>Configure As Code</h3><p>To see how to configure
    the settings in this topic using YAML, configure the settings in the UI first,
    and then click the YAML editor button (<span style="color:#fb9e00" data-hd-color="#fb9e00"><strong>&lt;/&gt;</strong></span>).</p>'
  slug: use-azure-arm-and-blueprint-parameters-in-workflow-steps
  tags: []
  is_live: true
