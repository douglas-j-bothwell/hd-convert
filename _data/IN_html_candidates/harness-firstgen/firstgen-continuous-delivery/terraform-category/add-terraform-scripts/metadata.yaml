type: article
article_id: ux2enus2ku
user_id: mfr0nxh4be
category_id: gkm7rtubpk
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Add Terraform Scripts
slug: add-terraform-scripts
description: Set up a Harness Infrastructure Provisioner for Terraform.
short_version: Set up a Harness Infrastructure Provisioner for Terraform.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-01-13T18:28:54.439456Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add Terraform Scripts
  description: Set up a Harness Infrastructure Provisioner for Terraform.
  short_version: Set up a Harness Infrastructure Provisioner for Terraform.
  body: '<p>This topic describes how to set up a Harness Infrastructure Provisioner
    for Terraform.</p><p>Once the Harness Infrastructure Provisioner is set up, you
    can use it to do the following:</p><ul><li>Define a deployment target in a Harness
    Infrastructure Definition, provision the target infrastructure in a Workflow as
    part of its pre-deployment step, and then deploy to the target infrastructure.</li><li>Provision
    any non-target infrastructure.</li></ul><div class="note-callout">Harness supports
    first class Terraform provisioning for AWS-based infrastructures (SSH, ASG, ECS,
    Lambda), Google Kubernetes (GKE), Azure WebApps, and physical data centers via
    shell scripts.<br/><br/>Harness Terraform Infrastructure Provisioner are only
    supported in Canary and Multi-Service Workflows. For AMI/ASG and ECS deployments,
    Terraform Infrastructure Provisioners are also supported in Blue/Green Workflows.</div><p>In
    this topic:</p><ul><li><a href="#before_you_begin">Before You Begin</a></li><li><a
    href="#review_terraform_syntax_support">Review: Terraform Syntax Support</a></li><li><a
    href="#visual_summary">Visual Summary</a></li><li><a href="#step_1_add_a_terraform_provisioner">Step
    1: Add a Terraform Provisioner</a></li><li><a href="#step_2_select_your_terraform_script_repo">Step
    2: Select Your Terraform Script Repo</a></li><li><a href="#option_use_expressions_for_script_repository">Option:
    Use Expressions for Script Repository</a></li><li><a href="#step_3_select_secret_manager_for_terraform_plan">Step
    3: Select Secret Manager for Terraform Plan</a></li><li><a href="#option_skip_terraform_refresh_when_inheriting_terraform_plan">Option:
    Skip Terraform Refresh When Inheriting Terraform Plan</a></li><li><a href="#step_4_complete_the_terraform_provisioner">Step
    4: Complete the Terraform Provisioner</a></li><li><a href="#next_steps">Next Steps</a></li></ul><h3>Before
    You Begin</h3><ul><li>Get an overview how how Harness supports Terraform: <a href="/article/hh52ews03d-terraform-provisioning-with-harness">Terraform
    Provisioning with Harness</a>.</li><li>Ensure you have your Harness account settings
    prepared for Terraform: <a href="/article/llp7a6lr1c-terraform-delegates">Set
    Up Your Harness Account for Terraform</a>.</li></ul><h3>Review: Terraform Syntax
    Support</h3><p>Harness supports Terraform scripts written in Terraform syntax
    versions 11 and 12.</p><h4>Terraform Syntax Support for Versions 13-1.0</h4><div
    class="note-callout">Currently, this feature is behind the Feature Flag <code>TERRAFORM_CONFIG_INSPECT_VERSION_SELECTOR</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>When this feature flag is enabled, Harness supports
    Terraform scripts written in Terraform syntax versions 11, 12, 13, 14, 15, and
    1.0.</p><h3>Visual Summary</h3><p>This topic describes step 1 in the Harness Terraform
    Provisioning implementation process displayed below.</p><p>The graphic shows how
    the scripts you add in this topic are used to provision the target infrastructure
    for a deployment:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/ux2enus2ku/1586284265080/image.png"/></figure><p>Once
    you have completed this topic:</p><ul><li>If you are going to provision the deployment
    target infrastructure, move onto the next step: <a href="/article/a2f2bh35el-mapgcp-kube-terraform-infra">Map
    Dynamically Provisioned Infrastructure using Terraform</a>.</li><li>If want to
    simply provision any non-target infrastructure, see <a href="/article/hh52ews03d-terraform-provisioning-with-harness">Terraform
    Provisioning with Harness</a>.</li></ul><p></p><h3>Step 1: Add a Terraform Provisioner</h3><p>To
    set up a Terraform Infrastructure Provisioner, do the following:</p><p>In your
    Harness Application, click <strong>Infrastructure Provisioners</strong>.</p><p>Click
    <strong>Add Infrastructure Provisioner</strong>, and then click <strong>Terraform</strong>.
    The <strong>Add Terraform Provisioner</strong> dialog appears.</p><p>In <strong>Name</strong>,
    enter the name for this provisioner. You will use this name to select this provisioner
    in Harness Infrastructure Definitions and the Workflow steps Terraform Provision,
    Terraform Apply, and Terraform Destroy.</p><p>Click <strong>Next</strong>. The
    <strong>Script Repository</strong> section appears. This is where you provide
    the location of your Terraform script in your Git repo.</p><h3>Step 2: Select
    Your Terraform Script Repo</h3><p>In <strong>Script Repository</strong>, in <strong>Git
    Repository</strong>, select the <a href="/article/ay9hlwbgwa-add-source-repo-providers">Source
    Repo Provider</a> you added for the Git repo where your script is located.</p><p>In
    <strong>Commit</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit ID</strong>:</p><div class="note-callout"><strong>Specific Commit ID</strong>
    also supports <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging" target="_blank">Git
    tags</a>.</div><ul><li>If you selected <strong>Latest from Branch</strong>, in
    <strong>Git Repository Branch</strong>, enter the repo branch to use. For example,
    <strong>master</strong>. For master, you can also use a dot (<code>.</code>).</li><li>If
    you selected <strong>Specific Commit ID</strong>, in <strong>Commit ID</strong>,
    enter the Git commit ID or Git tag to use.</li></ul><p>In <strong>Terraform Configuration
    Root Directory</strong>, enter the folder where the script is located. Here is
    an example showing the Git repo on GitHub and the <strong>Script Repository</strong>
    settings:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/ux2enus2ku/1607019827743/image.png"/></figure><p></p><p>When
    you click <strong>Next</strong>, the <strong>Plan Configuration</strong> section
    is displayed.</p><p>Before you move onto <strong>Plan Configuration</strong>,
    let&#39;s review the option of using expressions in <strong>Script Repository</strong>.</p><h3>Option:
    Use Expressions for Script Repository</h3><p>You can also use expressions in the
    <strong>Git Repository Branch</strong> and <strong>Terraform Configuration Root
    Directory</strong> and have them replaced by Workflow variable values when the
    Terraform Provisioner is used by the Workflow. For example, a Workflow can have
    variables for <strong>branch</strong> and <strong>path</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557359599744/image.png"
    style="max-height:80%;max-width:80%" data-hd-height="80%" data-hd-width="80%"/></figure><p>In
    <strong>Script Repository</strong>, you can enter variables as <code>${workflow.variables.branch}</code>
    and <code>${workflow.variables.path}</code>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/ux2enus2ku/1586201944120/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>When
    the Workflow is deployed, you are prompted to provide values for the Workflow
    variables, which are then applied to the Script Repository settings:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557360093894/image.png"
    style="max-height:80%;max-width:80%" data-hd-height="80%" data-hd-width="80%"/></figure><p>This
    allows the same Terraform Provisioner to be used by multiple Workflows, where
    each Workflow can use a different branch and path for the <strong>Script Repository</strong>.</p><h3>Step
    3: Select Secret Manager for Terraform Plan</h3><p>In <strong>Plan Configuration</strong>,
    in <strong>Terraform Plan Storage Configuration</strong>, select a Secrets Manager
    to use for encrypting/decrypting and saving the Terraform plan file.</p><p>See
    <a href="/article/uuer539u3l-add-a-secrets-manager">Add a Secrets Manager</a>.</p><p>A
    Terraform plan is a sensitive file that could be misused to alter cloud provider
    resources if someone has access to it. Harness avoids this issue by never passing
    the Terraform plan file as plain text.</p><p>Harness only passes the Terraform
    plan between the Harness Manager and Delegate as an encrypted file using a Harness
    Secrets Manager.</p><p>When the <code>terraform plan</code> command is run on
    the Harness Delegate, the Delegate encrypts the plan and saves it to the Secrets
    Manager you selected. The encrypted data is passed to the Harness Manager.</p><p>When
    the plan is going to be applied, the Harness Manager passes the encrypted data
    to the Delegate.</p><p>The Delegate decrypts the encrypted plan and applies it
    using the <code>terraform apply</code> command.</p><h3>Option 2: Skip Terraform
    Refresh When Inheriting Terraform Plan</h3><p>To understand this setting, let&#39;s
    review some of the options available later when you will use this Terraform Infrastructure
    Provisioner with a <a href="/article/uxwih21ps1-terraform-provisioner-step">Terraform
    Provision</a> or <a href="/article/jaxppd8w9j-using-the-terraform-apply-command">Terraform
    Apply</a> step in your Workflow.</p><p>When you add either of those steps, you
    can run them as a Terraform plan using their <strong>Set as Terraform Plan</strong>
    setting.</p><p>Next, you have the option of exporting the Terraform plan from
    one Terraform step (using the <strong>Export Terraform Plan to Apply Step</strong>
    setting) and inheriting the Terraform plan in the next Terraform step (using the
    <strong>Inherit following configurations from Terraform Plan</strong> setting).</p><p>Essentially,
    these settings allow you to use your Terraform Provision step as a <a href="https://www.terraform.io/docs/commands/plan.html"
    target="_blank">Terraform plan dry run</a> (<code>terraform plan -out=tfplan</code>).</p><p>During
    this inheritance, Harness runs a Terraform refresh, then a plan, and finally executes
    the new plan.</p><p>If do not want Harness to perform a refresh, enable the <strong>Skip
    Terraform Refresh when inheriting Terraform plan</strong> option in your Terraform
    Infrastructure Provisioner.</p><p>When this setting is enabled, Harness will directly
    apply the plan without reconciling any state changes that might have occurred
    outside of Harness between <code>plan</code> and <code>apply</code>.</p><p>This
    setting is available because a Terraform refresh is not always an idempotent command.
    It can have some side effects on the state even when no infrastructure was changed.
    In such cases, terraform apply <code>tfplan</code> commands might fail.</p><h3>Step
    4: Complete the Terraform Provisioner</h3><p>When you are done, the <strong>Terraform
    Provisioner</strong> will look something like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/ux2enus2ku/1586207610160/image.png"/></figure><p>Now
    you can use this provisioner in both Infrastructure Definitions and Workflows.</p><h3>Next
    Steps</h3><ul><li><strong>Infrastructure Definitions:</strong> use the Terraform
    Infrastructure Provisioner to define a Harness Infrastructure Definition. You
    do this by mapping your script outputs to the required Harness Infrastructure
    Definition settings. Harness supports provisioning for many different platforms.
    See the following:<ul><li> <a href="/article/a2f2bh35el-mapgcp-kube-terraform-infra">Map
    Dynamically Provisioned Infrastructure using Terraform</a></li></ul></li><li><strong>Workflows:</strong><ul><li>Once
    you have created the Infrastructure Definition and added it to a Workflow, you
    add a Terraform Provisioner Step to the Workflow to run your script and provision
    the infra: <a href="/article/uxwih21ps1-terraform-provisioner-step">Provision
    using the Terraform Provisioner Step</a>.</li><li>You can also use the Terraform
    Infrastructure Provisioner with the Terraform Apply Workflow step to provision
    any non-target infrastructure. See <a href="/article/jaxppd8w9j-using-the-terraform-apply-command">Using
    the Terraform Apply Command</a>.</li></ul></li></ul><p></p>'
  slug: add-terraform-scripts
  tags: []
  is_live: true
