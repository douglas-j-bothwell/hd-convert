type: article
article_id: llp7a6lr1c
user_id: mfr0nxh4be
category_id: gkm7rtubpk
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Set Up Your Harness Account for Terraform
slug: terraform-delegates
description: Set up the Harness Delegates, Cloud Providers, and Source Repo Providers
  for Terraform integration.
short_version: Set up the Harness Delegates, Cloud Providers, and Source Repo Providers
  for Terraform integration.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-14T17:41:28.962823Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Set Up Your Harness Account for Terraform
  description: Set up the Harness Delegates, Cloud Providers, and Source Repo Providers
    for Terraform integration.
  short_version: Set up the Harness Delegates, Cloud Providers, and Source Repo Providers
    for Terraform integration.
  body: '<p>The first step in integrating your Terraform scripts and processes is
    setting up the necessary Harness account components: Delegates, Cloud Providers,
    and Source Repo Providers.</p><p>This topic describes how to set up these components
    for Terraform.</p><p>Once your account is set up, you can begin integrating your
    Terraform scripts. See <a href="/article/ux2enus2ku-add-terraform-scripts">Add
    Terraform Scripts</a>.</p><h3>Before You Begin</h3><ul><li> <a href="/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a></li><li>Get an overview of how Harness integrates Terraform:
    <a href="/article/hh52ews03d-terraform-provisioning-with-harness">Terraform Provisioning
    with Harness</a></li><li> <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Installation and Management</a></li><li> <a href="/article/whwnovprrb-cloud-providers">Add
    Cloud Providers</a></li><li> <a href="/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a></li></ul><p></p><h3>Step 1: Set Up Harness Delegates</h3><p>A
    Harness Delegate performs the Terraform provisioning in your Terraform scripts.
    When installing the Delegate for your Terraform provisioning, consider the following:</p><ul><li>The
    Delegate should be installed where it can connect to the target infrastructure.
    Ideally, this is the same subnet.</li><li>If you are provisioning the subnet dynamically,
    then you can put the Delegate in the same VPC and ensure that it can connect to
    the provisioned subnet using security groups.</li><li>The Delegate must also be
    able to connect to your script repo. The Delegate will pull the scripts at deployment
    runtime.</li><li>While all Harness Delegates can use Terraform, you might want
    to select a Delegate type (Shell Script, Kubernetes, ECS, etc) similar to the
    type of infrastructure you are provisioning.</li><li>If you are provisioning AWS
    AMIs and ASGs, you&#39;ll likely use Shell Script Delegates on EC2 instances or
    ECS Delegates.</li><li>If you are provisioning Kubernetes clusters, you will likely
    use Kubernetes Delegates.</li></ul><ol><li>To install a Delegate, follow the steps
    in <a href="/article/h9tkwmkrm7-delegate-installation">Delegate Installation and
    Management</a>. Once the Delegate is installed, it will be listed on the Harness
    Delegates page.</li></ol><h4>Delegate Selectors</h4><p>If needed, add a Delegate
    Selector to your Delegates. When you add a <strong>Terraform Provisioner</strong>
    step to your Harness Workflows, you can use the Delegate Selector to ensure specific
    Delegates perform the operations.</p><p>If you do not specify a Selector in the
    <strong>Terraform Provisioner</strong> step, Harness will try all Delegates and
    then assign the Terraform tasks to the Delegates with Terraform installed.</p><p>To
    add Selectors, see <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Installation and Management</a>.</p><h4>Permissions</h4><p>The Harness Delegate
    requires permissions according to the deployment platform and the operations of
    the Terraform scripts.</p><p>In many cases, all credentials are provided by the
    account used to set up the Harness Cloud Provider.</p><p>In some cases, access
    keys, secrets, and SSH keys are needed. You can add these in Harness <a href="/article/au38zpufhr-secret-management">Secrets
    Management</a>. You can then select them in the <strong>Terraform Provisioner</strong>
    step in your Harness Workflows.</p><p>For ECS Delegates, you can add an IAM role
    to the ECS Delegate task definition. For more information, see  <a href="https://docs.harness.io/article/h9tkwmkrm7-delegate-installation#trust_relationships_and_roles">Trust
    Relationships and Roles</a>.</p><h3>Step 2: Install Terraform on Delegates</h3><p>Terraform
    must be installed on the Delegate to use a Harness Terraform Provisioner. You
    can install Terraform manually or use the <code>INIT_SCRIPT</code> environment
    variable in the Delegate YAML. </p><p>See <a href="/article/ul6qktixip-run-initialization-scripts-on-delegates">Run
    Initialization Scripts on Delegates</a>.</p><pre># Install TF<br/>curl -O -L  https://releases.hashicorp.com/terraform/0.12.25/terraform_0.12.25_linux_amd64.zip<br/>unzip
    terraform_0.12.25_linux_amd64.zip<br/>mv ./terraform /usr/bin/<br/># Check TF
    install<br/>terraform --version</pre><p></p><p>Terraform is now installed on the
    Delegate.</p><p>If you will be using a Cloud Provider that uses Delegate Selectors
    to identify Delegates (AWS Cloud Provider), add a Selector to this Delegate. For
    more information, see <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Installation and Management</a>.</p><div class="note-callout">The Delegate needs
    to be able to obtain the Terraform provider you specify in the modules in your
    Terraform script. For example, <code>provider &#34;acme&#34;</code>. On the Delegate,
    Terraform will download and initialize any providers that are not already initialized.</div><p></p><h3>Step
    3: Set Up the Cloud Provider</h3><p>Add a Harness Cloud Provider to connect Harness
    to your target platform (AWS, Kubernetes cluster, etc).</p><p>Later, when you
    use Terraform to define a Harness Infrastructure Definition, you will also select
    the Cloud Provider to use when provisioning.</p><p>When you create the Cloud Provider,
    you can enter the platform account information for the Cloud Provider to use as
    credentials, or you can use the Delegate(s) running in the infrastructure to provide
    the credentials for the Cloud Provider.</p><p>If you are provisioning infrastructure
    on a platform that requires specific permissions, such as AWS AMIs, the account
    used by the Cloud Provider needs the required policies. For example, to create
    AWS EC2 AMIs, the account needs the <strong>AmazonEC2FullAccess</strong> policy.
    See the list of policies in <a href="/article/whwnovprrb-cloud-providers">Add
    Cloud Providers</a>. For steps on adding an AWS Cloud Provider, see <a href="https://docs.harness.io/article/whwnovprrb-cloud-providers#amazon_web_services_aws_cloud">Amazon
    Web Services (AWS) Cloud</a>.</p><p>When the Cloud Provider uses the installed
    Delegate for credentials (via its Delegate Selector), it assumes the permissions/roles
    used by the Delegate.</p><h3>Step 4: Connect Harness to Your Script Repo</h3><p>To
    use your Terraform script in Harness, you host the script in a Git repo and add
    a Harness Source Repo Provider that connects Harness to the repo. For steps on
    adding the Source Repo Provider, see <a href="/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a>.</p><p>Here is an example of a Source Repo Provider
    and the GitHub repo it is using:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557259873295/image.png"/></figure><p>In
    the image above, there is no branch added in the Source Repo Provider <strong>Branch
    Name</strong> field as this is the master branch, and the <strong>ec2</strong>
    folder in the repo is not entered in the Source Repo Provider. Later, when you
    use the Source Repo Provider in your Terraform Provisioner, you can specify the
    branch and root directory:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557259999000/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></figure><div
    class="note-callout">If you are using a private Git repo, an SSH key for the private
    repo is required on the Harness Delegate running Terraform to download the root
    module. You can copy the SSH key over to the Delegate. For more information, see
    <a href="https://www.terraform.io/docs/enterprise/workspaces/ssh-keys.html" target="_blank">Using
    SSH Keys for Cloning Modules</a> (from HashiCorp) and <a href="https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account"
    target="_blank">Adding a new SSH key to your GitHub account</a> (from Github).</div><p></p><h3>Next
    Steps</h3><p>Once your account is set up, you can begin integrating your Terraform
    scripts. See <a href="/article/ux2enus2ku-add-terraform-scripts">Add Terraform
    Scripts</a>.</p><p></p>'
  slug: terraform-delegates
  tags: []
  is_live: true
