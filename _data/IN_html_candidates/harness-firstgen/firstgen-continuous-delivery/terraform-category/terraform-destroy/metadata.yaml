type: article
article_id: 4egyxnse9r
user_id: mfr0nxh4be
category_id: gkm7rtubpk
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Remove Provisioned Infra with Terraform Destroy
slug: terraform-destroy
description: Remove any provisioned infrastructure.
short_version: Remove any provisioned infrastructure.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-12T18:41:45.031319Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Remove Provisioned Infra with Terraform Destroy
  description: Remove any provisioned infrastructure.
  short_version: Remove any provisioned infrastructure.
  body: '<p>You can add a <strong>Terraform Destroy</strong> Workflow step to remove
    any provisioned infrastructure, just like running the <code>terraform destroy</code> command.
    See  <a href="https://www.terraform.io/docs/commands/destroy.html" target="_blank">destroy</a> from
    Terraform.</p><p>The <strong>Terraform Destroy</strong> step is independent of
    any other Terraform provisioning step in a Workflow. It is not restricted to removing
    the infrastructure deployed in its Workflow. It can remove any infrastructure
    you have provisioned using a Terraform Infrastructure Provisioner.</p><h3>Before
    You Begin</h3><p>This topic assumes you have read the following:</p><ul><li> <a
    href="/article/hh52ews03d-terraform-provisioning-with-harness">Terraform Provisioning
    with Harness</a></li><li> <a href="/article/llp7a6lr1c-terraform-delegates">Set
    Up Your Harness Account for Terraform</a></li><li> <a href="/article/ux2enus2ku-add-terraform-scripts">Add
    Terraform Scripts</a></li><li> <a href="/article/a2f2bh35el-mapgcp-kube-terraform-infra">Map
    Dynamically Provisioned Infrastructure using Terraform</a></li><li> <a href="/article/uxwih21ps1-terraform-provisioner-step">Provision
    using the Terraform Provision Step</a></li><li> <a href="/article/jaxppd8w9j-using-the-terraform-apply-command">Using
    the Terraform Apply Command</a></li><li> <a href="/article/xthfj92dys-terraform-dry-run">Perform
    a Terraform Dry Run</a></li></ul><h3>Limitations</h3><ul><li>You cannot add a
    Terraform Destroy step in the Rollback Phase of a Workflow.</li><li>The Terraform
    Destroy step is only supported using Terraform versions less than 1.0.0. HashiCorp
    has deprecated the <code>terraform apply -destroy</code> command in 1.0.0.</li></ul><h3>Review:
    What Gets Destroyed?</h3><p>When you create a Harness Terraform Infrastructure
    Provisioner you specify the Terraform script that Harness will use for provisioning.</p><p>When
    you destroy the provisioned infrastructure, you specify the Terraform Infrastructure
    Provisioner for Harness to use to locate this script.</p><p>There are two ways
    to use the Terraform Destroy:</p><ul><li>Destroy the infrastructure provisioned
    by the last successful use of a specific Terraform Infrastructure Provisioner,
    via a <strong>Terraform Provision</strong> or <strong>Terraform</strong> <strong>Apply</strong>
    step. Harness will use the same input values and backend configuration (Remote
    state) set up in the <strong>Terraform Provision</strong> or <strong>Terraform
    Apply</strong> steps.</li><li>Destroy the infrastructure by entering new input
    values and backend configuration (Remote state) for specific resources.</li></ul><p>Which
    method you use is determined by the <strong>Inherit from last successful Terraform
    Apply</strong> option in the Terraform Destroy step.</p><p>When the Terraform
    Provision or Terraform Apply step were executed, Harness saved the <strong>Inline
    Values</strong> and <strong>Backend Configuration</strong> values using a combination
    of the following:</p><ul><li><strong>Terraform Infrastructure Provisioner</strong>
    used.</li><li><strong>Environment</strong> used for the Workflow.</li><li><strong>Workspace</strong>
    used (or <code>default</code> if no workspace was specified).</li></ul><p>You
    can decide to use these by selecting the <strong>Inherit from last successful
    Terraform Apply</strong> option or provide your own <strong>Inline Values</strong>
    and <strong>Backend Configuration</strong> values by not selecting this option.</p><h4>Use
    Last Successful Terraform Provision or Apply Steps</h4><p>When you set up the
    Terraform Destroy step, you specify the Provisioner and Workspace to use, and
    Harness gets the the <strong>Inline Values</strong> and <strong>Backend Configuration</strong>
    values from the last <strong>successful</strong> execution of that Provisioner.</p><p>When
    Terraform Destroy is run, it uses the same combination to identify which <strong>Inline
    Values</strong> and <strong>Backend Configuration</strong> values to use. You
    simply need to provide the Provisioner and Workspace.</p><h4>Specify Backend Configuration
    (Remote State)</h4><p>You can specify a Backend Configuration (Remote State) to
    use to identify the infrastructure to destroy.</p><p>You simply need to specify
    a Terraform Infrastructure Provisioner so that Harness knows where to look for
    the script.</p><p>In Terraform Destroy, you <em>disable</em> the <strong>Inherit
    from last successful Terraform Apply</strong> option, and then provide the input
    value and remote state settings to use.</p><h3>Step 1: Add Terraform Destroy Step</h3><p>In
    the <strong>Post-deployment Steps</strong> of the Workflow, click <strong>Add
    Step</strong>, and then select <strong>Terraform Destroy</strong>.</p><p>The Terraform
    Destroy settings appear.</p><h3>Step 2: Select Provisioner and Workspace</h3><p>Select
    the Terraform Infrastructure Provisioner and Workspace that was used to provision
    the infrastructure you want to destroy.</p><p>Typically, this is the Terraform
    Provisioner and Workspace used in the <strong>Pre-deployment Steps</strong>.</p><h3>Option:
    AWS Cloud Provider, Region, Role ARN</h3><p></p><div class="note-callout">Currently,
    this feature is behind the Feature Flag <code>TERRAFORM_AWS_CP_AUTHENTICATION</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>If you want to use a specific AWS role for this
    step&#39;s provisioning, you can select the AWS Cloud Provider, Region, and Role
    ARN. You can select any of these options, or all of them.</p><p>These options
    allow you to use different roles for different Terraform steps, such as one role
    for the Terraform Plan step and a different role for the Terraform Provision or
    Apply steps.</p><ul><li><strong>AWS Cloud Provider:</strong> the AWS Cloud Provider
    selected here is used for authentication.<br/>At a minimum, select the <strong>AWS
    Cloud Provider</strong> and <strong>Role ARN</strong>. When used in combination
    with the AWS Cloud Provider option, the Role ARN is assumed by the Cloud Provider
    you select.<br/>The <strong>AWS Cloud Provider</strong> setting can be templated.<div
    class="note-callout">You need to select an AWS Cloud Provider even if the Terraform
    Infrastructure Provisioner you selected uses a manually-entered template body.
    Harness needs access to the AWS API via the credentials in the AWS Cloud Provider.</div></li><li><strong>Region:</strong>
    the AWS region where you will be provisioning your resources. If not region is
    specified, Harness uses <code>us-east-1</code>.</li><li><strong>Role ARN:</strong>
    enter the Amazon Resource Name (ARN) of an AWS IAM role that Terraform assumes
    when provisioning. This allows you to tune the step for provisioning a specific
    AWS resource. For example, if you will only provision AWS S3, then you can use
    a role that is limited to S3.<br/>At a minimum, select the <strong>AWS Cloud Provider</strong>
    and <strong>Role ARN</strong>. When used in combination with the AWS Cloud Provider
    option, the Role ARN is assumed by the Cloud Provider you select.<br/>You can
    also use <a href="/article/9dvxcegm90-variables">Harness variable expressions</a> in <strong>Role
    ARN</strong>. For example, you can create a Service or Workflow variable and then
    enter its expression in <strong>Role ARN</strong>, such as <code>${serviceVariables.roleARN}</code> or <code>${workflow.variables.roleArn}</code>.</li></ul><h4>Environment
    Variables</h4><p>If you use the <strong>AWS Cloud Provider</strong> and/or <strong>Role
    ARN</strong> options, do not add the following environment variables in the step&#39;s
    <strong>Environment Variables</strong> settings:</p><ul><li><code>AWS_ACCESS_KEY_ID</code></li><li><code>AWS_SECRET_ACCESS_KEY</code></li><li><code>AWS_SESSION_TOKEN</code></li></ul><p>Harness
    generates these keys using the the <strong>AWS Cloud Provider</strong> and/or
    <strong>Role ARN</strong> options. If you also add these in <strong>Environment
    Variables</strong>, the step will fail.</p><p></p><h3>Option: Select Delegate</h3><p>In
    <strong>Delegate Selector</strong>, enter the <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Selector</a> for the Delegate that you want to execute this step. Typically, this
    is the same Selector used to select a Delegate in the <strong>Terraform Provision</strong>
    or <strong>Terraform Apply</strong> step.</p><h3>Option: Terraform Environment
    Variables</h3><p>You can remove any Terraform environment variables you created
    using the Terraform Provision or Terraform Apply steps.</p><p>You cannot add new
    environment variables in the Terraform Destroy step.</p><p>If you select the <strong>Inherit
    from last successful Terraform Apply</strong> option, then the environment variables
    are also inherited from the environment variables set in any pervious Terraform
    provisioning step in the Workflow.</p><h3>Option: Inherit from last successful
    Terraform Apply</h3><p>As described in <a href="#review_what_gets_destroyed">Review:
    What Gets Destroyed?</a>, select this option to destroy the infrastructure provisioned
    by the last successful <strong>Terraform Provision</strong> or <strong>Terraform</strong>
    <strong>Apply</strong> step in the Workflow.</p><p>If you select this option,
    then the <strong>Input Values</strong> and <strong>Backend Configuration</strong>
    settings are disabled.</p><h3>Option: Set as Terraform Destroy Plan and Export</h3><p>Select
    this option to make this Terraform Destroy step a Terraform plan. This is useful
    when you want to use an Approval step to approve Terraform Destroy steps.</p><p>This
    is the same as running <code>terraform plan -destroy</code> in Terraform.</p><p>If
    you select this option, Harness generates a plan to destroy all the known resources.</p><p>Later,
    when you want to actually destroy the resources, you add another Terraform Destroy
    step and select the option <strong>Inherit following configurations from Terraform
    Destroy Plan</strong>.</p><p>The <strong>Inherit following configurations from
    Terraform Destroy Plan</strong> option only appears if the <strong>Set as Terraform
    Destroy Plan and Export</strong> option was set in the preceding Terraform Destroy
    step.</p><p>The Terraform Plan is stored in a Secrets Manager as an encrypted
    text.</p><h4>Terraform Plan Size Limit</h4><p>The Terraform Plan is stored in
    the default Harness Secrets Manager as encrypted text. This is because plans often
    contain variables that store secrets.</p><p>The Terraform plan size must not exceed
    the secret size limit for secrets in your default Secret Manager. AWS Secrets
    Manager has a limitation of 64KB. Other supported Secrets Managers support larger
    file size.</p><p>See <a href="/article/uuer539u3l-add-a-secrets-manager">Add a
    Secrets Manager</a>.</p><h4>Terraform Destroy Plan Output Variable</h4><p>If you
    select the <strong>Set as Terraform Destroy Plan and Export</strong> option, you
    can display the output of the plan using the variable expression <code>${terraformDestroy.tfplan}</code>.
    For example, you can display the plan output in a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step.</p><h4>Terraform Destroy Plan File Output Variable</h4><div class="note-callout">Currently,
    this feature is behind the Feature Flag <code>OPTIMIZED_TF_PLAN</code>. Contact
    <a href="mailto:support@harness.io" target="_blank">Harness Support</a> to enable
    the feature.</div><p>If you select the <strong>Set as Terraform Destroy Plan and
    Export</strong> option, you can display the output of the plan using the variable
    expression <code>${terraformPlan.destroy.jsonFilePath()}</code> .</p><p>The <code>${terraformPlan.destroy.jsonFilePath()}</code>
    expression outputs the path to the Terraform plan <u>file</u> on the Harness Delegate
    that executed the step.</p><p>For example, you can display the plan output in
    a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell Script</a>
    step:</p><pre># Terraform Destroy<br/>#### Using OPA <br/>opa exec --decision
    terraform/analysis/authz --bundle policy/ ${terraformPlan.destroy.jsonFilePath()}<br/><br/>####
    Using OPA daemon<br/>curl localhost:8181/v0/data/terraform/analysis/authz -d @${terraformPlan.destroy.jsonFilePath()}</pre><p></p><p>If
    you use the Terraform Plan step, you can use the expression <code>{terraformPlan.jsonFilePath()}</code>
    to output plan used by that step.</p><h4>Terraform Plan Human Readable</h4><p>Harness
    provides expressions to view the plan in a more human readable format:</p><ul><li><code>${terraformApply.tfplanHumanReadable}</code></li><li><code>${terraformDestroy.tfplanHumanReadable}</code></li></ul><p></p><h3>Option:
    Inherit following configurations from Terraform Destroy Plan</h3><p>Select this
    option to apply the previous Terraform Destroy step if that step has the <strong>Set
    as Terraform Destroy Plan and Export</strong> option enabled.</p><p>As noted above
    in Option: Set as Terraform Destroy Plan and Export, the <strong>Inherit following
    configurations from Terraform Destroy Plan</strong> option only appears if the
    <strong>Set as Terraform Destroy Plan and Export</strong> option was set in the
    preceding Terraform Destroy step.</p><h3>Option: Input Values</h3><p>Enter the
    input values to use when destroying the infrastructure.</p><p>The Terraform Infrastructure
    Provisioner you are using (the Terraform Infrastructure Provisioner you selected
    in the <strong>Provisioner</strong> setting earlier), identifies the Terraform
    script where the inputs are located.</p><p>See <a href="/article/uxwih21ps1-terraform-provisioner-step#step_3_enter_input_values">Enter
    Input Variables</a>.</p><h4>Use tfvar Files</h4><p>The <strong>Input Values</strong>
    section also includes the <strong>Use tfvar files</strong> option for using a
    variable definitions file.</p><p>You can use inline or remote tfvar files.</p><h5>Inline
    tfvar Files</h5><p>The path to the variable definitions file is relative to the
    root of the Git repo specified in the Terraform Provisioner setting. For example,
    in the following image, the <strong>testing.tfvars</strong> file is located in
    the repo at <code>terraform/ec2/testing/testing.tfvars</code>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557441235992/image.png"/></figure><p>If
    <strong>Use tfvar files</strong> is selected and there are also <strong>Inline
    Values</strong>, when Harness loads the variables from the <strong>tfvars</strong>
    file, the <strong>Inline Values</strong> variables override the variables from
    the tfvars file.</p><p>If you only want to use the tfvars file, make sure to delete
    the Inline Values.</p><div class="note-callout">You can also use <a href="/article/766iheu1bk-add-workflow-variables-new-template">Workflow
    variables</a> in <strong>File Path</strong>. This allows you to make the setting
    a deployment runtime parameter and to output their values using a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step.</div><h5>Remote tfvar Files</h5><p>In <strong>Source Repository</strong>,
    select the Harness <a href="/article/ay9hlwbgwa-add-source-repo-providers">Source
    Repo Provider</a> that connects to the repo where your tfvar file is.</p><p>Select
    <strong>Commit ID</strong> or <strong>Branch.</strong></p><div class="note-callout"><strong>Commit
    ID</strong> also supports <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging"
    target="_blank">Git tags</a>.</div><ul><li>For <strong>Commit ID</strong>, enter
    the git commit ID or Git tag containing the tfvar version you want to use.</li><li>For
    <strong>Branch</strong>, enter the name of the branch where the tfvar file is
    located.</li></ul><p>In <strong>File Folder Path</strong>, enter the full path
    from the root of the repo to the tfvar file.</p><h3>Step 4: Backend Configuration</h3><p>Use
    this option to access the Backend state file directly. Enter values for each backend
    config (remote state variable).</p><p>The Terraform Infrastructure Provisioner
    you are using (the Terraform Infrastructure Provisioner you selected in the <strong>Provisioner</strong>
    setting earlier), identifies the Terraform script where the remote state settings
    are located.</p><p>See <a href="/article/uxwih21ps1-terraform-provisioner-step#option_1_backend_configuration_remote_state">Backend
    Configuration (Remote state)</a>.</p><p>Click <strong>Submit</strong>. The Terraform
    Destroy step is added to the Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557444090556/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></figure><p></p>'
  slug: terraform-destroy
  tags: []
  is_live: true
