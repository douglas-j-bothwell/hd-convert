type: article
article_id: s6rst8nw3w
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Poll New Helm Charts using a Trigger
slug: poll-new-helm-charts-using-a-trigger
description: In many cases, developers want to deploy using the latest chart from
  their artifact server or chart repo. In other cases, a developer does not want to
  deploy the latest chart because some configurati…
short_version: In many cases, developers want to deploy using the latest chart from
  their artifact server or chart repo. In other cases, a developer does not want to
  deploy the latest chart because some configurati…
tags: []
show_toc: true
is_private: false
is_published: false
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:20.886488Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Poll New Helm Charts using a Trigger
  description: ""
  short_version: ""
  body: '<p>In many cases, developers want to deploy using the latest chart from their
    artifact server or chart repo.</p><p>In other cases, a developer does not want
    to deploy the latest chart because some configurations and dependencies are tied
    to an older chart version. </p><p>Polling for new Helm charts using a Trigger
    allows you to see what Helm charts have been pushed to your artifact server, and
    then select which version you want to deploy. </p><p>In this topic:</p><ul><li><a
    href="#before_you_begin">Before You Begin</a></li><li><a href="#visual_summary">Visual
    Summary</a></li><li><a href="#simple_slug">Step 1: Title</a></li><li><a href="#another_slug">Step
    2: Title</a></li><li><a href="#limitations">Limitations</a></li><li><a href="#next_steps">Next
    Steps</a></li></ul><h3>Before You Begin</h3><p>Review the following topics:</p><ul><li><a
    href="/article/2aaevhygep-helm-quickstart">Helm Quickstart</a></li><li><a href="/article/hddm3rgf1y-use-a-helm-repository-with-kubernetes">Use
    a Helm Repository with Kubernetes</a></li><li><a href="/article/yjkkwi56hl-link-resource-files-or-helm-charts-in-git-repos">Link
    Resource Files or Helm Charts in Git Repos</a></li><li><a href="/article/xerirloz9a-add-a-trigger-2">Trigger
    Workflows and Pipelines</a></li><li><a href="/article/9dvxcegm90-variables">What
    is a Harness Variable Expression?</a></li></ul><p>In this topic we will be using
    the following Harness components, so ensure you are familiar with them:</p><ul><li>Harness
    <a href="/article/jizsp5tsms-custom-artifact-source">Custom Artifact Source</a>
    as a <a href="/article/ygi6d8epse-use-templates">Template</a></li><li>Helm charts
    from an AWS S3 bucket.</li><li>Kubernetes Service with a Helm chart</li><li>A
    Kubernetes <a href="/article/dl0l34ge8l-create-a-kubernetes-rolling-deployment">Rolling
    Deployment</a> Workflow</li><li>A <a href="/article/xerirloz9a-add-a-trigger-2">Trigger</a>
    that selects the Artifact Source for the Service</li><li>A Harness <a href="/article/n39w05njjv-environment-configuration">Environment</a></li></ul><h3>Review:
    Kubernetes or Helm Native?</h3><p>Harness includes both Kubernetes and Helm Native
    deployments, and you can use Helm charts in both.</p><p>For explanation of the
    difference, see <a href="/article/i3n6qr8p5i-deployments-overview#kubernetes_or_helm">Kubernetes
    or Helm?</a>.</p><p>In this topic we will be using Kubernetes with Helm charts.
    </p><p></p><h3>Step 1: Poll Chart Versions in Custom Artifact Source Template</h3><p>We
    need a way to gather the Helm chart information from the artifact source, such
    as an AWS S3 Bucket or a public repo. To do this, we&#39;ll create a Harness Custom
    Artifact Source template. In the Template, we&#39;ll add a script that polls the
    artifact source and puts JSON array results into a variable.</p><p>In the script,
    once we&#39;ve polled the artifact source, we pass the results of the JSON query
    into the Harness variable named <code>${ARTIFACT_RESULT_PATH}</code> . </p><p>Let&#39;s
    look at two examples.</p><h4>Poll AWS S3</h4><p>In the Custom Artifact Source
    example below, the script copies the index.yaml file from the specified S3 Bucket
    folder path. </p><p>Using the yq command line YAML/XML processor, the script parses
    the information and passes it as a JSON array into a Harness variable, <code>${ARTIFACT_RESULT_PATH}</code>.
    </p><p>The user needs to pass in the branch name to gather the right chart. </p><p>Here&#39;s
    the script:</p><pre>#rm /tmp/harness-* || true<br/>find /tmp -name &#39;harness-*&#39;
    -mmin +120 -delete 2&gt;/dev/null<br/>if [ -f /tmp/index.yaml ]; then<br/>  rm
    /tmp/index.yaml || true<br/>fi<br/><br/>export AWS_DEFAULT_REGION=us-west-2<br/><br/>aws
    s3 cp s3://kubernetes-helm-charts/${branchname}/index.yaml .<br/><br/>yq r -j
    index.yaml &gt; ${ARTIFACT_RESULT_PATH}</pre><p>Below is the Custom Artifact Source
    Template using the script.  </p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595622280726/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>
    </p><p>In <strong>Artifacts Array Path</strong>, we enter the root object of the
    array, <code>$.entries.${chartname}</code>, and map it to the artifact build number,
    <code>version</code>. </p><p>There are two variables:</p><ul><li><code>branchname</code>:
    This is the variable that the user will pass into the script.</li><li><code>chartname</code>:
    This is the variable mapped to root object array path.</li></ul><h4>Poll Public
    Repository</h4><p>Next, we&#39;ll look at the example we use in the rest of this
    topic. In this example, we poll the default repository for Helm which is located
    at <code>https://kubernetes-charts.storage.googleapis.com/</code>.</p><p>We can
    query for the <strong>version</strong> of the chart and pass that in as parameters
    for the Harness Service Artifact Source version and deploy it.</p><p>Here&#39;s
    the script:</p><pre># FILL THE variables<br/>CHART_NAME=${chart_name}<br/># END
    variables<br/><br/>HELM_REPO_URL=&#34;https://kubernetes-charts.storage.googleapis.com&#34;<br/>HELM_REPO_INDEX_URL=&#34;${HELM_REPO_URL}/index.yaml&#34;<br/><br/>curl
    -s ${HELM_REPO_INDEX_URL}  | grep &#34;${HELM_REPO_URL}/${CHART_NAME}-&#34; |
    sed  &#34;s#.*/${CHART_NAME}-\(.*\).tgz#\1#&#34; &gt; raw_versions<br/><br/>cat
    raw_versions | awk &#39;{print &#34;{\&#34;version\&#34;: \&#34;&#34; $1 &#34;\&#34;},&#34;
    }&#39; | tr -d &#34;\n&#34; |  sed &#34;s/,$/]}/&#34;  | <br/>sed &#39;s/^/{&#34;items&#34;
    : [/&#39;  &gt; ${ARTIFACT_RESULT_PATH} </pre><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595618638593/image.png"/></figure><p>For
    <strong>Artifacts Array Path</strong>, we use <code>$.items</code> and then locate
    the build number is <code>versions</code>.</p><p>The only input variable in <strong>Variables</strong>
    is <code>chart_name</code> because the script uses it in <code>CHART_NAME=${chart_name}</code>.</p><p>You
    can put a placeholder in the variable <strong>Value</strong>. You will replace
    the value when you use the Template as an Artifact Source in the Harness Service.
    We will do this next.</p><h3>Step 2: Connect to the Git Repo for the Chart</h3><p>Next
    connect Harness to the Bitnami Library for Kubernetes, <a href="https://github.com/bitnami/charts">https://github.com/bitnami/charts</a>.
    This will enable us to pull the chart for rabbitmq,</p><p>See <a href="/article/sip9rr6ogy-add-github-repo">Add
    a GitHub Repo</a> for steps on adding the Source Repo Provider.</p><p>Here&#39;s
    an example: </p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595628524762/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    will use this Source Repo Provider to link to the chart in the Harness Kubernetes
    Service.</p><h3>Step 3: Create the Kubernetes Service</h3><p>Now we&#39;ll create
    a Harness Kubernetes Service that will use the template as its Artifact Source
    to get the chart versions, and link to the remote chart .</p><ol><li>In your Harness
    Application, click <strong>Services</strong>, and then click <strong>Add Service</strong>.
    The <strong>Add Service</strong> settings appear.</li><li>In <strong>Name</strong>,
    enter a name for the Service.</li><li>In <strong>Deployment Type</strong>, select <strong>Kubernetes</strong>,
    and then ensure <strong>Enable Kubernetes V2</strong> is selected.</li><li>Click <strong>Submit</strong>.
    The new Harness Kubernetes Service is created.</li></ol><h3>Step 3: Use the Artifact
    Source Template</h3><p>In the Kubernetes Service, we will add the Custom Artifact
    Source Template as the Artifact Source.</p><ol><li>In the Kubernetes Service,
    click <strong>Add Artifact Source</strong>, and then select <strong>Custom Repository</strong>.</li><li>In
    <strong>Add Custom Artifact Source</strong>, click <strong>Select from Shared
    Template Library</strong>.</li><li>Locate the Custom Artifact Source Template
    you created, and click <strong>Link</strong>.</li></ol><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595628831666/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    Template appears as an Artifact Source. </p><ol><li start="4" style="counter-increment:li
    3">Enter a name for the Artifact Source.</li><li>In <strong>Variables</strong>,
    enter <strong>rabbitmq</strong> in <strong>Value</strong>. This will pass <strong>rabbitmq</strong>
    as the <code>chart_name</code> variable value, which the script uses it in <code>CHART_NAME=${chart_name}</code>.
    <br/>You can enter the name of any chart located in the default repository polled
    in the script. </li><li>Click <strong>Submit</strong>. The Artifact Source is
    listed.</li></ol><h3>Step 4: Check Artifact History</h3><p>To test the set up
    of the Artifact Source, click <strong>Artifact History</strong>. The repo is polled
    for the chart builds:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595633569045/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Always
    check the <strong>Time</strong> column to ensure that recent builds are listed.</p><div
    class="tip-callout">To refresh the list of artifacts, click <strong>Manually pull
    artifact</strong>. This is very useful for refreshing the list periodically. </div><p>Next,
    we&#39;ll add the Helm Chart to the Service as its Manifest. </p><p></p><h3>Step
    5: Link the Manifest</h3><p>Now you can link to the Helm chart for the application.
    In this example, rabbitmq.</p><p>You will use the Harness Source Repo Provider
    you set up earlier.</p><p>In your Harness Kubernetes Service, in <strong>Manifests</strong>,
    click the vertical ellipsis and click <strong>Link Remote Manifests</strong>.</p><ol><li>In
    <strong>Manifest Format</strong>, select <strong>Helm Chart from Source Repository</strong>.</li><li>In <strong>Source
    Repository</strong>, select the Source Repo Provider for the Git repo you added
    to your Harness account. </li><li>In <strong>Commit ID</strong> , select <strong>Latest
    from Branch</strong>.</li><li>In <strong>Branch</strong>, enter <strong>master</strong>.</li><li>In <strong>File/Folder
    path(s)</strong>,  enter <strong>stable/nginx-ingress</strong>.</li><li>In <strong>Helm
    Version</strong>, select <strong>v3</strong>.</li><li>Click <strong>Submit</strong>.</li></ol><p>Here&#39;s
    an example:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595633367544/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    Service is finished. Its Artifact Source polls the chart repo for chart versions
    at deployment runtime, and its Manifests section links to the chart for the app
    you are deploying.</p><p>Next, we&#39;ll define the target deployment cluster.</p><h3>Step
    6: Create an Environment</h3><p>Follow the steps in <a href="/article/u3rp89v80h-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a> to identify where you will deploy the
    app defined in the Helm chart.</p><p>Here&#39;s an example:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595630337859/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Next
    let&#39;s create the Kubernetes Rolling deployment Workflow to deploy the Service
    to the Infrastructure Definition. </p><h3>Step 7: Create the Rolling Workflow</h3><p>This
    Workflow will only have the Rollout Deployment step.  </p><p>Follow the steps
    in <a href="/article/dl0l34ge8l-create-a-kubernetes-rolling-deployment">Create
    a Kubernetes Rolling Deployment</a> to create the Workflow.</p><p>Once created,
    please template the Environment, Service, and Infrastructure Definition setting
    of the Workflow. See <a href="/article/bov41f5b7o-templatize-a-workflow-new-template">Templatize
    a Workflow</a> if you are new to this procedure.</p><p>Here&#39;s an example:</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595630504217/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Templating
    will allow users to fully leverage the curl command and select an Environment,
    Service, an Infrastructure Definition, and a build number to pass in the Trigger.</p><p>In
    the Workflow, click <strong>Deploy</strong> to see the parameters and variables.
    You must select a Service to see the Build/Version option:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/s6rst8nw3w/1595633489791/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Build/Version</strong>, Harness shows the available versions in the Service&#39;s
    Custom Artifact Source. </p><div class="tip-callout">If you do not see a recent
    build version, go back to the Service, click Artifact History, and use <strong>Manually
    pull artifact</strong> to pull a new list.</div><p>Select whatever build you like.</p><p>You
    can deploy now, and then create a Trigger for future deployments.</p><h3>Step
    8: Trigger</h3><p>If you want to take the version from a Trigger, you can pass
    in a templatized value like <code>${version}</code>. </p><p>In the Trigger, you
    can populate what value that will be assigned in the payload. Once the version
    is submitted, trigger the workflow via a curl command. The curl command should
    look something like this: </p><p></p><p>{&#34;application&#34;:&#34;uNssxDijTtGh_4aL1XOjZA&#34;,&#34;parameters&#34;:{&#34;Environment&#34;:&#34;Environment_placeholder&#34;,&#34;Service&#34;:&#34;Service_placeholder&#34;,&#34;InfraDefinition_Kubernetes&#34;:&#34;InfraDefinition_Kubernetes_placeholder&#34;},&#34;artifacts&#34;:[{&#34;service&#34;:&#34;rabbitmq&#34;,&#34;buildNumber&#34;:&#34;rabbitmq_BUILD_NUMBER_PLACE_HOLDER&#34;}]}</p><p></p><p></p><p>Once.
    the desired parameters are created, the artifact polled will be leveraged in the
    deployment. A use can determine which versions are available to use, and can pick
    one to deploy. Rather than letting Harness let the user pick the artifact based
    on polling in the UI, the trigger will query for the build number and allow the
    user to deploy that specific version of the chat. The upside to this approach
    is that it automates a significant amount of work to deploy based on a version.
    </p><p></p><h3>Limitations</h3><p>[What feature integrations, settings, use cases
    does Harness not support?]</p><p></p><h3>See Also</h3><ul><li>[related topics,
    reference]</li></ul><h3>Configure As Code</h3><p>To see how to configure the settings
    in this topic using YAML, configure the settings in the UI first, and then click
    the YAML editor button (<span style="color:#fb9e00" data-hd-color="#fb9e00"><strong>&lt;/&gt;</strong></span>).</p>'
  slug: poll-new-helm-charts-using-a-trigger
  tags: []
  is_live: true
