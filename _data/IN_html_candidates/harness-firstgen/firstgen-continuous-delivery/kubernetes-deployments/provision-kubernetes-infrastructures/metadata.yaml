type: article
article_id: huajnezo0r
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Provision Kubernetes Infrastructures
slug: provision-kubernetes-infrastructures
description: Provision the target Kubernetes infrastructure as part of a Workflow.
short_version: Provision the target Kubernetes infrastructure as part of a Workflow.
tags:
- kubernetes terraform
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:49.276071Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Provision Kubernetes Infrastructures
  description: Provision the target Kubernetes infrastructure as part of a Workflow.
  short_version: Provision the target Kubernetes infrastructure as part of a Workflow.
  body: '<p>You can provision the target Kubernetes infrastructure as part of a pre-deployment
    step in your Workflow. When the Workflow runs, it builds your Kubernetes infrastructure
    first, and then deploys to the new infrastructure.</p><p>Provisioning involves
    creating a Harness Infrastructure Provisioner, and then using it in the Infrastructure
    Definition and Workflow.</p><div class="note-callout">Provisioning Kubernetes
    is supported with the Google Cloud Platform Cloud Provider, but not the Azure
    or Kubernetes Cluster Cloud Providers.</div><p>In this topic:</p><ul><li><a href="#before_you_begin">Before
    You Begin</a></li><li><a href="#step_1_set_up_the_delegate_for_terraform">Step
    1: Set Up the Delegate for Terraform</a></li><li><a href="#step_2_set_up_the_cloud_provider">Step
    2: Set Up the Cloud Provider</a></li><li><a href="#step_3_git_repo_setup">Step
    3: Git Repo Setup</a></li><li><a href="#step_4_set_up_a_terraform_infrastructure_provisioner">Step
    4: Set Up a Terraform Infrastructure Provisioner</a></li><li><a href="#step_5_map_outputs_in_infrastructure_definition">Step
    5: Map Outputs in Infrastructure Definition</a></li><li><a href="#step_6_add_terraform_provisioner_to_workflow">Step
    6: Add Terraform Provisioner to Workflow</a></li><li><a href="#next_steps">Next
    Steps</a></li></ul><h3>Before You Begin</h3><ul><li><a href="/article/u3rp89v80h-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a></li><li>Creating a Terraform Infrastructure
    Provisioner is covered in the topic <a href="/article/9pvvgcdbjh-terrform-provisioner">Terraform
    Provisioner</a>. In this topic, we will summarize all the related steps, but focus
    on the Infrastructure Definition and Workflow step.</li></ul><h3>Step 1: Set Up
    the Delegate for Terraform</h3><ol><li>Install the Kubernetes Delegate where it
    can connect to the provisioned cluster.<br/>The Delegate needs to be able to reach
    the Kubernetes master endpoint of the provisioned cluster and have the necessary
    credentials, such as the Kubernetes service account token.<br/>Follow the steps
    in <a href="/article/m383u53mp1-connect-to-your-target-kubernetes-platform">Connect
    to Your Target Kubernetes Platform</a>.</li><li>Install Terraform on the Delegate
    using a Delegate Profile.<br/>Follow the steps in <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Installation and Management</a> and <a href="/article/nxhlbmbgkj-common-delegate-profile-scripts">Common
    Delegate Profile Scripts</a>.</li><li>Tag the Delegate.<br/>When you add the Terraform
    Provision step in your Workflow, you will specify that a specific Delegate perform
    the operation by using its Delegate Tag.<br/>Follow the steps in <a href="/article/h9tkwmkrm7-delegate-installation">Delegate
    Installation and Management</a>.</li></ol><h3>Step 2: Set Up the Cloud Provider</h3><div
    class="note-callout">Harness supports provisioning Kubernetes using Google Cloud
    Platform (GKE) only. The Kubernetes Cluster Cloud Provider, which connects directly
    to an existing cluster, cannot be used to perform provisioning.</div><p>Add a
    Harness Cloud Provider that connects to your Google Cloud Platform account.</p><p>The
    GCP service account requires <strong>Kubernetes Engine Admin</strong> (GKE Admin)
    role to get the Kubernetes master username and password. Harness also requires <strong>Storage
    Object Viewer</strong> permissions.</p><p>See <a href="/article/whwnovprrb-cloud-providers">Add
    Cloud Providers</a>.</p><h3>Step 3: Git Repo Setup</h3><p>The Terraform script
    you use with Harness must be available in a Git repo. You connect Harness to the
    repo using a Harness Source Repro Provider.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/4m5d41bzg8/1580849910643/image.png"/></figure><p>Set
    up a Harness Source Repro Provider that connects to the Git repo hosting your
    Terraform script. See <a href="/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a>.</p><h3>Step 4: Set Up a Terraform Infrastructure Provisioner</h3><p>You
    set up a Terraform Infrastructure Provisioner to identify your script repo information
    and script input variables.</p><p>Setting up the Terraform Provisioner involves
    the following:</p><ol><li>Add your Terraform script via its Git Repo so Harness
    can pull the script.</li><li>Map the relevant Terraform output variables from
    the script to the required Harness fields for the deployment platform (AWS, Kubernetes,
    etc).</li></ol><p>Once the Terraform Infrastructure Provisioner is set up, it
    can be used in:</p><ul><li>Infrastructure Definitions — To identify the target
    cluster and namespace.</li><li>Workflow Terraform Provisioner Steps — To provision
    the infrastructure as part of the Workflow.</li></ul><div class="note-callout">Harness
    supports first class Terraform Kubernetes provisioning for Google Kubernetes Engine
    (GKE).</div><p>To set up a Terraform Infrastructure Provisioner, do the following:</p><ol><li>In
    your Harness Application, click <strong>Infrastructure Provisioners</strong>.</li><li>Click
    <strong>Add Infrastructure Provisioner</strong>, and then click <strong>Terraform</strong>.
    The <strong>Add Terraform Provisioner</strong> dialog appears.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/4m5d41bzg8/1580851510649/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></figure><ol><li
    style="counter-increment:li 2" start="3">In <strong>Display Name</strong>, enter
    the name for this provisioner. You will use this name to select this provisioner
    in Harness Environments and Workflows.</li><li>Click <strong>NEXT</strong>. The
    <strong>Script Repository</strong> section appears. This is where you provide
    the location of your Terraform script in your Git repo.</li><li>In <strong>Script
    Repository</strong>, in <strong>Git Repository</strong>, select the <a href="/article/ay9hlwbgwa-add-source-repo-providers">Source
    Repo Provider</a> you added for the Git repo where your script is located.</li><li>In
    <strong>Git Repository Branch</strong>, enter the repo branch to use. For example,
    <strong>master</strong>. For master, you can also use a dot (<code>.</code>).</li><li>In
    <strong>Terraform Configuration Root Directory</strong>, enter the folder where
    the script is located. Here is an example showing the Git repo on GitHub and the
    <strong>Script Repository</strong> settings:</li></ol><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/4m5d41bzg8/1580851905741/image.png"
    style="display:block;margin-left:auto;margin-right:auto" data-hd-align="center"/></figure><ol><li
    style="counter-increment:li 7" start="8">Click <strong>NEXT</strong>. The <strong>Variables</strong>
    section is displayed. This is where you will add the script input variables that
    must be given values when the script is run.</li><li>In <strong>Variables</strong>,
    click <strong>Populate Variables</strong>. The <strong>Populate from Example</strong>
    dialog appears. Click <strong>SUBMIT</strong> to have the Harness Delegate use
    the Source Repo Provider you added to pull the variables from your script and
    populate the <strong>Variables</strong> section.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557265350837/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure>If
    Harness cannot pull the variables from your script, check your settings and try
    again. Ensure that your Source Repo Provisioner is working by clicking its <strong>TEST</strong>
    button.<br/>Once Harness pulls in the variables from the script, it populates
    the <strong>Variables</strong> section.</li><li>In the <strong>Type</strong> column
    for each variable, specify <strong>Text</strong> or <strong>Encrypted Text</strong>.<br/>When
    you add the provisioner to a Workflow, you will have to provide text values for
    <strong>Text</strong> variables, and select Harness Encrypted Text variables for
    <strong>Encrypted Text</strong> variables. See <a href="/article/au38zpufhr-secret-management">Secrets
    Management</a>.</li><li>Click <strong>NEXT</strong>. The <strong>Backend Configuration
    (Remote state)</strong> section appears. This is an optional step.<br/><br/>By
    default, Terraform uses the local backend to manage state, in a local <a href="https://www.terraform.io/docs/configuration/syntax.html">Terraform
    language</a> file named <strong>terraform.tfstate</strong> on the disk where you
    are running Terraform. With remote state, Terraform writes the state data to a
    persistent remote data store (such as an S3 bucket or HashiCorp Consul), which
    can then be shared between all members of a team. You can add the backend configs
    (remote state variables) for remote state to your Terraform Provisioner in <strong>Backend
    Configuration (Remote state)</strong>.</li><li>In <strong>Backend Configuration
    (Remote state)</strong>, enter the backend configs from your script.</li><li>Click
    <strong>Next</strong> and then <strong>Submit</strong>. The Terraform Provisioner
    is created.</li></ol><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/4m5d41bzg8/1580856524190/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></figure><p></p><p>Now
    you can use the Terraform Provisioner in Infrastructure Definitions and Workflows.</p><h3>Step
    5: Map Outputs in Infrastructure Definition</h3><p>Typically, when you add an
    Environment, you specify the Infrastructure Definition for an <em>existing</em>
    infrastructure. To use your Terraform Provisioner, you add the Terraform Provisioner
    to the Infrastructure Definition to identify a dynamically provisioned infrastructure
    <em>that will exist</em>.</p><p>Later, when you create a Workflow, you will use
    a Terraform Provisioner step to provision the infrastructure. During deployment,
    the Terraform Provisioner step will provision the infrastructure and then the
    Workflow will deploy to it via the Infrastructure Definition.</p><p>To add the
    Infrastructure Provisioner to the Infrastructure Definition, do the following:</p><ol><li>In
    your Harness Environment, click <strong>Infrastructure Definition</strong>. The
    <strong>Infrastructure Definition</strong> settings appear.</li><li>In <strong>Name</strong>,
    enter the name for the Infrastructure Definition. You will use this name to select
    the Infrastructure Definition when you set up Workflows and Workflow Phases.</li><li>In
    <strong>Cloud Provider Type</strong>, select <strong>Google Cloud Platform</strong>.</li></ol><div
    class="note-callout">Harness supports first class Terraform Kubernetes provisioning
    for Google Kubernetes Engine (GKE).</div><ol><li style="counter-increment:li 3"
    start="4">In <strong>Deployment Type</strong>, select <strong>Kubernetes</strong>.</li><li>Click
    <strong>Map Dynamically Provisioned Infrastructure</strong>.</li><li>In <strong>Provisioner</strong>,
    select your Terraform Infrastructure Provisioner.</li><li>In <strong>Cloud Provider</strong>,
    select the Cloud Provider that you use to connect Harness with GCP.</li><li>In
    <strong>Cluster Name</strong> and <strong>Namespace</strong>, map the required
    fields to your Terraform script outputs.</li></ol><p>You map the Terraform script
    outputs using this syntax, where <code>exact_name</code> is the name of the output:</p><pre
    class="hljs java">${terrafrom.<span class="hljs-variable" style="box-sizing:inherit;color:rgb(223,
    80, 0)" data-hd-color="rgb(223, 80, 0)"><em style="box-sizing:inherit">exact_name</em></span><span
    class="hljs-variable" style="box-sizing:inherit;color:rgb(223, 80, 0)" data-hd-color="rgb(223,
    80, 0)">}</span></pre><div class="note-callout">When you map a Terraform script
    output to a Harness field as part of a Service Mapping, the variable for the output,
    <code>${terrafrom.exact_name​}</code>, can be used anywhere in the Workflow that
    uses that Terraform Provisioner.</div><p>The Kubernetes deployment type requires
    that you map an output to <strong>Cluster Name</strong>. You can map an output
    to <strong>Namespace</strong> as an option.</p><p>The following example shows
    the Terraform script outputs used for the Kubernetes deployment type fields:</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/other/1568843935341/image.png"/></figure><p>For
    information on Kubernetes deployments, see <a href="/article/wnr5n847b1-kubernetes-overview">Kubernetes
    Deployments Overview</a>.</p><p>Click <strong>Submit</strong>. The Infrastructure
    Definition is created.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/4m5d41bzg8/1580857199330/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></figure><p>Now
    that the Infrastructure Definition is created, you must add a <strong>Terraform
    Provision</strong> step to the Workflows that will use this Infrastructure Definition.</p><h3>Step
    6: Add Terraform Provisioner to Workflow</h3><p>The Terraform Provision step lets
    you customize the Infrastructure Provisioner for a specific deployment. You can
    specify the inputs, remote state, targets for the provisioning performed by the
    Workflow.</p><ol><li>Open or create a Workflow that is configured with an Infrastructure
    Definition that uses the Kubernetes Infrastructure Provisioner.</li><li>In <strong>Pre-deployment
    Steps</strong>, click <strong>Add Step</strong>.</li><li>Select <strong>Terraform
    Provision</strong>. The <strong>Terraform Provision</strong> dialog appears.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/9pvvgcdbjh/1557436223252/image.png"
    style="max-height:60%;max-width:60%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="60%" data-hd-width="60%" data-hd-align="center"/></figure><p></p><ol><li
    style="counter-increment:li 2" start="3">In <strong>Provisioner</strong>, select
    a Kubernetes Terraform Provisioner.</li><li>In <strong>Timeout</strong>, enter
    how long Harness should wait to apply the Terraform Provisioner before failing
    the Workflow.</li></ol><div class="note-callout">The <strong>Inherit following
    configurations from dry run</strong> setting is described in .</div><ol><li style="counter-increment:li
    4" start="5">Click <strong>NEXT</strong>. The remaining settings appear.</li></ol><p>The
    remaining settings are not Kubernetes-specific. You can review them in <a href="/article/9pvvgcdbjh-terrform-provisioner">Terraform
    Provisioner</a>.</p><div class="note-callout">In the <strong>Post-deployment Steps</strong>
    of the Workflow, you can add a <strong>Terraform Destroy</strong> step to remove
    any provisioned infrastructure, just like running the <code>terraform destroy</code> command.
    See the <a href="/article/4egyxnse9r-terraform-destroy">Remove Provisioned Infra
    with Terraform Destroy</a> How-to and  <a href="https://www.terraform.io/docs/commands/destroy.html"
    target="_blank">destroy</a> from Terraform.</div><ol><li style="counter-increment:li
    5" start="6">Complete your Workflow and click <strong>Deploy</strong>.</li></ol><h3>Next
    Steps</h3><ul><li><a href="/article/9pvvgcdbjh-terrform-provisioner#terraform_destroy">​Use
    Terraform Destroy</a></li><li><a href="/article/jaxppd8w9j-using-the-terraform-apply-command">Using
    the Terraform Apply Command</a></li></ul><p></p>'
  slug: provision-kubernetes-infrastructures
  tags:
  - kubernetes terraform
  is_live: true
