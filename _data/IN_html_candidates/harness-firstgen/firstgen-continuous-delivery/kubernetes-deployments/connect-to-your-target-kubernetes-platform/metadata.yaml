type: article
article_id: m383u53mp1
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Connect to Your Target Kubernetes Platform
slug: connect-to-your-target-kubernetes-platform
description: Connect Harness to your target Kubernetes cluster.
short_version: Connect Harness to your target Kubernetes cluster.
tags:
- k8s cluster
- target cluster
- k8s delelgate
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:48:39.144448Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Connect to Your Target Kubernetes Platform
  description: Connect Harness to your target Kubernetes cluster.
  short_version: Connect Harness to your target Kubernetes cluster.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/category/qfj6m1k2c4">NextGen</a>.</div><p></p><p>To connect
    Harness to your target Kubernetes cluster, you must first install a Harness Delegate
    in your target platform or target Kubernetes cluster.</p><p>Next, use the vendor-agnostic
    Harness Kubernetes Cluster Cloud Provider to connect Harness to your cluster (recommend).
    You can also use a platform-specific Cloud Provider, such as the AWS, GCP, or
    Azure Cloud Providers.</p><div class="note-callout">The simplest method is to
    install the Harness Delegate in your Kubernetes cluster and then set up the Harness
    Kubernetes Cluster Cloud Provider to use the same credentials as the Delegate.</div><p>In
    this topic:</p><ul><li> <a href="#before_you_begin">Before You Begin</a></li><li><a
    href="#review_cluster_connection_options">Review: Cluster Connection Options</a></li><li>
    <a href="#step_1_install_the_harness_kubernetes_delegate_in_your_target_cluster">Step
    1: Install the Harness Kubernetes Delegate in Your Target Cluster</a></li><li>
    <a href="#kubernetes_cluster_cloud_provider_vs_platform_cloud_providers">Step
    2: Choose a Kubernetes Cluster Cloud Provider or Platform Cloud Provider</a></li><li>
    <a href="#option_1_add_a_kubernetes_cluster_cloud_provider">Option 1: Add a Kubernetes
    Cluster Cloud Provider</a></li><li> <a href="#option_2_add_a_platform_specific_cloud_provider">Option
    2: Add a Platform-Specific Cloud Provider</a></li><li> <a href="#notes">Notes</a></li><li>
    <a href="#next_steps">Next Steps</a></li></ul><h3>Before You Begin</h3><ul><li><a
    href="/article/wnr5n847b1-kubernetes-overview">Kubernetes Deployments Overview</a></li><li>The
    target Kubernetes Cluster must meet the following minimum requirements:<ul><li><strong>Number
    of nodes:</strong> minimum of 3.</li><li><strong>Machine type:</strong> 4vCPU</li><li><strong>Memory:</strong>
    12GB RAM and 6GB Disk Space. 8GB RAM is for the Delegate. The remaining memory
    is for Kubernetes and containers.</li><li><strong>Networking:</strong> Outbound
    HTTPS for the Harness connection, and to connect to any container image repo.
    Allow TCP port 22 for SSH.</li></ul></li></ul><h3>Review: Cluster Connection Options</h3><p>This
    is a brief summary of the ways to connect to your target Kubernetes platform and
    clusters.</p><h4>Using Delegates Inside or Outside of the Target Cluster</h4><p>Typically,
    you install the Harness Kubernetes Delegate in your target cluster and then add
    a Kubernetes Cluster or GCP Cloud Provider that inherits its credentials from
    the Delegate.</p><p>You can also install the Kubernetes Delegate outside of the
    target cluster (anywhere in your environment), and use a non-Kubernetes Delegate
    type (Helm, Docker, Shell Script).</p><p>In this case, the Kubernetes Cluster
    Cloud Provider will not inherit credentials from the Delegate, but use the cluster
    master URL and some authentication method (Service Account Token, etc).</p><p>The
    GCP and Azure Cloud Providers will not inherit credentials from the Delegate (the
    Azure Cloud Provider never does), but use platform-specific credentials, such
    as encrypted keys.</p><h5>Running Scripts with a Delegate Outside of the Target
    Cluster</h5><p>If you use a Delegate installed outside of the target cluster,
    any scripts in your Pipeline need to use the <code>${HARNESS_KUBE_CONFIG_PATH}</code>
    expression to reference the path to a Harness-generated kubeconfig file containing
    the credentials you provided.</p><p>For example:</p><pre>export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}
    kubectl get pods -n pod-test</pre><p></p><p>Now the script will run using the
    correct credentials.</p><h4>Target Namespace</h4><p>By default the Delegate can
    deploy to any namespace. To target specific namespaces only, see <a href="/article/p91u0bxtaf-enable-delegate-to-deploy-to-multiple-kubernetes-namespaces">Target
    Delegates to Specific Namespaces</a>.</p><h4>Kubernetes Cluster Cloud Provider</h4><p>You
    can use the vendor-agnostic Kubernetes Cluster Cloud Provider for connections
    to your target cluster on any platform, including AWS EKS.</p><p>If you use the
    Kubernetes Delegate, you can have the Harness Kubernetes Cluster Cloud Provider
    inherit its credentials (Service Account).</p><p>The Kubernetes Cluster Cloud
    Provider can also use other types of credentials like username/password, CA certs,
    or Service Account Tokens. This is helpful if you use other types of Delegates
    that run outside Kubernetes (Shell Script, Docker, ECS).</p><h4>GCP and Azure
    Cloud Providers</h4><p>You can also use the GCP and Azure Cloud Providers to connect
    Harness with the platform hosting your target cluster. The account you use to
    connect them must provide the necessary credentials to change the target cluster.</p><p>For
    GCP, the service account used with the GCP Cloud Provider requires the <strong>Kubernetes
    Engine Admin</strong> (GKE Admin) role to get the Kubernetes master username and
    password. Harness also requires <strong>Storage Object Viewer</strong> permissions.</p><p>For
    Azure Kubernetes Services (AKS), the Client ID (Application ID) must be assigned
    to a role that has the Owner permission on the AKS cluster. If you are using the
    Kubernetes Cloud Provider and the Kubernetes Delegate in the AKS cluster, then
    AKS permissions are not required at all. This is recommended.</p><h3>Step 1: Install
    the Harness Kubernetes Delegate in Your Target Cluster</h3><ol><li>In Harness,
    click <strong>Setup</strong>, and then click <strong>Harness Delegates</strong>.</li><li>Click <strong>Download
    Delegate</strong> and then click <strong>Kubernetes YAML</strong>.</li><li>In
    the <strong>Delegate Setup</strong> dialog, enter a name for the Delegate, such
    as <strong>doc-example</strong>, select a Profile (the default is named <strong>Primary</strong>),
    and click <strong>Download</strong>. The YAML file is downloaded to your machine.</li><li>Install
    the Delegate in your cluster. You can copy the YAML file to your cluster any way
    you choose, but the following steps describe a common method.<ol><li>In a Terminal,
    connect to the Kubernetes cluster, and then use the same terminal to navigate
    to the folder where you downloaded the Harness Delegate YAML file. For example, <strong>cd
    ~/Downloads</strong>.</li><li>Extract the YAML file: <code>tar -zxvf harness-delegate-kubernetes.tar.gz</code>.</li><li>Navigate
    to the harness-delegate folder that was created:<pre>cd harness-delegate-kubernetes</pre></li><li>Paste
    the following installation command into the Terminal and press enter:<pre>kubectl
    apply -f harness-delegate.yaml</pre>You will see the following output (this Delegate
    is named <strong>doc-example</strong>):<pre>namespace/harness-delegate created<br/><br/>clusterrolebinding.rbac.authorization.doc-example/harness-delegate-cluster-admin
    created<br/><br/>statefulset.apps/doc-example-lnfzrf created</pre></li><li>Run
    this command to verify that the Delegate pod was created:<pre>kubectl get pods
    -n harness-delegate</pre></li></ol></li></ol><p>You will see output with the status
    Pending. The Pending status simply means that the cluster is still loading the
    pod.</p><p>Wait a few moments for the cluster to finish loading the pod and for
    the Delegate to connect to Harness Manager.</p><p>In Harness Manager, in the <strong>Harness
    Delegates</strong> page, the new Delegate will appear. You can refresh the page
    if you like.</p><p></p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550513779934/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550513779934/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></a></figure><p>Note
    the <strong>Delegate name</strong>. You will use this name when you set up the
    Kubernetes Cluster Cloud Provider.</p><div class="note-callout">When you onboard
    your own applications, you might need to install multiple Delegates, depending
    on their workloads, network segmentation, and firewall zones. Typically, you will
    need one Delegate for every 300-500 service instances across your applications,
    and will need one Delegate in each subnet or zone.</div><h3 id="kubernetes_cluster_cloud_provider_vs_platform_cloud_providers">Step
    2: Choose a Kubernetes Cluster Cloud Provider or Platform Cloud Provider</h3><p>The
    Kubernetes Cluster Cloud Provider is platform-agnostic. Consequently, you can
    use it to access a cluster on any platform, but it cannot also access platform-specific
    services and resources.</p><p>For example, if you have a Kubernetes cluster hosted
    in Google Cloud Platform (GCP), you can use the Kubernetes Cluster Cloud Provider
    to connect Harness to the cluster, but the Kubernetes Cluster Cloud Provider cannot
    also access Google Container Registry (GCR).</p><p>In this case, you can use a
    single Google Cloud Platform Cloud Provider to access the GKE cluster and all
    other GCP resources you need, such as GCR, or you could set up a Kubernetes Cluster
    Cloud Provider for the GKE cluster, and a Google Cloud Platform Cloud Provider
    for all other GCP services and resources.</p><p>No matter which option you choose,
    the Harness Kubernetes Delegate should be installed in your target cluster first.</p><h3>Option
    1: Add a Kubernetes Cluster Cloud Provider</h3><p>The following steps describe
    how to use the credentials of the Harness Kubernetes Delegate installed in your
    target cluster. If you use this option, the service account you use must have
    the Kubernetes <strong>cluster-admin</strong> role.</p><ol><li>In <strong>Harness
    Manager</strong>, click <strong>Setup</strong>.</li><li>Click <strong>Cloud Providers</strong>.
    On the <strong>Cloud Providers</strong> page, click <strong>Add Cloud Provider</strong>.
    The Cloud Provider appears.</li><li>Enter the following settings:</li></ol><ul><li><strong>Type:</strong> Select
    Kubernetes Cluster.</li><li><strong>Display Name:</strong> Enter a name. You will
    use this name later to select this Cloud Provider when you create a Harness Infrastructure
    Definition.</li><li><strong>Inherit from selected Delegate:</strong> Enable this
    option. Since the Delegate is already installed in the target cluster, you can
    use the Delegate&#39;s credentials for this Cloud Provider. This is the recommended
    configuration.</li><li><strong>Delegate Name:</strong> Select the name of the
    Delegate you installed in your cluster.</li><li><strong>Select Skip Validation:</strong> Enable
    this option for the setup of this Cloud Provider. Later, when you create an Infrastructure
    Definition, Harness will need to validate, so you can disable this setting then.</li><li><strong>Usage
    Scope:</strong> Use this setting to limit the use of the Cloud Provider to specific
    Harness Applications and Environments.</li></ul><ol><li style="counter-increment:li
    3" start="4">Click <strong>Test</strong>. Verify that the <code>The test was successful
    message</code> appears, and then click <strong>Submit</strong>.</li></ol><p>Your
    Kubernetes Cloud Provider is set up. Now Harness can use the Cloud Provider to
    perform operations in your cluster.</p><h3>Option 2: Add a Platform-Specific Cloud
    Provider</h3><p>For steps on setting up a Platform-Specific Cloud Provider, see
    <a href="/article/whwnovprrb-cloud-providers">Add Cloud Providers</a>.</p><h3>Notes</h3><ul><li><strong>Helm
    Client Only Mode</strong> — When you use a remote Helm chart in your Harness Service,
    you do not need to have Tiller installed on the Harness Delegate because Harness
    interacts directly with the Kubernetes API server to install, upgrade, query,
    and remove Kubernetes resources. The Helm client is used to fetch charts from
    the repository and render a template. Consequently, when you install Helm on the
    Harness Delegate pod you can use the client-only option, as described in <a href="/article/nxhlbmbgkj-common-delegate-profile-scripts">Common
    Delegate Profile Scripts</a>.</li></ul><h3>Next Steps</h3><ul><li><a href="/article/6ib8n1n1k6-add-container-images-for-kubernetes-deployments">Add
    Container Images for Kubernetes Deployments</a></li></ul><p></p>'
  slug: connect-to-your-target-kubernetes-platform
  tags:
  - k8s cluster
  - target cluster
  - k8s delelgate
  is_live: true
