type: article
article_id: mwy6zgz8gu
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Use Go Templating in Kubernetes Manifests
slug: use-go-templating-in-kubernetes-manifests
description: Templatize your manifests.
short_version: Templatize your manifests.
tags:
- go templating
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:51:18.725145Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Use Go Templating in Kubernetes Manifests
  description: Templatize your manifests.
  short_version: Templatize your manifests.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/qvlmr4plcp">NextGen</a>.</div><p>To make your Kubernetes
    manifest reusable and dynamic, you can use <a href="https://godoc.org/text/template"
    target="_blank">Go templating</a> and Harness built-in variables in combination
    in your <strong>Manifests</strong> files.</p><div class="note-callout">The <u>inline</u>
    values.yaml file used in a Harness Service does not support Helm templating, only
    Go templating. Helm templating is fully supported in the <u>remote</u> Helm charts
    you add to your Harness Service.</div><h3>Before You Begin</h3><p>Ensue you are
    familiar with the following:</p><ul><li><a href="/article/2j2vi5oxrq-define-kubernetes-manifests">Define
    Kubernetes Manifests</a></li></ul><h3>Step 1: Review the Default Values File</h3><div
    class="tip-callout">Harness <a href="/article/9dvxcegm90-variables">variable expressions</a>
    may be added to values.yaml, not the manifests themselves. This provides more
    flexibility.</div><ol><li>Look at the default values.yaml file to see the variables
    used in the default configuration files:</li></ol><pre class="hljs xml"># This
    will be used as {{.Values.name}}<br/>name: harness-example<br/><br/># This will
    be used as {{int .Values.replicas}}<br/>replicas: 1<br/><br/># This will be used
    as {{.Values.image}}<br/>image: ${artifact.metadata.image}</pre><p>The variable <code>${artifact.metadata.image}</code> is
    a Harness variable for referencing the metadata of the Artifact Source. For more
    information about Harness variables, see <a href="/article/9dvxcegm90-variables">Variables
    and Expressions in Harness</a>.</p><ol><li style="counter-increment:li 1" start="2">Look
    at the default object descriptions to understand how easy it is to use Kubernetes
    in Harness.</li></ol><pre class="hljs makefile">apiVersion: v1 # for versions
    before 1.9.0 use apps/v1beta2<br/>kind: ConfigMap # store non-confidential data
    in key-value pairs <br/>metadata:<br/>  name: {{.Values.name}}-config # name is
    taken from values.yaml<br/>data:<br/>  key: value # example key-value pair<br/>---<br/>apiVersion:
    apps/v1<br/>kind: Deployment # describe the desired state of the cluster<br/>metadata:<br/>  name:
    {{.Values.name}}-deployment # name is taken from values.yaml<br/>spec:<br/>  replicas:
    {{int .Values.replicas}} # tells deployment to run pods matching the template<br/>  selector:<br/>    matchLabels:<br/>      app:
    {{.Values.name}} # name is taken from values.yaml<br/>  template:<br/>    metadata:<br/>      labels:<br/>        app:
    {{.Values.name}} # name is taken from values.yaml<br/>    spec:<br/>      containers:<br/>      -
    name: {{.Values.name}} # name is taken from values.yaml<br/>        image: {{.Values.image}}
    # image is taken from values.yaml<br/>        envFrom:<br/>        - configMapRef:<br/>            name:
    {{.Values.name}}-config # name is taken from values.yaml<br/>        ports:<br/>        -
    containerPort: 80</pre><h3>Step 2: Use Expression Builder</h3><p>When you edit
    manifests in the Harness Service, you can enter expressions by entering <code>{{.</code>
    and Harness will fetch the values available in the values.yaml file.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/t6zrgqq0ny/1562973484332/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>This
    expression builder helps to ensure that you do not accidentally enter an incorrect
    value in your manifests.</p><h3 id="example_1_using_docker_image_from_harness_artifact_stream">Example
    1: Use a Harness Variable in a Manifest</h3><p>Harness built-in variables can
    be used in values.yaml file, and are evaluated at runtime. For a list of Harness
    variables, see <a href="/article/9dvxcegm90-variables">Variables and Expressions
    in Harness</a>.</p><p>In the values.yaml file, it will look like this:</p><pre
    class="hljs apache">name: ${serviceVariable.serviceName}</pre><p>In a manifest
    file, it will be used like this:</p><pre class="hljs properties">apiVersion: apps/v1<br/>kind:
    Deployment<br/>metadata:<br/>  name: {{.Values.name}} # ${serviceVariable.serviceName}<br/>spec:<br/>
    selector:<br/> matchLabels:<br/> app: nginx<br/> replicas: 1<br/> template:<br/>
    metadata:<br/> labels:<br/> app: nginx<br/> spec:<br/> containers:<br/> - name:
    nginx<br/> image: nginx:latest<br/> ports:<br/> - containerPort: 80</pre><h3>Option:
    Skip Rendering of Manifest Files</h3><p>By default, Harness uses Go templating
    and a values.yaml for templating manifest files. See <a href="/article/mwy6zgz8gu-use-go-templating-in-kubernetes-manifests">Use
    Go Templating in Kubernetes Manifests</a>.</p><p>In some cases, you might not
    want to use Go templating because your manifests use some other formatting.</p><p>To
    skip rendering your manifest files using Go templating, use the <strong>Apply</strong>
    step instead of the default Kubernetes Workflow steps (Rollout, Canary Deployment,
    Stage Deployment, etc) and its <strong>Skip Rendering K8s manifest files</strong>
    option.</p><p>See <a href="/article/4vjgmjcj6z-deploy-manifests-separately-using-apply-step">Deploy
    Manifests Separately using Apply Step</a>.</p><h3>Go Templating Examples</h3><p>You
    can use piping and Go actions, arguments, pipelines, and variables in your manifests.</p><p>Let&#39;s
    look at some examples.</p><h4>Quotation Marks</h4><p>The following example puts
    quotations around whatever string is in the <code>something</code> value. This
    can handle values that could otherwise be interpreted as numbers, or empty values,
    which would cause an error.</p><pre>{{.Values.something | quote}}</pre><p>You
    should use single quotes if you are using a value that might contain a YAML-like
    structure that could cause issues for the YAML parser.</p><p>For example, using
    a <a href="/article/qy6zw1u0y2-using-harness-config-variables-in-manifests">Service
    Config variables</a> or <a href="/article/ycacqs7tlx-override-harness-kubernetes-service-settings">Environment
    Service Override variable</a> to replace a value in the values.yaml file, and
    the evaluated replacement value has a <code>&#34;</code>, <code>:</code> , or
    <code>&#39;</code> in it:</p><p><code>TOPIC_MAP: &#34;foo:foo-1:foo-1-trigger&#34;</code></p><p>In
    this case, put single quotes around the value:</p><p><code>TOPIC_MAP: &#39;${serviceVariable.TOPIC_MAP}&#39;</code></p><p></p><h4>Verbatim</h4><p>Use
    <code>indent</code> and <code>toYaml</code> to put something from the values file
    into the manifest verbatim.</p><pre>{{.Values.env.config | toYaml | indent 2}}</pre><h4>Indexing
    Structures in Templates</h4><p>If the data passed to the template is a map, slice,
    or array it can be indexed from the template.</p><p>You can use <code>{{index
    x number}}</code> where <code>index</code> is the keyword, <code>x</code> is the
    data, and <code>number</code> is an integer for the <code>index</code> value.</p><p>If
    we had <code>{{index names 2}}</code> it is equivalent to <code>names[2]</code>.
    We can add more integers to index deeper into data. <code>{{index names 2 3 4}}</code>
    is equivalent to <code>names[2][3][4]</code>.</p><p>Let&#39;s look at an example:</p><pre>{{-
    if .Values.env.config}}<br/>apiVersion: v1<br/>kind: ConfigMap<br/>metadata:<br/>
    name: {{.Values.name}}-{{.Values.track}}<br/> labels:<br/> app: {{.Values.name}}<br/>
    track: {{.Values.track}}<br/> annotations:<br/> harness.io/skip-versioning: &#34;true&#34;<br/>data:<br/>{{-
    if hasKey .Values.env .Values.track}}<br/>{{index .Values.env .Values.track &#34;config&#34;
    | mergeOverwrite .Values.env.config | toYaml | indent 2}}<br/>{{- else }}<br/>{{.Values.env.config
    | toYaml | indent 2}}<br/>{{- end }}<br/>---<br/>{{- end}}<br/><br/>{{- if .Values.env.secrets}}<br/>apiVersion:
    v1<br/>kind: Secret<br/>metadata:<br/> name: {{.Values.name}}-{{.Values.track}}<br/>
    labels:<br/> app: {{.Values.name}}<br/> track: {{.Values.track}}<br/>stringData:<br/>{{-
    if hasKey .Values.env .Values.track}}<br/>{{index .Values.env .Values.track &#34;secrets&#34;
    | mergeOverwrite .Values.env.secrets | toYaml | indent 2}}<br/>{{- else }}<br/>{{.Values.env.secrets
    | toYaml | indent 2}}<br/>{{- end }}<br/>---<br/>{{- end}}</pre><h4>Iterate Over
    Existing Items</h4><p>Here is example inserting an element into an existing list
    in a manifest for Istio VirtualService and the Destination rule.</p><p>The critical
    line is:</p><p><code>{{- range $track := split &#34; &#34; .Values.nonPrimary
    }}</code></p><p>This line iterates over a list of existing items, where the list
    was computed with a simple <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> command and output to the context prior to the rollout.</p><p>VirtualService:</p><pre>apiVersion:
    networking.istio.io/v1alpha3<br/>kind: VirtualService<br/>metadata:<br/>  name:
    {{ .Values.name }}-gateway-vs<br/>  labels:<br/>    app: {{ .Values.name }}<br/>    group:
    multiservice<br/>spec:<br/>  hosts:<br/>  - &#34;*&#34;<br/>  gateways:<br/>  -
    ingressgateway<br/>  http:<br/>{{- if .Values.nonPrimary }}<br/>{{- range $track
    := split &#34; &#34; .Values.nonPrimary }}<br/>{{- range $uri := $.Values.uri
    }}<br/>  - name: {{ $track }}<br/>    match:<br/>    - headers:<br/>        x-pcln-track:<br/>          exact:
    {{ $track }}<br/>      uri:<br/>        {{ $uri.matchType }}: {{ $uri.matchString
    }}<br/>{{- if $.Values.rewrite }}<br/>    rewrite:<br/>      uri: {{ $.Values.rewrite
    }}<br/>{{- end }}<br/>    route:<br/>    - destination:<br/>        host: {{ $.Values.name
    }}<br/>        subset: {{ $.Values.name }}-{{ $track }}<br/>{{- end }}<br/>{{-
    end }}<br/>{{- end }}<br/>{{- if .Values.hasPrimary }}<br/>  - name: primary<br/>    match:<br/>{{-
    range $uri := .Values.uri }}<br/>    - uri:<br/>        {{ $uri.matchType }}:
    {{ $uri.matchString }}<br/>{{- end }}<br/>{{- if .Values.rewrite }}<br/>    rewrite:<br/>      uri:
    {{ .Values.rewrite }}<br/>{{- end }}<br/>    route:<br/>    - destination:<br/>        host:
    {{ .Values.name }}<br/>        subset: {{ .Values.name }}-primary<br/>{{- end
    }}</pre><p>DestinationRule:</p><pre>apiVersion: networking.istio.io/v1alpha3<br/>kind:
    DestinationRule<br/>metadata:<br/>  name: {{ .Values.name }}<br/>  labels:<br/>    app:
    {{ .Values.name }}<br/>    group: multiservice<br/>spec:<br/>  host: {{ .Values.name
    }}<br/>  subsets:<br/>{{- if .Values.nonPrimary }}<br/>{{- range $track := split
    &#34; &#34; .Values.nonPrimary }}<br/>  - name: {{ $.Values.name }}-{{ $track
    }}<br/>    labels:<br/>      track: {{ $track }}<br/>{{- end }}<br/>{{- end }}<br/>{{-
    if .Values.hasPrimary }}<br/>  - name: {{ .Values.name }}-primary<br/>    labels:<br/>      track:
    primary<br/>{{- end }}</pre><p></p><p>For more information, see the <a href="https://golang.org/pkg/text/template/"
    target="_blank">Go text template documentation</a>.</p><h3>Notes</h3><ul><li>Harness
    uses Go template version 0.4. If you are used to Helm templating, you can download
    Go template and try it out locally to find out if your manifests will work. This
    can help you avoid issues when adding your manifests to Harness.<br/>You can install
    Go template version 0.4 locally to test your manifests.<ul><li>Mac OS: curl -O
    https://app.harness.io/public/shared/tools/go-template/release/v0.4/bin/darwin/amd64/go-template</li><li>Linux:
    curl -O https://app.harness.io/public/shared/tools/go-template/release/v0.4/bin/linux/amd64/go-template</li><li>Windows:
    curl -O https://app.harness.io/public/shared/tools/go-template/release/v0.4/bin/windows/amd64/go-template</li></ul>For
    steps on doing local Go templating, see <a href="https://community.harness.io/t/harness-local-go-templating/460"
    target="_blank">Harness Local Go-Templating</a> on Harness Community.</li><li>Harness
    uses an internal build of Go templating. It cannot be upgraded. Harness uses <a
    href="http://masterminds.github.io/sprig/" target="_blank">Spring templates functions</a>,
    excluding those functions that provide access to the underlying OS (env, expandenv)
    for security reasons.<br/>In addition, Harness uses the functions ToYaml, FromYaml,
    ToJson, FromJson.</li></ul><h3>Next Steps</h3><ul><li><a href="/article/pfexttk6dr-adding-and-editing-inline-kubernetes-manifest-files">Adding
    and Editing Inline Kubernetes Manifest Files</a></li><li><a href="/article/yjkkwi56hl-link-resource-files-or-helm-charts-in-git-repos">Link
    Resource Files or Helm Charts in Git Repos</a></li></ul><p></p>'
  slug: use-go-templating-in-kubernetes-manifests
  tags:
  - go templating
  is_live: true
