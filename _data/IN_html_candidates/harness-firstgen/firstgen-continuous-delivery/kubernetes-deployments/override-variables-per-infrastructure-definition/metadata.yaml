type: article
article_id: cc59hfou9c
user_id: slcpusem6b
category_id: n03qfofd5w
author:
  name: Archana Singh
  profile_image: https://www.gravatar.com/avatar/e323facc5a711ac44c46e58dcb52aa3e?d=mm&s=150
title: Override Variables at the Infrastructure Definition Level
slug: override-variables-per-infrastructure-definition
description: This topic describes how to override specific sets of variables for Kubernetes
  at the Infrastructure Definition level.
short_version: This topic describes how to override specific sets of variables for
  Kubernetes at the Infrastructure Definition level.
tags:
- Values YAML Override
- override
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-07-18T22:58:25.666302Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Override Variables at the Infrastructure Definition Level
  description: This topic describes how to override specific sets of variables for
    Kubernetes at the Infrastructure Definition level.
  short_version: This topic describes how to override specific sets of variables for
    Kubernetes at the Infrastructure Definition level.
  body: '<div class="tip-callout">This content is for Harness <a href="/article/1fjmm4by22">FirstGen</a>.
    Switch to <a href="/article/t57uzu1i41">NextGen</a>.</div><p>This topic describes
    how to override specific sets of variables for Kubernetes at the Infrastructure
    Definition level. You can override the <code>values.yaml</code> in your Service
    at the Infrastructure level and different Services can have different overrides
    in the same namespace.</p><p></p><h3>Before You Begin</h3><ul><li>Your target
    Environment must have multiple Infrastructure Definitions. </li><li>You must have
    a Service that needs to be overridden at the Infrastructure Definition level.</li><li>The
    Application must contain a Service, a Workflow, and an Environment.</li><li>Review
    the <a href="/article/ycacqs7tlx-override-harness-kubernetes-service-settings">Override
    Harness Kubernetes Service Settings</a> topic to understand Harness variable override
    and its hierarchy.</li></ul><h3>Step 1: Configure the Service</h3><p>Configure
    and deploy a Harness Kubernetes Service to an Environment that has multiple Infrastructure
    Definitions.</p><p>The following are the sample service Manifests: </p><p><strong>Deployment.yaml</strong></p><pre>apiVersion:
    v1<br/>kind: Namespace<br/>metadata:<br/> name: {{.Values.namespace}}<br/>---<br/>apiVersion:
    v1<br/>kind: ConfigMap<br/>metadata:<br/> name: {{.Values.name}}-{{.Values.track}}<br/>
    labels:<br/>   app: {{.Values.name}}<br/>   track: {{.Values.track}}<br/>data:<br/>
    APP_ENV1: {{.Values.appEnv1}}<br/> APP_ENV2: {{.Values.appEnv2}}<br/>---<br/>apiVersion:
    apps/v1beta1<br/>kind: Deployment<br/>metadata:<br/> name: {{.Values.name}}-{{.Values.track}}<br/>
    labels:<br/>   app: {{.Values.name}}<br/>   track: {{.Values.track}}<br/>   version:
    {{.Values.version}}<br/>spec:<br/> replicas: {{.Values.replicas}}<br/> selector:<br/>   matchLabels:<br/>     app:
    {{.Values.name}}<br/>     track: {{.Values.track}}<br/> template:<br/>   metadata:<br/>     labels:<br/>       app:
    {{.Values.name}}<br/>       track: {{.Values.track}}<br/>       version: {{.Values.version}}<br/>   spec:<br/>     containers:<br/>     -
    name: {{.Values.name}}<br/>       image: {{.Values.image}}<br/>       imagePullPolicy:
    Always<br/>       resources:<br/>         requests:<br/>           cpu: 100m<br/>           memory:
    50Mi<br/>       ports:<br/>       - name: http<br/>         containerPort: 8080<br/>       envFrom:<br/>       -
    configMapRef:<br/>           name: {{.Values.name}}-{{.Values.track}}</pre><p><strong>Service.yaml</strong></p><pre>apiVersion:
    v1<br/>kind: Service<br/>metadata:<br/> name: {{.Values.name}}<br/> labels:<br/>   app:
    {{.Values.name}}<br/>spec:<br/> type: ClusterIP<br/> ports:<br/> - name: http<br/>   port:
    9080<br/>   protocol: TCP<br/>   targetPort: http<br/> selector:<br/>   app: {{.Values.name}}</pre><p>Perform
    the following steps to configure the Service:</p><ol><li>In <strong>Service</strong>,
    add <code>s3bucketName</code> and <code>dnsServer</code> configuration variables.</li><li>Set
    the configuration variable <code>appEnv1</code> to <code>aaa</code>.</li><li>Set
    the configuration variable <code>appEnv2</code> to <code>bbb</code>.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840081811/lcy-1-m-44-xe-xg-ixh-95-f-qcqhamhe-kqci-tckau-vln-0-s-8-zcfofcdu-9-wcbgr-h-9-kcy-pf-clq-yh-923-iggaevg-zza-2-a-6-t-4-yrvi-1-c-nwk-bzyj-4-tbr-6-okx-8-kulq-igw-22-tzczhj-01-rjq-n-4-mz-zl-q"/></figure></li><li>In
    <code>values.yaml</code>, reference Harness variables as:<br/><br/><code>appEnv1:
    ${serviceVariable.appEnv1}</code><br/><code>appEnv2: ${serviceVariable.appEnv2}</code><br/><br/><strong>Values.yaml</strong><br/><br/><pre>namespace:
    ${infra.kubernetes.namespace}<br/>apiUrl: http://localhost:8080<br/>replicas:
    1<br/> <br/>name: infra-override<br/>image: ${artifact.metadata.image}<br/>version:
    ${artifact.metadata.tag}<br/>track: primary<br/>endpoint: rpc<br/> <br/>appEnv1:
    ${serviceVariable.appEnv1}<br/>appEnv2: ${serviceVariable.appEnv2}</pre></li></ol><h3>Step
    2: Add the Environment Overrides</h3><p>Environment overrides are overridden at
    the Infrastructure Definition level. You can use the Infrastructure Definition&#39;s
    name or value to override the variable.</p><p>To override, first you need the
    Environment variables. Then, you need to enable specific values to be passed when
    the Infrastructure Definition Mapping is selected.</p><p>The Environment variables
    are the access points for the override variables to be assigned. Ensure that you
    have multiple Infrastructure Definitions mapped to your Environment. Once the
    mappings are configured, add Service Configuration Override variables to the Environment.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840082055/d-folatv-mwxck-7-k-vmr-rm-jg-uexx-2-l-wc-4-d-f-2-xlw-shd-o-3-vn-ym-m-5-b-ay-ytxj-l-8-i-49-d-na-mzjck-tobuw-9-x-uxcjx-gyls-01-6-f-reslz-aj-rdrce-1-g-p-0-lq-dvo-b-6-l-l-7-lf-o-7-sne-5-nnx-2-ytp-equw"
    style="max-height:60%;max-width:60%" data-hd-height="60%" data-hd-width="60%"/></figure><ol><li>Provide
    an override variable for your Environment.<br/>You can associate the Infrastructure
    Definition name with the variable. This helps to identify the overriding variable
    applied in your Environment.</li><li>Configure <code>values.yaml</code> file override.</li><li>Create
    a new key-value pair where the key is the variable value that is overridden at
    the Infrastructure Definition level, and the value is a Workflow variable (it
    is set up later) called <code>$</code><code>{</code><code>override.keyNameHere</code><code>}</code>.<br/><br/>When
    you are done, it will look something like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840082287/ybkdt-gza-qd-n-8-y-w-30-mcv-xvcnp-l-fsvbw-r-7-af-ao-0-wgb-3-ih-qae-xhld-jz-f-91-tpx-xlf-3-y-qh-p-cfy-5-ohmd-pv-7-l-e-yin-3-hnezs-m-8-f-kcpuhkw-cfj-uttoxounv-qd-6-l-u-8-h-qy-7-ya-9373-ya-zay"/></figure></li></ol><h3>Step
    3: Configure the Workflow</h3><p>You need to configure a shell script to handle
    the assignment of these variables in the Workflow. The shell script assigns the
    infrastructure variables as the Environment variables configured in the previous
    step.</p><ol><li>In Workflow, write a script to assign variables based on the
    infra name.<br/><br/>Here is a sample shell script:<br/><br/><pre>echo<br/>echo
    Using infrastructure definition [${infra.name}]<br/>echo<br/><br/>appEnv1=${serviceVariable.appEnv1}<br/>appEnv2=${serviceVariable.appEnv2}<br/><br/>if
    [[ &#34;${infra.name}&#34; == infra2 ]]; then<br/><br/>  appEnv2=${serviceVariable.infra2_appEnv2}<br/><br/>elif
    [[ &#34;${infra.name}&#34; == infra3 ]]; then<br/><br/>  appEnv1=${serviceVariable.infra3_appEnv1}<br/>  appEnv2=${serviceVariable.infra3_appEnv2}<br/><br/>fi<br/><br/>echo
    Setting appEnv1 to [$appEnv1]<br/>echo Setting appEnv2 to [$appEnv2]<br/>echo</pre></li><li>Export
    the variables into the context. This variable is used in the override configured
    <a href="https://docs.harness.io/article/cc59hfou9c-override-variables-per-infrastructure-definition#step_1_configure_the_service">earlier</a>.
    The <code>$</code><code>{</code><code>override.appEnv1</code><code>}</code> references
    a value based on this shell script.</li><li>In <strong>Publish Variable Name</strong>,
    enter <strong>override</strong>, which is referenced in the <code>values.yaml</code>
    configuration override.<br/><br/>When you are done, it will look something like
    this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840082509/kr-ms-scg-7-uh-cv-1-cu-7-og-n-geukf-dx-8-gydf-k-5-udva-7-ctud-cxq-8-fxpfl-cms-8-rs-jfrvr-ycrgxh-is-1-m-r-41-wvnycla-zi-ejfomu-5-lp-ci-8-mcc-wf-jc-7-nhr-3-y-8-p-11-i-33-k-3-gg-3-x-gprqa-ab-euy"/></figure></li><li>Add
    the shell script to the <strong>Deploy</strong> steps before the Rollout Deployment.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840082782/r-hmsjj-dxtyc-ixhlfcb-xx-iyu-ede-2-d-1-rithv-vi-ktl-pw-9-c-lrj-na-20-ly-1-wabz-h-2-um-349-zznctv-2-ndg-te-sod-6-vdmm-0-xkl-co-oze-suqfr-2-woxz-3-eni-kg-vyi-gnycbabwhj-2-jpi-dri-ye-qrk"
    style="max-height:70%;max-width:70%" data-hd-height="70%" data-hd-width="70%"/></figure></li><li>Deploy
    the Workflow. Based on the Infrastructure Definition, certain variables are overridden. For
    InfraDef1, the values were assigned based on the Service configuration variables
    provided in the Environment. InfraDef1 did not override the Environment level
    values.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840082963/52-isg-2-pml-9-smgo-1-k-4-caxzi-7-nt-srk-8-ky-8-qrk-g-ajwxy-5-hj-ll-rp-2-tdlz-v-lmlrkqc-bsjn-mi-lw-4-c-388-s-5-f-puyp-hkxcz-j-dxj-a-0-ga-3-rw-7-co-equxym-nnxz-q-454-a-74-p-1-lz-6-30-v-yub-4"/></figure></li><li>Run
    this deployment again in InfraDef2. Now the Environment level value is taken for
    <code>appEnv1</code>, but <code>appEnv2</code> is overridden with the value specific
    to InfraDef2.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/cc59hfou9c/1620840083234/lxqd-pot-1-unum-skw-enx-6-doc-9-s-nd-dmop-ks-sn-5-jatf-rdwkh-7-c-z-3-srca-egd-7-s-3-wwh-iwh-9-jc-4-zro-bir-lgnkjyy-zh-buvc-tpk-0-t-dcrf-og-yvqofbt-pcaxfl-vf-eyors-v-9-u-98-zu-1-tl-vdiddw-8"/></figure></li><li>Deploy
    the third Infrastructure Definition. This time both the variables are overridden
    with values specific to InfraDef3.</li></ol><h3>Next Steps</h3><p>Check out the
    community article on publishing variable outputs: <a href="https://community.harness.io/t/publish-variables/227">Publish
    Variables</a></p><p></p>'
  slug: override-variables-per-infrastructure-definition
  tags:
  - Values YAML Override
  - override
  is_live: true
