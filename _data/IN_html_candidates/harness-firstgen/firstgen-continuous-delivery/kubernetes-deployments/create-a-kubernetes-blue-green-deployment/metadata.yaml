type: article
article_id: ukftzrngr1
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Create a Kubernetes Blue/Green Deployment
slug: create-a-kubernetes-blue-green-deployment
description: Create a Blue/Green Workflow for a Deployment workload.
short_version: Create a Blue/Green Workflow for a Deployment workload.
tags:
- primary-service
- stage-service
- Stage Deployment Step
- Swap Primary with Stage
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-08-31T16:49:22.278322Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create a Kubernetes Blue/Green Deployment
  description: Create a Blue/Green Workflow for a Deployment workload.
  short_version: Create a Blue/Green Workflow for a Deployment workload.
  body: '<p>This topic will walk you through creating a Blue/Green Workflow in Harness
    for a Deployment workload.</p><p>For information on Blue/Green deployments, see
    <a href="/article/325x7awntc-deployment-concepts-and-strategies">Deployment Concepts
    and Strategies</a>.</p><h3>Before You Begin</h3><p>Ensure you are familiar with
    the following:</p><ul><li> <a href="/article/7in9z2boh6-kubernetes-quickstart">Kubernetes
    Quickstart</a></li><li> <a href="/article/wnr5n847b1-kubernetes-overview">Kubernetes
    Deployments Overview</a></li><li> <a href="/article/2j2vi5oxrq-define-kubernetes-manifests">Define
    Kubernetes Manifests</a></li><li> <a href="/article/u3rp89v80h-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a></li></ul><h3 id="review_what_workloads_can_i_deploy">Review:
    What Workloads Can I Deploy?</h3><p>Harness Canary and Blue/Green Workflow default
    steps support a single Deployment workload as a <strong>managed</strong> entity.</p><p>In
    Harness, a <strong>managed</strong> workload is a Deployment, StatefulSet, or
    DaemonSet object deployed and managed to steady state.</p><p>Rolling Workflow
    default steps support Deployment, StatefulSet, or DaemonSet as <strong>managed</strong>
    workloads, but not Jobs.</p><p>You can deploy any Kubernetes workload in any Workflow
    type by using a Harness  <a href="/article/ttn8acijrz-versioning-and-annotations#annotations">annotation</a> to
    make it unmanaged (<code>harness.io/direct-apply</code>).</p><p>The <a href="/article/4vjgmjcj6z-deploy-manifests-separately-using-apply-step">Apply
    Step</a> can deploy any workloads or objects in any Workflow type as a managed
    workload.</p><p><strong>OpenShift:</strong> See <a href="/article/p756zrn9vc-using-open-shift-with-harness-kubernetes">Using
    OpenShift with Harness Kubernetes</a>.</p><p></p><h3 id="step_1_create_the_harness_kubernetes_service">Review:
    Harness Blue Green Deployments</h3><p>Here&#39;s a quick summary of how Harness
    performs Blue Green deployments.</p><p>Only one Kubernetes service is mandatory
    and it doesn’t need any annotations to establish if it is the primary (production)
    service.</p><p>Here is a very generic service example that uses a values.yaml
    file for its values:</p><pre>apiVersion: v1<br/>kind: Service<br/>metadata:<br/>  name:
    {{.Values.name}}-svc<br/>spec:<br/>  type: {{.Values.serviceType}}<br/>  ports:<br/>  -
    port: {{.Values.servicePort}}<br/>    targetPort: {{.Values.serviceTargetPort}}<br/>    protocol:
    TCP<br/>  selector:<br/>    app: {{.Values.name}}</pre><p></p><p>Note that there
    are no annotations to indicate that it is the primary service. Harness will add
    this later.</p><div class="note-callout">If you have more than one service, Harness
    does not automatically know which is the primary service unless you add the annotations
    described below. If you use two services, please annotate them as described below.</div><ol><li><strong>First
    deployment:</strong><ol><li>Harness creates two services (primary and stage) and
    one pod set for the app.</li><li>The primary service is given this annotation:<br/><code>annotations:
    harness.io/primary-service: &#34;true&#34;</code></li><li>The stage service is
    given this annotation:<br/><code>annotations: harness.io/stage-service: &#34;true&#34;</code></li><li>The
    pod set is given an annotation of <code>harness.io/color: blue</code>.</li><li>Harness
    points the stage service at the pod set and verifies that the set reached steady
    state.</li><li>Harness swaps the primary service to pod set. Production traffic
    now flows to the app.</li></ol></li><li><strong>Second deployment (new version
    of the same app):</strong><ol><li>Harness creates a new pod set for new app version.
    The pod set is given the annotation <code>harness.io/color: green</code>.</li><li>Harness
    points the stage service at new pod set (with new app version) and verifies that
    the set reached steady state.</li><li>Harness swaps the primary service to new
    pod set, stage service to old pod set.</li></ol></li><li><strong>Third deployment:</strong><ol><li>Harness
    deploy new app version to the pod set <u>not</u> using the primary service.</li><li>Harness
    points the stage service at new pod set (with new app version) and verifies that
    the set reached steady state.</li><li>Harness swaps the primary service to new
    pod set, stage service to old pod set.</li></ol></li></ol><h3 id="step_1_create_the_harness_kubernetes_service">Visual
    Summary</h3><p>Here&#39;s an example of what your BlueGreen deployment will look
    like:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/mog5tnk5pi/1581018981351/k-8-s-b.gif"/></figure><p></p><h3
    id="step_1_create_the_harness_kubernetes_service">Step 1: Create the Harness Kubernetes
    Service</h3><div class="note-callout">A Harness Service is different from a Kubernetes
    service. A Harness Service includes the manifests and container used for deployment.
    A Kubernetes service enables applications running in a Kubernetes cluster to find
    and communicate with each other, and the outside world. To avoid confusion, a
    Harness Service is always capitalized in Harness documentation. A Kubernetes service
    is not.</div><ol><li>In Harness, click <strong>Setup</strong>, and then click <strong>Add
    Application</strong>.</li><li>Enter a name for the Application and click <strong>Submit</strong>.</li><li>Click <strong>Services</strong>,
    and then click <strong>Add Service</strong>. The <strong>Add Service</strong> settings
    appear.</li></ol><figure><a href="https://files.helpdocs.io/i5nl071jo5/articles/4ifq51cp0i/1580881851308/image.png"><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/4ifq51cp0i/1580881851308/image.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:auto;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="center"/></a></figure><ol><li
    style="counter-increment:li 3" start="4">In <strong>Name</strong>, enter a name
    for the Service.</li><li>In <strong>Deployment Type</strong>, select <strong>Kubernetes</strong>,
    and then ensure <strong>Enable Kubernetes V2</strong> is selected.</li><li>Click <strong>Submit</strong>.
    The new Harness Kubernetes Service is created.</li></ol><h3>Step 2: Provide Manifests</h3><p>When
    you create a Harness Service for a Blue/Green deployment, you need to include
    a manifest for one Kubernetes service.</p><p>You must also provide a manifest
    for your Kubernetes Deployment object.</p><p>The default manifest provided by
    Harness will work fine.</p><p>That is all that is needed to set up a simple Harness
    Service for Kubernetes Blue/Green deployment.</p><p>There are no Harness Infrastructure
    Definition settings specific to Kubernetes Blue/Green deployment. Create or use
    the Infrastructure Definition that targets your cluster, as described in <a href="/article/u3rp89v80h-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a>.</p><h3>Step 3: Create the Workflow</h3><p>When
    you create a Harness Kubernetes Workflow for Blue/Green deployment, Harness automatically
    generates the steps for setting up the Kubernetes services you defined in your
    Harness Service, and for swapping the Kubernetes services between the new and
    old containers.</p><p>To create a Kubernetes Blue/Green Workflow, do the following:</p><ol><li>In
    your Application, click <strong>Workflows</strong>.</li><li>Click <strong>Add
    Workflow</strong>. The <strong>Workflow</strong> dialog appears.</li><li>In <strong>Name</strong>,
    enter a name for your Workflow.</li><li>In <strong>Workflow Type</strong>, select <strong>Blue/Green
    Deployment</strong>.</li><li>In <strong>Environment</strong>, select the Environment
    you created for your Kubernetes deployment.</li><li>In <strong>Service</strong>,
    select the Service containing manifests for the primary and stage Kubernetes services.</li><li>In <strong>Infrastructure
    Definition</strong>, select the Infrastructure Definition where you want to deploy.
    As stated earlier, there are no Harness Infrastructure Definition settings specific
    to Kubernetes Blue/Green deployment.<br/>When you are finished the Workflow dialog
    will look like this:<figure><img src="https://files.helpdocs.io/kw8ldg1itf/other/1568671721291/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure></li><li>Click <strong>SUBMIT</strong>.
    The new Workflow appears.</li></ol><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550277294475/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550277294475/image.png"
    style="max-height:25%;max-width:25%" data-hd-height="25%" data-hd-width="25%"/></a></figure><p>Let&#39;s
    look at each step in the Workflow and its deployment step logs.</p><h3>Step 4:
    Stage Deployment Step</h3><p>The <strong>Stage Deployment</strong> step is added
    automatically when you create the Workflow.</p><p>In the Blue/Green Workflow,
    click the <strong>Stage Deployment</strong> step.</p><p>The <strong>Stage Deployment</strong> step
    has the following options.</p><h4>Manifest Options</h4><div class="note-callout">Currently,
    this feature is behind the Feature Flag <code>KUBERNETES_EXPORT_MANIFESTS</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><h5>Export Manifest</h5><p>If you enable this option,
    Harness does the following at runtime:</p><ul><li>Downloads manifests (if remote).</li><li>Renders
    manifests in logs.</li><li>Performs a dry run unless the <strong>Skip Dry Run</strong>
    option is enabled.</li><li>Export the deployment manifests to the variable <code>${k8sResources.manifests}</code>.</li><li><strong>Does
    not deploy the manifests.</strong> To deploy the manifests, you must add another
    Kubernetes step of the same type (Canary, Rolling, Apply, Stage Deployment) an
    enable the <strong>Inherit Manifest</strong> option to deploy a copy of the exported
    manifests.</li></ul><p>If <strong>Export Manifest</strong> is enabled, the manifests
    are not deployed. You can use the <strong>Inherit Manifest</strong> option in
    a subsequent Kubernetes step to deploy a copy of the exported manifests.</p><p>The
    exported manifests can be written to storage on the Delegate where the step is
    run. For example, you can add a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script</a> step to echo and write the manifest to a file:</p><pre>echo &#34;${k8sResources.manifests}&#34;
    &gt; /opt/harness-delegate/test/canaryPlan</pre><p></p><div class="note-callout">If
    you use <code>${k8sResources.manifests}</code> in a script ensure that your script
    expects multiline output. You can use <code>cat</code> command to concatenate
    the lines.</div><p></p><p>If you have the 3rd party tool that check compliance,
    it can use the exported manifests.</p><p>To deploy the manifests, a copy of the
    exported manifests can be inherited by the next Kubernetes step (Canary, Rolling,
    Apply, Stage Deployment) using the <strong>Inherit Manifest</strong> option.</p><p>If
    <strong>Export Manifest</strong> is enabled in multiple Kubernetes steps of the
    same type in the same Workflow Phase, the last step overrides the exported manifests.
    This is important because the next Kubernetes step to inherit a copy of the exported
    manifests will only use the exported manifests from last Kubernetes step with
    <strong>Export Manifest</strong> is enabled.</p><h5>Inherit Manifest</h5><p>Enable
    this option to inherit and deploy a copy of the manifests exported from the previous
    Kubernetes step (Canary, Rolling, Apply, Stage Deployment) using the <strong>Export
    Manifest</strong> option.</p><p>The <strong>Inherit Manifest</strong> option will
    only inherit the exported manifest from the last Kubernetes step of the same type
    and in the same Workflow Phase.</p><p>For example, if you enable the <strong>Inherit
    Manifest</strong> option in a <strong>Canary Deployment</strong> step, then it
    will only inherit a copy of the manifests exported from the last <strong>Canary
    Deployment</strong> step with the <strong>Export Manifest</strong> option enabled
    in the same Workflow Phase.</p><h4>Skip Dry Run</h4><p>By default, Harness uses
    the <code>--dry-run</code> flag on the <code>kubectl apply</code> command during
    the <strong>Initialize</strong> step of this command, which prints the object
    that would be sent to the cluster without really sending it. If the <strong>Skip
    Dry Run</strong> option is selected, Harness will not use the <code>--dry-run</code>
    flag.</p><h4>Delegate Selector</h4><p>If your Workflow Infrastructure Definition&#39;s
    Cloud Provider uses a Delegate Selector (supported in Kubernetes Cluster and AWS
    Cloud Providers), then the Workflow uses the selected Delegate for all of its
    steps.</p><p>In these cases, you shouldn&#39;t add a Delegate Selector to any
    step in the Workflow. The Workflow is already using a Selector via its Infrastructure
    Definition&#39;s Cloud Provider.</p><p>If your Workflow Infrastructure Definition&#39;s
    Cloud Provider isn&#39;t using a Delegate Selector, and you want this Workflow
    step to use a specific Delegate, do the following:</p><p>In <strong>Delegate Selector</strong>,
    select the Selector for the Delegate(s) you want to use. You add Selectors to
    Delegates to make sure that they&#39;re used to execute the command. For more
    information, see <a href="https://docs.harness.io/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates for Specific Tasks with Selectors</a>.</p><p>Harness will use Delegates
    matching the Selectors you add.</p><p>If you use one Selector, Harness will use
    any Delegate that has that Selector.</p><p>If you select two Selectors, a Delegate
    must have both Selectors to be selected. That Delegate might also have other Selectors,
    but it must have the two you selected.</p><div class="note-callout">You can use
    expressions for Harness built-in variables or Account Default variables in <strong>Delegate
    Selectors</strong>. When the variable expression is resolved at deployment runtime,
    it must match an existing Delegate Selector.<br/><br/>For example, if you have
    a Delegate Selector <strong>prod</strong> and the Workflow is using an Environment
    also named <strong>prod</strong>, the Delegate Selector can be <code>${env.name}</code>.
    This is very useful when you match Delegate Selectors to Application component
    names such as Environments, Services, etc. It&#39;s also a way to template the
    Delegate Selector setting.</div><p></p><h4>Step Deployment</h4><p>The <strong>Stage
    Deployment</strong> step simply deploys the two Kubernetes services you have set
    up in the Harness Service <strong>Manifests</strong> section.</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550367272586/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550367272586/image.png"/></a></figure><p>When
    you look at the <strong>Stage Deployment</strong> step in Harness <strong>Deployments</strong>,
    you will see the following log sections.</p><h4>Initialize</h4><p>The Initialize
    stage initializes the two Kubernetes services you have set up in the Harness Service <strong>Manifests</strong> section
    (displayed earlier), primary and stage, validating their YAML.</p><pre class="hljs
    properties">Initializing..<br/><br/>Manifests [Post template rendering] :<br/><br/>---<br/>apiVersion:
    v1<br/>kind: Service<br/>metadata:<br/>  name: harness-example-svc-primary<br/>  annotations:<br/>    harness.io/primary-service:
    &#34;true&#34;<br/>  labels:<br/>    app: bg-demo-app<br/>spec:<br/>  type: ClusterIP<br/>  ports:<br/>  -
    port: 80<br/>    protocol: TCP<br/>  selector:<br/>    app: bg-demo-app<br/>---<br/>apiVersion:
    v1<br/>kind: Service<br/>metadata:<br/>  name: harness-example-svc-stage<br/>  annotations:<br/>    harness.io/stage-service:
    &#34;true&#34;<br/>  labels:<br/>    app: bg-demo-app<br/>spec:<br/>  type: ClusterIP<br/>  ports:<br/>  -
    port: 80<br/>    protocol: TCP<br/>  selector:<br/>    app: bg-demo-app<br/>---<br/>apiVersion:
    apps/v1<br/>kind: Deployment<br/>metadata:<br/>  name: harness-example<br/>spec:<br/>  selector:<br/>    matchLabels:<br/>      app:
    bg-demo-app<br/>  replicas: 3<br/>  template:<br/>    metadata:<br/>      labels:<br/>        app:
    bg-demo-app<br/>    spec:<br/>      containers:<br/>      - name: my-nginx<br/>        image:
    nginx<br/>        ports:<br/>        - containerPort: 80<br/><br/><br/>Validating
    manifests with Dry Run<br/><br/>kubectl --kubeconfig=config apply --filename=manifests-dry-run.yaml
    --dry-run<br/>service/harness-example-svc-primary configured (dry run)<br/>service/harness-example-svc-stage
    configured (dry run)<br/>deployment.apps/harness-example created (dry run)<br/><br/>Done.</pre><h4>Prepare</h4><p>Typically,
    in the <strong>Prepare</strong> section, you can see that each release of the
    resources is versioned. This is used in case Harness needs to rollback to a previous
    version.</p><div class="note-callout">See <a href="/article/v41e8oo00e-kubernetes-rollback">Kubernetes
    Rollback</a>.</div><p>In the case of Blue/Green, the resources are not versioned
    because a Blue/Green deployment uses <strong>rapid rollback</strong>: network
    traffic is simply routed back to the original instances. You do not need to redeploy
    previous versions of the service/artifact and the instances that comprised their
    environment.</p><pre class="hljs cs">Manifests processed. Found following resources:
    <br/><br/>Kind                Name                                    Versioned
    <br/>Service             harness-example-svc-primary             false     <br/>Service             harness-example-svc-stage               false     <br/>Deployment          harness-example                         false     <br/><br/>Primary
    Service is at color: blue<br/>Stage Service is at color: green<br/><br/>Cleaning
    up non primary releases<br/><br/>Current release number is: 2<br/><br/>Versioning
    resources.<br/><br/>Workload to deploy is: Deployment/harness-example-green<br/><br/>Done.</pre><h4>Apply</h4><p>The
    Apply section applies a combination of all of the manifests in the Service <strong>Manifests</strong> section
    as one file using <code>kubectl apply</code>.</p><pre class="hljs nginx">kubectl
    --kubeconfig=config apply --filename=manifests.yaml --record<br/><br/>service/harness-example-svc-primary
    configured<br/>service/harness-example-svc-stage configured<br/>deployment.apps/harness-example-blue
    configured<br/><br/>Done.</pre><h4>Wait for Steady State</h4><p>The Wait for Steady
    State section displays the blue service rollout event.</p><pre class="hljs cs">kubectl
    --kubeconfig=config get events --output=custom-columns=KIND:involvedObject.kind,NAME:.involvedObject.name,MESSAGE:.message,REASON:.reason
    --watch-only<br/><br/>kubectl --kubeconfig=config rollout status Deployment/harness-example-blue
    --watch=true<br/><br/>Status : deployment &#34;harness-example-blue&#34; successfully
    rolled out<br/><br/>Done.</pre><p>Next, the <strong>Swap Primary with Stage</strong> Workflow
    step will swap the blue and green services to route primary network traffic to
    the new version of the container, and stage network traffic to the old version.</p><h3
    id="kubernetes_service_for_blue_green">Step 5: Swap Primary with Stage Step</h3><p>In
    the Blue/Green Workflow, click the <strong>Swap Primary with Stage</strong> step.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zim6pw6hd5/1580255757784/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div
    class="note-callout">For the <strong>Delegate Selector</strong> setting, see <a
    href="#delegate_selector">Delegate Selector</a> above.</div><p>You can see that
    the primary Kubernetes service is represented by the variable <code>${k8s.primaryServiceName}</code>,
    and the stage service by the variable <code>${k8s.stageServiceName}</code>. You
    can see how the swap works in the <strong>Swap Primary with Stage</strong> step
    in Harness Deployments.</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550368735859/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550368735859/image.png"/></a></figure><p>Here
    is the log for the step, where the mandatory Selectors you used in the Harness
    Service <strong>Manifests</strong> files are used.</p><pre class="hljs sql">Begin
    execution of command Kubernetes Swap Service Selectors<br/><br/>Selectors for
    Service One : [name:harness-example-svc-primary]<br/>app: bg-demo-app<br/>harness.io/color:
    green<br/><br/>Selectors for Service Two : [name:harness-example-svc-stage]<br/>app:
    bg-demo-app<br/>harness.io/color: blue<br/><br/>Swapping Service Selectors..<br/><br/>Updated
    Selectors for Service One : [name:harness-example-svc-primary]<br/>app: bg-demo-app<br/>harness.io/color:
    blue<br/><br/>Updated Selectors for Service Two : [name:harness-example-svc-stage]<br/>app:
    bg-demo-app<br/>harness.io/color: green<br/><br/>Done</pre><div class="note-callout">The <strong>Swap
    Primary with Stage</strong> command is simply the <strong>Swap Service Selectors</strong> command
    renamed to <strong>Swap Primary with Stage</strong> for this Workflow type. You
    can use <strong>Swap Service Selectors</strong> to swap the pods referred to by
    any two Kubernetes services. You simply put the expressions for any two services
    (<code>${k8s.primaryServiceName}</code>, <code>${k8s.stageServiceName}</code>)
    and they will be swapped. For example, you can have a Blue/Green deployment Workflow
    to swap services and then a separate Workflow that uses the <strong>Swap Service
    Selectors</strong> command to manually swap back when needed.</div><h3 id="blue_green_rollback">Example:
    Blue/Green Workflow Deployment</h3><p>Now that the setup is complete, you can
    click <strong>Deploy</strong> in the Workflow to deploy the artifact to your cluster.</p><figure><a
    href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550514972283/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550514972283/image.png"/></a></figure><p>Next,
    select the artifact build version and click <strong>SUBMIT</strong>.</p><figure><a
    href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550515038984/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550515038984/image.png"/></a></figure><p>The
    Workflow is deployed. The swap is complete and the Blue/Green deployment was a
    success.</p><p>On the Harness <strong>Deployments</strong> page, expand the Workflow
    steps and click the <strong>Swap Primary with Stage</strong> step.</p><figure><a
    href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689456194/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689456194/image.png"/></a></figure><p>In
    the <strong>Details</strong> section, click the vertical ellipsis and click <strong>View
    Execution Context</strong>.</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689514229/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689514229/image.png"/></a></figure><p>You
    can see that the names and of primary and stage services deployed.</p><figure><a
    href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689570836/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689570836/image.png"/></a></figure><p>Now
    that you have successfully deployed your artifact to your Kubernetes cluster pods
    using your Harness Application, look at the completed workload in the deployment
    environment of your Kubernetes cluster.</p><p>For example, here is the Blue/Green
    workload in Google Cloud Kubernetes Engine, displaying the blue and green services
    and Deployment workload:</p><figure><a href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550369115274/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550369115274/image.png"/></a></figure><p>If
    you click a workload, you will see the pods and service created:</p><figure><a
    href="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689709823/image.png"><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/zmca0zai3s/1550689709823/image.png"/></a></figure><h3>Option:
    Scale Down Old Version</h3><p>A great benefit of a Blue/Green deployment is rapid
    rollback: rolling back to the old version of a service/artifact is simple and
    reliable because network traffic is simply routed back to the original instances.
    You do not need to redeploy previous versions of the service/artifact and the
    instances that comprised their environment.</p><h4>Scale Down Example</h4><p>If
    you would like to scale down the old version <strong>for one service</strong>,
    add a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell Script
    step</a> to the Post-deployment steps of your Workflow, for example:</p><pre>kubectl
    scale deploy -n ${infra.kubernetes.namespace} $(kubectl get deploy -n ${infra.kubernetes.namespace}
    -o jsonpath=&#39;{.items[?(@.spec.selector.matchLabels.harness\.io/color==&#34;&#39;$(kubectl
    get service/${k8s.stageServiceName} -n ${infra.kubernetes.namespace} -o jsonpath=&#39;{.spec.selector.harness\.io/color}&#39;)&#39;&#34;)].metadata.name}&#39;)
    --replicas=0</pre><p></p><p>If you use a Delegate installed <u>outside</u> of
    the target cluster, any scripts in your Pipeline need to use the <code>${HARNESS_KUBE_CONFIG_PATH}</code> expression
    to reference the path to a Harness-generated kubeconfig file containing the credentials
    you provided (<code>export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}</code>).</p><p>For
    example:</p><pre>export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH} kubectl scale deploy
    -n ${infra.kubernetes.namespace} $(kubectl get deploy -n ${infra.kubernetes.namespace}
    -o jsonpath=&#39;{.items[?(@.spec.selector.matchLabels.harness\.io/color==&#34;&#39;$(kubectl
    get service/${k8s.stageServiceName} -n ${infra.kubernetes.namespace} -o jsonpath=&#39;{.spec.selector.harness\.io/color}&#39;)&#39;&#34;)].metadata.name}&#39;)
    --replicas=0</pre><div class="warning-callout">This example does not apply to
    scaling down multiple deployments in the same namespace. If you use the example
    and you have multiple deployments in the same namespace it will impact multiple
    deployments. You should also include a label (or another matchSelector) specific
    to the particular deployment, so it doesn’t scale down all the blue deployments
    in the namespace. For example, match <code>blue</code> and <code>my-specific-app</code>.
    </div><h3>Option: Using the Horizontal Pod Autoscaler (HPA)</h3><p>If you are
    using the Horizontal Pod Autoscaler with your deployment, create a <code>blue</code>
    and <code>green</code> HPA configuration that will point at your deployments.</p><p>templates/hpa-blue.yaml:</p><pre>apiVersion:
    autoscaling/v2beta2<br/>kind: HorizontalPodAutoscaler<br/>metadata:<br/>  name:
    {{.Values.name}}-blue<br/>  labels:<br/>    harness.io/color: blue<br/>spec:<br/>  scaleTargetRef:<br/>    apiVersion:
    apps/v1<br/>    kind: Deployment<br/>    name: {{.Values.name}}-blue<br/>  minReplicas:
    {{ .Values.autoscaling.minReplicas }}<br/>  maxReplicas: {{ .Values.autoscaling.maxReplicas
    }}<br/>  metrics:<br/>    {{- toYaml .Values.autoscaling.metrics | nindent 4 }}</pre><p>templates/hpa-green.yaml:</p><pre>apiVersion:
    autoscaling/v2beta2<br/>kind: HorizontalPodAutoscaler<br/>metadata:<br/>  name:
    {{.Values.name}}-green<br/>  labels:<br/>    harness.io/color: green<br/>spec:<br/>  scaleTargetRef:<br/>    apiVersion:
    apps/v1<br/>    kind: Deployment<br/>    name: {{.Values.name}}-green<br/>  minReplicas:
    {{ .Values.autoscaling.minReplicas }}<br/>  maxReplicas: {{ .Values.autoscaling.maxReplicas
    }}<br/>  metrics:<br/>    {{- toYaml .Values.autoscaling.metrics | nindent 4 }}</pre><p>You
    can add your scaling configuration to your manifest (or share it if you are using
    a Helm chart):</p><pre>autoscaling:<br/>  minReplicas: 1<br/>  maxReplicas: 5<br/>  metrics:<br/>  -
    type: Resource<br/>    resource:<br/>      name: cpu<br/>      target:<br/>        type:
    Utilization<br/>        averageUtilization: 20<br/>  - type: Resource<br/>    resource:<br/>      name:
    memory<br/>      target:<br/>        type: Utilization<br/>        averageUtilization:
    20</pre><p></p><p>When using this with a traffic splitting strategy, your pods
    will scale automatically as your new pods begin receiving heavier loads.</p><h3>Kubernetes
    Rollback</h3><p>See <a href="/article/v41e8oo00e-kubernetes-rollback">Kubernetes
    Rollback</a>.</p><p></p><h3>Notes</h3><ul><li><strong>Blue/Green Rollback</strong>
    — A great benefit of a Blue/Green deployment is rapid rollback: rolling back to
    the old version of a service/artifact is simple and reliable because network traffic
    is simply routed back to the original instances. You do not need to redeploy previous
    versions of the service/artifact and the instances that comprised their environment.</li><li>The <strong>Swap
    Primary with Stage</strong> command is simply the <strong>Swap Service Selectors</strong> command
    renamed to <strong>Swap Primary with Stage</strong> for this Workflow type. You
    can use <strong>Swap Service Selectors</strong> to swap the any two Kubernetes
    services that include the primary and stage selectors. You simply put the expressions
    for any two services (<code>${k8s.primaryServiceName}</code>, <code>${k8s.stageServiceName}</code>)
    in <strong>Swap Service Selectors</strong> and they will be swapped. For example,
    you can have a Blue/Green deployment Workflow to swap services and then a separate
    Workflow that uses the <strong>Swap Service Selectors</strong> command to manually
    swap back when needed.</li></ul><h3>Next Steps</h3><ul><li> <a href="/article/dl0l34ge8l-create-a-kubernetes-rolling-deployment">Create
    a Kubernetes Rolling Deployment</a></li></ul><p></p>'
  slug: create-a-kubernetes-blue-green-deployment
  tags:
  - primary-service
  - stage-service
  - Stage Deployment Step
  - Swap Primary with Stage
  is_live: true
