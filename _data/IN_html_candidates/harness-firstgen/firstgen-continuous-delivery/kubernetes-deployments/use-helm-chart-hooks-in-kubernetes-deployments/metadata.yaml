type: article
article_id: qk178jyns7
user_id: mfr0nxh4be
category_id: n03qfofd5w
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Use Helm Chart Hooks in Kubernetes Deployments
slug: use-helm-chart-hooks-in-kubernetes-deployments
description: Use your Helm Chart Hooks in Harness deployments.
short_version: Use your Helm Chart Hooks in Harness deployments.
tags:
- Jobs
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-05-12T17:21:37.84676Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Use Helm Chart Hooks in Kubernetes Deployments
  description: Use your Helm Chart Hooks in Harness deployments.
  short_version: Use your Helm Chart Hooks in Harness deployments.
  body: '<p>You can use <a href="https://helm.sh/docs/topics/charts_hooks/" target="_blank">Helm
    chart hooks</a> in your Kubernetes deployments to intervene at specific points
    in a release cycle.</p><p>Harness provides a few ways to integrate your Helm chart
    hooks into your Harness deployments. You can use a native Helm deployment in Harness
    or use a Harness Kubernetes deployment which supports Canary and Blue/Green strategies.</p><p>This
    topic describes the available options.</p><p>In this topic:</p><ul><li><a href="#before_you_begin">Before
    You Begin</a></li><li><a href="#option_1_kubernetes_and_the_apply_step">Option
    1: Kubernetes and the Apply Step</a></li><li><a href="#option_2_use_native_helm">Option
    2: Use Native Helm</a></li><li><a href="#option_delegate_selector">Option: Delegate
    Selector</a></li><li><a href="#related">Related</a></li></ul><h3>Before You Begin</h3><ul><li><strong>Helm
    chart hooks</strong> — We assume you are familiar with Helm chart hooks (sometimes
    called <em>lifecycle hooks</em>). If you are new to them, review Helm&#39;s <a
    href="https://helm.sh/docs/topics/charts_hooks/" target="_blank">docs</a>.</li><li><strong>Harness
    Kubernetes and Helm differences</strong> — Harness includes both Kubernetes and
    Helm deployments, and you can use Helm charts in both. Here&#39;s the difference:<ul><li>Harness <a
    href="/article/pc6qglyp5h-kubernetes-deployments-overview">Kubernetes Deployments</a> allow
    you to use your own Kubernetes manifests (remote or local) or a Helm chart, and
    Harness executes the Kubernetes API calls to build everything without Helm and
    Tiller needing to be installed in the target cluster.</li><li>For Harness <a href="/article/ii558ppikj-helm-deployments-overview">Helm
    Deployments</a>, you must always have Helm and Tiller running on one pod in your
    target cluster. Tiller makes the API calls to Kubernetes in these cases.</li></ul></li><li><strong>Apply
    step</strong> — The Harness Workflow Apply step allows you to deploy any resource
    you have set up in the Service <strong>Manifests</strong> section at any point
    in your Workflow. See <a href="/article/4vjgmjcj6z-deploy-manifests-separately-using-apply-step">Deploy
    Manifests Separately using Apply Step</a>.</li></ul><p></p><h3>Option 1: Kubernetes
    and the Apply Step</h3><p>This is the recommended method. It allows you to use
    Harness Kubernetes Canary and Blue/Green deployments and to apply the hooks flexibly
    with the Apply step.</p><p>A Harness Kubernetes deployment runs <code>kubectl
    apply</code> for manifest files. There is no Tiller involved in this process because
    Harness is not running any Helm commands. Harness native Helm implementation can
    only perform <a href="/article/325x7awntc-deployment-concepts-and-strategies">Basic
    deployments</a>.</p><p>Let&#39;s implement a hook using Harness Kubernetes implementation,
    with no Helm or Tiller.</p><p>Here is a typical example of a Kubernetes Job using
    a Helm chart hook:</p><pre>apiVersion: batch/v1<br/>kind: Job<br/>metadata:<br/>  name:
    &#34;{{.Release.Name}}&#34;<br/>  labels:<br/>    app.kubernetes.io/managed-by:
    {{.Release.Service | quote }}<br/>    app.kubernetes.io/instance: {{.Release.Name
    | quote }}<br/>    app.kubernetes.io/version: {{ .Chart.AppVersion }}<br/>    helm.sh/chart:
    &#34;{{.Chart.Name}}-{{.Chart.Version}}&#34;<br/>  annotations:<br/>    # This
    is what defines this resource as a hook. Without this line, the<br/>    # job
    is considered part of the release.<br/>    &#34;helm.sh/hook&#34;: post-install<br/>    &#34;helm.sh/hook-weight&#34;:
    &#34;-5&#34;<br/>    &#34;helm.sh/hook-delete-policy&#34;: hook-succeeded<br/>spec:<br/>  template:<br/>    metadata:<br/>      name:
    &#34;{{.Release.Name}}&#34;<br/>      labels:<br/>        app.kubernetes.io/managed-by:
    {{.Release.Service | quote }}<br/>        app.kubernetes.io/instance: {{.Release.Name
    | quote }}<br/>        helm.sh/chart: &#34;{{.Chart.Name}}-{{.Chart.Version}}&#34;<br/>    spec:<br/>      restartPolicy:
    Never<br/>      containers:<br/>      - name: post-install-job<br/>        image:
    &#34;alpine:3.3&#34;<br/>        command: [&#34;/bin/sleep&#34;,&#34;{{default
    &#34;10&#34; .Values.sleepyTime}}&#34;]</pre><p>The hook is a <code>post-install-job</code>.
    It will execute the Job after all resources are loaded into Kubernetes.</p><div
    class="note-callout">If you are using a <em>pre-install</em> hook, ensure the
    <code>hook-weight</code> is <strong>less than</strong> the <code>hook-weight</code>
    of the job.</div><p>To implement Helm chart hooks in Harness Kubernetes deployments,
    you remove the Hook annotations and split out the Kubernetes Job as a separate
    yaml file in your Harness Service <strong>Manifests</strong>.</p><p>Next, you
    set when the Job is to be executed using the <strong>Apply</strong> step in your
    Workflow. Where you add the Apply step in the Workflow replaces the Helm hook
    annotation values (pre-install, post-delete, etc).</p><p>Here is an example of
    a Phase in a Harness Canary Workflow showing where all of the Helm chart hooks
    can be applied using Apply steps:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qk178jyns7/1584995890494/image.png"/></figure><p>Using
    the example Job above, the Hook annotations are removed and the Kubernetes Job
    is set as a separate yaml file. In your Harness Service <strong>Manifests</strong>
    section, the Job manifest should look something like this:</p><pre>apiVersion:
    batch/v1<br/>kind: Job<br/>metadata:<br/>  name: &#34;{{.Release.Name}}&#34;<br/>  labels:<br/>    app.kubernetes.io/managed-by:
    {{.Release.Service | quote }}<br/>    app.kubernetes.io/instance: {{.Release.Name
    | quote }}<br/>    app.kubernetes.io/version: {{ .Chart.AppVersion }}<br/>spec:<br/>  template:<br/>    metadata:<br/>      name:
    &#34;{{.Release.Name}}&#34;<br/>      labels:<br/>        app.kubernetes.io/managed-by:
    {{.Release.Service | quote }}<br/>        app.kubernetes.io/instance: {{.Release.Name
    | quote }}<br/>    spec:<br/>      restartPolicy: Never<br/>      containers:<br/>      -
    name: post-install-job<br/>        image: &#34;alpine:3.3&#34;</pre><p>To apply
    the Job in a Workflow, you add the <a href="/article/4vjgmjcj6z-deploy-manifests-separately-using-apply-step">Apply</a>
    step to your Workflow and reference the job.yaml in Service <strong>Manifests</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qk178jyns7/1584739866564/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Since
    the original Helm chart hook was a <code>post-install</code>, you simply place
    the <strong>Apply</strong> step after the <strong>Canary Deployment</strong> step
    in your Workflow.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qk178jyns7/1584995937947/image.png"/></figure><p>You
    can see the flexibility available for deploying your manifests in any order you
    want.</p><p>For example, if there is a <code>pre-install</code> Helm chart hook,
    you can use Apply to place this job.yaml <em>before</em> the Canary Deployment
    step.</p><p>With this method, you can integrate your hooks using the Canary and
    Blue/Green strategies.</p><h3>Option 2: Use Native Helm</h3><p>You can also use
    a Harness native Helm implementation. This utilizes Helm and Tiller capabilities.</p><p>As
    noted, you cannot use Canary deployment or Blue/Green deployments. Native Helm
    deployments can only leverage a Basic deployment.</p><p>For a Harness native Helm
    implementation, you simply link to your remote Helm chart in your Harness Service.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qk178jyns7/1584742700980/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>And
    then deploy the chart using a Harness Basic Workflow:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qk178jyns7/1584742748476/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    Helm chart hooks are implement by Helm and Tiller in your target cluster.</p><h3>Option:
    Delegate Selector</h3><p>The Apply step has the <strong>Delegate Selector</strong>
    option.</p><p>If your Workflow Infrastructure Definition&#39;s Cloud Provider
    uses a Delegate Selector (supported in Kubernetes Cluster and AWS Cloud Providers),
    then the Workflow uses the selected Delegate for all of its steps.</p><p>In these
    cases, you shouldn&#39;t add a Delegate Selector to any step in the Workflow.
    The Workflow is already using a Selector via its Infrastructure Definition&#39;s
    Cloud Provider.</p><p>If your Workflow Infrastructure Definition&#39;s Cloud Provider
    isn&#39;t using a Delegate Selector, and you want this Workflow step to use a
    specific Delegate, do the following:</p><p>In <strong>Delegate Selector</strong>,
    select the Selector for the Delegate(s) you want to use. You add Selectors to
    Delegates to make sure that they&#39;re used to execute the command. For more
    information, see <a href="/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates with Selectors</a>.</p><p>Harness will use Delegates matching the Selectors
    you add.</p><p>If you use one Selector, Harness will use any Delegate that has
    that Selector.</p><p>If you select two Selectors, a Delegate must have both Selectors
    to be selected. That Delegate might also have other Selectors, but it must have
    the two you selected.</p><div class="note-callout">You can use expressions for
    Harness built-in variables or Account Default variables in <strong>Delegate Selectors</strong>.
    When the variable expression is resolved at deployment runtime, it must match
    an existing Delegate Selector.<br/><br/>For example, if you have a Delegate Selector <strong>prod</strong> and
    the Workflow is using an Environment also named <strong>prod</strong>, the Delegate
    Selector can be <code>${env.name}</code>. This is very useful when you match Delegate
    Selectors to Application component names such as Environments, Services, etc.
    It&#39;s also a way to template the Delegate Selector setting.</div><p></p><h3>Related</h3><ul><li><a
    href="/article/4vjgmjcj6z-deploy-manifests-separately-using-apply-step">Deploy
    Manifests Separately using Apply Step</a></li><li><a href="/article/ukftzrngr1-create-a-kubernetes-blue-green-deployment">Create
    a Kubernetes Blue/Green Deployment</a></li><li><a href="/article/2xp0oyubjj-create-a-kubernetes-canary-deployment">Create
    a Kubernetes Canary Deployment</a></li><li><a href="/article/dl0l34ge8l-create-a-kubernetes-rolling-deployment">Create
    a Kubernetes Rolling Deployment</a></li><li><a href="/article/325x7awntc-deployment-concepts-and-strategies">Deployment
    Concepts and Strategies</a></li></ul><p></p>'
  slug: use-helm-chart-hooks-in-kubernetes-deployments
  tags:
  - Jobs
  is_live: true
