type: article
article_id: g7m5a380kl
user_id: mfr0nxh4be
category_id: 29o4taom9v
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Create a Custom Deployment using Deployment Templates
slug: create-a-custom-deployment
description: Harness provides deployment support for all of the major platforms, listed
  in the ​Continuous Deployments category. In some cases, you might be using a platform
  that does not have first class support…
short_version: Harness provides deployment support for all of the major platforms,
  listed in the ​Continuous Deployments category. In some cases, you might be using
  a platform that does not have first class support…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-15T20:13:39.608745Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create a Custom Deployment using Deployment Templates
  description: ""
  short_version: ""
  body: '<p>Harness provides deployment support for all of the major platforms, listed
    in the<a href="/category/1qtels4t8p-cd-category"> ​Continuous Deployments</a>
    category.</p><p>In some cases, you might be using a platform that does not have
    first class support in Harness, such as WebLogic, WebSphere, or <a href="https://community.harness.io/t/google-cloud-functions-with-harness-deployment-template/598"
    target="_blank">Google Cloud functions</a>. For these situations, Harness provides
    a custom deployment option using Deployment Templates.</p><p>Deployment Templates
    use shell scripts to connect to target platforms, obtain target host information,
    and execute deployment steps.</p><h3>Before You Begin</h3><p>You can review some
    of the other custom options Harness provides in addition to its support for all
    major platforms:</p><ul><li> <a href="/article/jizsp5tsms-custom-artifact-source">Using
    Custom Artifact Sources</a></li><li> <a href="/article/ejaddm3ddb-add-and-use-a-custom-secrets-manager">Add
    and Use a Custom Secrets Manager</a></li><li> <a href="/article/lf79ixw2ge-shell-script-ticketing-system">Custom
    Shell Script Approvals</a></li><li> <a href="/article/1m3p7phdqo-shell-script-provisioner">Shell
    Script Provisioner</a></li><li> <a href="/article/e87u8c63z4-custom-verification-overview">Custom
    Verification Overview</a></li></ul><div class="note-callout">Google Cloud Function
    deployments using Deployment Templates are covered in <a href="https://community.harness.io/t/google-cloud-functions-with-harness-deployment-template/598"
    target="_blank">Google Cloud Functions with Harness Deployment Template</a>.</div><h3>Visual
    Summary</h3><p>The following illustration shows how the settings in the Deployment
    Template are applied in a Harness Service, Infrastructure Definition, and Workflow
    Fetch Instances and Shell Script steps.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1621960827607/image.png"/></figure><h3>Review:
    Custom Deployment using Deployment Template Overview</h3><p>Here is a summary
    of the steps for setting up custom deployments using Deployment Templates:</p><ol><li>Create
    a Deployment Template.</li><li>In the template, include a script that returns
    a JSON array containing a list of the target instances Harness will use to deploy
    your artifact.</li><li>Identify the array path to the host object in the JSON
    so Harness can locate it at deployment runtime.</li><li>Map any important host
    attributes that you want to reference later, like IP, region, etc.</li><li>Create
    a Harness Service that using the Deployment Template.<div class="note-callout">Artifacts
    are added just as they are for supported platforms. See <a href="/article/7dghbx1dbl-configuring-artifact-server">Add
    Artifact Servers</a>. Harness includes the <a href="/article/jizsp5tsms-custom-artifact-source">Custom
    Artifact Source</a> also.</div></li><li>Create a Harness Infrastructure Definition
    that uses the template.</li><li>Create a Workflow that uses the Harness Service
    and Infrastructure Definition.</li><li>In the Workflow, add the <strong>Fetch
    Instances</strong> step wherever you want to execute the script in your template.</li></ol><p>That&#39;s
    it. Your Workflow will fetch the target instances as you requested and deploy
    your artifact to them.</p><h3>Limitations</h3><p>Unlike the deployments for supported
    platforms, like Kubernetes and AWS, Deployment Templates have certain limitations:</p><ul><li>No
    steady state checks on deployed services.</li><li>Harness does not track releases.</li><li>The
    Deployment Template where you define your infrastructure can be created in the
    account-wide Template Library only (also called the Shared Template Library).
    Not in an Application-wide Template Library. See <a href="/article/ygi6d8epse-use-templates">Use
    Templates</a>.</li><li>Only Basic, Canary, and Multi-Service Deployment <a href="/article/m220i1tnia-workflow-configuration#workflow_types">Workflow
    types</a> are supported.</li></ul><h3>Step 1: Harness Delegate Setup</h3><p>Install
    a Delegate in your deployment environment, verify that its host/pod can connect
    to the server you plan to query for your target host information, and the target
    host.</p><p>See <a href="/article/h9tkwmkrm7-delegate-installation">Harness Delegate
    Overview</a>.</p><h3>Step 2: Connectors Setup</h3><p>In a custom deployment using
    Deployment Templates, Harness Connectors are only used for the Artifact Server.
    See <a href="/article/7dghbx1dbl-configuring-artifact-server">Add Artifact Servers</a>.</p><p>No
    Harness Cloud Providers are used unless you are using an artifact source from
    GCP or AWS.</p><h3>Step 3: Create Custom Deployment Template</h3><p>The Deployment
    Template contains a script that will query a server at deployment runtime to obtain
    the target host information needed to deploy your artifact to the target host(s).</p><h4>Infrastructure
    Variables</h4><p>These are variables that you can use in the following places:</p><ul><li>In
    the script in <strong>Fetch Instances Command Script</strong>. For example, you
    can create a variable for the URL that the script in <strong>Fetch Instances Command
    Script</strong> uses.</li><li>When you define the Infrastructure Definition for
    your deployment. The variable values can be overwritten in the Infrastructure
    Definition, as we will show later.</li></ul><ol><li>Click <strong>Add</strong>
    to add the variables you need in the script in <strong>Fetch Instances Command
    Script</strong>.</li><li>Add the variables you will need to identify the target
    host(s) in your Harness Infrastructure Definition.<br/>For example, if you will
    be targeting a cluster, add the variable <code>cluster</code>, and then you can
    provide a value for the variable in the Infrastructure Definition.</li></ol><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389260859/image.png"/></figure><p>If
    you want to make the URL that obtains the target host information a variable that
    can be configured in an Infrastructure Definition, be sure to include it in <strong>Infrastructure
    Variables</strong>.</p><p>Often, you will add variables for username and password
    so that they can be provided in the Infrastructure Definition.</p><p>Any variables
    set here can he referenced in your Workflow using the expression <code>${infra.custom.vars.varName}</code>.
    For example:</p><pre>echo ${infra.custom.vars.url}<br/>echo ${infra.custom.vars.cluster}</pre><h4>Fetch
    Instances Command Script</h4><p>Enter the shell script to pull the JSON collection
    from your server.</p><p>The script is expected to query the server and receive
    a JSON array containing the target hosts, saved in the environment variable <code>${INSTANCE_OUTPUT_PATH}</code>.</p><p>This
    shell script will be executed at runtime by the Harness Delegate on its host.
    This should be a shell script you have run on the Delegate host to ensure that
    the host can connect to your server.</p><p>The script should return a JSON array
    containing the target host information Harness needs to deploy.</p><p>Here is
    an example:</p><pre class="hljs bash">apt-get -y install awscli<br/>aws configure
    set aws_access_key_id ${secrets.getValue(&#34;access_key&#34;)<br/>aws configure
    set aws_secret_access_key ${secrets.getValue(&#34;password&#34;)<br/>aws configure
    set region us-west-1<br/>aws ec2 describe-instances --instance-ids i-0beacf0f260edd19f
    &gt; &#34;${INSTANCE_OUTPUT_PATH}&#34;</pre><p></p><p>This example uses AWS. Harness
    already has full, first-class support for AWS deployments. We just use this script
    as an example. See the AWS Quickstarts in <a href="/category/kx4hs8bn38-getting-started">Start
    Here</a>.</p><p>This example also uses Harness secrets for username and password.
    See <a href="/article/ygyvp998mu-use-encrypted-text-secrets">Use Encrypted Text
    Secrets</a>.</p><p>Here&#39;s another example using Kubernetes and NGINX (Kubernetes
    also has <a href="/article/7in9z2boh6-kubernetes-quickstart">first-class support</a>):</p><pre
    class="hljs bash">POD=$(kubectl get pod -l app=mynginx -o json)<br/>echo ${POD}
    &gt; &#34;${INSTANCE_OUTPUT_PATH}&#34;</pre><p></p><p>When you create your Harness
    Workflow later, you will add a <strong>Fetch Instances</strong> step that will
    run this script:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389321505/image.png"/></figure><h4>Host
    Object Array Path</h4><p>Enter the JSON path to the JSON array object for the
    target host.</p><p>For example, the following JSON object contains an Instances
    array with two items (the JSON is abbreviated):</p><pre class="hljs json">{<br/>  &#34;Instances&#34;:
    [<br/>    {<br/>      &#34;StackId&#34;: &#34;71c7ca72-55ae-4b6a-8ee1-a8dcded3fa0f&#34;,<br/>      ...<br/>      &#34;InfrastructureClass&#34;:
    &#34;ec2&#34;,<br/>      &#34;RootDeviceVolumeId&#34;: &#34;vol-d08ec6c1&#34;,<br/>      &#34;SubnetId&#34;:
    &#34;subnet-b8de0ddd&#34;,<br/>      &#34;InstanceType&#34;: &#34;t1.micro&#34;,<br/>      &#34;CreatedAt&#34;:
    &#34;2015-02-24T20:52:49+00:00&#34;,<br/>      &#34;AmiId&#34;: &#34;ami-35501205&#34;,<br/>      &#34;Hostname&#34;:
    &#34;ip-192-0-2-0&#34;,<br/>      &#34;Ec2InstanceId&#34;: &#34;i-5cd23551&#34;,<br/>      &#34;PublicDns&#34;:
    &#34;ec2-192-0-2-0.us-west-2.compute.amazonaws.com&#34;,<br/>      &#34;SecurityGroupIds&#34;:
    [<br/>        &#34;sg-c4d3f0a1&#34;<br/>      ],<br/>      ...<br/>    },<br/>    {<br/>      &#34;StackId&#34;:
    &#34;71c7ca72-55ae-4b6a-8ee1-a8dcded3fa0f&#34;,<br/>      ...<br/>      &#34;InfrastructureClass&#34;:
    &#34;ec2&#34;,<br/>      &#34;RootDeviceVolumeId&#34;: &#34;vol-e09dd5f1&#34;,<br/>      &#34;SubnetId&#34;:
    &#34;subnet-b8de0ddd&#34;,<br/>      &#34;InstanceProfileArn&#34;: &#34;arn:aws:iam::123456789102:instance-profile/aws-opsworks-ec2-role&#34;,<br/>      &#34;InstanceType&#34;:
    &#34;c3.large&#34;,<br/>      &#34;CreatedAt&#34;: &#34;2015-02-24T21:29:33+00:00&#34;,<br/>      &#34;AmiId&#34;:
    &#34;ami-9fc29baf&#34;,<br/>      &#34;SshHostDsaKeyFingerprint&#34;: &#34;fc:87:95:c3:f5:e1:3b:9f:d2:06:6e:62:9a:35:27:e8&#34;,<br/>      &#34;Ec2InstanceId&#34;:
    &#34;i-8d2dca80&#34;,<br/>      &#34;PublicDns&#34;: &#34;ec2-192-0-2-1.us-west-2.compute.amazonaws.com&#34;,<br/>      &#34;SecurityGroupIds&#34;:
    [<br/>        &#34;sg-b022add5&#34;,<br/>        &#34;sg-b122add4&#34;<br/>      ],<br/>      ...<br/>    }<br/>  ]<br/>}</pre><p>In
    this case, we want to point to the first item in the JSON file using its index,
    and so we use <code>Instances</code> in <strong>Host Object Array Path</strong>.</p><div
    class="note-callout">To ensure that you referring to the correct item in your
    array, test your <strong>Host Object Array Path</strong> using your JSON collection
    and an online validator such as  <a href="https://jsoneditoronline.org/" target="_blank">JSON
    Editor Online</a>.</div><h4>Payloads without High-Level Objects</h4><p>In some
    cases you might have a JSON payload without a high-level object. In these cases,
    you can use <code>$</code> in <strong>Host Object Array Path</strong>.</p><p>Let&#39;s
    look at an example:</p><pre>[<br/>  {<br/>    &#34;id&#34;: &#34;aef-default-0000000000000-qnhh&#34;,<br/>    &#34;instance&#34;:
    {<br/>      &#34;id&#34;: &#34;aef-default-0000000000000-qnhh&#34;,<br/>      &#34;name&#34;:
    &#34;apps/sales/services/default/versions/0000000000000/instances/aef-default-0000000000000-qnhh&#34;,<br/>      &#34;startTime&#34;:
    &#34;2021-01-07T21:05:54.658Z&#34;,<br/>      &#34;vmIp&#34;: &#34;192.168.0.0&#34;,<br/>      &#34;vmLiveness&#34;:
    &#34;HEALTHY&#34;,<br/>      &#34;vmStatus&#34;: &#34;RUNNING&#34;<br/>    },<br/>    &#34;service&#34;:
    &#34;default&#34;,<br/>    &#34;version&#34;: &#34;0000000000000&#34;<br/>  },<br/>  {<br/>    &#34;id&#34;:
    &#34;aef-default-0000000000000-0sbt&#34;,<br/>    &#34;instance&#34;: {<br/>      &#34;id&#34;:
    &#34;aef-default-0000000000000-0sbt&#34;,<br/>      &#34;name&#34;: &#34;apps/sales/services/default/versions/0000000000000/instances/aef-default-0000000000000-0sbt&#34;,<br/>      &#34;startTime&#34;:
    &#34;2021-01-07T21:05:46.262Z&#34;,<br/>      &#34;vmIp&#34;: &#34;192.168.255.255&#34;,<br/>      &#34;vmLiveness&#34;:
    &#34;HEALTHY&#34;,<br/>      &#34;vmStatus&#34;: &#34;RUNNING&#34;<br/>    },<br/>    &#34;service&#34;:
    &#34;default&#34;,<br/>    &#34;version&#34;: &#34;0000000000000&#34;<br/>  }<br/>]</pre><p></p><p>In
    this example, the <strong>Host Object Array Path</strong> is <code>$</code>and
    the <strong>hostname</strong> field would use  <code>instance.vmIp</code>.</p><h4>Host
    Attributes</h4><p>Now that you have provided a path to the host object, you can
    map any useful JSON keys in <strong>Host Attributes</strong>.</p><p><strong>The</strong>
    <strong><code>hostname</code></strong> <strong>vale in the Field Name setting
    is mandatory.</strong></p><div class="note-callout">You must use <code>hostname</code>
    to identify the target host(s) in the JSON array.</div><p>Map the keys containing
    information you want to reference in your Workflow, most likely in a Shell Script
    step.</p><p>You can reference the host in your Workflow using the expression <code>${instance.hostName}</code>,
    but you reference Host Attributes using <code>${instance.host.properties.&lt;Field_Name&gt;}</code>.</p><p>For
    example, to reference the Host Attribute hostname below you would use <code>${instance.host.properties.hostname}</code>.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1619043733859/image.png"/></figure><p>You
    can also use any of the default Harness expressions that are host-related. See
    <a href="/article/9dvxcegm90-variables">What is a Harness Variable Expression?</a>.</p><h4>Artifact
    Build Number and Different Artifact Versions</h4><p></p><div class="note-callout">Currently,
    this feature is behind the feature flag <code>CUSTOM_DEPLOYMENT_ARTIFACT_FROM_INSTANCE_JSON</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>If your deployment targets are a fixed set of instances
    but you don&#39;t update all of them on each new deployment, Harness might not
    show the artifact versions of older artifacts in the Service Dashboard.</p><p>For
    example:</p><ol><li>Initially there are 10 instances with version V1. </li><li>You
    deploy version V2 to 5 of the instances but still output all 10 instances. </li><li>The
    <strong>Current Deployment Status</strong> in the Service Dashboard will show
    10 instances with version V2.</li></ol><p>This result occurs because the <strong>Fetch
    Instances</strong> Workflow step doesn&#39;t consider the artifact information
    form your script by default. The step considers the instances information only.</p><p>To
    display the artifact versions, include the <code>artifactBuildNumber</code> in
    <strong>Host Attributes</strong>. and reference the artifact build number in your
    script output.</p><p>For example, here&#39;s a script output where <code>artifactBuildNo</code>
    includes the build numbers:</p><pre>{<br/>  &#34;hosts&#34;: [<br/>    {<br/>      &#34;hostname&#34;:
    &#34;host-1.harness.com&#34;,<br/>      &#34;artifactBuildNo&#34;: &#34;1.0&#34;<br/>    },<br/>    {<br/>      &#34;hostname&#34;:
    &#34;host-2.harness.com&#34;,<br/>      &#34;artifactBuildNo&#34;: &#34;1.0&#34;<br/>    },<br/>    {<br/>      &#34;hostname&#34;:
    &#34;host-3.harness.com&#34;,<br/>      &#34;artifactBuildNo&#34;: &#34;2.0&#34;<br/>    }<br/>  ]<br/>}</pre><p></p><p>In
    <strong>Host Attributes</strong>, you map <code>artifactBuildNumber</code> to
    <code>artifactBuildNo</code>:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1663272402884/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    the Services Dashboard, you will see different artifact versions and the number
    of hosts where they were deployed:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1663272618382/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h3>Step
    4: Create Harness Service</h3><p>Create your Harness Service as described in <a
    href="/article/eb3kfl8uls-service-configuration">Add Specs and Artifacts using
    a Harness Service</a>.</p><p>In <strong>Deployment Type</strong>, select your
    Deployment Template.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1621960112505/image.png"/></figure><p>In
    the new Service, add your Artifact Source just as you would with any other Harness
    Service deployment type. All supported artifact sources are available, as is the
    custom artifact source.</p><div class="tip-callout">You must reference the artifact
    source somewhere in your Harness entities, such as a Shell Script Workflow step.
    If you do not reference the artifact source, Harness does not prompt you to select
    an artifact version when you deploy your Workflow. See <a href="#option_reference_artifact_sources">Option:
    Reference Artifact Sources</a>.</div><p>See</p><ul><li> <a href="/article/qluiky79j8-service-types-and-artifact-sources">Service
    Types and Artifact Sources</a></li><li> <a href="/article/gxv9gj6khz-add-a-docker-image-service">Add
    a Docker Artifact Source</a></li><li> <a href="/article/jizsp5tsms-custom-artifact-source">Using
    Custom Artifact Sources</a></li></ul><p>There are no specs for the custom deployment
    service. You can add Configuration variables (environment variables) and files
    that can be referenced and used in your Workflow, and <a href="/article/4m2kst307m-override-service-files-and-variables-in-environments">overwritten
    by Harness Environments</a>.</p><p>See:</p><ul><li> <a href="/article/q78p7rpx9u-add-service-level-config-variables">Add
    Service Config Variables</a></li><li> <a href="/article/iwtoq9lrky-add-service-level-configuration-files">Add
    Service Config Files</a></li></ul><h3>Step 5: Create Target Infrastructure Definition</h3><p>Next
    you create an Infrastructure Definition that uses the Deployment Template&#39;s
    Infrastructure Variables settings to define the target hosts/container.</p><ol><li>In
    the Infrastructure Definition settings, in <strong>Cloud Provider Type</strong>,
    select <strong>Template</strong>.</li><li>In <strong>Deployment Type</strong>,
    select the Deployment Template you created.</li><li>In <strong>Select Version</strong>,
    select the version of the template you want to use. Harness templates can have
    multiple versions. See <a href="/article/ygi6d8epse-use-templates">Use Templates</a>.</li></ol><p>Here
    is an example targeting a cluster:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1621960406906/image.png"/></figure><p>In
    the Infrastructure Definition, you can edit the variable values from the Deployment
    Template. You can use Harness variable expressions and secrets. See <a href="/article/9dvxcegm90-variables">What
    is a Harness Variable Expression?</a> and <a href="/article/8bldcebkkf-managing-harness-secrets">Managing
    Harness Secrets</a>.</p><p><strong>If you do not change the defaults</strong>,
    and the variables are changed in the Deployment Template, or new ones are added,
    the variables in the Infrastructure Definition are updated with the new defaults
    from the Deployment Template automatically.</p><p>If you <u>do</u> change the
    default, changes made to the Deployment Template default variables doe not impact
    the Infrastructure Definition.</p><p>In the Infrastructure Definition <strong>Scope
    to Specific Services</strong> setting, you can select the Service you created
    using the Deployment Template, but this is not mandatory.</p><p>Now that the Infrastructure
    Definition is completed, you can use it in a Workflow.</p><div class="note-callout">You
    can also override any Deployment Template variable values in the Environment overrides
    settings. See <a href="/article/cc59hfou9c-override-variables-per-infrastructure-definition">Override
    Variables at the Infrastructure Definition Level</a>.</div><h3>Step 6: Create
    the Workflow</h3><p>Once you have the created the Harness Service and Infrastructure
    Definition using the Deployment Template, you can create a Workflow to execute
    the <strong>Fetch Instances Command Script</strong> in the template.</p><p>In
    the Workflow, you add a <strong>Fetch Instances</strong> step where you want the
    script in <strong>Fetch Instances Command Script</strong> to execute. You can
    also reference any variable from the Deployment Template&#39;s <strong>Infrastructure
    Variables</strong> section, such as in a <strong>Shell Script</strong> step.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389512595/image.png"/></figure><p>Deployment
    Templates are supported in the following Workflow Deployment Types:</p><ul><li>Basic</li><li>Canary</li><li>Multi-Service</li></ul><p>To
    create the Workflow, do the following:</p><ol><li>In <strong>Workflows</strong>,
    click <strong>Add Workflow</strong>. The Workflow settings appear.</li><li>Name
    the Workflow.</li><li>Select one of the supported Workflow Types.</li><li>Select
    the Environment that contains the Infrastructure Definition using your Deployment
    Template.</li><li>Select the Service using your Deployment Template.</li><li>Select
    the Infrastructure Definition using your Deployment Template.</li><li>Click <strong>Submit</strong>.</li></ol><p>The
    Workflow is created. The Workflow does not have any default steps added like the
    platform-specific Workflows.</p><p>The Workflow is fully customizable. You can
    add sections, phases, Rollback Steps, etc, as needed. See <a href="/article/m220i1tnia-workflow-configuration">Workflows</a>.</p><p>As
    this a custom deployment Workflow, the number of available steps is limited:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389582863/image.png"/></figure><p>The
    only required step for custom deployment Workflows is <strong>Fetch Instances</strong>.</p><h3>Option:
    Reference Artifact Sources</h3><p>If you added an artifact source to the Harness
    Service used by this Workflow, you must reference the artifact source somewhere
    in your Harness entities, such as a Shell Script Workflow step.</p><p>If you do
    not reference the artifact source, Harness does not prompt you for an artifact
    version when you deploy the Workflow.</p><p>For example, let&#39;s say you added
    an artifact source for a WAR file in the Service&#39;s Artifact Source:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1605570378603/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    your Workflow, add a <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Shell
    Script step</a> that echos the <code>${artifact.buildNo}</code> or other <a href="/article/aza65y4af6-built-in-variables-list#artifact">artifact
    built-in variables</a>.</p><p>Now when you deploy this Workflow, you will be prompted
    to select an artifact version.</p><p>If you did not reference the artifact in
    the Workflow, you would not be prompted.</p><p>See <a href="/article/1fjrjbau7x-capture-shell-script-step-output">Run
    Shell Scripts in Workflows</a>.</p><h3>Step 7: Fetch Instances</h3><p>The <strong>Fetch
    Instances</strong> step runs the script in your Deployment Template&#39;s <strong>Fetch
    Instances Command Script</strong> setting:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389621049/image.png"/></figure><ol><li>Add
    Fetch Instances to any point in the Workflow where you want to run your script.</li><li>In
    <strong>Delegate Selector</strong>, select the Delegate you want to use to run
    this step. See <a href="/article/c3fvixpgsl-select-delegates-for-specific-tasks-with-selectors">Select
    Delegates with Selectors</a>.</li></ol><p></p><h3>Option: Deployment Template
    Variable Expressions</h3><p>Any variables set in <strong>Infrastructure Variables</strong>
    can he referenced in your Workflow using the expression <code>${infra.custom.vars.varName}</code>.</p><p>You
    can reference the host in your Workflow using the expression <code>${instance.hostName}</code>.</p><p>You
    can also use any of the default Harness expressions that are host-related. See
    <a href="/article/9dvxcegm90-variables">What is a Harness Variable Expression?</a>.</p><p>Here
    is an example using a Shell Script step:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/g7m5a380kl/1617389653321/image.png"/></figure><h3>See
    Also</h3><ul><li> <a href="/article/jizsp5tsms-custom-artifact-source">Using Custom
    Artifact Sources</a></li><li> <a href="/article/ejaddm3ddb-add-and-use-a-custom-secrets-manager">Add
    and Use a Custom Secrets Manager</a></li><li> <a href="/article/lf79ixw2ge-shell-script-ticketing-system">Custom
    Shell Script Approvals</a></li><li> <a href="/article/1m3p7phdqo-shell-script-provisioner">Shell
    Script Provisioner</a></li></ul><h3>Configure As Code</h3><p>To see how to configure
    the settings in this topic using YAML, configure the settings in the UI first,
    and then click the YAML editor button (<span style="color:#fb9e00" data-hd-color="#fb9e00"><strong>&lt;/&gt;</strong></span>).</p>'
  slug: create-a-custom-deployment
  tags: []
  is_live: true
