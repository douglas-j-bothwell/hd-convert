type: article
article_id: 3av5pc4goc
user_id: mfr0nxh4be
category_id: goyudf2aoh
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Onboard Teams Using Git
slug: onboard-teams-using-git-ops
description: Create an Application template you can sync and clone in Git for onboarding
  new teams.
short_version: Create an Application template you can sync and clone in Git for onboarding
  new teams.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-02-17T22:13:26.313719Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Onboard Teams Using Git
  description: Create an Application template you can sync and clone in Git for onboarding
    new teams.
  short_version: Create an Application template you can sync and clone in Git for
    onboarding new teams.
  body: '<p>This topic shows you how to create a Harness Application template you
    can sync and clone in Git for onboarding new teams.</p><p>Often, teams create
    an Application template for engineering leads or DevOps engineers. Each team then
    gets a clone of the Application in Git that they can modify for their purposes.</p><p>Development
    teams can then deploy consistently without using the Harness UI to create their
    Applications from scratch. They simply change a few lines of YAML vis scripts
    and deploy their application.</p><p>In this topic:</p><ul><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#before_you_begin">Before
    You Begin</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#review_why_git_based_onboarding">Review:
    Why Git-based Onboarding?</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#step_1_set_up_git_connector">Step
    1: Set Up Git Connector</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#step_2_create_application_template">Step
    2: Create Application Template</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#step_3_clone_and_change_the_application">Step
    3: Clone and Change the Application</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#step_4_commit_and_sync_new_application">Step
    4: Commit and Sync New Application</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#step_5_automating_new_application_creation">Step
    5: Automating New Application Creation</a></li><li><a href="https://docs.harness.io/article/3av5pc4goc-onboard-teams-using-git-ops#conclusion">Conclusion</a></li></ul><h3>Before
    You Begin</h3><ul><li> <a href="/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a> — Ensure you know Harness Key Concepts.</li><li> <a href="/article/htvzryeqjw-configuration-as-code">Configuration
    as Code</a> — Review Harness YAML interface.</li><li><a href="/article/khbt0yhctx-harness-git-ops">Harness
    Git Integration Overview</a> — Review Harness support for Git.</li></ul><h3>Review:
    Why Git-based Onboarding?</h3><p>Here are a few examples of why Harness customers
    use Git for onboarding:</p><ul><li>Developers working in Git don&#39;t want to
    navigate to another screen to configure their deployment Workflows and Pipelines. </li><li>For
    some developers, UI&#39;s take too long to navigate when coding rapidly. The Harness
    YAML interface uses a simply folder structure for easy navigation.</li><li>Segmenting
    Applications from overall Harness management. In a single repo, developers can
    manage their Applications, container specifications and manifests, and Harness
    component configuration. </li><li>Create a Golden Template Application and use
    it to onboard Applications for teams.</li></ul><h3>Step 1: Set Up Git Connector</h3><p>Set
    up a Source Repo Provider connection in Harness that connects to the Git repo
    you want to use. For details, see <a href="/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a>.</p><p>For example, here is a new GitHub repo named
    <strong>Golden Template Application</strong> and its corresponding set up in Harness
    as a Source Repo Provider:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585522879887/image.png"/></figure><p>Remember
    the following important settings:</p><ul><li><strong>Repo URL</strong> — The HTTPS
    repo URL is pasted into the Harness Source Repo Provider <strong>URL</strong>.
    The HTTPS setting is selected for both.</li><li><strong>Harness Webhook URL</strong>
    — The <strong>Generate Webhook URL</strong> setting was enabled when the Source
    Repro Provider was created, and the Webhook URL was pasted into the repo&#39;s
    Webhook <strong>Payload URL</strong>.</li><li><strong>Content type</strong> —
    The <strong>Content type</strong> in the repo is <strong>application/json</strong>.</li><li><strong>Just
    the push event</strong> — In the repo Webhook&#39;s <strong>Which events would
    you like to trigger this webhook?</strong> setting, only the <strong>Just the
    push event</strong> option is selected.</li></ul><p>For details, see <a href="/article/htvzryeqjw-configuration-as-code">Configuration
    as Code</a>.</p><h3>Step 2: Create Application Template</h3><p>First, you will
    create the Application template in Harness. You will sync it with the Golden Template
    Application repo and enable all of its template settings.</p><p>Create an Application
    named <strong>Golden Template Application</strong>. When you create it, select
    <strong>Set up Git Sync</strong>, and select the Source Repo Provider in <strong>Git
    Connector</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585259048023/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>For
    information on creating Applications, see <a href="/article/bucothemly-application-configuration">Create
    an Application</a>.</p><p>Once you click <strong>Submit</strong> you will see
    the Application in your repo:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585259648090/image.png"/></figure><p>The
    repo will be updated with Application components as you create them in Harness.</p><h4>Service
    Template</h4><p>Next, create a Harness Service in the Application. For this example,
    we&#39;ll create a Kubernetes Service named <strong>SampleK8s</strong>. For details,
    see <a href="/article/7in9z2boh6-kubernetes-quickstart">Kubernetes Quickstart</a>.</p><p>The
    Service is set up with the following:</p><ul><li><strong>Artifact Source placeholder</strong>
    — We&#39;ll add a publicly-available Nginx Docker image from Docker Hub. When
    teams clone this Application, they can update the Artifact Source. See <a href="/article/6ib8n1n1k6-add-container-images-for-kubernetes-deployments">Add
    Container Images for Kubernetes Deployments</a></li><li><strong>Remote manifests</strong>
    — When teams clone this Application, they can update the link to point to their
    own manifests. See <a href="/article/yjkkwi56hl-link-resource-files-or-helm-charts-in-git-repos">Link
    Resource Files or Helm Charts in Git Repos</a>.</li><li><strong>Service Config
    Variable for the namespace</strong> — A Service Config Variable is created for
    the namespace used in the manifests. This will enable teams to simply update the
    variable in their clones with their own namespaces. See <a href="/article/qy6zw1u0y2-using-harness-config-variables-in-manifests">Using
    Harness Config Variables in Manifests</a>.</li></ul><p>Once you create the Service
    it is synced with your repo automatically:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585266490134/image.png"/></figure><p>The
    default manifests are also synced with your repo.</p><p>First, set up an Artifact
    Source placeholder in the Service. Here we use a publicly-available Nginx Docker
    image from Docker Hub:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585330669985/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>For
    details on setting up the Artifact Server connection to Docker Hub in Harness,
    see <a href="/article/7dghbx1dbl-configuring-artifact-server">Add Artifact Servers</a>.</p><p>Next,
    we&#39;ll configure the SampleK8s <strong>Manifests</strong> section to use remote
    manifests.</p><p>If you use remote manifest, you typically need to add another
    Source Repro Provider for the repo where they are stored. Here is how it is mapped
    in our example:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585266007462/image.png"/></figure><div
    class="tip-callout">Once you have set up the remote manifests, the default manifest
    files that were synched when you created the Service will be ignored. You can
    delete them if you like.</div><p>Once this template Application is cloned and
    used by other teams, we want them to have a simple way to change the target namespace
    for the deployment. There are different options (see <a href="/article/5xm4z4q3d8-create-kubernetes-namespaces-based-on-infra-mapping">Create
    Kubernetes Namespaces based on InfraMapping</a>, <a href="/article/nhlzsni30x-create-kubernetes-namespaces-with-workflow-variables">Create
    Kubernetes Namespaces with Workflow Variables</a>), but for this example, we will
    use a Service variable.</p><p>Create a Service variable and then reference it
    in the values.yaml file in your remote manifests repo. Here&#39;s an example using
    a Service variable named <strong>namespace</strong>:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585330436799/image.png"/></figure><p>The
    value of the namespace Service variable is <code>${env.name}</code>. The <code>${env.name}</code>
    expression references the name of the Environment used by the Workflow that deploys
    this Service. This is a useful default value because Environments are often named
    after the namespaces teams use, such as <strong>dev</strong> and <strong>prod</strong>.</p><div
    class="note-callout">We use lowercase names for Environments because the names
    will be used for namespaces and Kubernetes requires lowercase names for namespaces.</div><p>The
    Service template is complete. Next, we&#39;ll create the Environment and Infrastructure
    Definition templates.</p><h4>Environment and Infrastructure Definition Templates</h4><p>We&#39;ll
    add two Environments: one Environment for prod and one for dev.</p><h5>Prod Environment
    and Infrastructure Definition</h5><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585523480795/image.png"/></figure><p>Note
    how the <code>${serviceVariable.namespace}</code> we created is used in the <strong>Namespace</strong>
    setting.</p><h5>Dev Environment and Infrastructure Definition</h5><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585523524957/image.png"/></figure><p>Note
    how the <code>${serviceVariable.namespace}</code> we created is used in the <strong>Namespace</strong>
    setting.</p><p>When the Environments and Infrastructure Definitions are created
    they are synced with Git automatically:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585331829756/image.png"/></figure><p>If
    you want to overwrite the namespace value used in the <strong>Namespace</strong>
    setting for the prod or dev Infrastructure Definitions, you can use a <strong>Service
    Configuration Override</strong> in the Environment.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585332950139/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h4>Workflow
    Template</h4><p>For this example, we create a Kubernetes Rolling Deployment template.
    Create the Workflow type(s) you expect your teams will need. You can always remove
    unneeded Workflows from Git later.</p><p>All of the major settings of Harness
    Workflows can be templated, but first you need to set up the Workflow with actual
    values.</p><p>Create the Workflow by selecting the Environment, Service, and Infrastructure
    Definition you created earlier.</p><p>Next, open the settings again and click
    the <strong>[T]</strong> button for all of the settings. This will replace the
    settings with Workflow variables, thereby templating the Workflow.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585334305403/image.png"/></figure><p>Now
    that the Workflow is templated, you will see the Workflow variables in the repo
    Workflow YAML and the <code>templatized: true</code> key.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585335392061/image.png"/></figure><p>Now
    the templated Workflow can be used by any Service, Environment, and Infrastructure
    Definition.</p><p>Next, we&#39;ll create a Pipeline for the deployment.</p><h4>Pipeline
    Template</h4><p>For this example, we create a three Stage Pipeline:</p><ol><li>Stage
    1 — Rolling Workflow into the Dev environment.</li><li>Stage 2 — Approval Step.</li><li>Stage
    3 — Rolling Workflow into the Production environment.</li></ol><p>This Pipeline
    is a common use case and can be augmented as needed. For more details on Pipelines,
    see <a href="/article/zc1u96u6uj-pipeline-configuration">Pipelines</a>.</p><p>First,
    create the Pipeline.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585339218974/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Next,
    create Stage 1 using the <strong>dev</strong> Environment and <strong>Dev</strong>
    Infrastructure Definition:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585340536125/image.png"/></figure><p>Next,
    create the Approval step for Stage 2:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585340515355/image.png"/></figure><p>Finally,
    create Stage 3 using the <strong>prod</strong> Environment and <strong>Prod</strong>
    Infrastructure Definition:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585340553710/image.png"/></figure><p>When
    you are done, the Pipeline will look like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585340673783/image.png"/></figure><p>The
    Pipeline is synched with Git:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585341411900/image.png"/></figure><p>The
    Golden Template Application is complete. Now your teams can clone and modify it
    as needed.</p><h3>Step 3: Clone and Change the Application</h3><p>Clone the Golden
    Template Application using whatever Git tool you want. Here&#39;s an example using
    GitHub Desktop:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585342033519/image.png"/></figure><p>Next,
    copy the Application and paste the copy as a peer of <strong>Golden Template Application</strong>
    in the <strong>Applications</strong> folder:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585342899503/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Name
    the new Application folder <strong>Development</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585342970841/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Change
    the new Application description in its index.yaml file:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585343041375/image.png"/></figure><p>Rename
    the Service:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585343083414/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    do not need to update the Workflow with the new Service name because the Workflow
    is templated.</p><p>Update the Pipeline with the new Service name.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585343263501/image.png"/></figure><p>Update
    the following Service settings to customize this Application for a new team:</p><ul><li><strong>Artifact
    Source placeholder</strong> — Replace the Nginx Docker image from Docker Hub.</li><li><strong>Remote
    manifests</strong> — Update the link to point to their own manifests.</li><li><strong>Service
    Config Variable for the namespace</strong> — Update the Service variable with
    a new namespace.</li></ul><h3>Step 4: Commit and Sync New Application</h3><p>When
    you are done making changes to the new Application, you can commit and push the
    changes.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585343606509/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    new Application is in Git:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585344185995/image.png"/></figure><p>And
    the new Application is automatically synced and added to Harness:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585524938330/image.png"/></figure><p></p><h4>Troubleshooting</h4><p><strong>Something
    not working?</strong> If some Application component does not appear in Harness
    it is likely because of a conflict between the YAML file and some settings in
    Harness.</p><p>For example, if you didn&#39;t update the Service name in the Pipeline
    YAML to match the new name of the Service, Harness cannot locate the Service listed
    in the Pipeline YAML. Consequently, Harness refuses to add the Pipeline from Git.</p><p>Another
    possible issue is a change to an Account setting in Harness or the Git YAML, such
    as the name of a Cloud Provider.</p><p>Harness displays Git errors in the Configuration
    as Code:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585352161193/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>You
    can also see them in the repo Webhook. For example, GitHub has a <strong>Recent
    Deliveries</strong> section at the bottom of the Webhook setting:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/3av5pc4goc/1585352225275/image.png"/></figure><h3>Step
    5: Automating New Application Creation</h3><p>Once you are comfortable creating
    new Applications using Git, you can write automation scripts to clone Applications
    and change values in the new Application YAML.</p><p>For example, some customers&#39;
    sample scripts are based on an input in a UI or Shell Script that generates YAML
    stored in Git. The YAML is then synced to Harness through the Git Sync process
    on the push event.</p><p>You can use tools like <a href="https://mikefarah.gitbook.io/yq/"
    target="_blank">yq</a> to manipulate specific YAML fields inline. Tools like <a
    href="https://pypi.org/project/yamllint/" target="_blank">yamllint</a> are excellent
    for validating YAML.</p><p>Here is a sample YAML automation flow:</p><ol><li>Create
    a Golden Application that is fully templated and sync it with Git.</li><li>Create
    a script to create a new Harness Application, copy the content of the Golden Application
    into it, and edit the necessary fields. For example, a script might update the
    namespace and Cloud Provider YAML.</li><li>Commit changes to Git and review the
    results in Harness.</li></ol><p>If there are issues, Harness displays Git Sync
    errors in <strong>Configure As Code</strong>.</p><h3>Conclusion</h3><p>This topic
    showed you how Git can be used for safe, version-controlled, easy Harness component
    management.</p><p>Managing new Harness Application setup in Git brings deployment
    closer to developers. It enables them to live in their code.</p><p>With Harness
    Git support, developers don&#39;t need to check deployment status in the Harness
    Manager UI. For example, they can use <a href="/article/tm0w6rruqv-harness-api">Harness
    GraphQL</a>. Here&#39;s a simple Pipeline executions query and result:</p><pre
    class="hljs apache">{<br/>  executions(<br/>    filters: [<br/>      { pipeline:
    { operator: EQUALS, values: [&#34;Kn3X_70dQy-VY-Wt2b2qVw&#34;] } }<br/>    ]<br/>    limit:
    30<br/>  ) {<br/>    pageInfo {<br/>      total<br/>    }<br/>    nodes {<br/>      id<br/>    }<br/>  }<br/>}<br/>...<br/>{<br/>  &#34;data&#34;:
    {<br/>    &#34;executions&#34;: {<br/>      &#34;pageInfo&#34;: {<br/>        &#34;total&#34;:
    1303<br/>      },<br/>      &#34;nodes&#34;: [<br/>        {<br/>          &#34;id&#34;:
    &#34;tbdwrYw5RS2bEERFEQ6oiA&#34;<br/>        },<br/>        {<br/>          &#34;id&#34;:
    &#34;JhzVnLFMT5Wxlws-2hu18A&#34;<br/>        },<br/>        {<br/>          &#34;id&#34;:
    &#34;j-Oe2VUASsSmWo4ALzQGzg&#34;<br/>        },<br/>...<br/>      ]<br/>    }<br/>  }<br/>}</pre><p>In
    addition, Harness Application that live in code are reusable and versioned. If
    anything breaks, there is a working version to revert back to.</p><h3>Next Steps</h3><ul><li>
    <a href="/article/xerirloz9a-add-a-trigger-2">Triggers</a></li><li> <a href="/article/tm0w6rruqv-harness-api">Harness
    API</a></li><li><a href="/article/khbt0yhctx-harness-git-ops">Harness Git Integration
    Overview</a></li></ul><p></p>'
  slug: onboard-teams-using-git-ops
  tags: []
  is_live: true
