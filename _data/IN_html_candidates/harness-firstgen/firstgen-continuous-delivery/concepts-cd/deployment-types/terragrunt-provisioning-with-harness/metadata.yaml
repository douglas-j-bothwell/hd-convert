type: article
article_id: a6onutvbem
user_id: mfr0nxh4be
category_id: vbcmo6ltg7
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Terragrunt Provisioning with Harness
slug: terragrunt-provisioning-with-harness
description: "Harness lets you use Terragrunt to provision infrastructure as part
  of your deployment process. Harness can provision any resource that is supported
  by Terragrunt and the related Terraform provider or plugin. \n\nOnce Harness provisions
  the target infrastructure using Terragrunt and Terraform, Harness can deploy to
  it, all in the same Workflow."
short_version: Harness lets you use Terragrunt to provision infrastructure as part
  of your deployment process.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-07T00:00:16.170544Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Terragrunt Provisioning with Harness
  description: "Harness lets you use Terragrunt to provision infrastructure as part
    of your deployment process. Harness can provision any resource that is supported
    by Terragrunt and the related Terraform provider or plugin. \n\nOnce Harness provisions
    the target infrastructure using Terragrunt and Terraform, Harness can deploy to
    it, all in the same Workflow."
  short_version: Harness lets you use Terragrunt to provision infrastructure as part
    of your deployment process.
  body: '<p>Harness lets you use <a href="https://terragrunt.gruntwork.io/" target="_blank">Terragrunt</a>
    to provision infrastructure as part of your deployment process. Harness can provision
    any resource that is supported by Terragrunt and the related Terraform <a href="https://www.terraform.io/docs/configuration/providers.html"
    target="_blank">provider or plugin</a>.</p><p>Once Harness provisions the target
    infrastructure using Terragrunt and Terraform, Harness can deploy to it, all in
    the same Workflow.</p><p>You can also simply provision non-target infrastructure
    without deploying to it.</p><p>If you want to use Terraform without Terragrunt,
    Harness supports that, too. See <a href="/article/hh52ews03d-terraform-provisioning-with-harness">Terraform
    Provisioning with Harness</a> and <a href="/article/9pvvgcdbjh-terrform-provisioner">Terraform
    How-tos</a>.</p><div class="note-callout">Looking for How-tos? See <a href="/article/a9e63yqb2j-terragrunt-how-tos">Terragrunt
    How-tos</a>.</div><p>In this topic:</p><ul><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#terragrunt_target_infrastructure_provisioning">Terragrunt
    Target Infrastructure Provisioning</a></li><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#use_terragrunt_for_non_target_provisioning">Use
    Terragrunt for Non-target Provisioning</a></li><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#limitations">Limitations</a></li><li><a
    href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#permissions">Permissions</a></li><li><a
    href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#supported_terraform_versions_with_terragrunt">Supported
    Terraform Versions with Terragrunt</a></li><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#no_artifact_required">No
    Artifact Required</a></li><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#service_instances_s_is_consumption">Service
    Instances (SIs) Consumption</a></li><li><a href="https://docs.harness.io/article/a6onutvbem-terragrunt-provisioning-with-harness#next_steps">Next
    Steps</a></li></ul><h3>Terragrunt Target Infrastructure Provisioning</h3><p>Here
    is a visual summary of how you use your and Terragrunt and Terraform files with
    Harness to provision target infra and then deploy to it:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/a6onutvbem/1618962617102/image.png"/></figure><p>Here&#39;s
    a 6 minute video walkthrough of the process:</p><p></p><div class="hd--embed"
    data-provider="YouTube" data-thumbnail="https://i.ytimg.com/vi/HYSi2LAaYdc/hqdefault.jpg"><iframe
    width="200" height="150" src="https://www.youtube.com/embed/HYSi2LAaYdc?feature=oembed"
    frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media;
    gyroscope; picture-in-picture" allowfullscreen=""></iframe></div><p>You set up
    a Terragrunt deployment in the following order:</p><ol><li><strong>Terragrunt</strong>
    <strong>Infrastructure Provisioner</strong> — Add your Terragrunt config file(s)
    (.hcl) as a Harness Terragrunt Provisioner. You add the Terragrunt file(s) by
    connecting to a Git repo where the files are kept.</li><li><strong>​Infrastructure
    Definition</strong> — You use the Terragrunt Infrastructure Provisioner to define
    a deployment target infrastructure.<br/>In a Harness Infrastructure Definition,
    you select the Terragrunt Infrastructure Provisioner you set up and map specific
    Terraform outputs to the required Infrastructure Definition settings.<br/>With
    Terragrunt, the outputs will be in the Terraform module the Terragrunt config
    file points to (<code>source</code>).</li><li><strong>Workflow Setup</strong> —
    When you create your Workflow, you select the Infrastructure Definition that maps
    to your outputs. You might add it in the main Workflow settings or in the settings
    within a Workflow Phase. Either way, the Infrastructure Definition mapped to your
    Terragrunt/Terraform files is the deployment target for the Workflow.</li><li><strong>Workflow
    Provisioner Step</strong> — In the Workflow, you add a <strong>Terragrunt</strong>
    <strong>Provisioner</strong> pre-deployment step that uses the same Terragrunt
    Infrastructure Provisioner. The Workflow will build the infrastructure according
    to your Terragrunt and Terraform files.</li><li><strong>During</strong> <strong>Pre-deployment
    execution</strong> — The pre-deployment steps are executed and provision the target
    infrastructure using the <strong>Terragrunt</strong> <strong>Provisioner</strong> step.</li><li><strong>Deployment</strong> —
    The Workflow deploys your application to the provisioned infrastructure.</li></ol><p>See
    <a href="/article/a9e63yqb2j-terragrunt-how-tos">Terragrunt How-tos</a>.</p><h3>Use
    Terragrunt for Non-target Provisioning</h3><p>You can use Terragrunt in Harness
    to provision any infrastructure, not just the target infrastructure for the deployment.</p><p>In
    this use case, you simply add the Terragrunt Provision step to your Workflow and
    it runs some Terragrunt commands to provision some non-target resources in your
    infrastructure.</p><p>You do not need to deploy artifacts via Harness Services
    to use Terragrunt provisioning in a Workflow. You can simply set up a Terragrunt
    Provisioner and use it in a Workflow to provision infrastructure without deploying
    any artifact.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/a6onutvbem/1618962645543/image.png"/></figure><p>See
    <a href="/article/jbzxpljhlo-provision-using-the-terragrunt-provision-step">Provision
    using the Terragrunt Provision Step</a>.</p><h3>Limitations</h3><ul><li>Terragrunt
    Infrastructure Provisioners are only supported in Canary and Multi-Service deployment
    types.</li><li>For AMI/ASG and ECS deployments, Terragrunt Infrastructure Provisioners
    are also supported in Blue/Green deployments.</li></ul><h3>Permissions</h3><p>You
    need to give Harness permissions in your target environment so Harness can provision
    using Terraform. These are the same permissions you would need to grant Harness
    for existing, static infrastructures.</p><p>The permissions required for Harness
    to use your provisioner and successfully deploy to the provisioned instances depends
    on the deployment platform you use.</p><p>As a summary, you will need to manage
    the following permissions:</p><ul><li><strong>Harness User Groups:</strong> to
    set up Terragrunt in Harness your Harness User Groups needs CRUD Application permissions
    for the Harness Application(s) that will use Terragrunt:<ul><li><strong>Provision
    Type:</strong> Provisioners.</li><li><strong>Application:</strong> All Applications
    that you want to use with Terragrunt.</li><li><strong>Filter:</strong> All Provisioners.</li><li><strong>Action:</strong>
    Create, Read, Update, Delete.<br/>See <a href="/article/ven0bvulsj-users-and-permissions">Managing
    Users and Groups (RBAC)</a>.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/a6onutvbem/1619114140627/image.png"/></figure></li></ul></li><li><strong>Delegate</strong>:
    the Harness Delegate will require permissions according to the deployment platform.
    It will use any access, secret, and SSH keys you configure in Harness <a href="https://docs.harness.io/article/au38zpufhr-secret-management">Secrets
    Management</a> to perform deployment operations. For ECS Delegates, you can add
    an IAM role to the ECS Delegate task definition. For more information, see  <a
    href="https://docs.harness.io/article/wrm6hpyrjl-harness-ecs-delegate#trust_relationships_and_roles">Trust
    Relationships and Roles</a>.</li><li><strong>Cloud Provider</strong>: the Harness
    Cloud Provider must have access permissions for the resources you are planning
    to create using Terragrunt and Terraform. For some Harness Cloud Providers, you
    can use the installed Delegate and have the Cloud Provider assume the permissions
    used by the Delegate. For others, you can enter cloud platform account information.</li></ul><div
    class="note-callout">The account used for the Cloud Provider will require platform-specific
    permissions for creating infrastructure. For example, to create EC2 AMIs the account
    requires the <strong>AmazonEC2FullAccess</strong> policy.</div><ul><li><strong>Git
    Repo</strong>: you will add the Git repo(s) where the Terragrunt and Terraform
    files are located to Harness as a Source Repo Provider. For more information,
    see  <a href="https://docs.harness.io/article/ay9hlwbgwa-add-source-repo-providers">Add
    Source Repo Providers</a>.</li><li><strong>Access and Secret Keys</strong>: if
    needed, these are set up in Harness <a href="https://docs.harness.io/article/au38zpufhr-secret-management">Secrets
    Management</a> and then used as variable values when you add a Provisioner step
    to a Workflow.</li><li><strong>SSH Key</strong>: in some cases, in order for the
    Delegate to copy artifacts to the provisioned instances, it will need an SSH key.
    You set this up in Harness Secrets Management and then reference it in the Harness
    Environment Infrastructure Definition. See <a href="https://docs.harness.io/article/au38zpufhr-secret-management">Secrets
    Management</a>.</li><li><strong>Platform Security Groups</strong>: security groups
    are associated with EC2 and other cloud platform instances and provide security
    at the protocol and port access level. If needed, you will need to define security
    groups in your provisioner scripts and ensure that they allow the Delegate to
    connect to the provisioned instances.</li></ul><h3>Supported Terraform Versions
    with Terragrunt</h3><p>The following recommendations are from <a href="https://terragrunt.gruntwork.io/docs/getting-started/supported-terraform-versions/"
    target="_blank">Terragrunt</a>. In practice, as Terragrunt notes, the version
    compatibility is more relaxed.</p><p></p><table><tbody><tr><td><p><strong>Terraform
    Version</strong></p></td><td><p><strong>Terragrunt Version</strong></p></td></tr><tr><td><p>0.14.x</p></td><td><p>&gt;=
    0.27.0</p></td></tr><tr><td><p>0.13.x</p></td><td><p>&gt;= 0.25.0</p></td></tr><tr><td><p>0.12.x</p></td><td><p>0.19.0
    - 0.24.4</p></td></tr><tr><td><p>0.11.x</p></td><td><p>0.14.0 - 0.18.7</p></td></tr></tbody></table><h3>No
    Artifact Required</h3><p>You do not need to deploy artifacts via Harness Services
    to use Terragrunt provisioning in a Workflow. You can simply set up a Terragrunt
    Provisioner and use it in a Workflow to provision infrastructure without deploying
    any artifact. In Harness documentation, we include artifact deployment as it is
    the ultimate goal of Continuous Delivery.</p><h3>Service Instances (SIs) Consumption</h3><p>Harness
    Service Instances (SIs) are not consumed and no additional licensing is required
    when a Harness Workflow uses Terragrunt to provision resources.</p><p>When Harness
    deploys artifacts via Harness Services to the provisioned infrastructure in the
    same Workflow or Pipeline, SIs licensing is consumed.</p><h3>Auto-Approve and
    Force Option Support</h3><p></p><div class="note-callout">Currently <code>auto-approve</code>
    option support is behind the feature flag <code>TG_USE_AUTO_APPROVE_FLAG</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</div><p>By default, Harness uses the <code>force</code>
    option with <code>terraform apply -destroy</code>. </p><p>The <code>force</code>
    option is deprecated in Terraform version 0.15.0 and greater. Consequently, Harness
    will use the <code>auto-approve</code> option if you are using Terraform version
    0.15.0 and greater. </p><p>If you are using a Terraform version earlier than Terraform
    version 0.15.0, Harness will continue to use <code>force</code>.</p><h3>Next Steps</h3><p>Get
    started with <a href="/article/a9e63yqb2j-terragrunt-how-tos">Terragrunt How-tos</a>.</p><p></p>'
  slug: terragrunt-provisioning-with-harness
  tags: []
  is_live: true
