type: article
article_id: zy4h4ch6dh
user_id: xwmdbyp4x8
category_id: 8nywcs2sa7
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: 'Tutorial 2: Integrated STO Pipelines with CI/CD'
slug: sto-tutorial-2-integrated-sto-ci-cd-workflows
description: 'This tutorial builds on Tutorial 1: Standalone STO Workflows. You need
  to complete Tutorial 1 first. The Pipeline you created in Tutorial 1 is an example
  of a stand-alone STO workflow. It scans a tes…'
short_version: 'This tutorial builds on Tutorial 1: Standalone STO Workflows. You
  need to complete Tutorial 1 first. The Pipeline you created in Tutorial 1 is an
  example of a stand-alone STO workflow. It scans a tes…'
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-21T21:58:34.051656Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: 'Tutorial 2: Integrated STO Pipelines with CI/CD'
  description: ""
  short_version: ""
  body: '<p>This tutorial builds on <a href="https://docs.harness.io/article/yvy4pmt8bw"
    target="_blank">Tutorial 1: Standalone STO Workflows</a>. You need to complete
    Tutorial 1 first.</p><p>The Pipeline you created in Tutorial 1 is an example of
    a stand-alone STO workflow. It scans a test target and reports on the vulnerabilities,
    but doesn&#39;t do anything else.</p><p>In this section, you&#39;ll learn how
    to integrate STO functionality into CI and CD Pipelines. The core benefit of STO
    in an integrated Pipeline is to fail the Pipeline if a scanner finds any &#34;show-stopper&#34;
    vulnerabilities. The following sections describe the different failure strategies
    you can implement.</p><p>For the list of supported scanners, see <a href="https://docs.harness.io/article/0k0iubnzql"
    target="_blank">Security Step Settings Reference</a>.</p><h3>Review: Ingestion
    Workflows</h3><p>STO supports three different workflows to ingest scan results
    into a pipeline:</p><ul><li><a href="#orchestrated_workflows">Orchestrated workflows</a>
    — A Security step runs a scan with predefined settings and ingests the results.
    </li><li><a href="#ingestion-only-workflows">Ingestion-Only workflows</a> — Run
    a scan in a Run step, or outside the pipeline, and save in a shared folder. A
    Security step then ingests the results.</li><li> <a href="#data-load-workflows">Data-Load
    workflows</a> — A Security step downloads and ingests results from an external
    scanner.</li></ul><h3>Fail Pipelines on Severity</h3><div class="note-callout"><strong>Key
    Concept: Fail on Severity</strong><br/>Every Security Step supports a <code>fail_on_severity</code>
    setting. If any vulnerability with the specified severity or higher is found,
    the Pipeline fails. It is good practice to include this setting in every Security
    Step in an integrated Pipeline.</div><ol><li>In the Pipeline Studio, open the
    <strong>STO Quickstart</strong> pipeline &gt; <strong>STOLAB</strong> stage &gt;
    <strong>bandit</strong> step.</li><li>Under <strong>Settings</strong>, add the
    following: <code>fail_on_severity</code> = <code>CRITICAL</code></li><li>Click
    <strong>Apply Changes</strong>, save the updated pipeline, and run a new build
    with the <strong>DEMO-001</strong> branch.<br/>The pipeline now fails because
    the bandit step is now configured to fail on any vulnerability with a severity
    of low or higher. The last log message in the bandit step log is:<pre class="hljs
    bash">Exited with message: fail_on_severity is set to CRITICAL and that threshold
    was reached.</pre><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659137645262/02-tests-demo-001-failed-severity-low.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure></li></ol><h3>Exemptions
    for Specific Issues</h3><div class="note-callout"><strong>Key Concept: Issue Exemptions</strong><br/>In
    some cases, developers might want to create &#34;ignore rules&#34; that override
    the <code>fail_on_severity</code> setting. If an issue is marked as Ignored, it
    will not fail the Pipeline.<br/>Developer users cannot create Ignore Rules; only
    SecOps users have this permission.</div><p>You&#39;re now acting as a Security
    Officer. A developer has sent a request to add two Ignore Rules to unblock their
    Pipeline temporarily. Do the following:</p><ol><li>Go to the Security Tests page
    for the build you ran previously: Click <strong>Security Tests</strong> and then
    <strong>Test Targets</strong>. Then click the previous build you ran before the
    failed build.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659138631300/02-a-tests-demo-001-goto-previous-branch.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure></li><li>In
    the <strong>Security Tests</strong> tab, go to the list of detected issues (bottom
    left). For each of the two critical issues, do the following:<ol><li>Click in
    the row to open the Issue Details pane.</li><li>Click the <strong>Ignore Issue</strong>
    button.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659108419315/01-c-tests-demo-001-branch-ignore-issue.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659108396757/01-d-tests-demo-001-branch-ignore-issue.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure></li></ol></li><li>Run
    another build with the DEMO-001 branch. When the build finishes, go to the <strong>Security
    Tests</strong> page.<br/>The Pipeline now finishes successfully, but the ignored
    issues still appear in the issues list with Status = Ignored.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659204960237/exemption-dev-001-results-with-critical-ignored.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure></li><li>Go
    to <strong>Security Tests</strong> &gt; <strong>Security Review</strong>. This
    page includes the Ignore Rules you just created. Click <strong>Cancel Ignore</strong>
    for both issues.</li></ol><h3>Next Steps</h3><p>You&#39;ve now learned the core
    STO features and workflows. Here are the next steps you can take.</p><h4>Add More
    Scanner Steps</h4><p>STO supports an extensive set of external scanners for repos,
    images, and artifacts. See <a href="https://docs.harness.io/article/0k0iubnzql"
    target="_blank">Security Steps Reference</a>.</p><h4>Add Steps or Stages for CI/CD
    Workflows</h4><p>You know how to implement Pipelines when scanners detect security
    issues, and how to create Ignore Rules for specific issues. Once you set up your
    Security Steps, Baselines, and Ignore Rules, you can add more Stages and Steps
    to implement your CI/CD workflows.</p><h4>Add Governance Policies</h4><p>You can
    use the <a href="https://docs.harness.io/article/1d3lmhv4jl">Harness Policy Engine</a>
    to create policies based on the <a href="https://www.openpolicyagent.org/" target="_blank">Open
    Policy Agent (OPA)</a> standard. For example, you could create a rule like the
    following to ensure that all Pipelines include a Security Stage.</p><pre>package
    pipeline_required<br/><br/># Deny pipelines that are missing required steps<br/>deny[sprintf(&#34;CI
    stage &#39;%s&#39; is missing required step &#39;%s&#39;&#34;, [stage.name, existing_steps])]
    { <br/>     stage = input.pipeline.stages[i].stage                                #
    Find all stages ... <br/>     stage.type == &#34;CI&#34;                                                    #
    ... that are CI Stages<br/>     existing_steps := [ s | s = stage.spec.execution.steps[_].step.type
    ] # ... and create a list of all step types in use <br/>     required_step :=
    required_steps[_]                                    # For each required step
    ... <br/>     not contains(existing_steps, required_step)                           #
    ... check if it&#39;s present in the existing steps<br/>}<br/><br/># Steps that
    must be present in every CI Stage - try to create a CI Stage without a Security
    Step to see the policy fail<br/>required_steps = [&#34;Security&#34;]<br/><br/>contains(arr,
    elem) { <br/>    arr[_] = elem<br/>}</pre><h4>Add Failure Strategies to a CI/CD
    Stage</h4><p>You can implement <a href="https://docs.harness.io/article/0zvnn5s1ph"
    target="_blank">Failure Strategies</a> to bypass the failure policies in previous
    Security steps. One use case for this would be to enable manual interventions
    when a Security Step generates a failure. You could set up a workflow like this:</p><ol><li>A
    Build Step is downstream from the Security Step. It has a Failure Strategy that&#39;s
    set to run on <a href="https://docs.harness.io/article/htrur23poj#error_types"
    target="_blank">All Errors</a>.</li><li> The scanner detects issues and the Security
    Step generates an error.</li><li>The Failure Strategy in the Build Step initiates
    a 30-minute pause before proceeding.</li><li>The developer and security team evaluate
    the issues and then abort the Pipeline or allow it to proceed.</li></ol><h3>Integrated
    STO/CI Workflow Example</h3><p>The following Pipeline provides a simple example
    of how you can implement STO into a CI workflow. This is an expanded version of
    the standalone STO Stage we have been working with. The <a href="https://docs.harness.io/article/qhgshfw3mg#integrated_workflow_yaml">YAML</a>
    of this pipeline is provided below.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659290775295/integrated-workflow-pipeline.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><p>This
    Pipeline works as follows:</p><ol><li>The <strong>owasp scan</strong> step has
    <code>fail_on_severity</code> set to <code>HIGH</code>. It scans the <strong>master</strong>
    branch of the <a href="https://github.com/anxolerd/dvpwa">dvpwa</a> repo and detects
    one Critical issue, which results in an error.</li><li>The <strong>Build Image</strong>
    step is set up to build (but not push) an image from the dvpwa repo. It has a
    Failure Strategy that responds to the error from owasp as follows:<ol><li>Pauses
    the pipeline and waits for you to choose what to do. You examine the detected
    issues and decide if you want to proceed.</li><li>If you don&#39;t choose to proceed
    after 20 minutes, the pipeline aborts.</li></ol></li><li>If you click Proceed,
    the <strong>Build Image</strong> step builds an image from the repo.</li><li>The
    <strong>aqua-trivy</strong> step also has <code>fail_on_severity</code> set to
    <code>HIGH</code>. It scans the resulting image, detects issues with high and
    critical severities and generates an error, which causes the pipeline to fail.</li></ol><p>You
    can view all issues from all scanners in the <strong>Security Tests</strong> tab,
    and also filter the issue list by scanner.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659295566043/integrated-workflow-scan-results.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><p></p><h3>Congratulations!</h3><p>In
    this tutorial, you learned how to:</p><ol><li>Add a STO Security stage to your
    Harness Pipelines.</li><li>Configure Security steps for different security scanners:
    one for code scanning and one for container scanning.</li><li>Run a Pipeline and
    scan its codebase and the container image.</li><li>View the normalized and deduplicated
    security results in the Security dashboard.</li></ol><h3>Integrated Workflow YAML</h3><p>Here&#39;s
    the YAML of the <a href="https://docs.harness.io/article/yvy4pmt8bw" target="_blank">integrated
    workflow example</a> we examined previously.</p><pre class="hljs yaml">pipeline:<br/>    name:
    quickstart-integrated-pipeline<br/>    identifier: quickstartintegratedpipeline<br/>    projectIdentifier:
    STO<br/>    orgIdentifier: default<br/>    tags: {}<br/>    properties:<br/>        ci:<br/>            codebase:<br/>                connectorRef:
    $CODEBASE_CONNECTOR<br/>                build: &lt;+input&gt;<br/>    stages:<br/>        -
    stage:<br/>              name: Docker Build and Scan<br/>              identifier:
    Docker_Build_and_Scan<br/>              type: CI<br/>              spec:<br/>                  cloneCodebase:
    true<br/>                  infrastructure:<br/>                      type: KubernetesDirect<br/>                      spec:<br/>                          connectorRef:
    $K8S_CONNECTOR<br/>                          namespace: harness-delegate-ng<br/>                          automountServiceAccountToken:
    true<br/>                          nodeSelector: {}<br/>                          os:
    Linux<br/>                  sharedPaths:<br/>                      - /var/run<br/>                  serviceDependencies:<br/>                      -
    identifier: dind<br/>                        name: dind<br/>                        type:
    Service<br/>                        spec:<br/>                            connectorRef:
    $DOCKER_CONNECTOR<br/>                            image: docker:dind<br/>                            privileged:
    true<br/>                            entrypoint:<br/>                                -
    dockerd-entrypoint.sh<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: Security<br/>                                name:
    owasp scan<br/>                                identifier: owasp_scan<br/>                                spec:<br/>                                    privileged:
    true<br/>                                    settings:<br/>                                        policy_type:
    orchestratedScan<br/>                                        scan_type: repository<br/>                                        repository_project:
    nodegoat<br/>                                        repository_branch: &lt;+codebase.branch&gt;<br/>                                        product_name:
    owasp<br/>                                        product_config_name: default<br/>                                        fail_on_severity:
    HIGH<br/>                                    imagePullPolicy: Always<br/>                                failureStrategies:<br/>                                    -
    onFailure:<br/>                                          errors:<br/>                                              -
    AllErrors<br/>                                          action:<br/>                                              type:
    Ignore<br/>                          - step:<br/>                                type:
    Run<br/>                                name: Build Image<br/>                                identifier:
    Build_Docker_Image<br/>                                spec:<br/>                                    connectorRef:
    $DOCKER_CONNECTOR<br/>                                    image: docker:latest<br/>                                    shell:
    Sh<br/>                                    command: |-<br/>                                        docker
    build .  -f Dockerfile.app -t nodegoat:local<br/>                                    privileged:
    true<br/>                                when:<br/>                                    stageStatus:
    All<br/>                                failureStrategies:<br/>                                    -
    onFailure:<br/>                                          errors:<br/>                                              -
    AllErrors<br/>                                          action:<br/>                                              type:
    ManualIntervention<br/>                                              spec:<br/>                                                  timeout:
    20m<br/>                                                  onTimeout:<br/>                                                      action:<br/>                                                          type:
    Abort<br/>                          - step:<br/>                                type:
    Security<br/>                                name: aqua-trivy scan<br/>                                identifier:
    aqua_trivy_scan<br/>                                spec:<br/>                                    privileged:
    true<br/>                                    settings:<br/>                                        product_name:
    aqua-trivy<br/>                                        product_config_name: aqua-trivy<br/>                                        policy_type:
    orchestratedScan<br/>                                        scan_type: container<br/>                                        container_type:
    local_image<br/>                                        container_domain: docker.io<br/>                                        container_project:
    nodegoat<br/>                                        container_tag: local<br/>                                        fail_on_severity:
    HIGH<br/>                                    imagePullPolicy: Always<br/>                                failureStrategies:
    []<br/>              variables:<br/>                  - name: sto_api_key<br/>                    type:
    Secret<br/>                    value: &lt;+input&gt;<br/></pre><p></p><h3>Congratulations!</h3><p>In
    this tutorial you&#39;ve learned how to use STO to protect repos, images, and
    artifacts from vulnerabilities automatically.</p><h3>See Also</h3><ul><li><a href="https://docs.harness.io/article/cjqnd71y07"
    target="_blank">STO Ingestion Workflows</a></li><li><a href="https://docs.harness.io/article/wk018r6x3g">Run
    an Orchestrated Scan in an STO Pipeline</a></li><li><a href="https://docs.harness.io/article/wk018r6x3g"
    target="_blank">Ingest Scan Results into an STO Pipeline</a></li><li><a href="https://docs.harness.io/article/0k0iubnzql"
    target="_blank">Security Step Settings Reference</a></li></ul><p></p>'
  slug: sto-tutorial-2-integrated-sto-ci-cd-workflows
  tags: []
  is_live: true
