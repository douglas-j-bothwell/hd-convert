type: article
article_id: qhgshfw3mg
user_id: xwmdbyp4x8
category_id: ujh4aicx40
author:
  name: Doug Bothwell
  email: douglas.bothwell@harness.io
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: DRAFT DOC-1766 STO Quickstart
slug: sto-quickstart
description: This quickstart shows you how to use the Harness Security Testing Orchestration
  (STO) module to perform code security scanning in a Harness Pipeline. You'll go
  through the end-to-end STO workflow wit…
short_version: This quickstart shows you how to use the Harness Security Testing Orchestration
  (STO) module to perform code security scanning in a Harness Pipeline. You'll go
  through the end-to-end STO workflow wit…
tags: []
show_toc: true
is_private: false
is_published: false
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-30T11:38:47.174839Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: DRAFT DOC-1766 STO Quickstart
  description: ""
  short_version: ""
  body: '<p></p><p>This quickstart shows you how to use the Harness Security Testing
    Orchestration (STO) module to perform code security scanning in a Harness Pipeline.
    You&#39;ll go through the end-to-end STO workflow with one scanner. When you complete
    this Quickstart, you&#39;ll be able to add more scanners to your pipelines and
    take full advantage of STO.</p><p>For this quickstart we&#39;ll add a STO stage
    with its steps to a Harness Pipeline. You don&#39;t need to create your own Pipeline.
    We&#39;ll give you the YAML for the Pipeline and then take you through updating
    it and then running it.</p><p>Let&#39;s get started!</p><h3>Objectives</h3><p>You&#39;ll
    learn how to:</p><ol><li>Add an STO Stage to a Pipeline.</li><li>Add a scanner
    to your Stage, configure it, and define the target to scan (in this case, a development
    branch).</li><li>Run the Pipeline and analyze the security issues found by the
    scanner.</li><li>Create a baseline branch and use the baseline to identify new
    vs. inherited issues in the development branch.</li><li>View issue details in
    the Harness UI and use these details to identify and resolve issues in your code.</li><li>Create
    exemptions to exclude specific vulnerabilities from your scan results (SecOps
    users only).</li></ol><h3>Before You Begin</h3><p>Make sure you have the following
    set up before you begin this quickstart:</p><ul><li><strong>Github account:</strong>
    this quickstart clones a codebase from a Github repo. You will need a Github account
    with a username and Personal Access Token (PAT) so Harness can connect to Github.
    The PAT scope is covered below.</li><li><strong>Docker Hub account:</strong> the
    Pipeline pulls the Docker in Docker <strong>docker:dind</strong> image from Docker
    Hub. <ul><li>The Pipeline in this quickstart does not actually push a Docker image.
    You do not need a Docker Hub repo, just an account.</li></ul></li><li><strong>Kubernetes
    cluster for Harness Delegate and scanning infrastructure:</strong><ul><li>You&#39;ll
    need a Kubernetes cluster for Harness to use for the Harness Delegate and as the
    Security Testing Orchestration scanning infrastructure. Ensure you have a cluster
    that meets the following requirements:<ul><li>Number of pods: 3 (two pods for
    the Harness Delegate, the remaining pod for scanning infrastructure).</li><li>Machine
    type: 4vCPU.</li><li>Memory: 16GB RAM. The scanning infrastructure and Delegate
    requirements are low but the remaining memory is for Kubernetes, the Docker container,
    and other default services.</li><li>Networking: outbound HTTPS for the Harness
    connection, and to connect to Docker Hub. Allow TCP port 22 for SSH.</li><li>Namespace:
    when you install the Harness Delegate, it will create the <strong>harness-delegate</strong>
    namespace. You&#39;ll use the same namespace for the scanning infrastructure.</li><li>A
    Kubernetes service account with permission to create entities in the target namespace
    is required. The set of permissions should include <strong>list</strong>, <strong>get</strong>,
    <strong>create</strong>, and <strong>delete permissions</strong>. In general,
    the <strong>cluster-admin</strong> role or a namespace <em>admin</em> permission
    is enough. For more information, see <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles">User-Facing
    Roles</a> from Kubernetes.</li></ul></li></ul></li></ul><p></p><div class="note-callout">Google
    Kubernetes Engine (GKE) <a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview">Autopilot</a>
    is not supported at this time.</div><h3>Review: Scanner Coverage</h3><p>See <strong>Security
    Testing Orchestration</strong> in <a href="/article/1e536z41av-supported-platforms-and-technologies">Supported
    Platforms and Technologies</a>.</p><h3>Account and Pipeline Setup</h3><h4>Setup:
    Add the SecOps Role to Your User Profile</h4><p>Harness includes two RBAC roles
    specifically for STO users:</p><ul><li><strong>Developer</strong> role -- Permissions
    needed for developer workflows.</li><li><strong>SecOps</strong> role -- All the
    permissions needed for developer workflows. A SecOps user can also approve security
    exemptions, which are covered in part 2 of this Quickstart.</li></ul><p>To complete
    part 2 of this Quickstart, you need to add the SecOps role to your user profile.
    Do the following:</p><ol><li>Click <strong>Account Settings</strong> (left menu)
    &gt; <strong>Access Control</strong>.</li><li>In the <strong>Users</strong> table,
    click your user profile.</li><li>Under Role Bindings, click +Role.</li><li>Add
    the <strong>Security Testing SecOps</strong> role to your user profile.</li></ol><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1658601251263/00-add-secops-role.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p></p><h4>Add
    the Pipeline using YAML</h4><ul><li>Log into Harness.</li><li>If you do not already
    have a Harness Project, click <strong>Projects</strong>, and then click <strong>New
    Project</strong>.</li><li>Name the Project <strong>Security Testing Orchestration</strong>
    and click <strong>Save and Continue</strong>.</li><li>In <strong>Invite Collaborators</strong>,
    click <strong>Save and Continue</strong>.</li><li>In <strong>Which Harness module
    would you like to start using for this project</strong>, click <strong>Security
    Tests</strong>, and then <strong>Go to Module</strong>.<br/>Your new Project appears.</li><li>Click
    <strong>Pipelines</strong>, and then <strong>New Pipeline</strong>.</li><li>In
    <strong>Name</strong>, enter <strong>STOLAB</strong>, and click <strong>Start</strong>.<br/>Tour
    new Pipeline appears. Now let&#39;s add the Pipeline settings using YAML.</li><li>Click
    <strong>YAML</strong> (1), and then in YAML editor, click <strong>Edit YAML</strong>
    (2).</li></ul><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647895096886/clean-shot-2022-03-21-at-13-37-33.png"/></figure><p></p><ul><li>Select
    all the YAML, delete it, and then paste the following YAML:</li></ul><div class="note-callout">We
    use the Harness <strong>default</strong> Organization that is included in all
    accounts. If you use a different Org, simply update <code>orgIdentifier: default</code>
    with the other Org Id.</div><pre>pipeline:<br/>    name: STOLAB<br/>    identifier:
    STOLAB<br/>    projectIdentifier: Security_Testing_Orchestration<br/>    orgIdentifier:
    default<br/>    tags: {}<br/>    properties:<br/>        ci:<br/>            codebase:<br/>                connectorRef:
    &lt;+input&gt;<br/>                build: &lt;+input&gt;<br/>    stages:<br/>        -
    stage:<br/>              name: STOLAB<br/>              identifier: STOLAB<br/>              type:
    SecurityTests<br/>              spec:<br/>                  cloneCodebase: true<br/>                  infrastructure:<br/>                      type:
    KubernetesDirect<br/>                      spec:<br/>                          connectorRef:
    Quickstart<br/>                          namespace: harness-delegate-ng<br/>                          automountServiceAccountToken:
    true<br/>                          nodeSelector: {}<br/>                          os:
    Linux<br/>                  sharedPaths:<br/>                      - /var/run<br/>                  serviceDependencies:<br/>                      -
    identifier: dind<br/>                        name: dind<br/>                        type:
    Service<br/>                        spec:<br/>                            connectorRef:
    account.harnessImage<br/>                            image: docker:dind<br/>                            privileged:
    true<br/>                            entrypoint:<br/>                                -
    dockerd-entrypoint.sh<br/>                            imagePullPolicy: IfNotPresent<br/>                  execution:<br/>                      steps:<br/>                          -
    parallel:<br/>                                - step:<br/>                                      type:
    Security<br/>                                      name: bandit<br/>                                      identifier:
    bandit<br/>                                      spec:<br/>                                          connectorRef:
    account.harnessImage<br/>                                          privileged:
    true<br/>                                          settings:<br/>                                              policy_type:
    orchestratedScan<br/>                                              scan_type:
    repository<br/>                                              repository_project:
    dvpwa<br/>                                              repository_branch: &lt;+codebase.branch&gt;<br/>                                              product_name:
    bandit<br/>                                              product_config_name:
    bandit-default<br/>                                          imagePullPolicy:
    IfNotPresent<br/>                                      failureStrategies: []</pre><ul><li>Click
    <strong>Save</strong>. The Pipeline is updated. Click <strong>Visual</strong>
    to see the Pipeline in the visual editor.</li></ul><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/k726i6gdfa/1656351655668/clean-shot-2022-06-27-at-10-40-46.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p>Now
    that you have a starter Security Testing Orchestration Pipeline, we can update
    a few Connectors and you&#39;ll be reading to run your scans.</p><h4>Update the
    Codebase and Stage Overview</h4><p>We need to update the Stage&#39;s Codebase
    to point to the public repo for our test code at <a href="https://github.com/williamwissemann/dvpwa"
    target="_blank">https://github.com/williamwissemann/dvpwa</a>.</p><p>We&#39;ll
    add a Harness Connector to GitHub using your own credentials, which Harness will
    encrypt and store in the <a href="/article/hngrlb7rd6-harness-secret-manager-overview">Harness
    Secret Manager</a> by default. You can also <a href="/article/hngrlb7rd6-harness-secret-manager-overview"
    target="_blank">add your own Secret Manager to Harness</a>.</p><ul><li>In your
    Stage, click <strong>Codebase</strong>.</li></ul><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903288544/clean-shot-2022-03-21-at-15-54-23.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><ul><li>In
    <strong>Edit Codebase Configuration</strong>, click in <strong>Connector</strong>.</li><li>In
    <strong>Create or Select an Existing Connector</strong>, click <strong>New Connector</strong>.</li><li>Enter
    the following settings.</li></ul><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647902673403/clean-shot-2022-03-21-at-15-44-27.png"/></figure></td><td><ul><li>Click
    <strong>GitHub Connector</strong>.</li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647902722434/clean-shot-2022-03-21-at-15-45-14.png"/></figure></td><td><ul><li><strong>Name:</strong>
    GitHub.</li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647902766074/clean-shot-2022-03-21-at-15-45-58.png"/></figure></td><td><ul><li><strong>URL
    Type:</strong> Repository</li><li><strong>Connection Type:</strong> HTTP</li><li><strong>GitHub
    Repository URL:</strong> https://github.com/williamwissemann/dvpwa</li></ul></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903105365/clean-shot-2022-03-21-at-15-51-35.png"/></figure></td><td><ul><li><strong>Username:</strong>
    Enter your GitHub username.</li><li><strong>Personal Access Token:</strong> Create
    a secret in Harness for a <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
    target="_blank">GitHub PAT</a> that has the following scopes:<ul><li>repo</li><li>admin:repo_hook</li><li>user</li></ul></li></ul></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903182658/clean-shot-2022-03-21-at-15-52-50.png"/></figure></td><td><ul><li>Click
    <strong>Connect through Harness Platform</strong>.</li></ul></td></tr></tbody></table><p></p><ul><li>When
    you&#39;re done, click <strong>Save and Continue</strong>. Harness will test the
    connection and credentials. Click <strong>Finish</strong>.</li><li>Select the
    Connector and click <strong>Apply Selected</strong>.</li><li>In <strong>Edit Codebase
    Configuration</strong>, click <strong>Apply Changes</strong>.</li></ul><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/k726i6gdfa/1656352578695/clean-shot-2022-06-27-at-10-56-09.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><p>The
    codebase is ready. Now you can set up the scanning infrastructure for the Stage.</p><h4>Update
    the Infrastructure</h4><p>You set up the <strong>Infrastructure</strong> for the
    Stage by adding a Kubernetes Cluster Connector to connector to your Kubernetes
    cluster. A Kubernetes Cluster Connector is a platform agnostic connection to any
    Kubernetes cluster.</p><p>You will also add a Harness Delegate to your cluster
    as part of this process. This simply involves logging into your cluster and applying
    a YAML file.</p><ul><li>Click <strong>Infrastructure</strong>.</li><li>Click <strong>Kubernetes</strong>.</li><li>Click
    in <strong>Kubernetes Cluster</strong>.</li><li>In <strong>Create or Select an
    Existing Connector</strong>, click <strong>New Connector</strong>.</li><li>Enter
    the following settings.</li></ul><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903661254/clean-shot-2022-03-21-at-16-00-53.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Quickstart.</li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903732952/clean-shot-2022-03-21-at-16-02-06.png"/></figure></td><td><ul><li>Click
    <strong>Use the credentials of a specific Harness Delegate</strong>.</li></ul><p>If
    you already have a Delegate set up in your Harness account, you can use the <strong>Specify
    master URL and credentials</strong> option.</p><p>This quickstart assumes you
    are new to Harness.</p></td></tr><tr><td><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903894751/clean-shot-2022-03-21-at-16-04-39.png"/></figure></td><td><ul><li>Click
    <strong>Install new Delegate</strong>.</li></ul><p>If you already have a Delegate
    set up in your Harness account, you can use it.</p><p>This quickstart assumes
    you are new to Harness.</p></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647903970202/clean-shot-2022-03-21-at-16-06-03.png"/></figure></td><td><ul><li>Click
    <strong>Kubernetes</strong>.</li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647904099509/clean-shot-2022-03-21-at-16-08-11.png"/></figure></td><td><ul><li><strong>Delegate
    Name:</strong> sto.</li><li><strong>Delegate Size:</strong> Small.</li></ul></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647904168967/clean-shot-2022-03-21-at-16-09-20.png"/></figure></td><td><ul><li>Download
    the YAML file.</li><li>In a Terminal, navigate to the location of the file.</li><li>In
    the same Terminal, log into your cluster and run the following:<br/><code>kubectl
    apply -f harness-delegate.yml</code></li></ul></td></tr></tbody></table><p></p><p>Once
    you apply the YAML file, you&#39;ll see an output like this:</p><pre>% kubectl
    apply -f harness-delegate.yml<br/>namespace/harness-delegate-ng created<br/>clusterrolebinding.rbac.authorization.k8s.io/harness-delegate-ng-cluster-admin
    created<br/>secret/sto-proxy created<br/>statefulset.apps/sto created<br/>service/delegate-service
    created</pre><p></p><p>In the Harness Delegate setup, in <strong>Apply YAML and
    verify connection</strong>, you will see the Delegate register with Harness. This
    can take a few minutes.</p><div class="note-callout">If you encounter errors,
    ensure your cluster can connect outbound to <strong>app.harness.io</strong>. See
    <a href="/article/ooelo06uy5-whitelist-harness-domains-and-ips">Allowlist Harness
    Domains and IPs</a>.</div><ul><li>In <strong>Delegates Setup</strong>, select
    <strong>Only use Delegates with all of the following tags</strong>, select the
    new Delegate, and then click <strong>Save and Continue</strong>.</li><li>In <strong>Connection
    Test</strong>, click <strong>Finish</strong>.</li><li>In the Infrastructure <strong>Namespace</strong>
    setting, enter <strong>harness-delegate-ng</strong> or <strong>default</strong>
    or whatever namespace you want to use.</li></ul><p>Now that you have the scanning
    infrastructure for the Stage set up, we can review the <strong>Execution</strong>.</p><h4>Update
    the Service Dependency</h4><p>Harness STO uses Docker-in-Docker as a dependency.
    You simply need to update <strong>dind</strong> in <strong>Dependencies</strong>
    with a Connector to Docker Hub.</p><ul><li>In the Stage <strong>Execution</strong>,
    in <strong>Dependencies</strong>, click <strong>dind</strong>.</li></ul><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/k726i6gdfa/1656353517634/clean-shot-2022-06-27-at-11-11-42.png"/></figure><ul><li>Click
    in <strong>Container Registry</strong>, and then click <strong>New Connector</strong>.</li><li>Enter
    the following settings.</li></ul><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647905837969/clean-shot-2022-03-21-at-16-37-12.png"/></figure></td><td><ul><li>Click
    <strong>Docker Registry</strong></li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647905870807/clean-shot-2022-03-21-at-16-37-44.png"/></figure></td><td><ul><li><strong>Name:</strong>
    Docker Hub</li></ul></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647905962089/clean-shot-2022-03-21-at-16-39-14.png"/></figure></td><td><ul><li><strong>Docker
    Registry URL:</strong> https://registry.hub.docker.com</li><li><strong>Provider
    Type:</strong> DockerHub</li><li><strong>Authentication:</strong> Anonymous</li></ul></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647905989359/clean-shot-2022-03-21-at-16-39-35.png"/></figure></td><td><ul><li>Select
    the Delegate you added earlier.</li><li>Click <strong>Finish</strong>, and then
    in <strong>Create or Select an Existing Connector</strong>, click <strong>Apply
    Selected</strong>.</li></ul></td></tr></tbody></table><p></p><ul><li>Back in <strong>Configure
    Service Dependency</strong>, in <strong>Image</strong>, enter <strong>docker:dind</strong>,
    and click <strong>Apply Changes</strong>.</li></ul><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/b5jv0vlrvf/1647906110259/clean-shot-2022-03-21-at-16-41-39.png"/></figure><p>Now
    Harness can pull in the Docker-in-Docker image at runtime. Let&#39;s review the
    STO steps.</p><h3>Part 2: Stand-Alone STO Workflows</h3><p>You&#39;re a developer,
    working in various development branches and merging your working into feature,
    release, and main branches. You want to scan your branch for security vulnerabilities
    and make sure you don&#39;t introduce any new vulnerabilities when you merge your
    work into a target branch.</p><p>The Pipeline you just created has one STO Stage
    with one Security Step. This is an example of a stand-alone Pipeline. In Part
    3, you&#39;ll learn how to set up STO Stages to work with CI and CD stages in
    integrated Pipelines.</p><h4>Scan Step Configuration</h4><p>Let&#39;s look at
    the bandit step to see how it&#39;s configured.</p><ul><li>Click the <strong>bandit</strong>
    step.</li></ul><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/k726i6gdfa/1656353613881/clean-shot-2022-06-27-at-11-13-24.png"/></figure><ul><li>Let&#39;s
    review the settings.</li></ul><table><tbody><tr><td><p><strong>Setting</strong></p></td><td><p><strong>Example</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p>policy_type</p></td><td><p>orchestratedScan</p></td><td><p>Indicates
    that this is an orchestrated scan as opposed to a manual scan (manualUpload).</p></td></tr><tr><td><p>scan_type</p></td><td><p>repository</p></td><td><p>Indicates
    that this is a repo scan. A repo scan has certain requirements, which are provided
    in the <strong>repository_*</strong> settings.</p></td></tr><tr><td><p>repository_project</p></td><td><p>dvpwa</p></td><td><p>Name
    of the repo project.</p></td></tr><tr><td><p>repository_branch</p></td><td><p>&lt;+codebase.branch&gt;</p></td><td><p>This
    Harness expression resolves to the branch selected in the Codebase (the default
    branch).</p></td></tr><tr><td><p>product_name</p></td><td><p>bandit</p></td><td><p>The
    name of the scan tool.</p></td></tr><tr><td><p>product_config_name</p></td><td><p>bandit-default</p></td><td><p>The
    config to use with the tool.</p></td></tr></tbody></table><p></p><h4>Viewing Security
    Test Results</h4><div class="note-callout"><strong>Key Concept: Test Targets</strong><br/>Every
    instance of a scanner has a specific <em>target</em>, which is the object it is
    set up to scan. It might be a repo, a container, or an instance. This pipeline
    uses the bandit scanner, and the test target of this scanner is the repo <a href="https://github.com/williamwissemann/dvpwa"
    target="_blank">https://github.com/williamwissemann/dvpwa</a> (specified in the
    Codebase for this pipeline).</div><p>Now that the Stage and its steps are completed
    and reviewed, you can run the Pipeline and see the scans.</p><ul><li>Click <strong>Save</strong>,
    and then click <strong>Run</strong>.</li><li>Select Git Branch, enter <strong>master</strong>
    for the branch name, and then click <strong>Run Pipeline</strong>.</li><li>When
    the pipeline finishes, click the <strong>Security Tests</strong> tab to see the
    dashboard.</li></ul><p>The <strong>Security Tests</strong> tab shows the issues
    that the scanner found in the test target, categorized by severity. The scanner
    found two issues, one critical and one medium, in the master branch.</p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659194816563/00-tests-master-branch.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><p></p><h4>Setting
    Baselines</h4><div class="note-callout"><strong>Key Concept: Baseline</strong><br/>A
    <em>baseline</em> is a specific instance of a test target and the security issues
    in that instance. It is the object that you are looking to update: a target branch,
    for example, or a Docker Hub image with a specific tag.<br/>As a developer, you
    want to ensure that your merge or update does not introduce any new issues. To
    do this, you create a baseline for your test target and compare your scans against
    the baseline. In this scenario, the baseline is the master branch.</div><ul><li>Click
    <strong>Security Tests</strong> (left menu) &gt; <strong>Test Targets</strong>.</li><li>For
    the <strong>dvpwa</strong> target, click <strong>Baseline for Comparison</strong>
    and select <strong>master</strong> in the pulldown menu.</li></ul><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659037469899/01-a-tests-demo-001-select-baseline.png"/></figure><h4>Fixing
    Vulnerabilities</h4><div class="note-callout"><strong>Key Concept: Deduplication</strong><br/>When
    Harness processes the security issues identified in a scan, it deduplicates the
    results. This means that each security issue you see in the <strong>Security Tests</strong>
    page is unique and requires its own resolution.</div><p>Suppose you&#39;re developing
    a new feature. You create a new branch DEMO-001 from the master branch. You want
    to see if your branch has any security issues that aren&#39;t in master.</p><ul><li>Run
    your pipeline again with <strong>DEMO-001</strong> as the branch name.</li><li>When
    the pipeline finishes, go to the <strong>Security</strong> <strong>Tests</strong>
    tab.<br/>Your branch has 5 new security issues: 2 critical, 2 medium, 1 low.<figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659195930072/01-tests-demo-001-branch.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure></li></ul><div
    class="note-callout"><strong>Key Concept: To troubleshoot an issue, go to Issue
    Details</strong><br/>The Issue Details pane has the information you need to troubleshoot
    and fix your security vulnerabilities.</div><ul><li>In the Issues table (bottom
    left), click the first row for the critical issue <strong>subprocess_popen_with_shell_equals_true</strong>.
    The Issue Details pane opens.</li></ul><table><tbody><tr><td><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659197525739/01-b-tests-demo-001-branch-issue-details-v-2.png"
    style="display:block;margin-left:auto;margin-right:0" data-hd-align="right"/></figure></td><td><ul><li>The
    <strong>Severity Score</strong> is based on the <a href="https://nvd.nist.gov/vuln-metrics/cvss">NIST
    Common Vulnerability Scoring System</a> (CVSS) version 3.0:<ul><li>None 0.0</li><li>Low
    0.1 - 3.9</li><li>Medium 4.0 - 6.9</li><li>High 7.0 - 8.9</li><li>Critical 9.0
    - 10.0</li></ul></li><li>The <strong>Occurrences List</strong> shows all occurrences
    of this specific issue in the test target</li></ul></td></tr></tbody></table><ul><li>Examine
    the Occurrences List for this issue. Note that, to eliminate this vulnerability
    from the repo, you can need to fix multiple occurrences in multiple files:<ul><li><strong>Occurrence
    1:</strong> Line 39 in <code>/sqli/dao/review.py</code></li><li><strong>Occurrence
    2:</strong> Line 57 in <code>/sqli/dao/course.py</code></li><li>etc.</li></ul></li></ul><h3>Integrated
    STO/CI/CD Workflows</h3><p>The Pipeline we&#39;ve been working in is an example
    of a stand-alone STO workflow. It scans a test target and reports on the vulnerabilities,
    but doesn&#39;t do anything else.</p><p>In this section, you&#39;ll learn how
    to integrate STO functionality into CI and CD Pipelines. The core benefit of STO
    in an integrated Pipeline is to block the Pipeline if a scanner finds a serious
    vulnerability. The following sections describe the different blocking strategies
    you can implement.</p><h4>Fail Pipelines on Severity</h4><div class="note-callout"><strong>Key
    Concept: Fail on Severity</strong><br/>Every Security Step supports a <code>fail_on_severity</code>
    setting. If any vulnerability with the specified severity or higher is found,
    the Pipeline fails. It is good practice to include this setting in every Security
    Step in an integrated Pipeline.</div><p>In this section, you&#39;ll add this setting
    to the bandit Step and confirm that the Pipeline fails as specified.</p><ol><li>In
    the Pipeline Studio, open the <strong>STO Quickstart</strong> pipeline &gt; <strong>STOLAB</strong>
    stage &gt; <strong>bandit</strong> step.</li><li>Under <strong>Settings</strong>,
    add the following: <code>fail_on_severity</code> = <code>CRITICAL</code></li><li>Click
    <strong>Apply Changes</strong>, save the updated pipeline, and run a new build
    with the <strong>DEMO-001</strong> branch.<br/>The pipeline now fails because
    the bandit step is now configured to fail on any vulnerability with a severity
    of low or higher. The last log message in the bandit step log is:<pre class="hljs
    bash">Exited with message: fail_on_severity is set to CRITICAL and that threshold
    was reached.</pre><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659137645262/02-tests-demo-001-failed-severity-low.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure></li></ol><h4>Exemptions
    for Specific Issues</h4><div class="note-callout"><strong>Key Concept: Issue Exemptions</strong><br/>In
    some cases, developers might want to create &#34;ignore rules&#34; for override
    the fail_on_severity setting. If an issue is marked as Ignored, it will not block
    the Pipeline.<br/>Developer users cannot create Ignore Rules; only SecOps users
    have this permission.</div><p>You are now acting as a Security Officer. A developer
    has sent a request to add two Ignore Rules to unblock their Pipeline temporarily.
    Do the following:</p><ol><li>Go to the Security Tests page for the build you ran
    previously: Click <strong>Security Tests</strong> and then <strong>Test Targets</strong>.
    Then click the previous build you ran before the failed build.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659138631300/02-a-tests-demo-001-goto-previous-branch.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure></li><li>In
    the <strong>Security Tests</strong> tab, go to the list of detected issues (bottom
    left). For each of the two critical issues, do the following:<ol><li>Click in
    the row to open the Issue Details pane.</li><li>Click the <strong>Ignore Issue</strong>
    button.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659108419315/01-c-tests-demo-001-branch-ignore-issue.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659108396757/01-d-tests-demo-001-branch-ignore-issue.png"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure></li></ol></li><li>Run
    another build with the DEMO-001 branch. When the build finishes, go to the <strong>Security
    Tests</strong> page.<br/>The Pipeline now finishes successfully, but the ignored
    issues still appear in the issues list with Status = Ignored.<figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659204960237/exemption-dev-001-results-with-critical-ignored.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure></li><li>Go
    to <strong>Security Tests</strong> &gt; <strong>Security Review</strong>. This
    page includes all the active Ignore Rules. Click <strong>Cancel Ignore</strong>
    for both issues.</li></ol><h3>Next Steps</h3><p>You&#39;ve now learned the core
    STO features and workflows. Here are the next steps you can take.</p><h4>Add More
    Scanners</h4><p>STO supports an extensive set of external scanners for repos,
    images, and artifacts. See <a href="https://docs.harness.io/article/0k0iubnzq">Security
    Steps Reference</a>.</p><h4>Add Steps or Stages for CI/CD Workflows</h4><p>You
    know how to implement Pipelines when scanners detect security issues, and how
    to create Ignore Rules for specific issues. Once you set up your Security Steps,
    Baselines, and Ignore Rules, you can add more Stages and Steps to implement your
    CI/CD workflows.</p><h4>Add Governance Policies</h4><p>You can use the <a href="https://docs.harness.io/article/1d3lmhv4jl">Harness
    Policy Engine</a> to create STO-specific policies based on the <a href="https://www.openpolicyagent.org/"
    target="_blank">Open Policy Agent (OPA)</a> standard. For example, you could create
    a rule like the following to ensure that all Pipelines include a Security Stage.</p><pre>  package
    pipeline_required<br/><br/># Deny pipelines that are missing required steps<br/>deny[sprintf(&#34;deployment
    stage &#39;%s&#39; is missing required step &#39;%s&#39;&#34;, [stage.name, existing_steps])]
    { <br/>     stage = input.pipeline.stages[i].stage                                #
    Find all stages ... <br/>     stage.type == &#34;SecurityTests&#34;                                         #
    ... that are deployments<br/>     existing_steps := [ s | s = stage.spec.execution.steps[_].step.type
    ] # ... and create a list of all step types in use <br/>     required_step :=
    required_steps[_]                                    # For each required step
    ... <br/>     not contains(existing_steps, required_step)                           #
    ... check if it&#39;s present in the existing steps<br/>}<br/><br/># Steps that
    must be present in every deployment - try adding ShellScript to this list to see
    the policy fail<br/>required_steps = [&#34;Security&#34;]<br/><br/>contains(arr,
    elem) { <br/>    arr[_] = elem<br/>}</pre><h4>Add Failure Strategies to a CI/CD
    Stage</h4><p>You can implement <a href="https://docs.harness.io/article/0zvnn5s1ph"
    target="_blank">Failure Strategies</a> to bypass the failure policies in previous
    Security steps. One use case for this would be to enable manual interventions
    when a Security Step generates a failure. You could set up a workflow like this:</p><ol><li>A
    Stage or Step is downstream from the Security Step. It has a Failure Strategy
    that&#39;s set to run on <a href="https://docs.harness.io/article/htrur23poj#error_types"
    target="_blank">All Errors</a>.</li><li> The scanner detects issues.</li><li>The
    Security Step generates an error.</li><li>The Failure Strategy initiates a 30-minute
    pause before proceeding.</li><li>The developer and security team evaluate the
    issues and then abort the Pipeline or allow it to proceed.</li></ol><h3>STO/CI
    Workflow Example</h3><p>The following Pipeline provides a simple example of how
    you can implement STO into a CI workflow. This is an expanded version of the standalone
    STO Stage we have been working with. The <a href="https://docs.harness.io/article/qhgshfw3mg#integrated_workflow_yaml">YAML</a>
    of this pipeline is provided below.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659290775295/integrated-workflow-pipeline.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><p>This
    Pipeline works as follows:</p><ol><li>The <strong>owasp scan</strong> step has
    <code>fail_on_severity</code> set to <code>HIGH</code>. It scans the <strong>master</strong>
    branch of the <a href="https://github.com/anxolerd/dvpwa">dvpwa</a> repo and detects
    one Critical issue, which results in an error.</li><li>The <strong>Build Image</strong>
    step is set up to build (but not push) an image from the dvpwa repo. It has a
    Failure Strategy that responds to the error from owasp as follows:<ol><li>Pauses
    the pipeline and waits for you to choose what to do. You examine the detected
    issues and decide if you want to proceed.</li><li>If you don&#39;t choose to proceed
    after 20 minutes, the pipeline aborts.</li></ol></li><li>If you click Proceed,
    the <strong>Build Image</strong> step builds an image from the repo.</li><li>The
    <strong>aqua-trivy</strong> step also has <code>fail_on_severity</code> set to
    <code>HIGH</code>. It scans the resulting image, detects issues with high and
    critical severities and generates an error, which causes the pipeline to fail.</li></ol><p>You
    can view all issues from all scanners in the <strong>Security Tests</strong> tab,
    and also filter the issue list by scanner.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qhgshfw3mg/1659295566043/integrated-workflow-scan-results.png"
    style="max-height:80%;max-width:80%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="80%" data-hd-width="80%" data-hd-align="left"/></figure><p></p><h3>Congratulations!</h3><p>In
    this tutorial, you learned how to:</p><ol><li>Add a STO Security stage to your
    Harness Pipelines.</li><li>Configure Security steps for different security scanners:
    one for code scanning and one for container scanning.</li><li>Run a Pipeline and
    scan its codebase and the container image.</li><li>View the normalized and deduplicated
    security results in the Security dashboard.</li></ol><p>Integrated Workflow YAML</p><p>Here&#39;s
    the YAML of the <a href="https://docs.harness.io/article/qhgshfw3mg#integrated_workflow_yaml">integrated
    workflow example</a> we examined previously.</p><pre class="hljs yaml">pipeline:<br/>    name:
    quickstart-integrated-pipeline<br/>    identifier: quickstartintegratedpipeline<br/>    projectIdentifier:
    STO<br/>    orgIdentifier: default<br/>    tags: {}<br/>    properties:<br/>        ci:<br/>            codebase:<br/>                connectorRef:
    $CODEBASE_CONNECTOR<br/>                build: &lt;+input&gt;<br/>    stages:<br/>        -
    stage:<br/>              name: Docker Build and Scan<br/>              identifier:
    Docker_Build_and_Scan<br/>              type: CI<br/>              spec:<br/>                  cloneCodebase:
    true<br/>                  infrastructure:<br/>                      type: KubernetesDirect<br/>                      spec:<br/>                          connectorRef:
    $K8S_CONNECTOR<br/>                          namespace: harness-delegate-ng<br/>                          automountServiceAccountToken:
    true<br/>                          nodeSelector: {}<br/>                          os:
    Linux<br/>                  sharedPaths:<br/>                      - /var/run<br/>                  serviceDependencies:<br/>                      -
    identifier: dind<br/>                        name: dind<br/>                        type:
    Service<br/>                        spec:<br/>                            connectorRef:
    $DOCKER_CONNECTOR<br/>                            image: docker:dind<br/>                            privileged:
    true<br/>                            entrypoint:<br/>                                -
    dockerd-entrypoint.sh<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: Security<br/>                                name:
    owasp scan<br/>                                identifier: owasp_scan<br/>                                spec:<br/>                                    privileged:
    true<br/>                                    settings:<br/>                                        policy_type:
    orchestratedScan<br/>                                        scan_type: repository<br/>                                        repository_project:
    nodegoat<br/>                                        repository_branch: &lt;+codebase.branch&gt;<br/>                                        product_name:
    owasp<br/>                                        product_config_name: default<br/>                                        fail_on_severity:
    HIGH<br/>                                    imagePullPolicy: Always<br/>                                failureStrategies:<br/>                                    -
    onFailure:<br/>                                          errors:<br/>                                              -
    AllErrors<br/>                                          action:<br/>                                              type:
    Ignore<br/>                          - step:<br/>                                type:
    Run<br/>                                name: Build Image<br/>                                identifier:
    Build_Docker_Image<br/>                                spec:<br/>                                    connectorRef:
    $DOCKER_CONNECTOR<br/>                                    image: docker:latest<br/>                                    shell:
    Sh<br/>                                    command: |-<br/>                                        docker
    build .  -f Dockerfile.app -t nodegoat:local<br/>                                    privileged:
    true<br/>                                when:<br/>                                    stageStatus:
    All<br/>                                failureStrategies:<br/>                                    -
    onFailure:<br/>                                          errors:<br/>                                              -
    AllErrors<br/>                                          action:<br/>                                              type:
    ManualIntervention<br/>                                              spec:<br/>                                                  timeout:
    20m<br/>                                                  onTimeout:<br/>                                                      action:<br/>                                                          type:
    Abort<br/>                          - step:<br/>                                type:
    Security<br/>                                name: aqua-trivy scan<br/>                                identifier:
    aqua_trivy_scan<br/>                                spec:<br/>                                    privileged:
    true<br/>                                    settings:<br/>                                        product_name:
    aqua-trivy<br/>                                        product_config_name: aqua-trivy<br/>                                        policy_type:
    orchestratedScan<br/>                                        scan_type: container<br/>                                        container_type:
    local_image<br/>                                        container_domain: docker.io<br/>                                        container_project:
    nodegoat<br/>                                        container_tag: local<br/>                                        fail_on_severity:
    HIGH<br/>                                    imagePullPolicy: Always<br/>                                failureStrategies:
    []<br/>              variables:<br/>                  - name: sto_api_key<br/>                    type:
    Secret<br/>                    value: &lt;+input&gt;<br/></pre><p></p>'
  slug: sto-quickstart
  tags: []
  is_live: true
