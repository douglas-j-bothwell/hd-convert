type: article
article_id: qym3qtrexy
user_id: vt9reb71i4
category_id: iqgyied1c0
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Get Started With Java
slug: java-quickstart
description: This quickstart shows you how to create a Feature Flag in Harness and
  use Feature Flags (FF) SDK in your Java application.
short_version: This quickstart shows you how to create a Feature Flag in Harness and
  use Feature Flags (FF) SDK in your Java application.
tags:
- feature flag
- java SDK
- Quickstart
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-17T15:13:50.665906Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Get Started With Java
  description: This quickstart shows you how to create a Feature Flag in Harness and
    use Feature Flags (FF) SDK in your Java application.
  short_version: This quickstart shows you how to create a Feature Flag in Harness
    and use Feature Flags (FF) SDK in your Java application.
  body: '<p>This guide shows you how to create a Feature Flag in Harness and use the
    Feature Flags Java SDK in your application.</p><h3>Objectives</h3><p>You&#39;ll
    learn how to:</p><ul><li>Create a Project in Harness</li><li>Create an Environment</li><li>Create
    a Feature Flag in Harness</li><li>Add an SDK Key for your Environment</li><li>Use
    Harness Feature Flags SDKs with Java Applications. Your flag is automatically
    available for use in all Environments of your project. However, you need to install
    the Harness SDK to all Environments you wish to initiate your flag in.</li></ul><h3
    id="undefined">Feature Flags overview</h3><p>For an overview of Harness Feature
    Flags, watch the following video:</p><details><summary>Watch Feature Flag overview
    video</summary><div><div class="hd--html"><figure><iframe src="//fast.wistia.com/embed/iframe/h6iegycy0a"
    width="560" height="315" frameborder="0" allowfullscreen=""></iframe></figure></div></div></details><h3
    id="undefined">Create a Project</h3><p>As a first step, you need to create a project
    in Harness. To do this:</p><ol><li>On the Harness Platform, click <strong>Feature
    Flags</strong> and click <strong>Create Project</strong>.</li><li>In <strong>Projects</strong>,
    click <strong>Project</strong>.</li><li>In <strong>About the Project</strong>,
    in <strong>Name</strong>, enter the name for your Project. You will create your
    Feature Flag for this Project.</li><li>(Optional) Select color for your Project.</li><li>Select
    the Organization from the list. If you need to create a new Organization, go to <a
    href="/article/36fw2u92i4-create-an-organization#step_1_create_a_harness_org">Create
    a Harness Organization</a> and <a href="/article/7fibxie636-projects-and-organizations">Projects
    and Organizations</a>.</li><li>Click <strong>Save and Continue</strong>.</li><li>(Optional)
    In <strong>Invite Collaborators</strong>, in <strong>Invite People to Collaborate</strong>,
    add members to collaborate with you on the Project.</li><li>(Optional) Assign
    a role to the collaborators and click <strong>Add</strong>. You can select <strong>Project
    Admin</strong>, <strong>Project Member</strong>, or <strong>Project Viewer</strong>.
    For more information on permissions, go to <a href="/article/yaornnqh0z-permissions-reference">Permissions
    Reference</a>.</li><li>Once you&#39;re done adding contributors and adding a role,
    click <strong>Save and Continue</strong>.</li><li>Click <strong>GO TO FEATURE
    FLAGS</strong>.</li></ol><h3>Create an Environment</h3><p>Once you&#39;ve created
    a Project, you need to create an Environment. An Environment is the representation
    of your production or non-production infrastructure. You can configure the Target
    and Rules of your Flag in the Environment.</p><ol><li>In <strong>Feature Flags</strong>,
    select the Project that you created. For example, FFDOcs.</li><li>In your Project,
    in <strong>Environments</strong>, click <strong>Create an</strong> <strong>Environment</strong>.</li><li>Enter
    a name for your Environment.</li><li>Select the Environment type and click <strong>Create</strong>.
    You can select <strong>Production</strong> or <strong>Non-Production</strong>.</li><li>Your
    Environment is created. You can find it listed in <strong>Environments</strong>.</li></ol><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/qym3qtrexy/1660144797203/screenshot-2022-08-10-at-16-19-38.png"
    style="display:block;margin-left:0;margin-right:auto" alt="A screenshot of the
    Environments page in Feature Flags on the Harness Platform." data-hd-align="left"/></figure><p><em>Figure
    1: Environments within a Feature Flag Project</em></p><h3>Create an SDK Key</h3><p>Now
    you have an Environment ready, you need to create an SDK Key for that Environment.
    You need an SDK key to authorize the connection between your application and one
    of the Feature Flag SDKs.</p><div class="warning-callout">Copy the SDK Key when
    you create it as it is available only after creation, once you leave the page,
    the key is redacted.</div><div class="note-callout">You must create an SDK Key
    that matches the type of SDK you want to use. That is, you must create a Client
    SDK Key if you&#39;re using a Client SDK or you must create a Server SDK Key if
    you&#39;re using a Server SDK. For more information about the types of SDKs available,
    go to <a href="/article/rvqprvbq8f-client-side-and-server-side-sdks" target="_blank">Choose
    a Client-side or Server-side SDK</a>.</div><p>To create an SDK Key:</p><ol><li>Click
    on the <strong>Environment</strong> that you created in the <a href="/article/0a2u2ppp8s-getting-started-with-continuous-features#step_2_create_an_environment">previous
    step</a>.</li><li>In <strong>Environments</strong>, in <strong>Settings</strong>,
    click <strong>Add Key</strong>.</li><li>In <strong>Create SDK Key</strong>, in <strong>Name</strong>,
    enter a name for your SDK key.</li><li>In <strong>Key Type</strong>, select the
    Key Type. For this quickstart we&#39;ll use the Server Key type.</li></ol><div
    class="note-callout">You can add multiple keys for the same Environment if your
    organization needs to rotate them.</div><ol><li style="counter-increment:li 5"
    start="6">The SDK Key is created. Copy it and store it securely.</li></ol><h3
    id="undefined">Create a boolean Flag</h3><p>Harness Feature Flags support boolean and multivariate Flag
    types. This quickstart uses a boolean Flag, which has only two Variations, <code>true</code> or <code>false</code>.</p><p>To
    create a boolean Flag:</p><ol><li>In <strong>Feature Flags</strong>, click <strong>Flag</strong>.</li><li>Select
    the <strong>Boolean</strong> type.</li><li>In <strong>About the Flag</strong>,
    in <strong>Name</strong>, enter a name for your boolean Flag and click <strong>Next</strong>.<br/>When
    you name a Feature Flag, Harness automatically generates its unique identifier
    based on the name you give it. You can edit the identifier when you are creating
    the Flag, but not after it is saved. If you rename the feature flag, the identifier
    remains the same. For more information, go to <a href="/article/li0my8tcz3-entity-identifier-reference">Entity
    Identifier Reference</a>.</li></ol><div class="note-callout">If you need to make
    the Flag a permanent Flag, select the checkbox <strong>This is a permanent flag</strong>.</div><ol><li
    style="counter-increment:li 3" start="4">In <strong>Variation settings</strong>,
    complete the following:<ol><li><strong>Select the flag type</strong>: In <strong>Flag
    Type</strong>, select <strong>Boolean</strong>.</li><li><strong>Define the variation</strong>:
    In boolean, you can have only two Variations <code>true</code> or <code>false</code>.<ol><li>Enter
    a name for your Variations. For example, <code>Enable_Feature</code> and <code>Disable_Feature</code>.</li></ol></li><li><strong>Define
    rules for the flag</strong>: Defines which Variation you will go to by default
    when the Flag is ON or OFF. Once you save the Variations, a Flag is created for
    the Environment with these Variations set as ON and OFF.<br/>For example:<br/>-
    If the Flag is <code>ON</code>, serve the Variation <code>Enable_Feature</code>.<br/>-
    If the Flag is <code>OFF</code>, serve the Variation <code>Disable_Feature</code>.</li></ol></li><li>Click <strong>Save
    and Close</strong>. The Feature Flag is created. By default, the Flag is set to
    OFF.</li></ol><div class="note-callout">Once you have created your Flag type,
    optionally you can <a href="https://ngdocs.harness.io/category/xw2hz815l8-target-management">manage
    targets</a> and modify the <a href="https://ngdocs.harness.io/article/8bf3us11kz-manage-variations">variations</a>, <a
    href="https://ngdocs.harness.io/article/xf3hmxbaji-targeting-users-with-flags">rules</a>,
    and <a href="https://ngdocs.harness.io/article/iijdahygdm-add-prerequisites-to-feature-flag">add
    prerequisites</a> of your flag.</div><h3>Use Harness Feature Flags SDKs with Java
    applications</h3><p>In a nutshell, here is how the server-side SDK works:</p><ol><li>The
    client authenticates with a server using an API Key.</li><li>The configuration
    is fetched and cached in the memory.</li></ol><ul><li>One call to fetch all Feature
    Flag configurations for the Environment.</li><li>One call to fetch all Target
    Group configurations for the Environment.</li></ul><ol><li style="counter-increment:li
    2" start="3">The SDK maintains all the Feature Flag details locally in its cache
    and evaluates Flags based on it. The SDKs use streaming and polling strategy to
    keep the local cache in sync with the Flag configurations.</li></ol><table><tbody><tr><td><p><strong>Streaming
    Mode</strong></p></td><td><p><strong>Polling Mode</strong></p></td></tr><tr><td><ul><li>In
    the case of streaming mode, a connection is open to the stream endpoint.</li><li>Anytime
    the Flag configuration updates, a stream event (indicating which Flag/Target Group
    changed) is pushed to the application on this connection.</li><li>SDK fetches
    the latest Flag configuration for the Flag/Target group specified in the event
    and updates the cache.</li></ul></td><td><p>Config is polled periodically (default
    60 seconds), and the cache is updated.</p></td></tr></tbody></table><ol><li style="counter-increment:li
    3" start="4">All the Evaluations are run against the cached data.</li></ol><h4>Set
    up your application</h4><p>You need a Java application to test your Feature Flag.
    If you do not have your Java Application, you can download a sample application
    from the <a href="https://github.com/harness/ff-java-server-sdk" target="_blank">Java
    SDK GitHub repository</a>.</p><ol><li>On the <a href="https://github.com/drone/ff-java-server-sample">Java
    SDK GitHub</a> page, click <strong>Code</strong> and then clone the sample application.
    For more information, go to <a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github/cloning-a-repository">Cloning
    a repository</a>.</li><li>Install the FF SDK as a dependency in your application
    using your application&#39;s dependency manager. You can use Maven, Gradle, SBT,
    etc. Refer to the <a href="https://mvnrepository.com/artifact/io.harness/ff-java-server-sdk">Harness
    Feature Flag Java Server SDK</a> to identify the latest version for your build
    automation tool.</li><li>This quickstart uses Maven. Add the following Maven dependency
    in your <code>pom.xml</code> file.</li></ol><pre class="hljs xml">&lt;dependency&gt;<br/>  &lt;groupId&gt;io.harness&lt;/groupId&gt;<br/>  &lt;artifactId&gt;ff-java-server-sdk&lt;/artifactId&gt;<br/>  &lt;version&gt;1.0.0&lt;/version&gt;<br/>&lt;/dependency&gt;</pre><p></p><div
    class="note-callout">If you are using the Harness Java sample application from
    the <a href="https://github.com/drone/ff-java-server-sample">Java SDK GitHub repository</a>,
    then do not add the Maven dependency in the <code>pom.xml</code> file. The Maven
    dependencies are added in the Harness Java sample application.</div><ol><li style="counter-increment:li
    4" start="5">Authorize your Application to Connect to the FF Client. After installing
    the SDK, enter the SDK keys that you created for your Environment. The SDK keys
    authorize your application to connect to the FF client.</li></ol><pre class="hljs
    java">CfClient cfClient = new CfClient(apiKey, Config.builder().build());</pre><ol><li
    style="counter-increment:li 5" start="6">Add a Target. Targets are used to control
    which user sees the Variation of a Feature Flag. You can add Targets and define
    their attributes in your code directly as well. The Targets added in the application
    code are discovered automatically and populated in the Harness UI.</li></ol><ul><li>A
    Target can be any attribute that can be uniquely identified with an entity.</li><li>A
    Target is identified by a name and an identifier.<ul><li>Enter a name that will
    identify this target.</li><li>Enter a unique identifier for your target. For example,
    an application, systems, services, machines, resources uniquely identified by
    an IP address, email ID, user ID, etc.</li><li>For more information about Targets,
    go to <a href="/category/xw2hz815l8-target-management">Target Management</a>.</li></ul></li></ul><h5>Add
    a Target</h5><pre class="hljs perl">Target target = Target.builder().name(&#34;User1&#34;).identifier(&#34;user1@example.com&#34;).build();</pre><p></p><h5>Add
    a Target with attributes</h5><p>Attributes are the properties of your Target and
    used to define rules for your Feature Flags and Target Groups.</p><pre class="hljs
    coffeescript">Target target = Target.builder()<br/>                    .name(&#34;User1&#34;)<br/>                    .attributes(new
    HashMap&lt;String, Object&gt;())<br/>                    .identifier(&#34;user1@example.com&#34;)<br/>                    .build();</pre><p></p><p>Evaluate
    a Target for your Feature Flag. Once you have added the Target, evaluate it for
    your Feature Flag.</p><pre class="hljs sql">boolean result = cfClient.boolVariation(&lt;feature_identifier&gt;,
    target, &lt;default_result&gt;);</pre><p></p><p>The <code>&lt;feature_identifier&gt;</code> is
    your Feature Flag identifier. When you name a Feature Flag, Harness automatically
    generates its identifier. For more information, go to <a href="/article/li0my8tcz3-entity-identifier-reference">Entity
    Identifier Reference</a> and <a href="/article/1j7pdkqh7j-create-a-feature-flag#step_4_create_a_flag_type">Create
    a flag type</a>.</p><p><strong>Sample code for a boolean Flag</strong></p><pre
    class="hljs sql">boolean result = cfClient.boolVariation(&#34;toggle&#34;, target,
    false);</pre><p></p><h4>Test your Flag</h4><p>Verify Flag configuration updates
    in your code. SDK maintains all the Feature Flag details locally in its cache
    and evaluates Flags based on it. The SDKs use streaming and a polling strategy
    to keep the local cache in sync with the Flag configurations.</p><p>The following
    example shows how the variation of a Feature Flag is served according to its rule.
    By toggling the flag on/off in Harness UI, the latest features are synced and
    the updated flag variation is served.</p><div class="hd--html"><figure><iframe
    src="//fast.wistia.com/embed/iframe/73i7e25n5e" width="560" height="315" frameborder="0"
    allowfullscreen=""></iframe></figure></div><p></p>'
  slug: java-quickstart
  tags:
  - feature flag
  - java SDK
  - Quickstart
  is_live: true
