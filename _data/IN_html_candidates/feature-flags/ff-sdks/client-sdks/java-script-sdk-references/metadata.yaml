type: article
article_id: bmlvsxhp13
user_id: vt9reb71i4
category_id: y1oewjcb0q
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: JavaScript SDK Reference
slug: java-script-sdk-references
description: This topic explains how to use the Harness Feature Flags SDK in your
  JavaScript application.
short_version: This topic explains how to use the Harness Feature Flags SDK in your
  JavaScript application.
tags:
- Javascript SDK
- SDK
- feature flag
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-18T19:15:05.427498Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: JavaScript SDK Reference
  description: This topic explains how to use the Harness Feature Flags SDK in your
    JavaScript application.
  short_version: This topic explains how to use the Harness Feature Flags SDK in your
    JavaScript application.
  body: '<p>This topic describes how to use the Harness Feature Flags Javascript SDK
    for your JavaScript application.</p><p>For getting started quickly, you can use
    our <a href="https://github.com/harness/ff-javascript-client-sdk/blob/main/README.md"
    target="_blank">sample code from the JavaScript SDK README</a>. You can also <a
    href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository">clone</a>
    and run a sample application from the <a href="https://github.com/harness/ff-javascript-client-sdk"
    target="_blank">JavaScript SDK GitHub Repository.</a></p><h3>Before You Begin</h3><p>Make
    sure you read and understand:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview"
    target="_blank">Feature Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features"
    target="_blank">Getting Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks"
    target="_blank">Client-Side and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags"
    target="_blank">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class="note-callout">The current version of this SDK is <strong>1.4.10.</strong></div><h3>Requirements</h3><p>To
    use this SDK, make sure you:</p><ul><li>Create a JavaScript application to use
    with the SDK, or <a href="https://github.com/harness/ff-javascript-client-sdk"
    target="_blank">clone our sample application</a> to use.</li><li>Download the
    SDK from our <a href="https://github.com/harness/ff-javascript-client-sdk" target="_blank">GitHub
    Repository</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag" target="_blank">Create
    a Feature Flag on the Harness Platform</a>. If you are following along with the
    SDK README sample code, make sure your flag is called <code>harnessappdemodarkmode</code>.</li><li><a
    href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key" target="_blank">Create
    a Client SDK key and make a copy of it</a>.</li></ul><h3>Install the SDK</h3><p>You
    can install the SDK using npm, Yarn, or by importing it directly from unpkg.</p><h5>Install
    using npm</h5><p>Run the following command:</p><pre>npm i @harnessio/ff-javascript-client-sdk<br/></pre><p></p><p>Then,
    import the SDK using the following command:</p><p></p><pre>import { initialize,
    Event } from &#39;@harnessio/ff-javascript-client-sdk&#39;</pre><p></p><h5>Install
    using Yarn</h5><p>Run the following command:</p><pre>yarn add @harnessio/ff-javascript-client-sdk</pre><p></p><p>Then,
    import the SDK using the following command:</p><pre>import { initialize, Event
    } from &#39;@harnessio/ff-javascript-client-sdk&#39;</pre><p></p><h5>Install directly
    from unpkg</h5><p>Run the following script:</p><pre>&lt;script type=&#34;module&#34;&gt;<br/>  import
    { initialize, Event } from &#39;https://unpkg.com/@harnessio/ff-javascript-client-sdk@1.4.10/dist/sdk.client.js&#39;<br/>&lt;/script&gt;</pre><p></p><div
    class="warning-callout">Make sure you install the latest version of the SDK, which
    you can view in <a href="https://github.com/harness/ff-javascript-client-sdk"
    target="_blank">GitHub</a> and in <a href="#version">Version</a>.</div><p>If you
    need to support browsers that no longer support ES modules, run the following
    script instead:</p><pre>&lt;script src=&#34;https://unpkg.com/@harnessio/ff-javascript-client-sdk@1.4.10/dist/sdk.client.js&#34;&gt;&lt;/script&gt;<br/>&lt;script&gt;<br/>  var
    initialize = HarnessFFSDK.initialize<br/>  var Event = HarnessFFSDK.Event<br/>&lt;/script&gt;</pre><p></p><h3>Initialize
    the SDK</h3><p>To initialize the JavaScript SDK, you need to:</p><ol><li>Add your
    Client SDK key to connect to your Harness Environment.</li><li>Add a Target that
    you want to Evaluate against a Feature Flag.</li><li>(Optional) Configure the
    SDK.</li><li>Complete the initialization with the SDK using the Client SDK Key,
    Target, and Configuration parameters you set.</li></ol><h4>Add your Client SDK
    Key</h4><p>To connect to the correct Environment that you set up on the Harness
    Platform, you need to add the Client SDK Key from that Environment. Input the
    Client SDK Key into the <code>FeatureFlagSDKKey</code> parameter.</p><h4>Add a
    Target</h4><div class="tip-callout"><strong>What is a Target?</strong><br/>Targets
    are used to control which users see which Variation of a Feature Flag, for example,
    if you want to do internal testing, you can enable the Flag for some users and
    not others. When creating a Target, you give it a name and a unique identifier.
    Often Targets are users but you can create a Target from anything that can be
    uniquely identified, such as an app or a machine.<br/><br/>For more information
    about Targets, go to <a href="/article/xf3hmxbaji-targeting-users-with-flags"
    target="_blank">Targeting Users With Flags</a>.</div><p>To create a Target, you
    <strong>must enter an identifier</strong> but you can optionally add a name and
    additional attributes.</p><p>The below shows the data type for each parameter:</p><pre>interface
    Target {<br/>  identifier: string<br/>  name?: string<br/>  anonymous?: boolean<br/>  attributes?:
    object<br/>}</pre><p></p><details><summary>Regex requirements for Target names
    and identifiers</summary><div><strong>Identifier<br/></strong>Regex: <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must
    consist of only alphabetical characters, numbers, and the following symbols:<br/>.
    (period)<br/>@ (at sign)<br/>- (dash)<br/>_ (underscore)<br/><br/>The characters
    can be lowercase or uppercase but cannot include accented letters, for example
    <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex: <code>^[\\p{L}\\d
    .@_-]*$<br/></code><br/>Must consist of only alphabetical characters, numbers,
    and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_ (underscore)<br/>
    (space)<br/><br/>The characters can be lowercase or uppercase and can include
    accented letters, for example <code>Café_123</code>.</div></details><p></p><h4>Configure
    the SDK</h4><p>To configure the SDK, you can add <code>Options</code>, for example:</p><pre>interface
    Options {<br/>  baseUrl?: string<br/>  debug?: boolean<br/>}</pre><h4>Complete
    the initialization</h4><p>Complete the initialization using the FeatureFlagSDKKey,
    Target, and Options variables:</p><pre>initialize(FeatureFlagSDKKey: string, target:
    Target, options?: Options)</pre><p></p><p>For example:</p><pre>const cf = initialize(&#39;00000000-1111-2222-3333-444444444444&#39;,
    {<br/>    identifier: YOUR-TARGET-IDENTIFIER,      // Target identifier<br/>    name:
    YOUR-TARGET-NAME,                  // Optional target name<br/>    attributes:
    {                            // Optional target attributes<br/>      email: &#39;sample@sample.com&#39;<br/>    }<br/>  });</pre><h3>Evaluate
    a Flag</h3><p>Evaluating a Flag is when the SDK processes all Flag rules and returns
    the correct Variation of that Flag for the Target you provide. </p><p>If a matching
    Flag can’t be found, or the SDK can’t remotely fetch flags, the default value
    is returned. </p><p>There are different methods for the different Variation types
    and for each method you need to pass in:</p><ul><li>Identifier of the Flag you
    want to evaluate</li><li>The default Variation</li></ul><div class="note-callout">The
    Flag is evaluated against the Target you pass in when initializing the SDK.</div><pre>const
    value = cf.variation(&#39;Dark_Theme&#39;, false) // second argument is the default
    value when variation does not exist</pre><h3>Listen for events</h3><h4>Register
    the event listener</h4><p>The <code>cf</code> method allows you to listen for
    the different events triggered by SDK and deal with them as needed, for example:</p><pre>cf.on(Event.READY,
    flags =&gt; {<br/>  // Event happens when connection to server is established<br/>  //
    flags contains all evaluations against SDK key<br/>})<br/><br/>cf.on(Event.CHANGED,
    flagInfo =&gt; {<br/>  // Event happens when a changed event is pushed<br/>  //
    flagInfo contains information about the updated feature flag<br/>})<br/><br/>cf.on(Event.DISCONNECTED,
    () =&gt; {<br/>  // Event happens when connection is disconnected<br/>})<br/><br/>cf.on(Event.ERROR,
    () =&gt; {<br/>  // Event happens when a connection error has occurred<br/>})</pre><p></p><h4>Close
    the event listener</h4><p>To turn off the listeners, use <code>cf.off</code>.
    You can turn off the listener when there is an error, or turn off all listeners
    on command.</p><p><strong>Turn off listener when there is an error:</strong></p><pre>cf.off(Event.ERROR,
    () =&gt; {<br/>  // Do something when an error occurs<br/>})</pre><p></p><p><strong>Turn
    off all listeners:</strong></p><pre>cf.off()</pre><p></p><h3>Test your app is
    connected to Harness</h3><p>When you receive a response showing the current status
    of your Feature Flag, go to the Harness Platform and toggle the Flag on and off.
    Then, check your app to verify if the Flag Variation displayed is updated with
    the Variation you toggled.</p><h3>Close the SDK</h3><p>When closing your application,
    call <code>cf.close()</code> to close the SDK.</p><pre>cf.close();</pre><h3>Sample
    code for a JavaScript application</h3><p>Here is a sample code for using Harness
    Feature Flag SDKs with a JavaScript application:</p><pre>var initialize = HarnessFFSDK.initialize<br/>      var
    Event = HarnessFFSDK.Event<br/><br/>      var log = msg =&gt; {<br/>        document.querySelector(&#39;#log&#39;).innerHTML
    += `${msg}\n`<br/>      }<br/><br/>      var cf = initialize(<br/>        &#39;ed56f3ec-1aa6-4bc2-a519-6ebcc3f0541f&#39;,<br/>        {<br/>          identifier:
    &#39;Harness1&#39;,<br/>          attributes: {<br/>            lastUpdated: Date(),<br/>            host:
    location.href<br/>          }<br/>        }<br/>      )<br/><br/>      cf.on(Event.READY,
    flags =&gt; {<br/>        log(JSON.stringify(flags, null, 2))<br/>      })<br/><br/>      cf.on(Event.CHANGED,
    flagInfo =&gt; {<br/>        if (flagInfo.deleted) {<br/>          log(&#39;Flag
    is deleted&#39;)<br/>          log(JSON.stringify(flagInfo, null, 2))<br/>        }
    else {<br/>          log(&#39;Flag is changed&#39;)<br/>          log(JSON.stringify(flagInfo,
    null, 2))<br/>        }<br/>      })</pre><p></p>'
  slug: java-script-sdk-references
  tags:
  - Javascript SDK
  - SDK
  - feature flag
  is_live: true
