type: article
article_id: 4c8wljx60w
user_id: vt9reb71i4
category_id: kkiqy1f6d7
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Go SDK Reference
slug: feature-flag-sdks-go-application
description: This topic explains how to integrate your feature flags with Go SDK.
short_version: This topic explains how to integrate your feature flags with Go SDK.
tags:
- feature flag
- Go SDK
- SDK
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-18T19:00:17.169216Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Go SDK Reference
  description: This topic explains how to integrate your feature flags with Go SDK.
  short_version: This topic explains how to integrate your feature flags with Go SDK.
  body: '<p>This topic describes how to use the Harness Feature Flags Go SDK for your
    Go application. </p><p>For getting started quickly, you can use our <a href="https://github.com/harness/ff-golang-server-sdk">sample
    code from the SDK README</a>. You can also <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository">clone</a>
    and run a sample application from the <a href="https://github.com/harness/ff-golang-server-sdk">Go
    SDK GitHub Repository.</a></p><h3>Before you begin</h3><p>Make sure you read and
    understand:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview"
    target="_blank">Feature Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features"
    target="_blank">Getting Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks"
    target="_blank">Client-Side and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags"
    target="_blank">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class="note-callout">The current version of this SDK is <strong>0</strong><strong>.1</strong><strong>.2.</strong></div><h3>Requirements</h3><p>To
    use this SDK, make sure you:</p><ul><li>Install Go version 1.6 or newer.</li><li><a
    href="https://github.com/harness/ff-golang-server-sdk" target="_blank">Download
    the SDK from our GitHub repository</a></li><li>Create a Go application, or <a
    href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository">clone</a>
    our <a href="https://github.com/harness/ff-golang-server-sdk/blob/main/examples/getting_started.go"
    target="_blank">sample application</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag"
    target="_blank">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called
    <code>harnessappdemodarkmode</code>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key"
    target="_blank">Create an SDK key and make a copy of it</a>.</li></ul><h3>Install
    the SDK</h3><p>Install the SDK using the following Go command:</p><pre>go get
    github.com/harness/ff-golang-server-sdk</pre><h3>Import the SDK </h3><p>Import
    the SDK using the following Go command: </p><pre>import harness &#34;github.com/harness/ff-golang-server-sdk/client&#34;</pre><h3>Initialize
    the SDK</h3><p>To initialize the Go SDK, you need to:</p><ol><li>Add your Server
    SDK Key to connect to your Harness Environment.</li><li>(Optional) Configure the
    SDK options. For more details on what features you can configure for this SDK,
    go to <a href="/article/4c8wljx60w-feature-flag-sdks-go-application#configure_the_sdk">Configure
    the SDK</a>.</li><li>Complete the initialization by creating an instance of the
    Feature Flag client and  passing in the Server SDK Key and Configuration.</li><li>Add
    a Target that you want to Evaluate against a Feature Flag.</li></ol><h4>Add the
    Server SDK Key</h4><p>To connect to the correct Environment that you set up on
    the Harness Platform, you need to add the Server SDK Key from that Environment.
    Input the Server SDK Key into the <code>sdkKey</code> parameter. For example:</p><pre>client,
    err := harness.NewCfClient(sdkKey)</pre><h4>Configure the SDK</h4><p>You can configure
    the following features of the SDK:</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Example</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p><code>harness.WithURL(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL used to fetch Feature Flag Evaluations. When using the Relay Proxy, change
    this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventUrl</p></td><td><p><code>harness.WithEventsURL(&#34;https://events.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>pollInterval</p></td><td><p><code>harness.WithPullInterval(60))</code></p></td><td><p>The
    interval <strong>in seconds</strong> that we poll for changes when you are using
    stream mode.</p></td><td><p><code>60 (seconds)</code></p></td></tr><tr><td><p>streamEnabled</p></td><td><p><code>harness.WithStreamEnabled(false)</code></p></td><td><p>Set
    to <code>true</code> to enable streaming mode.</p><p>Set to <code>false</code>
    to disable streaming mode.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>analyticsEnabled</p></td><td><p><code>harness.WithAnalyticsEnabled(false)</code></p></td><td><p>Set
    to <code>true</code> to enable analytics.</p><p>Set to <code>false</code> to disable
    analytics.</p><p><strong>Note</strong>: Analytics are not cached.</p></td><td><p><code>true</code></p></td></tr></tbody></table><p></p><div
    class="note-callout">Enabling analytics is currently not available using the Go
    SDK.</div><p>For further configuration options and samples, such as configuring
    your logger or using the SDK with the Relay Proxy, go to <a href="/article/4c8wljx60w-feature-flag-sdks-go-application#additional_options">Additional
    Options</a>.</p><h4>Complete the initialization</h4><p>Complete  the initialization
    by creating an instance of the Feature Flag client and passing in the <code>sdkKey</code>,
    and any configuration options. For example:</p><pre>// Create Options<br/>client,
    err := harness.NewCfClient(myApiKey, <br/> harness.WithURL(&#34;https://config.ff.harness.io/api/1.0&#34;), <br/>
    harness.WithEventsURL(&#34;https://events.ff.harness.io/api/1.0&#34;), <br/> harness.WithPullInterval(1),<br/>
    harness.WithStreamEnabled(false))</pre><p></p><h4>Add a Target</h4><div class="note-callout"><strong>What
    is a Target?</strong><br/>Targets are used to control which users see which Variation
    of a Feature Flag, for example, if you want to do internal testing, you can enable
    the Flag for some users and not others. When creating a Target, you give it a
    name and a unique identifier. Often Targets are users but you can create a Target
    from anything that can be uniquely identified, such as an app or a machine.<br/>For
    more information about Targets, go to <a href="/article/xf3hmxbaji-targeting-users-with-flags"
    target="_blank">Targeting Users With Flags</a>. </div><p>To add a Target, build
    it and pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p><code>Identifier</code></p></td><td><p>Unique
    ID for the Target.</p><p>Read <strong>Regex requirements for Target names and
    identifiers</strong> below for accepted characters.</p></td><td><p>Required</p></td><td><p><code>Identifier:
    &#34;HT_1&#34;</code></p></td></tr><tr><td><p><code>Name</code></p></td><td><p>Name
    for this Target. This does not have to be unique. </p><p><strong>Note</strong>:
    If you don’t provide a value, the name will be the same as the identifier.</p><p>Read
    <strong>Regex requirements for Target names and identifiers</strong> below for
    accepted characters.</p></td><td><p>Optional</p><p><strong>Note</strong>: If you
    don&#39;t want to send a name, don&#39;t send the parameter. Sending an empty
    argument will cause an error.</p></td><td><p> <code>Name: &#34;Harness_Target_1&#34;</code></p></td></tr><tr><td><p><code>Attributes</code></p></td><td><p>Additional
    data you can store for a Target, such as email addresses or location.</p></td><td><p>Optional</p></td><td><p><code>Attributes:
    &amp;map[string]interface{}{&#34;email&#34;:&#34;demo@harness.io&#34;},<br/></code></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p></td></tr></tbody></table><p></p><details><summary>Regex
    requirements for Target names and identifiers</summary><div><strong>Identifier<br/></strong>Regex:
    <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/><br/>The characters can be lowercase or uppercase but cannot
    include accented letters, for example <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex:
    <code>^[\\p{L}\\d .@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/> (space)<br/><br/>The characters can be lowercase or uppercase
    and can include accented letters, for example <code>Café_123</code>.</div></details><p>For
    example:</p><h5>Create a Target</h5><pre>target2 := evaluation.Target{<br/> Identifier:
    &#34;HT_1&#34;,<br/> Name: &#34;Harness_Target_1&#34;,<br/> Attributes: &amp;map[string]interface{}{&#34;email&#34;:&#34;demo@harness.io&#34;},<br/>}</pre><h5>Create
    a Target with the builder</h5><p>If you create a Target with the builder, use
    <code>Custom</code> instead of <code>Attributes</code>.</p><pre>target := dto.NewTargetBuilder(&#34;HT_1&#34;).<br/>
    Name(&#34;Harness_Target_1&#34;).<br/> Custom(&#34;email&#34;, &#34;demo@harness.io&#34;).<br/>
    Build()</pre><h3>Evaluate a Flag</h3><p>Evaluating a Flag is when the SDK processes
    all Flag rules and returns the correct Variation of that Flag for the Target you
    provide. </p><p>If a matching Flag can’t be found, or the SDK can’t remotely fetch
    flags, the default value is returned. </p><p>There are different methods for the
    different Variation types and for each method you need to pass in:</p><ul><li>Identifier
    of the Flag you want to evaluate</li><li>The Target object you want to evaluate
    against</li><li>The default Variation</li></ul><p>For example:</p><h4>Evaluate
    a string Variation</h4><pre>client.StringVariation(flagName, &amp;target, &#34;default_string&#34;)</pre><h4>Evaluate
    a boolean Variation</h4><pre>showFeature, err := client.BoolVariation(featureFlagKey,
    &amp;target, false)</pre><h4>Evaluate a number Variation</h4><pre>client.NumberVariation(flagName,
    &amp;target, -1)</pre><h4>Evaluate a JSON Variation</h4><pre>client.JSONVariation(flagName,
    &amp;target, types.JSON{&#34;darkmode&#34;: false})</pre><p></p><h3>Test Your
    App is Connected to Harness</h3><p>When you receive a response showing the current
    status of your Feature Flag, go to the Harness Platform and toggle the Flag on
    and off. Then, check your app to verify if the Flag Variation displayed is updated
    with the Variation you toggled.</p><h3>Close the SDK</h3><p>To help prevent memory
    leaks, we recommend closing the SDK when it’s not in use. To do this, run the
    following command: </p><pre>client.Close()</pre><h3>Additional options </h3><h4>Configure
    your logger</h4><p>The SDK has a default logger, however, you can provide your
    own logger to the SDK by passing it in as a configuration option. </p><p>For example,
    the following creates an instance of the logrus logger and passes it in as a configuration
    option:</p><pre>logger := logrus.New()<br/>logger.SetLevel(logrus.ErrorLevel)<br/><br/> //
    Create a feature flag client<br/>client, err := harness.NewCfClient(sdkKey, harness.WithLogger(logger))</pre><p></p><h4>Use
    the Relay Proxy</h4><p>When using your Feature Flag SDKs with a <a href="/article/q0kvq8nd2o-relay-proxy"
    target="_blank">Harness Relay Proxy</a> you need to change the default URL and
    events URL to <code>http://localhost:7000</code> when initializing the SDK. For
    example:</p><pre>client, err := harness.NewCfClient(apiKey,<br/>harness.WithURL(&#34;http://localhost:7000&#34;),<br/>harness.WithEventsURL(&#34;http://localhost:7000&#34;))</pre><h3>Sample
    code for a Go application</h3><p>Here is a sample code for integrating with the
    Go SDK:</p><pre>package main<br/><br/> import (<br/>         &#34;context&#34;<br/>         &#34;fmt&#34;<br/>         &#34;log&#34;<br/>         &#34;time&#34;<br/> <br/>         harness
    &#34;github.com/harness/ff-golang-server-sdk/client&#34;<br/>         &#34;github.com/harness/ff-golang-server-sdk/dto&#34;<br/>         &#34;github.com/sirupsen/logrus&#34;<br/>)<br/><br/> const
    sdkKey = &#34;your SDK key&#34;<br/><br/> const featureFlag = &#34;harnessappdemodarkmode&#34;<br/><br/> func
    main() {<br/><br/>        logger := logrus.New()<br/>        logger.SetLevel(logrus.ErrorLevel)<br/>    <br/>        client,
    err := harness.NewCfClient(myApiKey, <br/>                 harness.WithURL(&#34;https://config.ff.harness.io/api/1.0&#34;), <br/>                 harness.WithEventsURL(&#34;https://events.ff.harness.io/api/1.0”), <br/>                 harness.WithPullInterval(1),<br/>                 harness.WithLogger(logger),<br/>                 harness.WithStreamEnabled(false)<br/>)<br/><br/>        defer
    func() {<br/>               if err := client.Close(); err != nil {<br/>                     log.Printf(&#34;error
    while closing client err: %v&#34;, err)<br/>               }<br/>         }()<br/><br/>        if
    err != nil {<br/>                 log.Printf(&#34;could not connect to CF servers
    %v&#34;, err)<br/>         }<br/><br/>        target := dto.NewTargetBuilder(&#34;HT_1&#34;).<br/>                 Name(&#34;Harness_Target_1&#34;).<br/>                 Custom(&#34;email&#34;,
    &#34;demo@harness.io&#34;).<br/>                 Build()<br/>    <br/>        ctx,
    cancel := context.WithCancel(context.Background())<br/><br/>         go func()
    {<br/>                 for {<br/>                        select {<br/>                         case
    &lt;-ctx.Done():<br/>                                 return<br/>                         default:<br/>                                 showFeature,
    err :=     client.BoolVariation(featureFlag, &amp;target, false)<br/><br/>                                 
    if err != nil {<br/>                                        fmt.Printf(&#34;Error
    getting value: %v&#34;, err)<br/>                                  }<br/><br/>                                 
    fmt.Printf(&#34;KeyFeature flag &#39;%s&#39; is %t for this user\n&#34;, featureFlag,
    showFeature)<br/>                      time.Sleep(10 * time.Second)<br/>                 }<br/>             }<br/>        }()<br/><br/>        time.Sleep(5
    * time.Minute)<br/>        cancel()<br/>}</pre><p></p>'
  slug: feature-flag-sdks-go-application
  tags:
  - feature flag
  - Go SDK
  - SDK
  is_live: true
