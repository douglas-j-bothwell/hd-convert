type: article
article_id: i7et9ebkst
user_id: vt9reb71i4
category_id: kkiqy1f6d7
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Java SDK Reference
slug: integrate-feature-flag-with-java-sdk
description: This topic explains how to integrate your feature flags with Java SDK.
short_version: This topic explains how to integrate your feature flags with Java SDK.
tags:
- feature flag
- java SDK
- SDK
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-08T13:28:53.846407Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Java SDK Reference
  description: This topic explains how to integrate your feature flags with Java SDK.
  short_version: This topic explains how to integrate your feature flags with Java
    SDK.
  body: '<p>This topic describes how to use the Harness Feature Flags Java SDK for
    your Java application.</p><p>For getting started quickly, you can use our <a href="https://github.com/harness/ff-java-server-sdk/blob/main/README.md"
    target="_blank">sample code from the Java SDK README</a>. You can also <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository">clone</a>
    and run a sample application from the <a href="https://github.com/harness/ff-java-server-sdk"
    target="_blank">Java SDK GitHub Repository.</a></p><h3>Before you begin</h3><p>Make
    sure you read and understand:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview"
    target="_blank">Feature Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features"
    target="_blank">Getting Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks"
    target="_blank">Client-Side and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags"
    target="_blank">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class="note-callout">The current version of this SDK is <strong>1.1.5.1.</strong></div><h3>Requirements</h3><p>To
    use this SDK, make sure you:  </p><ul><li>Install JDK 8 or a newer version </li><li>Install
    <a href="https://maven.apache.org/" target="_blank">Maven</a>, <a href="https://gradle.org/"
    target="_blank">Gradle</a> or an alternative build automation tool for your application</li><li><a
    href="https://github.com/harness/ff-java-server-sdk" target="_blank">Download
    the SDK from our GitHub repository</a></li><li>Create a Java application, or <a
    href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> our <a href="https://github.com/harness/ff-java-server-sdk"
    target="_blank">sample application</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag"
    target="_blank">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called
    <code>harnessappdemodarkmode</code>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key"
    target="_blank">Create an SDK key and make a copy of it</a></li></ul><h3>Install
    the SDK</h3><p>Install the Feature Flag SDK as a dependency in your application
    using your application&#39;s dependency manager. You can use Maven, Gradle, SBT,
    etc. for your application. </p><p>Below are the dependencies for Maven and Gradle
    that uses Java SDK version 1.1.5.1 as an example:</p><h4>Install using Maven</h4><p>Add
    the following dependency in your project&#39;s pom.xml file:</p><pre>&lt;dependency&gt;<br/>    &lt;groupId&gt;io.harness&lt;/groupId&gt;<br/>    &lt;artifactId&gt;ff-java-server-sdk&lt;/artifactId&gt;<br/>    &lt;version&gt;1.1.5&lt;/version&gt;<br/>&lt;/dependency&gt;</pre><p></p><div
    class="note-callout">If you are using the Harness Java sample application from
    the <a href="https://github.com/harness/ff-java-server-sdk">Java SDK GitHub repository</a>,
    do not add the Maven dependency in the <code>pom.xml</code> file as it has already
    been added.</div><h4>Install using Gradle</h4><pre>implementation group: &#39;io.harness&#39;,
    name: &#39;ff-java-server-sdk&#39;, version: &#39;1.1.5.1&#39;</pre><h3>Initialize
    the SDK</h3><p>To initialize the Java SDK, you need to:</p><ol><li>Add your Server
    SDK key to connect to your Harness Environment.</li><li>Add a Target that you
    want to Evaluate against a Feature Flag.</li><li>Configure the SDK options, if
    needed. For more details on what features you can configure for this SDK, go to
    <a href="#configure_the_sdk">Configure the SDK</a>.</li><li>Complete the initialization
    with the SDK using the Server SDK Key, Target, and Configuration parameters you
    set.</li></ol><h4>Add the Server SDK Key</h4><p>After installing the SDK, you
    must enter the server SDK key that you created in the Harness platform into the
    apiKey field, for example:</p><pre>String apiKey = System.getProperty(&#34;FF_API_KEY&#34;,
    &#34;&lt;default api key&gt;&#34;);</pre><p> </p><h4>Add a Target</h4><div class="note-callout"><strong>What
    is a Target?</strong><br/>Targets are used to control which users see which Variation
    of a Feature Flag, for example, if you want to do internal testing, you can enable
    the Flag for some users and not others. When creating a Target, you give it a
    name and a unique identifier. Often Targets are users but you can create a Target
    from anything that can be uniquely identified, such as an app or a machine.<br/>For
    more information about Targets, go to <a href="/article/xf3hmxbaji-targeting-users-with-flags"
    target="_blank">Targeting Users With Flags</a>.</div><p>To add a Target, build
    it and pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p><code>identifier</code></p></td><td><p>Unique
    ID for the Target</p><p>Read <strong>Regex requirements for Target names and identifiers</strong>
    below for accepted characters.</p></td><td><p>Required</p></td><td><p><code>.identifier(&#34;HT_1&#34;)</code></p></td></tr><tr><td><p><code>name</code></p></td><td><p>Name
    for this Target. This does not have to be unique. </p><p><strong>Note</strong>:
    If you don’t provide a value, the name will be the same as the identifier.</p><p>Read
    <strong>Regex requirements for Target names and identifiers</strong> below for
    accepted characters.</p></td><td><p>Optional</p><p><strong>Note</strong>: If you
    don&#39;t want to send a name, don&#39;t send the parameter. Sending an empty
    argument will cause an error.</p></td><td><p><code>.name(&#34;Harness_Target_1&#34;)</code></p></td></tr><tr><td><p><code>attributes</code></p></td><td><p>Additional
    data you can store for a Target, such as email addresses or location.</p></td><td><p>Optional</p></td><td><p><code>.attributes(new
    HashMap&lt;String, Object&gt;())</code></p></td></tr></tbody></table><p></p><details><summary>Regex
    requirements for Target names and identifiers</summary><div><strong>Identifier<br/></strong>Regex:
    <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/><br/>The characters can be lowercase or uppercase but cannot
    include accented letters, for example <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex:
    <code>^[\\p{L}\\d .@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/> (space)<br/><br/>The characters can be lowercase or uppercase
    and can include accented letters, for example <code>Café_123</code>.</div></details><p></p><p>For
    example:</p><pre>Target target = Target.builder()<br/>                   .name(&#34;Harness_Target_1&#34;)<br/>                   .attributes(new
    HashMap&lt;String, Object&gt;())<br/>                   .identifier(&#34;HT_1&#34;)<br/>                   .build();</pre><p></p><h4>Configure
    the SDK</h4><p>You can configure the following features of the SDK through the
    <code>baseConfig</code>:</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Example</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p><code>HarnessConfig.configUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL used to fetch Feature Flag Evaluations. When using the Relay Proxy, change
    this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventUrl</p></td><td><p><code>HarnessConfig.eventUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>pollInterval</p></td><td><p><code>BaseConfig.pollIntervalInSeconds(60))</code></p></td><td><p>The
    interval <strong>in seconds</strong> that we poll for changes when you are using
    stream mode.</p></td><td><p><code>60</code> (seconds)</p></td></tr><tr><td><p>streamEnabled</p></td><td><p><code>BaseConfig.streamEnabled(false)</code></p></td><td><p>Set
    to <code>true</code> to enable streaming mode.</p><p>Set to <code>false</code>
    to disable streaming mode.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>analyticsEnabled</p></td><td><p><code>BaseConfig.analyticsEnabled(true)</code></p></td><td><p>Set
    to <code>true</code> to enable analytics.</p><p>Set to <code>false</code> to disable
    analytics.</p><p><strong>Note</strong>: When enabled, analytics data is posted
    every 60 seconds.</p></td><td><p><code>true</code></p></td></tr></tbody></table><p></p><pre>For
    example:<br/>// Create Options<br/>BaseConfig options = BaseConfig.builder()<br/>        .pollIntervalInSeconds(60)<br/>        .streamEnabled(true)<br/>        .analyticsEnabled(true)<br/>        .build();</pre><p> </p><p>When
    initializing the SDK, you can also configure it to use the Harness Relay Proxy,
    for more information about how to do this, go to <a href="/article/i7et9ebkst-integrate-feature-flag-with-java-sdk#use_the_relay_proxy">Use
    the Relay Proxy</a>. </p><h4>Complete the initialization</h4><p>To complete the
    initialization, create an instance of the <code>cfClient</code> and pass in the
    Server SDK key, Target, and configuration options. </p><h4>Sample of initializing
    the SDK</h4><pre>// Connector Config<br/>HarnessConfig connectorConfig = HarnessConfig.builder()<br/>        .configUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)<br/>        .eventUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)<br/>        .build();<br/><br/>//
    Create Options<br/>BaseConfig options = BaseConfig.builder()<br/>        .pollIntervalInSeconds(60)<br/>        .streamEnabled(true)<br/>        .analyticsEnabled(true)<br/>        .build();<br/><br/>//
    Create the client<br/>CfClient cfClient = new CfClient(new HarnessConnector(apiKey,
    connectorConfig), options);</pre><h3>Evaluate a Flag</h3><p>Evaluating a Flag
    is when the SDK processes all Flag rules and returns the correct Variation of
    that Flag for the Target you provide. </p><p>If a matching Flag can’t be found,
    or the SDK can’t remotely fetch flags, the default value is returned. </p><p>There
    are different methods for the different Variation types and for each method you
    need to pass in:</p><ul><li>Identifier of the Flag you want to evaluate</li><li>The
    Target object you want to evaluate against</li><li>The default Variation</li></ul><p>For
    example:</p><h4>Evaluate a boolean Variation</h4><pre>boolean result = cfClient.boolVariation(&#34;sample_boolean_flag&#34;,
    target, false);</pre><h4>Evaluate a number Variation</h4><pre>boolean result =
    cfClient.numberVariation(&#34;sample_number_flag&#34;, target, 0);</pre><h4>Evaluate
    a string Variation</h4><pre>boolean result = cfClient.stringVariation(&#34;sample_string_flag&#34;,
    target, &#34;&#34;);</pre><h4>Evaluate a multivariate Variation</h4><pre>double
    number = cfClient.numberVariation(COUNT_FEATURE_KEY, parentTarget, 1);<br/>      String
    color = cfClient.stringVariation(COLOR_FEATURE_KEY, target, &#34;black&#34;);</pre><h3>Test
    your app is connected to Harness</h3><p>When you receive a response showing the
    current status of your Feature Flag, go to the Harness Platform and toggle the
    Flag on and off. Then, check your app to verify if the Flag Variation displayed
    is updated with the Variation you toggled.</p><h3>Close the SDK</h3><p>To help
    prevent memory leaks, we recommend closing the SDK when it’s not in use. To do
    this, run the following command: </p><pre>cfClient.close();</pre><p></p><h3>Additional
    options</h3><h4>Develop on your local environment</h4><p>By default, you are connected
    to the Harness environment but you can use a local connector to develop in your
    local environment. To do this: </p><ol><li>Create three folders to contain the
    data for your  flags, segments and metrics, for example:<br/><code>local/flags</code><br/><code>local/segments</code><br/><code>local/metrics</code></li><li>In
    the flags folder, create files with a <code>json</code> extension and the following
    structure:</li></ol><pre>{<br/>  &#34;project&#34;: &#34;string&#34;,<br/>  &#34;environment&#34;:
    &#34;string&#34;,<br/>  &#34;feature&#34;: &#34;string&#34;,<br/>  &#34;state&#34;:
    &#34;on&#34;,<br/>  &#34;kind&#34;: &#34;boolean&#34;,<br/>  &#34;variations&#34;:
    [<br/>    {<br/>      &#34;identifier&#34;: &#34;off-variation&#34;,<br/>      &#34;value&#34;:
    true,<br/>      &#34;name&#34;: &#34;Off Variation&#34;,<br/>      &#34;description&#34;:
    &#34;string&#34;<br/>    }<br/>  ],<br/>  &#34;rules&#34;: [<br/>    {<br/>      &#34;ruleId&#34;:
    &#34;string&#34;,<br/>      &#34;priority&#34;: 1,<br/>      &#34;clauses&#34;:
    [<br/>        {<br/>          &#34;id&#34;: 32434243,<br/>          &#34;attribute&#34;:
    &#34;identifier&#34;,<br/>          &#34;op&#34;: &#34;starts_with&#34;,<br/>          &#34;values&#34;:
    [<br/>            &#34;string&#34;<br/>          ],<br/>          &#34;negate&#34;:
    false<br/>        }<br/>      ],<br/>      &#34;serve&#34;: {<br/>        &#34;distribution&#34;:
    {<br/>          &#34;bucketBy&#34;: &#34;string&#34;,<br/>          &#34;variations&#34;:
    [<br/>            {<br/>              &#34;variation&#34;: &#34;off-variation&#34;,<br/>              &#34;weight&#34;:
    50<br/>            }<br/>          ]<br/>        },<br/>        &#34;variation&#34;:
    &#34;string&#34;<br/>      }<br/>    }<br/>  ],<br/>  &#34;defaultServe&#34;:
    {<br/>    &#34;distribution&#34;: {<br/>      &#34;bucketBy&#34;: &#34;string&#34;,<br/>      &#34;variations&#34;:
    [<br/>        {<br/>          &#34;variation&#34;: &#34;off-variation&#34;,<br/>          &#34;weight&#34;:
    50<br/>        }<br/>      ]<br/>    },<br/>    &#34;variation&#34;: &#34;string&#34;<br/>  },<br/>  &#34;offVariation&#34;:
    &#34;string&#34;,<br/>  &#34;prerequisites&#34;: [<br/>    {<br/>      &#34;feature&#34;:
    &#34;string&#34;,<br/>      &#34;variations&#34;: [<br/>        &#34;string&#34;<br/>      ]<br/>    }<br/>  ],<br/>  &#34;variationToTargetMap&#34;:
    [<br/>    {<br/>      &#34;variation&#34;: &#34;off-variation&#34;,<br/>      &#34;targets&#34;:
    [<br/>        {<br/>          &#34;identifier&#34;: &#34;string&#34;,<br/>          &#34;name&#34;:
    &#34;string&#34;<br/>        }<br/>      ],<br/>      &#34;targetSegments&#34;:
    [<br/>        &#34;string&#34;<br/>      ]<br/>    }<br/>  ],<br/>  &#34;version&#34;:
    0<br/>}</pre><ol><li style="counter-increment:li 2" start="3">In the segments
    folder, create files with a <code>json</code> extension and the following structure:</li></ol><pre>{<br/>   &#34;identifier&#34;:
    &#34;string&#34;,<br/>   &#34;name&#34;: &#34;Beta Testers&#34;,<br/>   &#34;environment&#34;:
    &#34;Production&#34;,<br/>   &#34;tags&#34;: [<br/>     {<br/>       &#34;name&#34;:
    &#34;string&#34;,<br/>       &#34;value&#34;: &#34;string&#34;<br/>     }<br/>   ],<br/>   &#34;included&#34;:
    [<br/>     {<br/>       &#34;identifier&#34;: &#34;john-doe&#34;,<br/>       &#34;account&#34;:
    &#34;abcXDdffdaffd&#34;,<br/>       &#34;org&#34;: &#34;string&#34;,<br/>       &#34;environment&#34;:
    &#34;string&#34;,<br/>       &#34;project&#34;: &#34;string&#34;,<br/>       &#34;name&#34;:
    &#34;John Doe&#34;,<br/>       &#34;anonymous&#34;: true,<br/>       &#34;attributes&#34;:
    {<br/>         &#34;age&#34;: 20,<br/>         &#34;location&#34;: &#34;Belfast&#34;<br/>       },<br/>       &#34;createdAt&#34;:
    0,<br/>       &#34;segments&#34;: [<br/>         null<br/>       ]<br/>     }<br/>   ],<br/>   &#34;excluded&#34;:
    [<br/>     {<br/>       &#34;identifier&#34;: &#34;john-doe&#34;,<br/>       &#34;account&#34;:
    &#34;abcXDdffdaffd&#34;,<br/>       &#34;org&#34;: &#34;string&#34;,<br/>       &#34;environment&#34;:
    &#34;string&#34;,<br/>       &#34;project&#34;: &#34;string&#34;,<br/>       &#34;name&#34;:
    &#34;John Doe&#34;,<br/>       &#34;anonymous&#34;: true,<br/>       &#34;attributes&#34;:
    {<br/>         &#34;age&#34;: 20,<br/>         &#34;location&#34;: &#34;Belfast&#34;<br/>       },<br/>       &#34;createdAt&#34;:
    0,<br/>       &#34;segments&#34;: [<br/>         null<br/>       ]<br/>     }<br/>   ],<br/>   &#34;rules&#34;:
    [<br/>     {<br/>       &#34;id&#34;: 32434243,<br/>       &#34;attribute&#34;:
    &#34;identifier&#34;,<br/>       &#34;op&#34;: &#34;starts_with&#34;,<br/>       &#34;values&#34;:
    [<br/>         &#34;string&#34;<br/>       ],<br/>       &#34;negate&#34;: false<br/>     }<br/>   ],<br/>   &#34;createdAt&#34;:
    0,<br/>   &#34;modifiedAt&#34;: 0,<br/>   &#34;version&#34;: 1<br/> }</pre><p> </p><ol><li
    style="counter-increment:li 3" start="4">Leave the metrics folder empty. </li><li>Create
    an instance of <code>LocalConnector</code> and pass in the location of your folders.</li><li>Pass
    the instance into the <code>cfClient</code> when initializing the SDK. </li></ol><p>For
    example: </p><pre>LocalConnector connector = new LocalConnector(path);<br/>CfClient
    client = new CfClient(connector, BaseConfig.builder().build())</pre><p> </p><h4>Configure
    your logger</h4><p>You can provide your own logger to the SDK and configure it
    using the standard logging configuration. </p><h5>Log4j logger</h5><p>If using
    Log4j you can add the following <code>log4j2.xml</code> to your project, for example:</p><pre>&lt;?xml
    version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;<br/>&lt;Configuration status=&#34;INFO&#34;
    monitorInterval=&#34;30&#34;&gt;<br/>    &lt;Properties&gt;<br/>        &lt;Property
    name=&#34;LOG_PATTERN&#34;&gt;%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1} SDK=${sys:SDK}
    flag=${sys:version} target=%mdc{target} - %m%n&lt;/Property&gt;<br/>    &lt;/Properties&gt;<br/><br/>     &lt;Appenders&gt;<br/>        &lt;Console
    name=&#34;console&#34; target=&#34;SYSTEM_OUT&#34; follow=&#34;true&#34;&gt;<br/>            &lt;PatternLayout
    pattern=&#34;${LOG_PATTERN}&#34;/&gt;<br/>        &lt;/Console&gt;<br/>    &lt;/Appenders&gt;<br/> <br/>    &lt;Loggers&gt;<br/>        &lt;Root
    level=&#34;debug&#34;&gt;<br/>            &lt;AppenderRef ref=&#34;console&#34;/&gt;<br/>        &lt;/Root&gt;<br/>    &lt;/Loggers&gt;<br/>&lt;/Configuration&gt;</pre><p>  </p><h4>Use
    the Relay Proxy</h4><p>To use the Relay Proxy, you need to change the following
    URLs in the HarnessConfig class when initializing the SDK to <code>http://localhost:7000</code>.</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Example</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p><code>HarnessConfig.configUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL used to fetch Feature Flag Evaluations. When using the Relay Proxy, change
    this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventUrl</p></td><td><p><code>HarnessConfig.eventUrl(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr></tbody></table><p></p><p>For
    example: </p><pre>HarnessConfig connectorConfig = HarnessConfig.builder()<br/>        .configUrl(&#34;http://localhost:7000&#34;)<br/>        .eventUrl(&#34;http://localhost:7000&#34;)<br/>        .build();</pre><p></p><h3>Sample
    code for a Java application</h3><p>Here is a sample code for integrating with
    the Java SDK:</p><pre>package io.harness.ff.examples;<br/><br/>import io.harness.cf.client.api.*;<br/>import
    io.harness.cf.client.dto.Target;<br/> <br/>import java.util.concurrent.Executors;<br/>import
    java.util.concurrent.ScheduledExecutorService;<br/><br/>import java.util.concurrent.TimeUnit;<br/><br/>public
    class GettingStarted {<br/>    // API Key - set this as an env variable<br/>    private
    static String apiKey = getEnvOrDefault(&#34;FF_API_KEY&#34;, &#34;&#34;);<br/> <br/>    //
    Flag Identifier<br/><br/>    private static String flagName = getEnvOrDefault(&#34;FF_FLAG_NAME&#34;,
    &#34;harnessappdemodarkmode&#34;);<br/><br/>    private static final ScheduledExecutorService
    scheduler = Executors.newScheduledThreadPool(1);<br/><br/> <br/>    public static
    void main(String[] args) {<br/>        System.out.println(&#34;Harness SDK Getting
    Started&#34;);<br/> <br/>        try {<br/>            //Create a Feature Flag
    Client<br/>            CfClient cfClient = new CfClient(apiKey);<br/>            cfClient.waitForInitialization();<br/> <br/>            //
    Create a target (different targets can get different results based on rules. 
    This includes a custom attribute &#39;location&#39;)<br/><br/>            final
    Target target = Target.builder()<br/>                    .identifier(&#34;javasdk&#34;)<br/>                    .name(&#34;JavaSDK&#34;)<br/>                    .attribute(&#34;location&#34;,
    &#34;emea&#34;)<br/>                    .build();<br/><br/> <br/>            //
    Loop forever reporting the state of the flag<br/>            scheduler.scheduleAtFixedRate(<br/>                    ()
    -&gt; {<br/>                        boolean result = cfClient.boolVariation(flagName,
    target, false);<br/>                        System.out.println(&#34;Boolean variation
    is &#34; + result);<br/>                    },<br/>                    0,<br/>                    10,<br/>                    TimeUnit.SECONDS);<br/> <br/>        }
    catch (Exception e) {<br/>            e.printStackTrace();<br/><br/>        }
    finally {<br/>            // Close the SDK<br/>            CfClient.getInstance().close();<br/>        }<br/>    }<br/> <br/>    //
    Get the value from the environment or return the default<br/>    private static
    String getEnvOrDefault(String key, String defaultValue) {<br/>        String value
    = System.getenv(key);<br/>        if (value == null || value.isEmpty()) {<br/>            return
    defaultValue;<br/>        }<br/>        return value;<br/>    }<br/>}</pre><p></p>'
  slug: integrate-feature-flag-with-java-sdk
  tags:
  - feature flag
  - java SDK
  - SDK
  is_live: true
