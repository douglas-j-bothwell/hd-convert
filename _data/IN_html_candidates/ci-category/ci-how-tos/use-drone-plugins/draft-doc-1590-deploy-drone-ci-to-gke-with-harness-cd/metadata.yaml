type: article
article_id: zb5avliyvc
user_id: xwmdbyp4x8
category_id: ei5fgqxb0j
author:
  name: Doug Bothwell
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: DRAFT DOC-1590 Deploy Drone CI to GKE with Harness CD
slug: draft-doc-1590-deploy-drone-ci-to-gke-with-harness-cd
description: Deploying Drone CI to GKE with Harness CD Since 2012, busy development
  teams across the globe have been leveraging Drone CI to accelerate their CI pipelines.
  Acquired by Harness in August of 2020, Dr…
short_version: Deploying Drone CI to GKE with Harness CD Since 2012, busy development
  teams across the globe have been leveraging Drone CI to accelerate their CI pipelines.
  Acquired by Harness in August of 2020, Dr…
tags: []
show_toc: false
is_private: false
is_published: false
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-05-12T23:20:21.067357Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: DRAFT DOC-1590 Deploy Drone CI to GKE with Harness CD
  description: ""
  short_version: ""
  body: '<p>Deploying Drone CI to GKE with Harness CD</p><p>Since 2012, busy development
    teams across the globe have been leveraging <a href="https://www.drone.io/">Drone
    CI</a> to accelerate their CI pipelines. <a href="https://www.prnewswire.com/news-releases/harness-acquires-continuous-integration-pioneer-droneio-and-commits-to-open-source-301106473.html">Acquired</a>
    by Harness in August of 2020, Drone CI can run anywhere you find Docker containers,
    such as Kubernetes.</p><p>This guide will explore how to deploy Drone CI to a
    <a href="https://cloud.google.com/kubernetes-engine">Google Kubernetes Engine</a>
    (GKE) cluster with <a href="https://harness.io/products/continuous-delivery">Harness
    CD</a> using <a href="https://helm.sh/">Helm</a>.</p><h3>Prerequisites</h3><ol><li><a
    href="https://cloud.google.com/">Google Cloud</a> account with a running <a href="https://cloud.google.com/kubernetes-engine/docs/deploy-app-cluster">GKE
    cluster</a></li><li><a href="https://kubernetes.io/docs/reference/kubectl/">Kubectl</a>
    installed locally and <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl">configured</a>
    for your GKE cluster</li><li><a href="https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address">Static
    IP</a> that can be used in your GKE cluster</li><li><a href="https://github.com/">GitHub</a>
    account</li></ol><h3>Create the GitHub Oauth Application</h3><p>Drone integrates
    with many popular Source Control Management (SCM) providers, such as <a href="https://docs.drone.io/server/provider/github/">GitHub</a>,
    <a href="https://docs.drone.io/server/provider/gitee/">Gitea</a>, <a href="https://docs.drone.io/server/provider/bitbucket-cloud/">Bitbucket</a>,
    <a href="https://docs.drone.io/server/provider/gitlab/">GitLab</a>, <a href="https://docs.drone.io/server/overview/">and
    more</a>. Unlike some other CI tools that require separate user management, Drone
    leverages the existing user access from your SCM. For this to work, we will need
    to create an <a href="https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app">OAuth
    application</a> in GitHub for our Drone CI instance.</p><p>Sign in to your GitHub
    account and open <a href="https://github.com/settings/developers">https://github.com/settings/developers</a>,
    then click “Register new application”</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/zb5avliyvc/1652206350268/b-kfnu-0-e-3-q-ge-yn-o-55-mi-xw-alb-5-dq-06-e-5-cje-sbx-xha-cuoxjis-i-2-qsllfvwb-2-n-mcgdus-nave-4-mkzpyysyqq-6-vityd-5-xw-8-o-5-pjy-3-qp-hp-by-n-ikozd-xvg-lac-yfevtk-jmb-btv-3-xykayhi-8-ivn-deocw"
    style="max-height:50%;max-width:50%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="50%" data-hd-width="50%" data-hd-align="left"/></figure><p></p><p>On
    the following page, we’ll call the Oauth application “My Drone CI”. For the “Homepage
    URL”, we’ll use the <a href="https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address">static
    IP</a> (34.148.171.160 in this example) that we created previously, with a http://
    prefix.  Next, for the “Authorization callback URL, we will use the same URL,
    but with /login appended.</p><table><tbody><tr><td><p>Note: While out of the scope
    of this guide, to improve security and usability, production Drone CI instances
    should be configured with a DNS name, and a valid SSL certificate. Google Cloud
    provides <a href="https://cloud.google.com/dns">Cloud DNS</a>, and a service such
    as <a href="https://letsencrypt.org/">Let’s Encrypt</a> could be used to manage
    the SSL certificate. Drone CI has <a href="https://docs.drone.io/server/https/">native
    support</a> for SSL certificates.</p></td></tr></tbody></table><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/zb5avliyvc/1652397309058/n-ldb-rtff-igaoq-nbnv-3-uq-fv-6-lbm-9-fs-zvfe-2-jzrhru-pq-krud-l-r-in-jb-vu-3-mh-vbr-qv-gil-9-jh-rr-px-k-nh-489-od-c-5-ln-1-bjr-mm-w-460-lhe-blp-c-3-ufd-yeqklm-zzt-jqdi-2-usu-hxod-o-3-li-kvagzq-ckr-q"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>Click
    “Register application”.</p><p>On the following page, click “Generate a new client
    secret”. Make a note of the client ID, along with the client secret (the client
    secret is only displayed once, if you misplace it, you will need to generate a
    new client secret). </p><p></p><figure><img src="https://lh6.googleusercontent.com/PrjTpaljdsl0T0vTb6yMXfaEkiyi5fDCUqEPrw9AtIqFiJX9_6DbJbZLvfxRI2ElQMzq7DlnqW-kIqTAbsBCmMEE9Ic6YY42hhzUClMpfLeh9BEPQwz51p3YpQyA73_yO7VqyhZjSv7_NxZbqw"/></figure><p></p><h3>Create
    Kubernetes namespace and secrets</h3><p>In this example, we will deploy both the
    Drone CI server and Docker runner to the ‘drone’ <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/">namespace</a>.
    To create the namespace, write the following content to a file called drone-namespace.yaml:</p><p>apiVersion:
    v1</p><p>kind: Namespace</p><p>metadata:</p><p>  name: &#34;drone&#34;</p><p>  labels:</p><p>    name:
    &#34;drone&#34;</p><p>Create the namespace with ‘kubectl apply’:</p><p>$ kubectl
    apply -f drone-namespace.yaml</p><p>namespace/drone created</p><p>Next, we will
    create Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/secret/">secrets</a>
    for values that we do not want to check into our Git repository.</p><p>First,
    we will create a secret named ‘drone-github-client-secret’ for the OAuth application
    client secret from the previous step, using ‘kubectl create secret’:</p><p>$ kubectl
    create secret --namespace drone generic --from-literal=DRONE_GITHUB_CLIENT_SECRET=&#39;3c2a07b0c611ccfe4d4292dda78656e919c9d714&#39;
    drone-github-client-secret</p><p>secret/drone-github-client-secret created</p><p>Next,
    the Drone CI server requires a <a href="https://docs.drone.io/server/provider/github/#create-a-shared-secret">shared
    secret</a> to authenticate communication between the Docker runner and the server.
    Generate the secret with ‘openssl’ and create the secret:</p><p>$ openssl rand
    -hex 16</p><p>ecb57cb061d93d26b10b87a814d4601b</p><p>$ kubectl create secret --namespace
    drone generic --from-literal=DRONE_RPC_SECRET=&#39;ecb57cb061d93d26b10b87a814d4601b&#39;
    drone-rpc-secret</p><p>secret/drone-rpc-secret created</p><h3>Create Helm values
    files</h3><p>Harness CD supports multiple methods for defining Kubernetes resources,
    such as <a href="https://ngdocs.harness.io/article/7owpxsaqar-deploy-helm-charts">Helm</a>,
    <a href="https://ngdocs.harness.io/article/uajkpcmqjg-using-open-shift-with-harness-kubernetes">OpenShift</a>,
    and <a href="https://ngdocs.harness.io/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments">Kustomize</a>.
    Drone CI provides official Helm charts at <a href="https://github.com/drone/charts">https://github.com/drone/charts</a>.
    The Helm charts provide the bulk of the required configuration, but we will need
    to provide <a href="https://helm.sh/docs/chart_template_guide/values_files/">values
    files</a> to set the requisite variables, and allow us to override any configuration
    that is important to us.</p><p>Harness CD can read our Helm values files from
    any <a href="https://git-scm.com/">Git</a> repository. For this example, I created
    a repository with a values file <a href="https://github.com/jimsheldon/helm-sandbox/blob/main/harness/drone.yaml">drone.yaml</a>
    with the following content:</p><p>fullnameOverride: drone-demo</p><p>service:</p><p>  type:
    LoadBalancer</p><p>  loadBalancerIP: 34.148.171.160</p><p>extraSecretNamesForEnvFrom:</p><p>  -
    drone-rpc-secret</p><p>  - drone-github-client-secret</p><p>env:</p><p>  DRONE_SERVER_HOST:
    34.148.171.160</p><p>  DRONE_GITHUB_CLIENT_ID: 84927be8bbb89a109125</p><p>Here,
    fullnameOverride ensures that the name of each resource created will be ‘drone-demo’.</p><p>The
    service section ensures that GKE will create a Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/">service</a>
    of type <a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer">LoadBalancer</a>
    and assign the static IP generated previously.</p><p>‘extraSecretNamesForEnvFrom’
    passes the two Kubernetes secrets drone-rpc-secret and drone-github-client-secret
    generated in the previous step.</p><p>The ‘env’ section passes <a href="https://docs.drone.io/server/reference/">environment
    variables</a> to the Drone CI server. DRONE_SERVER_HOST is the same as loadBalancerIP
    above, DRONE_GITHUB_CLIENT_ID is the client ID of our GitHub OAuth application.</p><p>Now
    we will need a values files for the Docker runner, for this example, I created
    the file <a href="https://github.com/jimsheldon/helm-sandbox/blob/main/harness/drone-runner-docker.yaml">drone-runner-docker.yaml</a>
    with the following content:</p><p>extraSecretNamesForEnvFrom:</p><p>  - drone-rpc-secret</p><p>env:</p><p>  DRONE_RPC_HOST:
    drone-demo</p><p>Similar to the Drone CI server configuration above, we pass the
    secret ‘drone-rpc-secret’ in the ‘extraSecretNamesForEnvFrom’ list.</p><p>The
    only <a href="https://docs.drone.io/runner/docker/configuration/reference/">environment
    variable</a> required for this example is DRONE_RPC_HOST, which will resolve to
    the Drone CI server service name.</p><h3>Deploy the Drone CI server and Docker
    runner</h3><p>Login to <a href="https://app.harness.io/">app.harness.io</a>, click
    “Projects”, then click “Create a Project”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/WXYKsTp6SDrqyYfEMVBf8hWTRKpHR3QcsJXHCQeTC6r1MojDe81_OqCbhdYIyw_XDWE7a7YtJV7Bk69n594uq09BN87S6xDrA1x_Ya4oAAbOk9xwaFi2A1-feCD9iChRqcbqwBbgxklCKn2niA"/></figure><p></p><p>Call
    the new project “Drone CI”, click “Save and Continue”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/0g2Kmj5uNCVY4-T28V-sczzMugiPYfkHz4PCZDL2KUEAi2CGj3e_VXY53gyothqOVV-ujs0hL5yQ14j0yvzpf-ELCuoe8XNrNfs4OS_IW0d2Q_f56W07guf9di13uaPTMSO8f-Qyx73bOzz33g"/></figure><p></p><p>On
    the following “Invite Collaborators” step, click “Save and Continue”.</p><p>Choose
    the “Continuous Delivery” module, then click “Go to Module”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/6yIncchT99wcMe5nfAUla_a7ijG2RMGXx_F6veSwHySpRwXtkU3nuLFjECqVAJjMGsvYVTaz0ts-sn7g0CzBDhBESvMaUafdl4qVRC5_7Ne5HOJP-YpBnskxHkcSqzPsX9Ndo16XvpOqRFcLSg"/></figure><p></p><p>Click
    the “Pipelines” link from the menu on the left, then click “Create a Pipeline”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/pPn8T5fNkelYaFwbmfrLSZTn37XhU5klaa73CpyXi2V0YtwBNllWjeJSMlIfe_iUso8Yd_g4TedD6iscg1IPDaYh8eCgIUBeBuH0yxeLLjFt5vQgVEMbnu3k_WsLvaMLM7FbmswdF0S-OndFvA"/></figure><p></p><p>Name
    the pipeline “Drone CI” and click “Start”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/GXRUaMVEd9BajsmnAwdqO3L2TKOtwo0GudPBUSsHbxAiZ7zsAGyyzGx4SBuX7YzPnU0NKlfMC_ePrOJdOF3jRuk56i6kP6qEb7SvTTN6K-bW1HKi6z6JDresn2solb2XZtMAtAhcjsLH_bCr0A"/></figure><p></p><p>Click
    “Add Stage”, then click “Deploy” for the stage type:</p><p></p><figure><img src="https://lh5.googleusercontent.com/SKp3oeI2p4KivDL4nOZSXuGeRnDTmC0k0ZyGHPs4O6oJLCdzTBapMj7v-6_ErhrcG48BkAVONsApG1YetEAsv3MuzyOLTT7StXMMVWeY8DyaBdMwqYn7cYHnlXii4DpmEVHGzyTsmYJ9YMkn5w"/></figure><p></p><p>Set
    the stage name to “server”, then click “Set Up Stage”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/jy2lrMliAo-gBT07xfjFZoJLCVg5pxcpAN4tSaymoBdWRhk9Kqtu_JL4zqbO-SdP1ymfudfOJoNyJOywlOfKC8A_xIwiebFcMylxqy1Eo4z1vNEj_VkbF1AKgmJgmvpZKlNF_Rd7TtjtA6pC-Q"/></figure><p></p><p>Under
    “Specify Service” click the “New Service” link, name it “Drone CI” and click “Save”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/4g5Gqq6oTKNuaowrLIzNxE9k8aT8KZ1tAb0hd1GaPov5CpQl_1HuFKhHzVgo-Zv2PoH0tncEjguudJGy4UADD5T6jkJa1SCCB0YqqolQPA-OU5J6e28QCJgTL7QQN9QQYNfyqvUKdz0CneeWGA"/></figure><p></p><p>Scroll
    down to the “Manifests” section and click “Add Manifest”, then select “Helm Chart”
    for the manifest type, then click “Continue”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/0ODancR-cYnXFuF8Ngt8VHqlnbtU94CYoXLUosona4nn-q4uQ_g-ZS799S3P93BSe_WAb_yr4bGNVh2slGX2VYcPiZNGTGTUp9gCGxN8bFHdC0xzSjOTW032tr7NqUoGKJbSWeR_VAdutbowiQ"/></figure><p></p><p>Select
    “HTTP Helm” for the chart store, then click “New HTTP Helm Repo Connector”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/jJLid_U9HQ4MrSOyDeD8Xtt7vUv55UiCx-UonR4o4bOjOLNaS7_lYSuPLm8E-5TlLzlGQbO-QB1s2jd9sOkEiThLuZy_HYAOa60QoBlCPQHxWBJMwjgb7i4XRK7ISEULRUsIjEAlRmh2nmFftA"/></figure><p></p><p>Set
    the connector name to “Drone Helm Charts” and click “Continue”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/dIbiF3Vg12IY9AgHsFZIknUF7YQl7k8bgUMinv_jdQPkaqr4Qu-CNeRKzuVWhkt6d9ZqwAmiGr5HBjhMRoGRaT3MWDL0f-Yn0ACzkyU2uhjn4L4-kHo38TmEC_l1qMkysFVoPTA0UpAY5c1e0w"/></figure><p></p><p>Set
    the “Helm Repository URL” to <a href="https://charts.drone.io">https://charts.drone.io</a>,
    then select “Anonymous (no credentials required)” from the “Authentication” drop-down
    and click “Continue”:</p><p></p><figure><img src="https://lh4.googleusercontent.com/jGQYzjg_m7z4snTuOHC1r6FP1TSlcEsTRX04fUTc7FG5dhxwt-Rj0-OXb20bC4m9d__hOoZknknG2C4e0erfJrahbv_VOactJgeSBbIFr0A9gcLqeZtVtiVH2btqGsuElMQcEZ5IINtxMm3ZDA"/></figure><p></p><p>At
    the next screen you will need to specify your Harness Delegate. If you do not
    yet have a Delegate running in your GKE cluster, you will need to install one
    by clicking “Install new Delegate” and following the instructions. The <a href="https://ngdocs.harness.io/article/f9bd10b3nj-install-a-kubernetes-delegate">Install
    a Kubernetes Delegate</a> documentation might be helpful.</p><p>Once your delegate
    is available, select “Connect only via Delegates with all of the following tags”
    and select a tag that is unique to your Delegate (in this example, the Delegate
    is named ‘drone’), then click “Save and Continue”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/jP3nVcngjcphaisO3_CwMWgkqVWB1NgFI0qJtgwXyPg7wZH2yNRcK2toqgeDvFDawLaaEuZtDXkGR2GRfS0OxTyd70P-Ww66Ud6zlPKnMyeP-7FQvm7WFh2rqaJ0tZ02bCRqR1HIcARMD6BQhw"/></figure><p></p><p>A
    connection test will run to ensure that the Delegate is able to connect to the
    Helm chart source, if it is successful, click “Continue”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/i1z8nFMM4SWjGoPuHWMc2AiUVKpGJmbFxcNJjSVErKpGY1k5eef2f_06gvo2vC1t5usLmRbmTww7gsju-3T0UU4HSvu4VUu66c7WILbfqH1Fdd327hOPF9s5XjlRCCMKrh1xIjYLcMby3Ov7pA"/></figure><p></p><p>Next
    we need to specify the Helm manifest details for the Drone CI server.</p><p>Enter
    “server” as the identifier, “drone” for the chart name, “0.2.2” for the version,
    then select “Version 3” from the Helm version drop-down, and click “Submit”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/1edf9U67-hJYR97EA5BErXLka9IdgltlYbBYhnyYHVhksMkyGnKSdVtQq52EKyI5w40rhS6v1Mks9134LvO00OKr072w26D3U3T-VhV6Gy8Wj1FQKph2sDoqTk8v-Wpkgsj_412Y2KRgaDEggw"/></figure><p></p><p>The
    “server” Helm chart now appears in our manifests list:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/EH0Na2wBy-Zom3JyY4A9a4xcJ_di3JmwTMKO21pWqYZTlpO-9yRrzwMDOl1wuso3FlA1FfzGCSAeR31my3WIYvNW96sSxj6r0y88WtJSFLoRUjSc65Plr2jGmtdBP3tK7kqZtVvAwREQVEOMHA"/></figure><p></p><p>Now
    we need to add our Helm values file for the Drone CI server that we created earlier.</p><p>Click
    the “Add Manifest” link, then select “Values YAML” for the manifest type, and
    click “Continue”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/Y85QQhsX2q4r4Ejz2Y0v90T4w9QTUp0hMnRFv2zNl2RT_S_XJwWnScRqqne0Qdl5AVqQ77383kPBS0fs7GWgvxdKX6tnY4wZ0PLOQCFaPie5l6aav0AmHmVhVvx57xi4wKMin88yyYliH2rTqg"/></figure><p></p><p>Select
    “GitHub” for the values YAML store, then click “New GitHub Connector”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/q1T3_NhV6Wlvd9CQMV5IBC5x_0r4r9io868MYvgZnQ4y-hXGfyV_ad1A3qsbf-OyCWApuHmo0ISJXSvHVuEatVYqYnEjfY1C5mXmWwOytce6sABZm42LDtPmD5XCfmZ8M7d-7oGk6bFyu0w9wA"/></figure><p></p><p>Name
    the connector “My Helm Values Repo” and click “Continue”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/bJEwH0w5Nn12AkaIAdvZ5SMvTIsFK3wmuZixkeKJveYalkgI68KeE6L86goNr0cF-If2-d--oNtqsRa2huWhga3E3JvhsXJHszgdaA0hKoB1otzbUBmCbv20agvNOwrQuqpqn5BnPiwflOD41w"/></figure><p></p><p>On
    the next screen, enter the appropriate settings for your GitHub repository. In
    this example, we’ll use “HTTP” for the connection type, and the example repo I
    have created at <a href="https://github.com/jimsheldon/helm-sandbox">https://github.com/jimsheldon/helm-sandbox</a>,
    then click “Continue”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/ozscUmG64T2QthY1v9dM2olVMhfu0D94AuAZTufXBkPjMKHBLoHi0fR4oW-cPuuHKJSuq9wB3mvta1MagiNrR306Hu7KlotfopPQ-0ZoMlmyzhX8HPldF8ga-t_Qdo4SL0a0SVHtETXIUvnTlQ"/></figure><p></p><p>The
    CD pipeline needs to be able to authenticate to pull our GitHub repository. We’ll
    need to generate a GitHub access <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">token</a>
    following Harness’s <a href="https://ngdocs.harness.io/article/v9sigwjlgo-git-hub-connector-settings-reference#personal_access_token">GitHub
    Connector Settings</a> documentation. The access token is sensitive, so it must
    be managed as a secret.</p><p>Under “Personal Access Token” click “Create or Select
    a Secret”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/qSQyFPKCDkP53oCtQH6ISJVoRYxP_6rqcvXLCLYK0mFi2xUOPS9WcTnr8jC1NIFpJy1SY4L7iF9i5nmhOqCz-plARvTr0dP7CKNq-5Fykni_oQQPnXn32yRyU_C69g63np-ukv1kp1O-Xym2OA"/></figure><p></p><p>This
    will open a “Create or Select an Existing Secret” window, click “New Secret Text”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/R811badNoHjm-LILlj9jbnFJqoNuOKx53nr_dQjMEq4z0n52JmxyIKTIM8WsZo6cclXfVAVIIGN1BcgOK4QH3vgPRI1TH7KkvnXc-YecYxfFskHt4Ww9EQQ-dVzF5sPTbF6AWDBLaHa-kNnDRw"/></figure><p></p><p>Name
    the secret “GitHub Personal Access Token” and enter the token for the secret value
    and click “Save”:</p><p></p><figure><img src="https://lh4.googleusercontent.com/6c5_KsB3FHk-6L8XBlskIx7YIWg5oTjfwq1CazGpUX-G_FKMwaufCX6gbPu5zCBrWgKMeNreqaFjjapggi5y6KDO7gH48TGzqwt_QN39M-uuVi0rRlpti7Ysh7HAKB1ClTgkWbzjj49-dX1tEg"/></figure><p></p><p>Back
    at the credentials step, enter your GitHub username, ensure your personal access
    token is set, and click “Continue”:</p><p></p><figure><img src="https://lh4.googleusercontent.com/a02JYB2lKw0SUCjXbg--iggik73k6MPVnb3fGrUzwoJtPBJBTKu0_8N8-tI4cmBD900Mr-eRexRXJy2kPZI7sKlKkctaHncJWSaz5HUWbR1vyj5pu6TohiJzlk0IlwkWkbUOvc9mgmE9yjy2Zg"/></figure><p></p><p>Similar
    to the previous Helm chart manifest source step, this values YAML step also needs
    a Delegate which will pull the values YAML files from your GitHub repository.</p><p>Here
    we will select the same delegate, which in this example is named “drone”, then
    click “Save and Continue”:</p><p></p><figure><img src="https://lh3.googleusercontent.com/2e2NeV0_ligc4zbMjzxoNFSFqJicw-27sH8L0Y2LRgIyRy5z3KPUoLH8evnVZRKEQ5w-1KIcHH9De_7dcO4bZKspcSD7N2AeAp5wOMBJUZwM5Zk8QQBjZbStqILrnVF6qvEt-KMHKfIozv_0vw"/></figure><p></p><p>Harness
    CD will verify that our Delegate is able to authenticate with GitHub and access
    the repository. When it says “Verification successful” click “Continue”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/b041U9mJircZcPbymsPeBIahhCsfLby7MYQyJD_huSE9JTO4fn6Gl1GQp355bBjry67KzV4KW4u8kC6c0RQOI477LJvfCJ-gKUN4xCeWy8DvN7b7-W0ytGbKU_ze7_9SOjp_3l_6fJDkOG9FLQ"/></figure><p></p><p>Now
    it is time to specify the Helm values file for the Drone CI server. Enter “server_values”
    for the identifier, “Latest from Branch” for the fetch type, along with the appropriate
    branch and file path (in this example, the branch is “main” and the file path
    is “harness/drone.yaml”), then click “Submit”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/SkmyTLPSaanXa95_dyCLxom0HvHU1TmsXQS4EPqHIdMZPSdlTOR9Lm1H4O7713drrWamkUGYnkAEcqp9lzkOA3MW9oDzlH-eCjRyDj-2TTKI4AwNskGSkM0ocZbgUsC56VNU1Xy4_XFV-ZwSjg"/></figure><p></p><p>The
    “server_values” YAML now appears in our manifests list:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/byNY5Tt0QEXsfWiUh_eKWa3BI_dW464xhBbIfByHrh1S-y1fs7kIqNSpQn2q41i4ehPf1-iUWQsXsW7cm12LSQdAJLntzETI3y8b-p1Ki7m1JLAeFrdXKB_HSlv5SiduApNVG5gRrQ3pssb0Eg"/></figure><p></p><p>Scroll
    to the bottom of the window and click “Next”, this brings us to the “Infrastructure”
    tab.</p><p>Click “New Environment”, enter “Drone Demo” for the name, and select
    “Pre Production” for the Environment Type and clic “Save”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/FstHZbjo6AHFm2u5lZBbAtLVb5L9IbEn3xAtHwKIatUaf7oWfSZ44JNmKKHimNj-cd656NIpHe5XoHYYvLpO2Ndeq5fvubIjBkRVR0uNsuU_q_3U0rGiL6l08cfVjN8h2o2OfrreKr4LD7PJ1g"/></figure><p></p><p>This
    brings us back to the “Infrastructure” tab. Under “Infrastructure Definition”
    select “Direct Connection” for Kubernetes:</p><p></p><figure><img src="https://lh4.googleusercontent.com/Bb8R5TYE3p1zLbCxML30YN9kQiwAkeNoKwY0DsKZJIK_Z0Yff5jSEZEz9tyjJ5BDfKQojbKDnXnpBzn113BXDiNT0l2KZwYcyXXTKxtqMqn80UON5laJekXugpzF7tUvr4JWS_1CHGR6HpVtiA"/></figure><p></p><p>Scroll
    down to “Cluster Details”, under “Connector” click the field that says “Select
    Connector”, this will bring up a“Create or Select an Existing Connector” window,
    click “New Connector”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/Lcfn03qyGv-DkiMP7ORr0N9ZLkFa9yh5CPErsrpVZKrnGWHv41tR1sMxn_C2iz4kMmSHuxyPkVlbIUFjKFV0PdtugoYKsC2yBqCzQ2b86Udr1MWzb8fzr-at_99YPuH_kVr8NQo1z1M1WE7PyA"/></figure><p></p><p>Give
    the connector an appropriate name for your Kubernetes cluster (we’ll call it “My
    Kubernetes Cluster” in this example), then click “Continue”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/1JdXXbtt3BqDwt1XZjm6-Oftc-4guifdXTA0qj9pNdjuxY7SaZqw8deyq_qaO20DpyxueypVXCID9RO7l3KHCwEZnzaTeWSKD_q0Mo6GvoCnaBlYV1vlIa3fVYjnW-b7GL4XJSgZxp7IKSeIPw"/></figure><p></p><p>Next
    at the “Details” step, select “Use the credentials of a specific Harness Delegate
    (IAM role, service account, etc)” and click “Continue”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/z9oTLxBbSGGavNtkljotiWu9Yzj4Ll0xfKcLo4P9gEDlXzi-R7b98qsWSqiOBDpXBQMo5Wa-trwBgHGDvr5KVRc8kXcm5ptkIQ6zFH_wMQvdinseMnYiCcbSP_PUir2bx31M7EUkPQ94Q9_eFw"/></figure><p></p><p>Next
    we will select the same delegate, which in this example is named “drone”, then
    click “Save and Continue”:</p><p></p><figure><img src="https://lh5.googleusercontent.com/TsgkiOmbqd3xBu0WMGdxLV7_n4HOfTDYtYm619Nz9sZXkrtMV1rV8WHEZ_qQ7kjW0_H7aJOmA_joxy2h01MWTYOeroqhWXuQRDV8xP_bhn5SYiLWSR8BGiTOQtxEODiWUe2dWQLLL7d-H3rJjg"/></figure><p></p><p>A
    connection test will run, when “Verification successful” appears, click “Finish”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/PLK0UmXoI1UZjFc02ov9sB4BW8MKtzgEJKrwdPFoTBEj1rSDqnTLUE-UOFAtcXWOzy7_EomA6koCD4f6bftGPnzh0qRZ3sSWCEQyS41i-HP-2a_F8_ca0xcRzvE52gKsULOq3x2Pbdqzxz6vRA"/></figure><p></p><p>Back
    in the “Infrastructure” tab, under “Cluster Details” enter “drone” for the namespace
    and click “Next”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/8L_rc2g8pi_zYtlHhSWPQzm_U-oD1vuZt1gBV_-gQpPf1p5OApQcyNFObNaMqD5bYlmedcpayJjhoAHhgo3OoNl37qCK8oLj2JSxYDzQ0L_GhyonShVJcssq1X5BwXI3s-52xHofhjJic5vRww"/></figure><p></p><p>Now
    it is time to choose a deployment strategy. For more background on this topic,
    see our <a href="https://ngdocs.harness.io/article/0zsf97lo3c-deployment-concepts">Deployment
    Concepts and Strategies</a> documentation. For this example, we will select “Rolling”,
    then click “Use Strategy”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/-BwDl6j-swvl_3h54s8qUN9eaFKz6hO7zDrqD7Nzsya5N1NmOhqN-puMdsUc0bS5XQWieTS6G6f8jFJSF8XZc_SResjZfsQgxDkkoJxifh4uPfQcqW7p2xJpytNK7YVdL2Aq3fScx7xoEb0fjg"/></figure><p></p><p>We
    now have a full deployment pipeline stage for the Drone CI server! Next we will
    add a stage for the Docker runner.</p><p>In the “Pipeline” view, click “Add Stage”
    and select “Deploy” as the type:</p><p></p><figure><img src="https://lh5.googleusercontent.com/VtqQxG1WvkHz1GzIq59Ys6MRy5i1oPiyiTnB8aZKcp7Xmhu_mezx_9YD1Gwd64hKDye0kwtUmJO7OPxdy0kkkt8exKOIkp_CZ_KL3gYPG8CQGabJitu-Upkl-kQFEBksxyhUrzAwMHAnQmmyZg"/></figure><p></p><p>Set
    the stage name to “runner”, then click “Set Up Stage”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/Y2y_y4So_SRacgGPkSCQD6--2oNbVhtxPqA-BgleUFxQ7X6a1IPyJMdhogXH6H9W1mHyKZ-goMv60GYhg6c7KOqgHdAgNIz9wfw7YLT47QxCHGuAT6O-npG3-6VqlwnZINZU1f3Va86ASqgo5A"/></figure><p></p><p>Select
    the existing “Drone CI” service, then under “Manifests” click “Add Manifest”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/7aMlSOGkghCppP8u9bGFBlO6QdvcLNVa1bSPJUbD3Kq7GSK74Uh8T7QZzaEj9MCc876yqrFknSsLSC_Ivmhv_co5gzSjbxwNWraqzV5KuuzspG-doYL0yPnMT1K4hl3N3Q1s5DmCELTYc2ZLiA"/></figure><p></p><p>Select
    “Helm Chart” for the manifest type, then click “Continue”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/0ODancR-cYnXFuF8Ngt8VHqlnbtU94CYoXLUosona4nn-q4uQ_g-ZS799S3P93BSe_WAb_yr4bGNVh2slGX2VYcPiZNGTGTUp9gCGxN8bFHdC0xzSjOTW032tr7NqUoGKJbSWeR_VAdutbowiQ"/></figure><p></p><p>Select
    “HTTP Helm” for the chart store, then click “Select HTTP Helm Repo Connector”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/EK9bOxH1LVA0tSq4yw32Hn9caK4WEt9EQXhurKodOLjBV5wLl4hycpIxXnmTzt_hnWg2dw4yWwCmMtLXndu9CWHaHV6P-epswoM2m1R7KEelL59s2E_jrWv_sAh7aNFmZi9loPcJU8Pv0DUxEQ"/></figure><p></p><p>Select
    the existing “Drone Helm Charts” connector from the list, then click “Apply Selected”:</p><p></p><figure><img
    src="https://lh6.googleusercontent.com/dD8DLn0asnfePXnIOlsVKYRRdPWPMnxDxzaaCi3Zwt33VUM3Fz8uFw1aM3jMWrJVo6EbAyrKmVBRA2G1pJqZLHvzDG2HS7wN4oti7F3Sv0kFR0oDk2TJlBwjrrdZtQSdExVEFhMYYEZdfung0Q"/></figure><p></p><p>Verify
    that “Drone Helm Charts” is set as the connector, and click “Continue”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/EBjeIBC0de_05KzYrI6r1K2syA3IEsRhc6BOytZQD_Vj-cWspR2Q1vmisLX_xNhEbJqfbXzmGOqeOUTw9JjriamQv9HWWxv_o5gOtMAR0htf1sBdwvpVcACgfP7sk03estZjDDcyH_sKo2wvMA"/></figure><p></p><p>Enter
    “runner” as the identifier, “drone-runner-docker” for the chart name, “0.1.0-rc.3”
    for the version, then select “Version 3” from the Helm version drop-down, and
    click “Submit”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/l4SOE3Ld59JKbkZgpnMlww6rDD33raGpBhRdTQYqW-c60egX3D8C7KmFy9e4DNojte6qj_dRkA2OwHOCg5-l1JmcfyI377YBdUcvnqnAK9pwJkQKctGksDqokzENo2Yuh6uv_y9mBTKA02plVw"/></figure><p></p><p>The
    “runner” Helm chart now appears in our manifests list:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/ZuglNp0PQbI2ZntPp9LW_fqgRpyOgmN4PcxmyJ5uyATipTgp9SxXDAXkDBsMISI0A688wQZuYZpzlz0dv1umYY-L3q2ZvSa01iYnC31oTEzzbLebpfw1xzkeFE8_XR8HuahFoTTaYe70CnN5Bw"/></figure><p></p><p>Click
    the “Add Manifest” link, then select “Values YAML” for the manifest type, and
    click “Continue”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/Y85QQhsX2q4r4Ejz2Y0v90T4w9QTUp0hMnRFv2zNl2RT_S_XJwWnScRqqne0Qdl5AVqQ77383kPBS0fs7GWgvxdKX6tnY4wZ0PLOQCFaPie5l6aav0AmHmVhVvx57xi4wKMin88yyYliH2rTqg"/></figure><p></p><p>Select
    “GitHub” for the values YAML store, then click “Select GitHub Connector”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/q1T3_NhV6Wlvd9CQMV5IBC5x_0r4r9io868MYvgZnQ4y-hXGfyV_ad1A3qsbf-OyCWApuHmo0ISJXSvHVuEatVYqYnEjfY1C5mXmWwOytce6sABZm42LDtPmD5XCfmZ8M7d-7oGk6bFyu0w9wA"/></figure><p></p><p>Select
    the existing “My Helm Values Repo” connector from the list, then click “Apply
    Selected”:</p><p></p><figure><img src="https://lh4.googleusercontent.com/vmhm0CwLpU9sXYQnWBE0uJjquxLwG_nZ7ZxCC3ECx0V-UklYD1JAP9pf8Ja_7Gx0Xxsq3jU-qdSiswqRA6sCAxsCwoNIr8AGcGF2LHu10g6Sah0imvOEvhcHeJFf44pR3qXPwf2AwcG9qpuXDw"/></figure><p></p><p>Verify
    that “My Helm Values Repo” is set as the connector, and click “Continue”:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/w8Vt1FTtJ3P_VthMWB71To8NxhX6xDbVUb62ZLmAEHDly20qZjQ7fqaQU7WY593ZZnGsu9zAQ2YmysUl7ON0Kc_Bc694tyknvyYfizhdPrRjsM5fsjBpE9DsMmxmpdslAHBKYwx3fOSUtDcd0g"/></figure><p></p><p>Now
    it is time to specify the Helm values file for the Drone Docker runner. Enter
    “runner_values” for the identifier, “Latest from Branch” for the fetch type, along
    with the appropriate branch and file path (in this example, the branch is “main”
    and the file path is “harness/drone-runner-docker.yaml”), then click “Submit”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/xj--hrDP0nJ0dlTSzZNS8M5I-GMOaXmKQu6ebxZlzh3ym5h1v0ukqPo8pwY67wYhqb8QrGnsGYLTxs9-7t9egvbknKcR9Btd35h7utqvsZ2IjWE3ux4xz7sNzGbdArhRy3kUaManNMyia-0SmA"/></figure><p></p><p>The
    “runner_values” YAML now appears in our manifests list:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/cGwK1xavFgt5OIxS1Zldk1yvp8ZRbCpa5kjN7wqTzgpmh5L3e9EobMrHopj6S76S4qiNuSi9Jw8fAifhivOj3LSUt4sYIt86Pt9eEJCJCGNl-LkEKrC9xfZYPpecAIt3wrVtfvgF0WvZfjwwcQ"/></figure><p></p><p>Scroll
    to the bottom of the window and click “Next”, this brings us to the “Infrastructure”
    tab.</p><p>Under “Specify Environment” select the existing “Drone Demo” environment:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/17sQqZuRmn645dhXFQr_aL_aL2KSt1o2gQ21qqweOYuZXfJebYlQDlM2wiAypm2S2YdbKTqC63jbTebBL-7-IE5EvA6b8s0A-SszvQrXJO4bBLOSTh0dzu9fxI-bw-MpxgS6GrsgX_wihVONuQ"/></figure><p></p><p>Under
    “Infrastructure Definition” select “Direct Connection” for Kubernetes:</p><p></p><figure><img
    src="https://lh4.googleusercontent.com/Bb8R5TYE3p1zLbCxML30YN9kQiwAkeNoKwY0DsKZJIK_Z0Yff5jSEZEz9tyjJ5BDfKQojbKDnXnpBzn113BXDiNT0l2KZwYcyXXTKxtqMqn80UON5laJekXugpzF7tUvr4JWS_1CHGR6HpVtiA"/></figure><p></p><p>Under
    “Cluster Details” click the field that says “Select Connector”, this will bring
    up the “Create or Select an Existing Connector” window. Select the existing “My
    Kubernetes Cluster” connector, and click “Apply Selected”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/E1plUR2uoQhYvuMuzt5NV8LYZEpaeaIfZIBatp5d-wKt9u7ZWGfGS5mP06kFHLbLd7fHoC-Pfc1M9_pRncuvjBWdvEgnKQg6M9e-riMccA8Tu_rSI6LX98FH41pdzyS-U6jGgZT6-7FnI51ytw"/></figure><p></p><p>Back
    in the “Infrastructure” tab, under “Cluster Details” enter “drone” for the namespace
    and click “Next”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/8L_rc2g8pi_zYtlHhSWPQzm_U-oD1vuZt1gBV_-gQpPf1p5OApQcyNFObNaMqD5bYlmedcpayJjhoAHhgo3OoNl37qCK8oLj2JSxYDzQ0L_GhyonShVJcssq1X5BwXI3s-52xHofhjJic5vRww"/></figure><p></p><p>As
    we did for the Drone CI server, we now need to choose a deployment strategy for
    the Docker runner. For this example, we will select “Rolling”, then click “Use
    Strategy”:</p><p></p><figure><img src="https://lh6.googleusercontent.com/-BwDl6j-swvl_3h54s8qUN9eaFKz6hO7zDrqD7Nzsya5N1NmOhqN-puMdsUc0bS5XQWieTS6G6f8jFJSF8XZc_SResjZfsQgxDkkoJxifh4uPfQcqW7p2xJpytNK7YVdL2Aq3fScx7xoEb0fjg"/></figure><p></p><p>At
    the top right of the screen, click “Save”:</p><p></p><figure><img src="https://lh3.googleusercontent.com/9ZpY4ZbEYB-_Cx3FycVAxwKXYjMa_u4npisxlqrGCfKmDwqwZfyiORE3rttAnEfncCZIR_liYFyPKe8jENYEo9amai_wLB1c_PJQkZGtQGmw19HzCA_Pj3RPZwsGvhywRmMRJg-BSjqBM75OTw"/></figure><p></p><p>After
    saving, the “Run” option is now available, click “Run”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/nEoshqo8DtwfuABDq93dlD_jVxkHtFEaaANquyssQTqlqxzyY3CVo99wZoMOxa0Ii8z7h26MWCyFgCYwpb0g4u2M9YFATZiUOSTPamZ1BrOivv8ldgnvYxPAT4U3taKTooc0AwZux0LiyWzuqQ"/></figure><p></p><p>In
    the window that opens, click “Run Pipeline”:</p><p></p><figure><img src="https://lh3.googleusercontent.com/S8m-u2VLyxp3v1QTEQVwEqQp9Rj2cI64ehr2lMJ-rP5zrUcELVBu5Gqr56dBibWgbTbvcCOVHMKQgBj7BmHA52W6OYQA98hvvSV-s4dnE98cPhmoRV9Uobj-fxtzyaKtVpJEspJjswfPxXHCMA"/></figure><p></p><p>The
    deployment will run to completion, both “server” and “runner” steps should show
    a green check mark:</p><p></p><figure><img src="https://lh4.googleusercontent.com/05FoitZvUR9sqERaedWNM9GPe_j-f2PxoZYS5PL91gG9VJeOhZmXTj5KCEWpreUIZwnFNMqbPNawNYR2WJjK3HlGydcyqOVF6vjILqxxdEDz-0G8tMGDhh-g4myPZgvASGT5WujO1BYsg3ZG5g"/></figure><p></p><p>Now
    if we open the previously configured static IP in a browser (34.148.171.160 in
    this example), we will be greeted with the Drone CI welcome page! Click “Continue”.</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/ez9m6xChglDjKAJaAIgIuPD4E9pke1czUztug1WSXSe2_RQUrNX0oY3ZM0WA8LZ3t0G1anwuxITqUHx380ROTRVNDQcO4xOE4CUO3LT_0K3HuvkWjbSBFfZzglp293Ir5nzM3zA3UyrejIMtxA"/></figure><p></p><p>Next,
    we will be asked to authorize our Drone CI OAuth application, click “Authorize”:</p><p></p><figure><img
    src="https://lh3.googleusercontent.com/mbnmz75o8PlnWXT2BfzE4ShrodkWbEu2MJzt1sGk-534kvNzPV3OBxt1afRBBiKrwU_3w5WbkWN0a3IA_svSVVj00q1zGGp8sWT0JdiMFsASx1XtFgQMOSwPgykh_tkWh1jWGZUw-phedfCErg"/></figure><p></p><p>Now
    we will fill out the Drone CI registration form, then click “Submit”:</p><p></p><figure><img
    src="https://lh5.googleusercontent.com/SS0YJ_xHJ8o278j-VcXHxMdAnMfOR8Jig5mA494NamdZft5oIPbkJBpyWL79AQnkEeqFJDZKv2bQQUXChfWwkquA-I_akcdlbLbiNwHl4FA8YUeuvsGi9XCrwThTZFa3VY24L4Ythu0f8xdJfw"/></figure><p>At
    the Drone CI dashboard, we can filter for anything we choose:</p><p></p><p></p><figure><img
    src="https://lh6.googleusercontent.com/OemKHyqoicfgujm0FU-Y4rByUzenzAYl111EKrnP6zyEzvEJX4dWZDKoO1hguLj5KzAjcJMxbAMPBCwqmBZUOzgDPuFIqmDBidU7ty_TZMrHA-vhBvQo_Rbzyd9IxHTO_r84XzNjd_cld8uNKQ"/></figure><p></p>'
  slug: draft-doc-1590-deploy-drone-ci-to-gke-with-harness-cd
  tags: []
  is_live: true
