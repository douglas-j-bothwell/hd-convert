type: article
article_id: axzckflbt2
user_id: c5pqxi9gu9
category_id: 4xo13zdnfx
author:
  name: Manish Jaiswal
  profile_image: https://www.gravatar.com/avatar/a690002c3812e556fec2f79f91e5715e?d=mm&s=150
title: Run Tests Step Settings
slug: configure-run-tests-step-settings
description: This topic provides settings and permissions for the Harness CI Run Tests
  step, which executes one or more tests on a container image. Name. The unique name
  for this step. ID. See Entity Identifier R…
short_version: This topic provides settings and permissions for the Harness CI Run
  Tests step, which executes one or more tests on a container image. Name. The unique
  name for this step. ID. See Entity Identifier R…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-22T19:45:46.545985Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Run Tests Step Settings
  description: ""
  short_version: ""
  body: '<p>This topic provides settings and permissions for the Harness CI Run Tests
    step, which executes one or more tests on a container image.</p><h3>Name</h3><p>The
    unique name for this step.</p><h3>ID</h3><p>See <a href="https://ngdocs.harness.io/article/li0my8tcz3-entity-identifier-reference">Entity
    Identifier Reference</a>.</p><h3>Description</h3><p>Text string.</p><h3>Container
    Registry</h3><p>The Harness Connector for a container registry. This is the container
    registry for the image Harness will use run build commands on, such as DockerHub.</p><h3>Image</h3><p>The
    name of the Docker image to use when running commands. For example: <code>maven:3.6.3-jdk-8</code>.</p><p>The
    image name should include the tag and will default to the latest tag if unspecified.
    You can use any docker image from any docker registry, including docker images
    from private registries.</p><p>Different container registries require different
    name formats:</p><ul><li>Docker Registry: enter the name of the artifact you want
    to deploy, such as library/tomcat. Wildcards are not supported.</li><li>GCR: enter
    the name of the artifact you want to deploy. Images in repos need to reference
    a path starting with the project ID that the artifact is in, for example: <code>us.gcr.io/playground-243019/quickstart-image:latest</code>.</li><li>ECR:
    enter the name of the artifact you want to deploy. Images in repos need to reference
    a path, for example: <code>40000005317.dkr.ecr.us-east-1.amazonaws.com/todolist:0.2</code>.</li></ul><h3>Arguments
    (<em>Java</em>)</h3><p>The runtime arguments for the test. This field is required.
    Example format: <code>Test -Dmaven.test.failure.ignore=true -DfailIfNoTests=false</code></p><h3>Arguments
    (<em>C#</em>)</h3><p>The runtime arguments for the test. This field is required.
    <strong>Do not</strong> inject another instrumenting agent, such as a code-coverage
    agent, in the argument string. Example format: <code>/path/to/test.dll /path/to/testProject.dll</code></p><h3>Arguments
    (<em>C# / Nunit</em>)</h3><p>The runtime executable and arguments for the test.
    This field is required. You must include the executable in the string. <strong>Do
    not</strong> inject another instrumenting agent, such as a code-coverage agent,
    in the string. Example format: <code>. &#34;path/to/nunit3-console.exe&#34; path/to/TestProject.dll
    --result=&#34;UnitTestResults.xml&#34; /path/to/testProject.dll</code></p><h3>Namespaces
    (<em>C#</em>)</h3><p>A comma-separated list of the Namespace prefixes that you
    want to test.</p><h3>Build Tool</h3><p>Select the build automation tool.</p><h3>Language</h3><p>Select
    the source code language to build, such as Java or C#.</p><h3>Packages</h3><p>List
    of source code package prefixes separated by a comma. For example: <code>com.company.</code>,
    <code>io.company.migrations</code>.</p><h3>Run Only Selected Tests</h3><p> If
    this option is unchecked, Test Intelligence is disabled and all tests will run.</p><h3>Test
    Annotations</h3><p>Enter the list of test annotations used in unit testing, separated
    by commas. Any method annotated with this will be treated as a test method. The
    defaults are: <code>org.junit.Test</code>, <code>org.junit.jupiter.api.Test</code>,
    <code>org.testng.annotations.Test</code></p><h3>Pre-Command</h3><p>Enter the commands
    for setting up the environment before running the tests. For example,<code>printenv</code>
    prints all or part of the environment.</p><h3>Post-Command</h3><p>Enter the commands
    used for cleaning up the environment after running the tests. For example, <code>sleep
    600</code> suspends the process for 600 seconds.</p><h3>Report Paths</h3><p>The
    path to the file(s) that store results in the JUnit XML format. You can enter
    multiple paths. Regex is supported.</p><div class="note-callout">This variable
    must be set for the Step to publish test results.</div><h3>Environment Variables</h3><p>Variables
    passed to the container as environment variables and used in the Commands.</p><h3>Output
    Variables</h3><p>Output variables expose Environment Variables for use by other
    steps/stages of the Pipeline. You reference the output variable of a step using
    the step ID and the name of the variable in Output Variables.</p><p>Let&#39;s
    look at a simple example.</p><p>In a step with the ID S1, in Command, export a
    new variable:</p><p><code>export myVar=varValue</code></p><p>In Output Variables,
    list the exported variable name:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/axzckflbt2/1625221258103/2-aw-9-kxkspsuu-9-jrzl-bb-jw-1-p-0-bphabk-ib-8-l-ai-byk-x-8-dlzj-sfy-j-6-p-rs-d-5-f-cc-42-xzf-3-v-cu-e-0-allr-62-xgm-1-eu-1-grv-3-po-jdv-mt-0-sriru-7-zpbh-5-op-84-cx-7-xzs-cazna-cik-ki-oza-oa"/></figure><p></p><p>In
    a later Run step, in Command, reference the output variable:</p><p><code>echo
    &lt;+S1.output.outputVariables.myVar&gt;</code></p><p>Here&#39;s how the S1 step&#39;s
    output variable is referenced:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/axzckflbt2/1625221267649/kqe-8-fg-ancs-nptc-qcqxv-90-tpm-in-2-tv-8-hx-32-j-7-v-gmdui-x-mwah-o-4-zoq-4-l-2-ts-i-j-hwust-9-ap-ql-hji-4-ra-pyk-5-ni-ir-3-uv-1-a-mc-3-owfwfkd-plpun-qmu-1-rc-5-ex-82-rp-mz-lz-qud-qss-wlu"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p></p><p>Syntax
    for referencing output variables between steps in the same stage:</p><p><code>&lt;+[stepID].output.outputVariables.[varName]&gt;</code></p><p>Syntax
    for referencing output variables between steps in different stages:</p><p><code>&lt;+stages.[stageID].execution.steps.[stepID].output.outputVariables.[varName]&gt;</code></p><h3
    id="undefined">Image Pull Policy</h3><p>Select an option to set the pull policy
    for the image.</p><ul><li><strong>Always</strong>: The kubelet queries the container
    image registry to resolve the name to an image digest every time the kubelet launches
    a container. If the kubelet encounters an exact digest cached locally, it uses
    its cached image; otherwise, the kubelet downloads (pulls) the image with the
    resolved digest, and uses that image to launch the container.</li><li><strong>If
    Not Present</strong>: The image is pulled only if it isn&#39;t already present
    locally.</li><li><strong>Never</strong>: The kubelet assumes that the image exists
    locally and doesn&#39;t try to pull the image.</li></ul><h3 id="undefined">Run
    as User</h3><p>Set the value to specify the user id for all processes in the pod,
    running in containers. See <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod">Set
    the security context for a pod</a>.</p><h3>Set container resources</h3><p>These
    settings specify the maximum resources used by the container at runtime.</p><h5
    id="undefined">Limit Memory</h5><p>Maximum memory that the container can use.
    You can express memory as a plain integer or as a fixed-point number using the
    suffixes <code>G</code> or <code>M</code>. You can also use the power-of-two equivalents <code>Gi</code> and <code>Mi</code>.</p><h5
    id="undefined">Limit CPU</h5><p>The maximum number of cores that the container
    can use. CPU limits are measured in cpu units. Fractional requests are allowed:
    you can specify one hundred millicpu as <code>0.1</code> or <code>100m</code>.
    See <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes"
    target="_blank">Resource units in Kubernetes</a>.</p><h5>Timeout</h5><p>Timeout
    for the step. Once the timeout is reached, the step fails and the Pipeline execution
    continues.</p><h3>See Also</h3><ul><li><a href="https://ngdocs.harness.io/article/i36ibenkq2-step-skip-condition-settings">Step
    Skip Condition Settings</a></li><li><a href="https://ngdocs.harness.io/article/htrur23poj-step-failure-strategy-settings">Step
    Failure Strategy Settings</a></li></ul><p></p>'
  slug: configure-run-tests-step-settings
  tags: []
  is_live: true
