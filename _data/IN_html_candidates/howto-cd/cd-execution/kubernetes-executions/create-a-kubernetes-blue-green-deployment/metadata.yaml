type: article
article_id: mog5tnk5pi
user_id: znazf3hcp9
category_id: uj8bqz9j0q
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/77114bb5eef5503c5a09ad7655120b17?d=mm&s=150
title: Create a Kubernetes Blue Green Deployment
slug: create-a-kubernetes-blue-green-deployment
description: Create a Blue/Green deployment for a Deployment workload.
short_version: Create a Blue/Green deployment for a Deployment workload.
tags:
- kubernetes blue/green
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-01T16:15:59.443643Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Create a Kubernetes Blue Green Deployment
  description: Create a Blue/Green deployment for a Deployment workload.
  short_version: Create a Blue/Green deployment for a Deployment workload.
  body: '<p>This topic will walk you through creating a Blue Green deployment in Harness
    for a Kubernetes Deployment workload.</p><p>For information on Blue/Green deployments,
    see <a href="/article/0zsf97lo3c-deployment-concepts">Deployment Concepts and
    Strategies</a>.</p><div class="note-callout">Harness Canary and Blue/Green strategies
    only support Kubernetes Deployment workloads. The Rolling strategy supports all
    other workloads, except Jobs. The <a href="/article/00el61pzok-deploy-manifests-separately-using-apply-command">Apply
    Step</a> can deploy any workloads or objects.</div><h3>Before You Begin</h3><ul><li><a
    href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes CD Quickstart</a></li><li><a
    href="/article/ssbq0xh0hx">Add Kubernetes Manifests</a></li><li><a href="/article/0ud2ut4vt2">Define
    Your Kubernetes Target Infrastructure</a></li></ul><h3>Review: What Workloads
    Can I Deploy?</h3><p>See <a href="/article/efnlvytc6l-what-can-i-deploy-in-kubernetes">What
    Can I Deploy in Kubernetes?</a>.</p><h3 id="step_1_create_the_harness_kubernetes_service">Review:
    Harness Blue Green Deployments</h3><p>Here&#39;s a quick summary of how Harness
    performs Blue Green deployments.</p><p>Only one Kubernetes service is mandatory
    and it doesn’t need any annotations to establish if it is the primary (production)
    service.</p><p>Here is a very generic service example that uses a values.yaml
    file for its values:</p><pre>apiVersion: v1<br/>kind: Service<br/>metadata:<br/>  name:
    {{.Values.name}}-svc<br/>spec:<br/>  type: {{.Values.serviceType}}<br/>  ports:<br/>  -
    port: {{.Values.servicePort}}<br/>    targetPort: {{.Values.serviceTargetPort}}<br/>    protocol:
    TCP<br/>  selector:<br/>    app: {{.Values.name}}</pre><p></p><div class="note-callout">This
    file and sample deployment and values.yaml files are publicly available on the
    <a href="https://github.com/wings-software/harness-docs/tree/main/k8s-bluegreen"
    target="_blank">Harness Docs repo</a>.</div><p>Note that there are no annotations
    to indicate that it is the primary service. Harness will add this later.</p><div
    class="note-callout">If you have more than one service, Harness does not automatically
    know which is the primary service unless you add the annotations described below.
    If you use two services, please annotate them as described below.</div><ol><li><strong>First
    deployment:</strong><ol><li>Harness creates two services (primary and stage) and
    one pod set for the app.</li><li>The primary service is given this annotation:
    <code>annotations: harness.io/primary-service: &#34;true&#34;</code>.</li><li>The
    stage service is given this annotation: <code>annotations: harness.io/stage-service:
    &#34;true&#34;</code>.</li><li>The pod set is given an annotation of <code>harness.io/color:
    blue</code>.</li><li>Harness points the stage service at the pod set and verifies
    that the set reached steady state.</li><li>Harness swaps the primary service to
    pod set. Production traffic now flows to the app.</li></ol></li><li><strong>Second
    deployment (new version of the same app):</strong><ol><li>Harness creates a new
    pod set for new app version. The pod set is given the annotation <code>harness.io/color:
    green</code>.</li><li>Harness points the stage service at new pod set (with new
    app version) and verifies that the set reached steady state.</li><li>Harness swaps
    the primary service to new pod set, stage service to old pod set.</li></ol></li><li><strong>Third
    deployment:</strong><ol><li>Harness deploy new app version to the pod set <u>not</u>
    using the primary service.</li><li>Harness points the stage service at new pod
    set (with new app version) and verifies that the set reached steady state.</li><li>Harness
    swaps the primary service to new pod set, stage service to old pod set.</li></ol></li></ol><h3
    id="step_1_create_the_harness_kubernetes_service">Visual Summary</h3><p>Here&#39;s
    a video walking through a simple Canary deployment. It&#39;s 10 minutes long but
    it covers set up and two deployments.</p><p></p><div class="hd--embed" data-provider="YouTube"
    data-thumbnail="https://i.ytimg.com/vi/0x2eHfpNv_o/hqdefault.jpg"><iframe width="200"
    height="150" src="https://www.youtube.com/embed/0x2eHfpNv_o?feature=oembed" frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen=""></iframe></div><h3>Step 1: Define the Service and Infrastructure</h3><p>Create
    your CD Pipeline stage.</p><p>To set up your Service and Infrastructure in the
    stage, follow the steps in these topics:</p><ul><li><a href="/article/ssbq0xh0hx-define-kubernetes-manifests">Add
    Kubernetes Manifests</a></li><li><a href="/article/0ud2ut4vt2-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a></li></ul><p>Once the Service and Infrastructure
    are set up, you can add the execution steps.</p><h3>Step 2: Add the Execution
    Steps</h3><p>In the stage&#39;s <strong>Execution</strong>, click <strong>Add
    Step</strong>, and select the <strong>Blue Green</strong> strategy.</p><p>Harness
    adds all the steps you need to perform the Blue Green strategy:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/mog5tnk5pi/1620688504122/image.png"/></figure><p>That&#39;s
    it. Harness will deploy the artifact using the stage service initially, and swap
    traffic to the primary service.</p><p>Let&#39;s look at the default settings for
    the Stage Deployment step.</p><h3>Step 3: Stage Deployment Step</h3><p>The <strong>Stage
    Deployment</strong> step is added automatically when you apply the Blue Green
    strategy.</p><p>Click the <strong>Stage Deployment</strong> step. The step simply
    includes a name, timeout, and Skip Dry Run options.</p><div class="note-callout"><strong>Skip
    Dry Run:</strong> By default, Harness uses the <code>--dry-run</code> flag on
    the <code>kubectl apply</code> command during the <strong>Initialize</strong>
    step of this command, which prints the object that would be sent to the cluster
    without really sending it. If the <strong>Skip Dry Run</strong> option is selected,
    Harness will not use the <code>--dry-run</code> flag.</div><p>The first time you
    deploy, the <strong>Stage Deployment</strong> step creates two Kubernetes services,
    a new pod set, and deploys your app to the pod set.</p><p>When you look at the <strong>Stage
    Deployment</strong> step in Harness <strong>Deployments</strong>, you will see
    the following log sections.</p><h4>Fetch Files</h4><p>Harness pulls the manifests
    and values.yaml from your repo.</p><h4>Initialize</h4><p>The Initialize stage
    initializes the two Kubernetes services and deployment object, validating their
    YAML.</p><h4>Prepare</h4><p>Typically, in a <strong>Prepare</strong> section,
    you can see that each release of the resources is versioned. This is used in case
    Harness needs to rollback to a previous version.</p><p>In the case of Blue Green,
    the resources are not versioned because a Blue Green deployment uses <strong>rapid
    rollback</strong>: network traffic is simply routed back to the original instances.</p><p>You
    do not need to redeploy previous versions of the service/artifact and the instances
    that comprised their environment.</p><p>The <strong>Prepare</strong> section shows
    that Harness has prepared two services, identified the deployment as blue, and
    pointed the stage service (blue) at the blue pod set for the deployment:</p><pre>Manifests
    processed. Found following resources: <br/><br/>Kind                Name                                    Versioned
    <br/>Service             bgdemo-svc                              false     <br/>Deployment          bgdemo                                  false     <br/><br/>Primary
    Service is bgdemo-svc<br/><br/>Created Stage service [bgdemo-svc-stage] using
    Spec from Primary Service [bgdemo-svc]<br/><br/>Primary Service [bgdemo-svc] not
    found in cluster.<br/><br/>Stage Service [bgdemo-svc-stage] not found in cluster.<br/><br/>Primary
    Service is at color: green<br/><br/>Stage Service is at color: blue<br/><br/>Cleaning
    up non primary releases<br/><br/>Current release number is: 1<br/><br/>Versioning
    resources.<br/><br/>Workload to deploy is: Deployment/bgdemo-blue<br/><br/>Done.</pre><p></p><h4>Apply</h4><p>The
    Apply section applies a services and deployment from the Prepare section. It uses
    a combination of all of the manifests in the Service <strong>Manifests</strong> section
    as one file using <code>kubectl apply</code>.</p><pre>kubectl --kubeconfig=config
    apply --filename=manifests.yaml --record<br/><br/>service/bgdemo-svc created<br/><br/>deployment.apps/bgdemo-blue
    created<br/><br/>service/bgdemo-svc-stage created<br/><br/>Done.</pre><h4>Wait
    for Steady State</h4><p>The Wait for Steady State section shows Harness confirming
    the rollout and that the pods have reached steady state.</p><p>Next, the <strong>Swap
    Primary with Stage</strong> step will swap the primary and stage services to route
    primary network traffic to the pod set for the app.</p><p>If this were the second
    deployment, Harness would also swap the stage service to the pod set for the old
    app version.</p><h3 id="kubernetes_service_for_blue_green">Step 4: Swap Primary
    with Stage Step</h3><p>Click the <strong>Swap Primary with Stage</strong> step.</p><p>In
    the Prepare step you saw the primary service pointing at the green pod set and
    the stage service pointing at blue pod set containing the app.</p><p>In <strong>Swap
    Primary with Stage</strong>, Harness swaps the primary service to the pod set
    running the app (blue) and the stage service to the other color (green). Since
    this is the first deployment, there is no actual green pod set.</p><p>Production
    traffic now flows to the app.</p><pre>Selectors for Service One : [name:bgdemo-svc]<br/><br/>app:
    bgdemo<br/><br/>harness.io/color: green<br/><br/>Selectors for Service Two : [name:bgdemo-svc-stage]<br/><br/>app:
    bgdemo<br/><br/>harness.io/color: blue<br/><br/>Swapping Service Selectors..<br/><br/>Updated
    Selectors for Service One : [name:bgdemo-svc]<br/><br/>app: bgdemo<br/><br/>harness.io/color:
    blue<br/><br/>Updated Selectors for Service Two : [name:bgdemo-svc-stage]<br/><br/>app:
    bgdemo<br/><br/>harness.io/color: green<br/><br/>Done</pre><p></p><p>The next
    time you deploy, the swap will point the primary service at the green pod set
    and the stage service at the blue pod set:</p><pre>...<br/>Swapping Service Selectors..<br/><br/>Updated
    Selectors for Service One : [name:bgdemo-svc]<br/><br/>app: bgdemo<br/><br/>harness.io/color:
    green<br/><br/>Updated Selectors for Service Two : [name:bgdemo-svc-stage]<br/><br/>app:
    bgdemo<br/><br/>harness.io/color: blue<br/><br/>Done</pre><p></p><h3>Option: Scale
    Down Old Version</h3><p>A great benefit of a Blue/Green deployment is rapid rollback:
    rolling back to the old version of an app is simple and reliable because network
    traffic is simply routed back to the previous pods.</p><p>You do not need to redeploy
    previous versions of the app and the pods that comprised their environment.</p><p>If
    you would like to scale down the old version, add a <a href="/article/k5lu0u6i1i-using-shell-scripts">Shell
    Script step</a> to the post-deployment steps of your stage.</p><p>Here&#39;s an
    example using <code>&lt;+pipeline.stages.[stage_name].spec.execution.steps.stageDeployment.output.stageServiceName&gt;</code>
    to reference the stage service name. The name of the stage is nginx so the reference
    is <code>&lt;+pipeline.stages.nginx.spec.execution.steps.stageDeployment.output.stageServiceName&gt;</code>.</p><p></p><pre>export
    KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}<br/>kubectl scale deploy -n &lt;+infra.namespace&gt;
    $(kubectl get deploy -n &lt;+infra.namespace&gt; -o jsonpath=&#39;{.items[?(@.spec.selector.matchLabels.harness\.io/color==&#34;&#39;$(kubectl
    get service/&lt;+pipeline.stages.nginx.spec.execution.steps.stageDeployment.output.stageServiceName&gt;
    -n &lt;+infra.namespace&gt; -o jsonpath=&#39;{.spec.selector.harness\.io/color}&#39;)&#39;&#34;)].metadata.name}&#39;)
    --replicas=0</pre><p></p><p>If you use a Delegate installed <u>outside</u> of
    the target cluster, any scripts in your Pipeline need to use the <code>${HARNESS_KUBE_CONFIG_PATH}</code> expression
    to reference the path to a Harness-generated kubeconfig file containing the credentials
    you provided (<code>export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}</code>).</p><p>For
    example:</p><pre>export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH}<br/>kubectl scale
    deploy -n &lt;+infra.namespace&gt; $(kubectl get deploy -n &lt;+infra.namespace&gt;
    -o jsonpath=&#39;{.items[?(@.spec.selector.matchLabels.harness\.io/color==&#34;&#39;$(kubectl
    get service/${k8s.stageServiceName} -n &lt;+infra.namespace&gt; -o jsonpath=&#39;{.spec.selector.harness\.io/color}&#39;)&#39;&#34;)].metadata.name}&#39;)
    --replicas=0</pre><div class="warning-callout">This example does not apply to
    scaling down multiple deployments in the same namespace. If you use the example
    and you have multiple deployments in the same namespace it will impact multiple
    deployments. You should also include a label (or another matchSelector) specific
    to the particular deployment, so it doesn’t scale down all the blue deployments
    in the namespace. For example, match <code>blue</code> and <code>my-specific-app</code>.</div><h3>Option:
    Using the Horizontal Pod Autoscaler (HPA)</h3><p>If you are using the Horizontal
    Pod Autoscaler with your deployment, create a <code>blue</code> and <code>green</code>
    HPA configuration that will point at your deployments.</p><p>templates/hpa-blue.yaml:</p><pre>apiVersion:
    autoscaling/v2beta2<br/>kind: HorizontalPodAutoscaler<br/>metadata:<br/>  name:
    {{.Values.name}}-blue<br/>  labels:<br/>    harness.io/color: blue<br/>spec:<br/>  scaleTargetRef:<br/>    apiVersion:
    apps/v1<br/>    kind: Deployment<br/>    name: {{.Values.name}}-blue<br/>  minReplicas:
    {{ .Values.autoscaling.minReplicas }}<br/>  maxReplicas: {{ .Values.autoscaling.maxReplicas
    }}<br/>  metrics:<br/>    {{- toYaml .Values.autoscaling.metrics | indent 4 }}</pre><p></p><p>templates/hpa-green.yaml:</p><pre>apiVersion:
    autoscaling/v2beta2<br/>kind: HorizontalPodAutoscaler<br/>metadata:<br/>  name:
    {{.Values.name}}-green<br/>  labels:<br/>    harness.io/color: green<br/>spec:<br/>  scaleTargetRef:<br/>    apiVersion:
    apps/v1<br/>    kind: Deployment<br/>    name: {{.Values.name}}-green<br/>  minReplicas:
    {{ .Values.autoscaling.minReplicas }}<br/>  maxReplicas: {{ .Values.autoscaling.maxReplicas
    }}<br/>  metrics:<br/>    {{- toYaml .Values.autoscaling.metrics | indent 4 }}</pre><p></p><p>You
    can add your scaling configuration to your manifest (or share it if you are using
    a Helm chart):</p><pre>autoscaling:<br/>  minReplicas: 1<br/>  maxReplicas: 5<br/>  metrics:<br/>  -
    type: Resource<br/>    resource:<br/>      name: cpu<br/>      target:<br/>        type:
    Utilization<br/>        averageUtilization: 20<br/>  - type: Resource<br/>    resource:<br/>      name:
    memory<br/>      target:<br/>        type: Utilization<br/>        averageUtilization:
    20</pre><p></p><p>When using this with a traffic splitting strategy, your pods
    will scale automatically as your new pods begin receiving heavier loads.</p><h3
    id="blue_green_rollback">Notes</h3><ul><li><strong>Blue/Green Rollback</strong>
    — A great benefit of a Blue/Green deployment is rapid rollback: rolling back to
    the old version of a service/artifact is simple and reliable because network traffic
    is simply routed back to the original instances. You do not need to redeploy previous
    versions of the service/artifact and the instances that comprised their environment.</li></ul><h3>Next
    Steps</h3><ul><li><a href="/article/xsla71qg8t-create-a-kubernetes-rolling-deployment">Create
    a Kubernetes Rolling Deployment</a></li><li><a href="/article/i5p4feil89-create-a-kubernetes-canary-deployment">Create
    a Kubernetes Canary Deployment</a></li></ul><p></p>'
  slug: create-a-kubernetes-blue-green-deployment
  tags:
  - kubernetes blue/green
  is_live: true
