type: article
article_id: hnqkhh7gut
user_id: mfr0nxh4be
category_id: ivpp0y9sdf
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Add a Custom Artifact Source for CD
slug: add-a-custom-artifact-source-for-cd
description: Currently, this feature is behind the feature flag CUSTOM_ARTIFACT_NG.
  Contact Harness Support to enable the feature. To solve [problem], [solution] [benefit
  of feature]. Before You Begin. Kubernetes…
short_version: Currently, this feature is behind the feature flag CUSTOM_ARTIFACT_NG.
  Contact Harness Support to enable the feature. To solve [problem], [solution] [benefit
  of feature]. Before You Begin. Kubernetes…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-01T18:52:50.662188Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add a Custom Artifact Source for CD
  description: Currently, this feature is behind the feature flag CUSTOM_ARTIFACT_NG.
    Contact Harness Support to enable the feature. To solve [problem], [solution]
    [benefit of feature]. Before You Begin. Kubernetes…
  short_version: Currently, this feature is behind the feature flag CUSTOM_ARTIFACT_NG.
    Contact Harness Support to enable the feature. To solve [problem], [solution]
    [benefit of feature]. Before You Begin. Kubernetes…
  body: '<p></p><div class="note-callout">Currently, this feature is behind the feature
    flag <code>CUSTOM_ARTIFACT_NG</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p></p><p>Harness
    includes artifact sources for the most common repositories, such as GCR, ECR,
    Nexus, Artifactory, and any Docker registry such as Docker Hub.</p><p>For cases
    where you are using a custom artifact repo, you can use the Custom Artifact repository
    type. The Custom Artifact uses a shell script to fetch a JSON payload of the artifacts
    from your repo, and then you can reference the artifact version to use in your
    deployment. You can also reference any metadata in the payload.</p><p>This topic
    described how to use the Custom Artifact repository type in your Harness Service
    and how to reference its artifact information from the JSON payload.</p><h3>Before
    You Begin</h3><ul><li><a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    Deployment Tutorial</a></li></ul><h3>Limitations</h3><ul><li>Currently, Custom
    Artifact is supported in the Kubernetes deployment type only.</li><li>The payload
    returned from your repo must be a JSON formatted array.</li></ul><h3>Create Service</h3><p>Create
    a new Service in Harness.</p><p>For <strong>Deployment Type</strong>, select <strong>Kubernetes</strong>.
    Custom Artifact is supported in the Kubernetes deployment type.</p><p>You can
    now see the <strong>Manifests</strong> and <strong>Artifacts</strong> sections.</p><p>We&#39;ll
    focus on <strong>Artifacts</strong> to demonstrate Custom Artifact, but you can
    find information on Manifests in <a href="/article/2nx0de3w99-kubernetes-services">Kubernetes
    Services</a>.</p><h3>Add Custom Artifact Source</h3><p>In <strong>Artifacts</strong>,
    click Add <strong>Primary Artifact</strong>.</p><div class="note-callout">Custom
    Artifact is also supported in <strong>Sidecar</strong>.</div><p>In <strong>Specify
    Artifact Repository Type</strong>, select <strong>Custom</strong> and click <strong>Continue</strong>.</p><p>In
    the <strong>Custom Artifact</strong> source, you will enter a script to fetch
    a JSON payload and add it to the Harness variable <code>$HARNESS_ARTIFACT_RESULT_PATH</code>.
    Here&#39;s an example:</p><pre class="hljs bash">curl -X GET &#34;https://nexus3.dev.harness.io/service/rest/v1/components?repository=cdp-qa-automation-1&#34;
    -H &#34;accept: application/json&#34; &gt; $HARNESS_ARTIFACT_RESULT_PATH</pre><p></p><p>Here&#39;s
    an example of the JSON payload returned from the cURL command:</p><pre class="hljs
    json">{<br/>  &#34;items&#34; : [ {<br/>    &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5M2I5YjllYjlhN2VjYjA2NWJlYjdkNWUxNDgyMDFjOQ&#34;,<br/>    &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>    &#34;format&#34; : &#34;docker&#34;,<br/>    &#34;group&#34;
    : null,<br/>    &#34;name&#34; : &#34;nginx&#34;,<br/>    &#34;version&#34; :
    &#34;latest&#34;,<br/>    &#34;assets&#34; : [ {<br/>      &#34;downloadUrl&#34;
    : &#34;https://nexus3.dev.harness.io/repository/cdp-qa-automation-1/v2/nginx/manifests/latest&#34;,<br/>      &#34;path&#34;
    : &#34;v2/nginx/manifests/latest&#34;,<br/>      &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5MTJkMGZlN2I4MTkyMzkyODc0NTUyYTgyZWVmYzhkZQ&#34;,<br/>      &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>      &#34;format&#34; : &#34;docker&#34;,<br/>      &#34;checksum&#34;
    : {<br/>        &#34;sha1&#34; : &#34;33acb567b9635e73ae566691eb22a89c84138c0b&#34;,<br/>        &#34;sha256&#34;
    : &#34;bb129a712c2431ecce4af8dde831e980373b26368233ef0f3b2bae9e9ec515ee&#34;<br/>      }<br/>    }
    ]<br/>...</pre><p></p><p>Next, in <strong>Artifacts Array Path</strong>, you will
    define where to find each artifact in the array (<code>$.items</code>).</p><p>Next,
    in <strong>Versions Path</strong>, define where to find the artifact versions
    in your payload (<code>version</code>).</p><p>When you done Artifact Details will
    look something like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/hnqkhh7gut/1661893479196/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Enter
    the following settings.</p><h4>Timeout</h4><p>Enter a time limit for the script
    to execute before failing the artifact JSON retrieval.</p><h4>Script</h4><p>Enter
    a script to fetch a JSON payload and add it to the Harness variable <code>$HARNESS_ARTIFACT_RESULT_PATH</code>.
    Here&#39;s an example:</p><pre class="hljs bash">curl -X GET &#34;https://nexus3.dev.harness.io/service/rest/v1/components?repository=cdp-qa-automation-1&#34;
    -H &#34;accept: application/json&#34; &gt; $HARNESS_ARTIFACT_RESULT_PATH</pre><p></p><p>The
    shell script you enter will query the Custom Artifact repository and output the
    JSON payload to a file on the Harness Delegate host using the environment variable <code>HARNESS_ARTIFACT_RESULT_PATH</code>,
    initialized by Harness. <code>HARNESS_ARTIFACT_RESULT_PATH</code> is a random,
    unique file path created on the Delegate by Harness.</p><p>You can use <a href="/article/osfw70e59c-add-use-text-secrets">Harness
    text secrets</a> in the script. For example:</p><pre class="hljs bash">curl -u
    &#39;harness&#39; &lt;+secrets.getValue(&#34;repo_password&#34;)&gt; https://myrepo.example.io/todolist/json/
    &gt; $HARNESS_ARTIFACT_RESULT_PATH</pre><p></p><div class="note-callout">You must
    delete the Artifact Source and re-add it to re-collect the artifacts if the Artifact
    Source or its script information has been changed.</div><h4>Artifacts Array Path</h4><p>Enter
    the path in the payload array to the artifacts listing. For example, in the following
    payload the artifacts are listed using <code>items</code>, so in Artifacts Array
    Path you reference the path with <code>$.items</code>.</p><pre class="hljs json">{<br/>  &#34;items&#34;
    : [ {<br/>    &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5M2I5YjllYjlhN2VjYjA2NWJlYjdkNWUxNDgyMDFjOQ&#34;,<br/>    &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>    &#34;format&#34; : &#34;docker&#34;,<br/>    &#34;group&#34;
    : null,<br/>    &#34;name&#34; : &#34;nginx&#34;,<br/>    &#34;version&#34; :
    &#34;latest&#34;,<br/>    &#34;assets&#34; : [ {<br/>      &#34;downloadUrl&#34;
    : &#34;https://nexus3.dev.harness.io/repository/cdp-qa-automation-1/v2/nginx/manifests/latest&#34;,<br/>      &#34;path&#34;
    : &#34;v2/nginx/manifests/latest&#34;,<br/>      &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5MTJkMGZlN2I4MTkyMzkyODc0NTUyYTgyZWVmYzhkZQ&#34;,<br/>      &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>      &#34;format&#34; : &#34;docker&#34;,<br/>      &#34;checksum&#34;
    : {<br/>        &#34;sha1&#34; : &#34;33acb567b96xxx9c84138c0b&#34;,<br/>        &#34;sha256&#34;
    : &#34;bb129a712cxxx33ef0f3b2bae9e9ec515ee&#34;<br/>      }<br/>    } ]<br/>...</pre><p></p><h4>Version
    Path</h4><p>Enter the path in the payload array to the version. Using the above
    payload example, the path is <code>version</code>.</p><h4>Version</h4><p>Enter
    the version number for this deployment, or select Runtime Input or Expression
    to select the version dynamically.</p><p>For more information on Fixed Value,
    Runtime Input, and Expression got to <a href="/article/f6yobn7iq0-runtime-inputs">Fixed
    Values, Runtime Inputs, and Expressions</a>.</p><p>When you done Artifact Details
    will look something like this:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/hnqkhh7gut/1661893479196/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Later,
    you can reference the Version using this expression format, which will resolve
    to the version pulled from the array at runtime:</p><p><code>&lt;+pipeline.stages.[stage_Id].spec.serviceConfig.output.artifactResults.primary.version&gt;</code></p><h3>Script
    Input Variables</h3><p>While you can simply declare a variable in your script
    using a Harness expression or string for its value, using <strong>Script Input
    Variables</strong> provides some additional benefits:</p><ul><li>You can more
    easily identify and manage the Harness expressions used in your script.</li><li>You
    can template your script.</li></ul><p>You can declare the variable using <strong>Name</strong> and <strong>Value</strong> in <strong>Script
    Input Variables</strong> and then reference the variable in the script just as
    you would any other variable: <code>$var_name</code>.</p><h3>Additional Attributes
    (Metadata)</h3><p>In <strong>Additional Attributes</strong>, you can map any additional
    values from your JSON array.</p><p>For example, the following payload has <code>downloadUrl</code>
    and <code>path</code> in its <code>assets</code>:</p><pre class="hljs json">{<br/>  &#34;items&#34;
    : [ {<br/>    &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5M2I5YjllYjlhN2VjYjA2NWJlYjdkNWUxNDgyMDFjOQ&#34;,<br/>    &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>    &#34;format&#34; : &#34;docker&#34;,<br/>    &#34;group&#34;
    : null,<br/>    &#34;name&#34; : &#34;nginx&#34;,<br/>    &#34;version&#34; :
    &#34;latest&#34;,<br/>    &#34;assets&#34; : [ {<br/>      &#34;downloadUrl&#34;
    : &#34;https://nexus3.dev.harness.io/repository/cdp-qa-automation-1/v2/nginx/manifests/latest&#34;,<br/>      &#34;path&#34;
    : &#34;v2/nginx/manifests/latest&#34;,<br/>      &#34;id&#34; : &#34;Y2RwLXFhLWF1dG9tYXRpb24tMTo5MTJkMGZlN2I4MTkyMzkyODc0NTUyYTgyZWVmYzhkZQ&#34;,<br/>      &#34;repository&#34;
    : &#34;cdp-qa-automation-1&#34;,<br/>      &#34;format&#34; : &#34;docker&#34;,<br/>      &#34;checksum&#34;
    : {<br/>        &#34;sha1&#34; : &#34;33acb567b96xxx9c84138c0b&#34;,<br/>        &#34;sha256&#34;
    : &#34;bb129a712cxxx33ef0f3b2bae9e9ec515ee&#34;<br/>      }<br/>    } ]<br/>...</pre><p></p><p>You
    can assign these items to variables. In <strong>Name</strong>, enter the variable
    name and in <strong>Value</strong> enter the path to the item.</p><p>For example,
    to reference <code>downloadUrl</code> and <code>path</code> in the first item
    in the array:</p><ul><li><code>assets[0].downloadUrl</code></li><li><code>assets[0].path</code></li></ul><p>Here&#39;s
    the example:</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/hnqkhh7gut/1661894583937/image.png"/></figure><p>Later,
    in a Shell Script step, you can reference these attributes using the expression
    format:</p><p><code>&lt;+pipeline.stages.[stage_Id].spec.serviceConfig.output.artifactResults.primary.metadata.[attribute_name]&gt;</code></p><p>For
    example:</p><pre class="hljs bash">echo &#34;URL: &lt;+pipeline.stages.Kube.spec.serviceConfig.output.artifactResults.primary.metadata.URL&gt;&#34;<br/>echo
    &#34;Path: &lt;+pipeline.stages.Kube.spec.serviceConfig.output.artifactResults.primary.metadata.path&gt;&#34;</pre><p></p><p>At
    runtime, these expressions will resolve to the data from the array.</p><h3>Reference
    Custom Artifact</h3><p>You can reference the custom artifact in your Values YAML
    file and in a Shell Script step.</p><h4>Values YAML in Manifests</h4><p>You add
    a Values YAML file along with your manifests in the <strong>Manifests</strong>
    section of the Service.</p><p>The Values YAML can use Harness expressions to reference
    artifacts in the <strong>Artifacts</strong> section of the Service.</p><p>To reference
    the artifact, use the expression <code>&lt;+artifact.image&gt;</code> in your
    Values YAML file. For example:</p><pre class="hljs yaml">name: example<br/>replicas:
    2<br/><br/>image: &lt;+artifact.image&gt;<br/># dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace:
    true<br/>namespace: &lt;+infra.namespace&gt;<br/><br/>...</pre><p></p><p>For details
    on using Values YAML in Harness, go to <a href="/article/2nx0de3w99-kubernetes-services">Kubernetes
    Services</a>.</p><div class="note-callout"><a href="https://docs.harness.io/article/lml71vhsim-harness-variables">Harness
    Variables and Expressions</a> may be added to Values files (for example values.yaml),
    not the manifests themselves. This provides more flexibility.</div><h4>Shell Script
    Step</h4><p>In the stage <strong>Execution</strong> section, add a <a href="/article/k5lu0u6i1i-using-shell-scripts">Shell
    Script</a> step.</p><p>In <strong>Script</strong>, reference the artifact and
    any additional attributes you configured. Here&#39;s an example where the stage
    is named Kube:</p><pre class="hljs bash">echo &#34;Version: &lt;+pipeline.stages.Kube.spec.serviceConfig.output.artifactResults.primary.version&gt;&#34;<br/>echo
    &#34;URL: &lt;+pipeline.stages.Kube.spec.serviceConfig.output.artifactResults.primary.metadata.URL&gt;&#34;<br/>echo
    &#34;Path: &lt;+pipeline.stages.Kube.spec.serviceConfig.output.artifactResults.primary.metadata.path&gt;&#34;</pre><p></p><p></p>'
  slug: add-a-custom-artifact-source-for-cd
  tags: []
  is_live: true
