type: article
article_id: 2nx0de3w99
user_id: mfr0nxh4be
category_id: wfnd8y0ifs
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Kubernetes Services
slug: kubernetes-services
description: Define a Kubernetes Service in a CD Pipeline.
short_version: Define a Kubernetes Service in a CD Pipeline.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-01T18:51:48.972143Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Kubernetes Services
  description: Define a Kubernetes Service in a CD Pipeline.
  short_version: Define a Kubernetes Service in a CD Pipeline.
  body: "<p>A Kubernetes <strong>Service</strong> represents the app/microservice
    you are deploying using Harness Pipelines.</p><p>Each Stage&#39;s <strong>Service
    Definition</strong> includes the manifests and artifacts for the Service you are
    deploying in a specific Stage.</p><p>Setting up your Kubernetes Service Definition
    involves the following steps:</p><ul><li><a href=\"https://ngdocs.harness.io/article/2nx0de3w99-kubernetes-services#lb-add-manifests-for-your-service\">Step
    1: Add Manifests for Your Service</a></li><li><a href=\"https://ngdocs.harness.io/article/2nx0de3w99-kubernetes-services#option_add_the_primary_artifact_source\">Option:
    Add the Primary Artifact Source</a></li><li><a href=\"https://ngdocs.harness.io/article/2nx0de3w99-kubernetes-services#additional_settings_and_options\">Additional
    Settings and Options</a></li></ul><h3>Before You Begin</h3><p>If you are new to
    Harness CD Pipelines, see:</p><ul><li><a href=\"/article/cqgeblt4uh-cd-pipeline-basics\">CD
    Pipeline Basics</a></li><li><a href=\"/article/knunou9j30-kubernetes-cd-quickstart\">Kubernetes
    CD Quickstart</a></li></ul><h3 id=\"lb-add-manifests-for-your-service\">Visual
    Summary</h3><p>Here&#39;s a quick video showing you how to add manifests and Values
    YAML files in Harness. It covers Kubernetes as well as other types like Helm Charts.</p><p></p><div
    class=\"hd--embed\" data-provider=\"YouTube\" data-thumbnail=\"https://i.ytimg.com/vi/dVk6-8tfwJc/hqdefault.jpg\"><iframe
    width=\"200\" height=\"150\" src=\"https://www.youtube.com/embed/dVk6-8tfwJc?feature=oembed\"
    frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media;
    gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></div><h3 id=\"lb-add-manifests-for-your-service\">Step
    1: Add Manifests for Your Service</h3><p>In a CD Stage <strong>Service</strong>,
    in <strong>Manifests</strong>, you add the specific manifests and config files
    your <strong>Service Definition</strong> requires.</p><p>Harness supports a number
    of Kubernetes manifest types and orchestration methods.</p><p></p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1648581129358/clean-shot-2022-03-29-at-12-11-28.png\"/></figure><p>Here
    are the supported manifest types and how to set them up.</p><h4>Kubernetes Manifest</h4><p>Harness
    supports Kubernetes deployments using Kubernetes manifests.</p><p>If this is your
    first time using Harness for a Kubernetes deployment, see <a href=\"/article/knunou9j30-kubernetes-cd-quickstart\">Kubernetes
    CD Quickstart</a>.</p><p>For a task-based walkthroughs of different Kubernetes
    features in Harness, see <a href=\"/category/qfj6m1k2c4\">Kubernetes How-tos</a>.</p><details><summary>Add
    a Kubernetes Manifest</summary><div><p>You can hardcode your artifact in your
    manifests, our add your artifact source to your <strong>Service Definition</strong>
    and then reference it in your manifests. See <a href=\"https://ngdocs.harness.io/article/2nx0de3w99-kubernetes-services#reference_artifacts_in_manifests\">Reference
    Artifacts in Manifests</a>.</p><p>Let&#39;s take a quick look at adding Kubernetes
    manifests to your Stage.</p><p>In your CD stage, click <strong>Service</strong>.</p><p>In <strong>Service
    Definition</strong>, select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>,
    click <strong>Add Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select <strong>K8s Manifest</strong>, and then click <strong>Continue</strong>.</p><p>In <strong>Specify
    K8s Manifest Store</strong>, select the Git provider.</p><p>The settings for each
    Git provider are slightly different, but you simply want to point to the Git account
    For example, click GitHub, and then select or create a new GitHub Connector. See <a
    href=\"https://ngdocs.harness.io/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to Code Repo</a>.</p><p>Click <strong>Continue</strong>. <strong>Manifest Details</strong> appears.</p><p>In <strong>Manifest
    Identifier</strong>, enter an Id for the manifest. It must be unique. It can be
    used in Harness expressions to reference this manifest&#39;s settings.</p><p>For
    example, if the Pipeline is named <strong>MyPipeline</strong> and <strong>Manifest
    Identifier</strong> were <strong>manifests</strong>, you could reference the <strong>Branch</strong> setting
    using this expression:</p><ul><li>Within the Stage: <code>&lt;+serviceConfig.serviceDefinition.spec.manifests.values.spec.store.spec.branch&gt;</code>.</li><li>Anywhere
    in the Pipeline (the Stage name is <strong>deploy</strong>): <code>&lt;+pipeline.stages.deploy.spec.serviceConfig.serviceDefinition.spec.manifests.values.spec.store.spec.branch&gt;</code>.</li></ul><p>If
    you selected a Connector that uses a Git account instead of a Git repo, enter
    the name of the repo where your manifests are located in <strong>Repository Name</strong>.</p><p>In <strong>Git
    Fetch Type</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit ID</strong>, and then enter the branch or commit Id for the repo.</p><p>For <strong>Specific
    Commit ID</strong>, you can also use a <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\"
    target=\"_blank\">Git commit tag</a>.</p><p>In <strong>File/Folder Path</strong>,
    enter the path to the manifest file or folder in the repo. The Connector you selected
    already has the repo name, so you simply need to add the path from the root of
    the repo.</p><p>If you are using a values.yaml file and it&#39;s in the same repo
    as your manifests, in <strong>Values YAML</strong>, click <strong>Add File</strong>.</p><p>Enter
    the path to the values.yaml file from the root of the repo.</p><p>Here&#39;s an
    example with the manifest and values.yaml file added.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1654727355456/clean-shot-2022-06-08-at-15-28-46.png\"/></figure><p>If
    you use multiple files, the highest priority is given from the last file, and
    the lowest priority to the first file. For example, if you have 3 files and the
    second and third files contain the same key:value as the first file, the third
    file&#39;s key:value overrides the second and first files.</p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1654794734702/image.png\"/></figure><p>Click <strong>Submit</strong>.
    The manifest is added to <strong>Manifests</strong>.</p></div></details><p></p><h4>Values
    YAML</h4><p>Harness Kubernetes Services can use Values YAML files just like you
    would using Helm. Harness manifests can use <a href=\"#go_templating\">Go templating</a>
    with your Values YAML files and you can include <a href=\"/article/lml71vhsim-harness-variables\">Harness
    variable expressions</a> in the Values YAML files.</p><p>If you are using a Values
    YAML file and it&#39;s in the same repo as your manifests, you can add it when
    you add your manifests, as described above (<strong>Values YAML</strong> --&gt;
    <strong>Add File</strong>).</p><p>If you are using a Values YAML file and it&#39;s
    in a separate repo from your manifests, or you simply want to add it separately,
    you can add it as a separate file, described below.</p><div class=\"note-callout\">You
    <u>cannot</u> use Harness variables expressions in your Kubernetes object manifest
    files. You can only use Harness variables expressions in Values YAML files.</div><details><summary>Add
    a Values YAML file</summary><div><p>Where is your Values YAML file located?</p><ul><li><strong>Same
    folder as manifests:</strong> If you are using a values.yaml file and it&#39;s
    in the same repo as your manifests, you can add it when you add your manifests,
    as described above (<strong>Values YAML</strong> --&gt; <strong>Add File</strong>).</li><li><strong>Separate
    from manifests:</strong> If your values file is located in a different folder,
    you can add it separately as a <strong>Values YAML</strong> manifest type, described
    below.</li></ul><p>In your CD stage, click <strong>Service</strong>.</p><p>In <strong>Service
    Definition</strong>, select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>,
    click <strong>Add Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select <strong>Values YAML</strong>, and click <strong>Continue.</strong></p><p>In <strong>Specify
    Values YAML Store</strong>, select the Git repo provider you&#39;re using and
    then create or select a Connector to that repo. The different Connectors are covered
    in <a href=\"https://ngdocs.harness.io/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to a Git Repo</a>.</p><p>If you haven&#39;t set up a Harness Delegate, you can
    add one as part of the Connector setup. This process is described in <a href=\"https://ngdocs.harness.io/article/knunou9j30-kubernetes-cd-quickstart\">Kubernetes
    CD Quickstart</a>, <a href=\"https://ngdocs.harness.io/article/cifa2yb19a-helm-cd-quickstart\">Helm
    CD Quickstart</a> and <a href=\"https://ngdocs.harness.io/article/f9bd10b3nj-install-a-kubernetes-delegate\">Install
    a Kubernetes Delegate</a>.</p><p>Once you&#39;ve selected a Connector, click <strong>Continue</strong>.</p><p>In <strong>Manifest
    Details</strong>, you tell Harness where the values.yaml is located.</p><p>In <strong>Manifest
    Identifier</strong>, enter a name that identifies the file, like <strong>values</strong>.</p><p>If
    you selected a Connector that uses a Git account instead of a Git repo, enter
    the name of the repo where your manifests are located in <strong>Repository Name</strong>.</p><p>In <strong>Git
    Fetch Type</strong>, select a branch or commit Id for the manifest, and then enter
    the Id or branch.</p><p>\uFEFFFor <strong>Specific Commit ID</strong>, you can
    also use a <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\">Git commit
    tag</a>.</p><p>\uFEFFIn <strong>File Path</strong>, enter the path to the values.yaml
    file in the repo.</p><p>You can enter multiple values file paths by clicking <strong>Add
    File</strong>. At runtime, Harness will compile the files into one values file.</p><p>If
    you use multiple files, the highest priority is given from the last file, and
    the lowest priority to the first file. For example, if you have 3 files and the
    second and third files contain the same key:value as the first file, the third
    file&#39;s key:value overrides the second and first files.</p><p></p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1647293372798/image.png\"/></figure><p></p><p>Click <strong>Submit</strong>.</p><p>The
    values file(s) are added to the Service.</p><h5>Values files in both the Manifests
    and Values YAML</h5><p>If you have Values files in both the K8s Manifest <strong>File/Folder
    Path</strong> and the Values YAML, the Values YAML will overwrite any matching
    values in the Values YAML in the Manifest <strong>File/Folder Path</strong>.</p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/ssbq0xh0hx/1649197054216/clean-shot-2022-04-05-at-15-14-01.png\"/></figure></div></details><h4>Helm
    Chart</h4><p>Harness supports Helm Chart deployments. If this is your first time
    using Harness for a Helm Chart deployment, see <a href=\"/article/cifa2yb19a-helm-cd-quickstart\">Helm
    Chart CD Quickstart</a>.</p><p>For a detailed walkthrough of deploying Helm Charts
    in Harness, including limitations and binary support, see <a href=\"/article/7owpxsaqar-deploy-helm-charts\">Deploy
    Helm Charts</a>. Here&#39;s a <a href=\"https://youtu.be/Wvr52UKDOJQ\" target=\"_blank\">video
    walkthrough</a>.</p><details><summary>Add a Helm Chart</summary><div><p>In your
    CD stage, click <strong>Service</strong>.</p><p>In <strong>Service Definition</strong>,
    select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>, click <strong>Add
    Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>, select <strong>Helm
    Chart</strong>, and click <strong>Continue</strong>.</p><p>In <strong>Specify
    Helm Chart Store</strong>, select HTTP Helm Repository, OCI Registry, a Git repo
    provider, or a cloud storage service (Google Cloud Storage, AWS S3) you&#39;re
    using.</p><p>For the steps and settings of each option, see the <a href=\"https://ngdocs.harness.io/article/xxvnk67c5x-connect-to-an-artifact-repo\">Connect
    to an Artifact Repo</a> or <a href=\"/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to a Git Repo</a> How-tos.</p><p>If you are using Google Cloud Storage or Amazon
    S3, see <a href=\"https://ngdocs.harness.io/category/1ehb4tcksy\">Cloud Platform
    Connectors</a>.</p><p>If you haven&#39;t set up a Harness Delegate, you can add
    one as part of the Connector setup. This process is described in <a href=\"https://ngdocs.harness.io/article/cifa2yb19a-helm-cd-quickstart\">Helm
    CD Quickstart</a> and <a href=\"https://ngdocs.harness.io/article/f9bd10b3nj-install-a-kubernetes-delegate\">Install
    a Kubernetes Delegate</a>.</p><p>Once your Helm chart is added, it appears in
    the <strong>Manifests</strong> section. For example:</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1647293409133/image.png\"/></figure><p></p></div></details><h4>Kustomize</h4><p>Harness
    supports Kustomize deployments.</p><p>If this is your first time using Harness
    for a Kustomize deployment, see the <a href=\"/article/uiqe6jz9o1-kustomize-quickstart\">Kustomize
    Quickstart</a>.</p><p>For a detailed walkthrough of deploying Kustomize in Harness,
    including limitations, see <a href=\"/article/98u2hvzj0t-use-kustomize-for-kubernetes-deployments\">Use
    Kustomize for Kubernetes Deployments</a>.</p><details><summary>Add a Kustomization</summary><div><p>In
    your CD stage, click <strong>Service</strong>.</p><p>In <strong>Service Definition</strong>,
    select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>, click <strong>Add
    Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>, click <strong>Kustomize</strong>,
    and click <strong>Continue</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select the Git provider.</p><p>In <strong>Manifest Details</strong>, enter the
    following settings, test the connection, and click <strong>Submit</strong>. We
    are going to provide connection and path information for a kustomization located
    at https://github.com/wings-software/harness-docs/blob/main/kustomize/helloWorld/kustomization.yaml.</p><ul><li
    class=\"ab-list-item list-item css-79elbk\"><strong>Manifest Identifier:</strong> enter <strong>kustomize</strong>.</li><li><strong>Git
    Fetch Type:</strong> select <strong>Latest from Branch</strong>.</li><li><strong>Branch:</strong> enter <strong>main</strong>.</li><li><strong>Kustomize
    Folder Path:</strong> kustomize/helloWorld. This is the path from the repo root.</li></ul><p>The
    kustomization is now listed.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1647293451886/image.png\"/></figure></div></details><h4>Kustomize
    Patches</h4><details><summary>Add Kustomize Patches</summary><div><p>In the Stage&#39;s <strong>Service</strong>,
    in <strong>Manifests</strong>, click <strong>Add Manifest</strong>.</p><p>In <strong>Specify
    Manifest Type</strong>, select <strong>Kustomize Patches</strong>, and click <strong>Continue</strong>.</p><p>In <strong>Specify
    Kustomize Patches Store</strong>, select your Git provider and Connector. See <a
    href=\"https://newdocs.helpdocs.io/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to a Git Repo</a>.</p><p>The Git Connector should point to the Git account or
    repo where you Kustomize files are located. In <strong>Kustomize Patches</strong> you
    will specify the path to the actual patch files.</p><p>Click <strong>Continue</strong>.</p><p>In <strong>Manifest
    Details</strong>, enter the path to your patch file(s):</p><ul><li><strong>Manifest
    Identifier:</strong> enter a name that identifies the patch file(s). You don&#39;t
    have to add the actual filename.</li><li><strong>Git Fetch Type:</strong> select
    whether to use the latest branch or a specific commit Id.</li><li><strong>Branch</strong>/<strong>Commit
    Id</strong>: enter the branch or commit Id.</li><li><strong>File/Folder Path:</strong> enter
    the path to the patch file(s) from the root of the repo. Click <strong>Add File</strong> to
    add each patch file. The files you add should be the same files listed in <code>patchesStrategicMerge</code> of
    the main kustomize file in your Service.</li></ul><div class=\"note-callout\">The
    order in which you add file paths for patches in <strong>File/Folder Path</strong> is
    the same order that Harness applies the patches during the kustomization build.</div><div
    class=\"note-callout\">Small patches that do one thing are recommended. For example,
    create one patch for increasing the deployment replica number and another patch
    for setting the memory limit.</div><p>Click <strong>Submit</strong>. The patch
    file(s) is added to <strong>Manifests</strong>.</p><p>When the main kustomization.yaml
    is deployed, the patch is rendered and its overrides are added to the deployment.yaml
    that is deployed.</p><div class=\"note-callout\"><strong>How Harness uses patchesStrategicMerge:</strong>
    If the <code>patchesStrategicMerge</code> label is missing from the kustomization
    YAML file, but you have added Kustomize Patches to your Harness Service, Harness
    will add the Kustomize Patches you added in Harness to the <code>patchesStrategicMerge</code> in
    the kustomization file. If you have hardcoded patches in <code>patchesStrategicMerge</code>,
    but not add these patches to Harness as Kustomize Patches, Harness will ignore
    them.</div></div></details><h4>OpenShift Template</h4><p>For an overview of OpenShift
    support, see <a href=\"/article/uajkpcmqjg-using-open-shift-with-harness-kubernetes\">Using
    OpenShift with Harness Kubernetes</a>.</p><details><summary>Add an OpenShift Template</summary><div><p>In
    your CD stage, click <strong>Service</strong>.</p><p>In <strong>Service Definition</strong>,
    select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>, click <strong>Add
    Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>, select <strong>OpenShift
    Template</strong>, and then click <strong>Continue.</strong></p><p>In <strong>Specify
    OpenShift Template Store</strong>, select the Git provider where your template
    is located.</p><p>For example, click <strong>GitHub</strong>, and then select
    or create a new GitHub Connector. See <a href=\"https://ngdocs.harness.io/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to Code Repo</a>.</p><p>Click <strong>Continue</strong>. <strong>Manifest Details</strong> appears.</p><p>In <strong>Manifest
    Identifier</strong>, enter an Id for the manifest. It must be unique. It can be
    used in Harness expressions to reference this template&#39;s settings.</p><p>For
    example, if the Pipeline is named <strong>MyPipeline</strong> and <strong>Manifest
    Identifier</strong> were <strong>myapp</strong>, you could reference the <strong>Branch</strong> setting
    using this expression:</p><p><code>&lt;+pipeline.stages.MyPipeline.spec.serviceConfig.serviceDefinition.spec.manifests.myapp.spec.store.spec.branch&gt;</code></p><p>In <strong>Git
    Fetch Type</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit Id/Git Tag</strong>, and then enter the branch or commit Id/<a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\"
    target=\"_blank\">tag</a> for the repo.</p><p>In <strong>Template</strong> <strong>File
    Path</strong>, enter the path to the template <u>file</u>. The Connector you selected
    already has the repo name, so you simply need to add the path from the root of
    the repo to the file.</p><p>Click <strong>Submit</strong>. The template is added
    to <strong>Manifests</strong>.</p></div></details><h4>OpenShift Param</h4><p>For
    an overview of OpenShift support, see <a href=\"/article/uajkpcmqjg-using-open-shift-with-harness-kubernetes\">Using
    OpenShift with Harness Kubernetes</a>.</p><details><summary>Add an OpenShift Param
    File</summary><div><p>In your CD stage, click <strong>Service</strong>.</p><p>In <strong>Service
    Definition</strong>, select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>,
    click <strong>Add Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select <strong>OpenShift Param</strong>, and then click <strong>Continue.</strong></p><p>In
    <strong>Specify OpenShift Param Store</strong>, select the Git provider where
    your param file is located.</p><p>For example, click <strong>GitHub</strong>,
    and then select or create a new GitHub Connector. See <a href=\"https://ngdocs.harness.io/article/zbhehjzsnv-connect-to-code-repo\">Connect
    to Code Repo</a>.</p><p>Click <strong>Continue</strong>. <strong>Manifest Details</strong> appears.</p><p>In <strong>Manifest
    Identifier</strong>, enter an Id for the param file. It must be unique. It can
    be used in Harness expressions to reference this param file&#39;s settings.</p><p>In <strong>Git
    Fetch Type</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit Id/Git Tag</strong>, and then enter the branch or commit Id/<a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\"
    target=\"_blank\">tag</a> for the repo.</p><p>In <strong>Paths</strong>, enter
    the path(s) to the param <u>file(s)</u>. The Connector you selected already has
    the repo name, so you simply need to add the path from the root of the repo to
    the file.</p><p>Click <strong>Submit</strong>. The template is added to <strong>Manifests</strong>.</p></div></details><p></p><h3>Option:
    Add the Primary Artifact Source</h3><p>The <strong>Artifacts</strong> settings
    in the <strong>Service Definition</strong> allow you to select the artifacts for
    deployment instead of hardcoding them in your manifest and values YAML files.</p><details><summary>Artifacts
    Overview</summary><div><p>If a Docker image location is hardcoded in your Kubernetes
    manifest (for example, <code>image: nginx:1.14.2</code>), then you can simply
    add the manifest to Harness in <strong>Manifests</strong> and Kubernetes will
    pull the image during deployment.</p><p>Alternatively, you can add the image location
    to Harness as an artifact in the <strong>Artifacts</strong>.</p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649200138919/clean-shot-2022-04-05-at-16-08-47.png\"/></figure><p>This
    allows you to reference the image in your manifests and Values files using the
    Harness expression <code>&lt;+artifact.image&gt;</code>.</p><pre class=\"hljs
    yaml\">...<br/>image: &lt;+artifact.image&gt;<br/>...</pre><p></p><div class=\"note-callout\">You
    <u>cannot</u> use Harness variables expressions in your Kubernetes object manifest
    files. You can only use Harness variables expressions in Values YAML files.</div><p>When
    you select the artifact repo for the artifact, like a Docker Hub repo, you specify
    the artifact and tag/version to use. You can select a specific tag/version, use
    a <a href=\"/article/f6yobn7iq0-runtime-inputs\">Runtime Input</a> so that you
    are prompted for the tag/version when you run the Pipeline, or you can use an
    Harness variable expression to pass in the tag/version at execution.</p><p>Here&#39;s
    an example where a Runtime Input is used and you select which image version/tag
    to deploy.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649272224935/clean-shot-2022-04-06-at-12-10-11-2-x.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>With
    a Harness artifact, you can template your manifests, detaching them from a hardcoded
    location. This makes your manifests reusable and dynamic.</p><p>In <strong>Artifacts</strong>,
    you add connections to the images in their repos.</p><p>In <strong>Artifacts</strong>,
    click <strong>Add Primary</strong> <strong>Artifact.</strong></p><p>Select the <strong>Artifact
    Repository Type</strong>.</p></div></details><h4>Docker</h4><p>For details on
    all the Docker Connector settings, see <a href=\"/article/u9bsd77g5a-docker-registry-connector-settings-reference\">Docker
    Connector Settings Reference</a>.</p><details><summary>Add an Artifact from a
    Docker Registry</summary><div><p>In <strong>Artifacts</strong>, click <strong>Add
    Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact Repository
    Type</strong>, click <strong>Docker Registry</strong>, and then click <strong>Continue</strong>.</p><p>The <strong>Docker
    Registry</strong> settings appear.</p><p>Select a <a href=\"https://ngdocs.harness.io/article/u9bsd77g5a-docker-registry-connector-settings-reference\">Docker
    Registry Connector</a> or create a new one.</p><p>Click <strong>Continue</strong>.</p><p>In <strong>Image
    path</strong>, enter the name of the artifact you want to deploy, such as <strong>library/nginx</strong>.</p><p>In <strong>Tag</strong>,
    enter or select the <a href=\"https://docs.docker.com/engine/reference/commandline/tag/\"
    target=\"_blank\">Docker image tag</a> for the image.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649279373743/clean-shot-2022-04-06-at-14-09-13-2-x.png\"/></figure><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><h4>Google Container
    Registry (GCR)</h4><p>You connect to GCR using a Harness GCP Connector. For details
    on all the GCR requirements for the GCP Connector, see <a href=\"/article/yykfduond6-gcs-connector-settings-reference\">Google
    Cloud Platform (GCP) Connector Settings Reference</a>.</p><details><summary>Add
    an Artifact from GCR</summary><div><p>In <strong>Artifacts</strong>, click <strong>Add
    Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact Repository
    Type</strong>, click <strong>GCR</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>GCR Repository</strong>, select or create a <a href=\"/article/yykfduond6-gcs-connector-settings-reference\">Google
    Cloud Platform (GCP) Connector</a> that connects to the GCP account where the
    GCR registry is located.</p><ul><li><strong>GCP GCR Permissions:</strong> make
    sure the connected IAM User has the policies listed in <a href=\"/article/yykfduond6-gcs-connector-settings-reference\">Google
    Cloud Platform (GCP) Connector Settings Reference</a>.</li></ul><p>Click <strong>Continue</strong>.</p><p>In <strong>GCR
    Registry URL</strong>, select the registry where the artifact source is located.</p><p>In
    <strong>Image Path</strong>, enter the name of the artifact you want to deploy.</p><p>Images
    in repos need to reference a path starting with the project ID that the artifact
    is in, for example: <code>myproject-id/image-name</code>.</p><p>In <strong>Tag</strong>,
    enter or select the <a href=\"https://docs.docker.com/engine/reference/commandline/tag/\"
    target=\"_blank\">Docker image tag</a> for the image or select <a href=\"/article/f6yobn7iq0-runtime-inputs\">Runtime
    Input or Expression</a>.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649274502655/clean-shot-2022-04-06-at-12-48-08-2-x.png\"/></figure><p>If
    you use Runtime Input, when you deploy the Pipeline, Harness will pull the list
    of tags from the repo and prompt you to select one.</p><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><h4>Amazon Elastic
    Container Registry (ECR)</h4><p>You connect to ECR using a Harness AWS Connector.
    For details on all the ECR requirements for the AWS Connector, see <a href=\"/article/m5vkql35ca-aws-connector-settings-reference\">AWS
    Connector Settings Reference</a>.</p><p></p><details><summary>Add an Artifact
    from ECR</summary><div><p>In <strong>Artifacts</strong>, click <strong>Add Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact
    Repository Type</strong>, click <strong>ECR</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>ECR Repository</strong>, select or create an <a href=\"/article/98ezfwox9u-add-aws-connector\">AWS
    Connector</a> that connects to the AWS account where the ECR registry is located.</p><ul><li><strong>AWS
    ECR Permissions:</strong> make sure the connected IAM User has the policies listed
    in <a href=\"/article/m5vkql35ca-aws-connector-settings-reference\">AWS Connector
    Settings Reference</a>.</li></ul><p>Click <strong>Continue</strong>.</p><p>In <strong>Artifact
    Details</strong>, select the region where the artifact source is located.</p><p>In
    <strong>Image Path</strong>, enter the name of the artifact you want to deploy.</p><p>In <strong>Tag</strong>,
    enter or select the <a href=\"https://docs.docker.com/engine/reference/commandline/tag/\"
    target=\"_blank\">Docker image tag</a> for the image.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649366996104/clean-shot-2022-04-07-at-14-29-25-2-x.png\"/></figure><p>If
    you use Runtime Input, when you deploy the Pipeline, Harness will pull the list
    of tags from the repo and prompt you to select one.</p><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><p></p><h4>Azure
    Container Registry (ACR)</h4><p>You connect to ACR using a Harness Azure Connector.
    For details on all the Azure requirements for the Azure Connector, see <a href=\"/article/9epdx5m9ae-add-a-microsoft-azure-connector\">Add
    a Microsoft Azure Cloud Connector</a>.</p><details><summary>Add an Artifact from
    ACR</summary><div><p>In <strong>Artifacts</strong>, click <strong>Add Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact
    Repository Type</strong>, click <strong>ACR</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>ACR Repository</strong>, select or create an <a href=\"/article/9epdx5m9ae-add-a-microsoft-azure-connector\">Azure
    Connector</a> that connects to the Azure account where the ACR registry is located.</p><ul><li><strong>Azure
    ACR Permissions:</strong> make sure the Service Principal or Managed Identity
    has the <a href=\"/article/9epdx5m9ae-add-a-microsoft-azure-connector\">required
    permissions</a>.</li></ul><p>Click <strong>Continue</strong>.</p><p>In <strong>Artifact
    Details</strong>, select the Subscription Id where the artifact source is located.</p><p>In
    <strong>Registry</strong>, select the ACR registry to use.</p><p>In <strong>Repository</strong>,
    select the repo to use.</p><p>In <strong>Tag</strong>, enter or select the tag for
    the image.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1652812347531/clean-shot-2022-05-17-at-11-32-09.png\"/></figure><p>If
    you use Runtime Input, when you deploy the Pipeline, Harness will pull the list
    of tags from the repo and prompt you to select one.</p><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><p></p><h4>Nexus</h4><p>You
    connect to Nexus using a Harness Nexus Connector. For details on all the requirements
    for the Nexus Connector, see <a href=\"/article/faor0dc98d-nexus-connector-settings-reference\">Nexus
    Connector Settings Reference</a>.</p><details><summary>Add an Artifact from Nexus</summary><div><p>In <strong>Artifacts</strong>,
    click <strong>Add Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact
    Repository Type</strong>, click <strong>Nexus</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>Nexus Repository</strong>, select of create a Nexus Connector that connects
    to the Nexus account where the repo is located. Click <strong>Continue</strong>.</p><ul><li><strong>Nexus
    Permissions:</strong> make sure the Nexus user account has the permissions listed
    in <a href=\"/article/faor0dc98d-nexus-connector-settings-reference\">Nexus Connector
    Settings Reference</a>.</li></ul><p>The <strong>Artifact Details</strong> settings
    appear.</p><p>Select <strong>Repository URL</strong> or <strong>Repository Port</strong>.</p><ul><li>Repository
    Port is more commonly used and can be taken from the repo settings. Each repo
    uses its own port.</li><li>Repository URL is typically used for a custom infrastructure
    (for example, when Nexus is hosted behind a reverse proxy).</li></ul><p>In <strong>Repository</strong>,
    enter the name of the repo.</p><p>In <strong>Artifact Path</strong>, enter the
    path to the artifact you want.</p><p>In <strong>Tag</strong>, enter or select
    the <a href=\"https://docs.docker.com/engine/reference/commandline/tag/\" target=\"_blank\">Docker
    image tag</a> for the image.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649868579316/clean-shot-2022-04-13-at-09-48-51.png\"/></figure><p>If
    you use Runtime Input, when you deploy the Pipeline, Harness will pull the list
    of tags from the repo and prompt you to select one.</p><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><h4>Artifactory</h4><p>You
    connect to Artifactory (JFrog) using a Harness Artifactory Connector. For details
    on all the requirements for the Artifactory Connector, see <a href=\"/article/euueiiai4m-artifactory-connector-settings-reference\">Artifactory
    Connector Settings Reference</a>.</p><details><summary>Add an Artifact from Artifactory</summary><div><p>In <strong>Artifacts</strong>,
    click <strong>Add Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact
    Repository Type</strong>, click <strong>Artifactory</strong>, and then click <strong>Continue</strong>.</p><p>In <strong>Artifactory
    Repository</strong>, select of create an Artifactory Connector that connects to
    the Artifactory account where the repo is located. Click <strong>Continue</strong>.</p><ul><li><strong>Artifactory
    Permissions:</strong> make sure the Artifactory user account has the permissions
    listed in <a href=\"/article/euueiiai4m-artifactory-connector-settings-reference\">Artifactory
    Connector Settings Reference</a>.</li></ul><p>The <strong>Artifact Details</strong> settings
    appear.</p><p>In <strong>Repository URL</strong>, enter the URL from the <code>docker
    login</code> command in Artifactory&#39;s <strong>Set Me Up</strong> settings.</p><p></p><figure><img
    src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1651598908984/image.png\"
    style=\"max-height:50%;max-width:50%\" data-hd-height=\"50%\" data-hd-width=\"50%\"/></figure><p>In
    <strong>Repository</strong>, enter the repo name. So if the full path is <code>docker-remote/library/mongo/3.6.2</code>,
    you would enter <code>docker-remote</code>.</p><p>In <strong>Artifact Path</strong>,
    enter the path to the artifact. So if the full path is <code>docker-remote/library/mongo/3.6.2</code>,
    you would enter <code>library/mongo</code>.</p><p>In <strong>Tag</strong>, enter
    or select the <a href=\"https://docs.docker.com/engine/reference/commandline/tag/\"
    target=\"_blank\">Docker image tag</a> for the image.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1649712423214/clean-shot-2022-04-11-at-14-26-40.png\"/></figure><p>If
    you use Runtime Input, when you deploy the Pipeline, Harness will pull the list
    of tags from the repo and prompt you to select one.</p><p>Click <strong>Submit</strong>.</p><p>The
    Artifact is added to the Service Definition.</p></div></details><h4>Custom Artifact
    Source</h4><p>For enterprises that use a custom repository, Harness provides the
    Custom Artifact Source to add their custom repository to the Service.</p><p>To
    use this artifact source, you provide a script to query your artifact server via
    its API (for example, REST) and then Harness stores the output on the Harness
    Delegate in the Harness-initialized variable <code>$HARNESS_ARTIFACT_RESULT_PATH</code>.</p><p>The
    output must be a JSON array, with a mandatory key for a Build Number/Version.
    You then map a key from your JSON output to the Build Number/Version variable.</p><p>For
    steps on adding a Custom Artifact source, go to <a href=\"/article/hnqkhh7gut-add-a-custom-artifact-source-for-cd\">Add
    a Custom Artifact Source for CD</a>.</p><h4>Reference Artifacts in Manifests</h4><p>Once
    you have added an artifact to the <strong>Artifacts</strong> section of the Service,
    you need to reference that artifact in the Values YAML file added in <strong>Manifests</strong>.</p><div
    class=\"note-callout\">You <u>cannot</u> use Harness variables expressions in
    your Kubernetes object manifest files. You can only use Harness variables expressions
    in Values YAML files.</div><details><summary>Referencing Artifacts in Manifests</summary><div><p>To
    reference this artifact, in the Values YAML file, you reference the image in the
    Service Definition <strong>Artifacts</strong> section using the Harness variable <code>&lt;+artifact.image&gt;</code>.</p><p>For
    example, here&#39;s a reference in a Values file:</p><pre class=\"hljs yaml\">...<br/>name:
    myapp<br/>replicas: 2<br/><br/>image: &lt;+artifact.image&gt;<br/>...</pre><p></p><p>That <code>&lt;+artifact.image&gt;</code> references
    the artifact listed as <strong>Primary</strong> in <strong>Artifacts</strong>.
    At deployment runtime, Harness resolves <code>&lt;+artifact.image&gt;</code> to
    the image from your artifact source.</p><p></p><figure><img src=\"https://files.helpdocs.io/i5nl071jo5/articles/2nx0de3w99/1648158347861/clean-shot-2022-03-24-at-14-45-27.png\"/></figure><p>In
    your Kubernetes manifests, you simply use a standard Go template reference to
    the image value from your values file: <code>{{.Values.image}}</code>:</p><pre>apiVersion:
    apps/v1<br/>kind: Deployment<br/>...<br/>    spec:<br/>      {{- if .Values.dockercfg}}<br/>
    \     imagePullSecrets:<br/>      - name: {{.Values.name}}-dockercfg<br/>      {{-
    end}}<br/>      containers:<br/>      - name: {{.Values.name}}<br/>        image:
    {{.Values.image}}<br/>...</pre><p></p><p>See <a href=\"/article/4ifq51cp0i-add-artifacts-for-kubernetes-deployments#example_manifests\">Example
    Manifests</a> for more details.</p><div class=\"note-callout\">If an artifact
    expression is a Values YAML file or Execution step, you will be prompted to select
    an artifact at runtime. This is true even if the Stage does not deploy an artifact
    (such as a Custom Stage or a Stage performing a <a href=\"/article/uiqe6jz9o1-kustomize-quickstart\">Kustomize</a>
    deployment). If you want to reference an artifact that isn&#39;t the primary deployment
    artifact without being prompted, you can use an expression with quotes, like <code>docker
    pull &lt;+artifact&lt;+&#34;.metadata.image&#34;&gt;&gt;</code>.</div></div></details><h4>Go
    Templating</h4><p>Harness supports <a href=\"https://godoc.org/text/template\"
    target=\"_blank\">Go templating</a> for Kubernetes manifests. So you can add one
    or more Values YAML files containing values for different scenarios, and then
    use Go templating in the manifest files to reference the values in the Values
    YAML files.</p><p>Built-in Go templating support enables you to use Kubernetes
    without the need for Helm.</p><div class=\"note-callout\">For more information,
    see <a href=\"/article/qvlmr4plcp-example-kubernetes-manifests-using-go-templating\">Example
    Kubernetes Manifests using Go Templating</a>.</div><p>Let&#39;s look at a few
    Kubernetes templating examples.</p><details><summary>Basic Values YAML and Manifests
    for Public Image</summary><div><p>Here&#39;s the values YAML file:</p><pre>name:
    &lt;+stage.name&gt;<br/>replicas: 2<br/><br/>image: &lt;+artifact.image&gt;<br/>#
    dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace: true<br/>namespace:
    &lt;+infra.namespace&gt;<br/><br/>serviceType: LoadBalancer<br/><br/>servicePort:
    80<br/>serviceTargetPort: 80<br/><br/>env:<br/>  config:<br/>    key1: value10<br/>
    \ secrets:<br/>    key2: value2</pre><p></p><p>Here&#39;s the manifest containing
    multiple objects referring to the values in the values YAML file:</p><pre>{{-
    if .Values.env.config}}<br/>apiVersion: v1<br/>kind: ConfigMap<br/>metadata:<br/>
    name: {{.Values.name}}<br/>data:<br/>{{.Values.env.config | toYaml | indent 2}}<br/>---<br/>{{-
    end}}<br/><br/>{{- if .Values.env.secrets}}<br/>apiVersion: v1<br/>kind: Secret<br/>metadata:<br/>
    name: {{.Values.name}}<br/>stringData:<br/>{{.Values.env.secrets | toYaml | indent
    2}}<br/>---<br/>{{- end}}<br/><br/>{{- if .Values.dockercfg}}<br/>apiVersion:
    v1<br/>kind: Secret<br/>metadata:<br/> name: {{.Values.name}}-dockercfg<br/> annotations:<br/>
    harness.io/skip-versioning: true<br/>data:<br/> .dockercfg: {{.Values.dockercfg}}<br/>type:
    kubernetes.io/dockercfg<br/>---<br/>{{- end}}<br/><br/>apiVersion: apps/v1<br/>kind:
    Deployment<br/>metadata:<br/> name: {{.Values.name}}-deployment<br/>spec:<br/>
    replicas: {{int .Values.replicas}}<br/> selector:<br/> matchLabels:<br/> app:
    {{.Values.name}}<br/> template:<br/> metadata:<br/> labels:<br/> app: {{.Values.name}}<br/>
    spec:<br/> {{- if .Values.dockercfg}}<br/> imagePullSecrets:<br/> - name: {{.Values.name}}-dockercfg<br/>
    {{- end}}<br/> containers:<br/> - name: {{.Values.name}}<br/> image: {{.Values.image}}<br/>
    {{- if or .Values.env.config .Values.env.secrets}}<br/> envFrom:<br/> {{- if .Values.env.config}}<br/>
    - configMapRef:<br/> name: {{.Values.name}}<br/> {{- end}}<br/> {{- if .Values.env.secrets}}<br/>
    - secretRef:<br/> name: {{.Values.name}}<br/> {{- end}}<br/> {{- end}}</pre><p></p></div></details><p></p><h4>Pull
    an Image from a Private Registry</h4><p>Typically, if the Docker image you are
    deploying is in a private registry, Harness has access to that registry using
    the credentials set up in the Harness Connector.</p><p>If some cases, your Kubernetes
    cluster might not have the permissions needed to access a private Docker registry.
    For these cases, the Values YAML file in Service Definition <strong>Manifests</strong>
    section must use the <code>dockercfg</code> parameter.</p><details><summary>Use
    dockercfg in Values YAML</summary><div><p>If the Docker image is added in the
    Service Definition Artifacts section, then you reference it like this: <code>dockercfg:
    &lt;+artifact.imagePullSecret&gt;</code>.</p><p>This key will import the credentials
    from the Docker credentials file in the artifact.</p><p>Open the values.yaml file
    you are using for deployment.</p><p>Verify that <code>dockercfg</code> key exists,
    and uses the <code>&lt;+artifact.imagePullSecret&gt;</code> expression to obtain
    the credentials:</p><pre>name: &lt;+stage.variables.name&gt;<br/>replicas: 2<br/><br/>image:
    &lt;+artifact.image&gt;<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace:
    true<br/>namespace: &lt;+infra.namespace&gt;<br/>...</pre><h4>Reference dockercfg
    in Kubernetes Objects</h4><p>Next, verify that the Deployment and Secret objects
    reference <code>dockercfg: {{.Values.dockercfg}}</code>.</p><pre>...<br/>{{- if
    .Values.dockercfg}}<br/>apiVersion: v1<br/>kind: Secret<br/>metadata:<br/>  name:
    {{.Values.name}}-dockercfg<br/>  annotations:<br/>    harness.io/skip-versioning:
    true<br/>data:<br/>  .dockercfg: {{.Values.dockercfg}}<br/>type: kubernetes.io/dockercfg<br/>---<br/>{{-
    end}}<br/><br/>apiVersion: apps/v1<br/>kind: Deployment<br/>metadata:<br/>  name:
    {{.Values.name}}-deployment<br/>spec:<br/>  replicas: {{int .Values.replicas}}<br/>
    \ selector:<br/>    matchLabels:<br/>      app: {{.Values.name}}<br/>  template:<br/>
    \   metadata:<br/>      labels:<br/>        app: {{.Values.name}}<br/>    spec:<br/>
    \     {{- if .Values.dockercfg}}<br/>      imagePullSecrets:<br/>      - name:
    {{.Values.name}}-dockercfg<br/>      {{- end}}<br/>      containers:<br/>      -
    name: {{.Values.name}}<br/>        image: {{.Values.image}}<br/>...</pre><p></p><p>With
    these requirements met, the cluster imports the credentials from the Docker credentials
    file in the artifact.</p></div></details><h4>Option: Add Sidecars</h4><p>You can
    use Harness to deploy both primary and sidecar Kubernetes workloads. Sidecar containers
    are common where you have multiple colocated containers that share resources.</p><p>See
    <a href=\"/article/fnzak5qp3y-add-a-kubernetes-sidecar-container\">Add a Kubernetes
    Sidecar Container</a>.</p><h3>Additional Settings and Options</h3><p>This topic
    has covered the Kubernetes Service basics to get your started, but we&#39;ve only
    scratched the surface of what you have do in Harness.</p><p>Once you&#39;re comfortable
    with the basics, here&#39;s some more options for you to review.</p><h4>Ignore
    a Manifest File During Deployment</h4><p>You might have manifest files for resources
    that you do not want to deploy as part of the main deployment.</p><p>Instead,
    you can tell Harness to ignore these files and then apply them separately using
    the Harness <a href=\"https://ngdocs.harness.io/article/xd6o61wp8u-kubernetes-apply-step\">\uFEFF</a><strong>Apply</strong>
    step. Or you can simply ignore them and deploy them later.</p><p>See <a href=\"/article/jyv7jbr8pg-ignore-a-manifest-file-during-deployment\">Ignore
    a Manifest File During Deployment</a> and <a href=\"/article/xd6o61wp8u-kubernetes-apply-step\">Kubernetes
    Apply Step</a>.</p><h4>Harness Pipeline, Stage, Service, and Built-in Variables</h4><p>You
    can use Pipeline, Stage, Service, and Built-in variables in your values YAML files
    and Service settings.</p><p>See <a href=\"/article/lml71vhsim-harness-variables\">Built-in
    Harness Variables Reference</a> or watch this <a href=\"https://youtu.be/lqbmO6EVGuU\"
    target=\"_blank\">short video</a>.</p><h4>Propagate and Override Artifacts, Manifests,
    and Service Variables</h4><p>See <a href=\"/article/q002wjjl4d-add-and-override-values-yaml-files\">Add
    and Override Values YAML Files</a>.</p><h3>Next Steps</h3><p>Once you&#39;ve configured
    your Service, you can move onto the Stage&#39;s Infrastructure settings and define
    the target Kubernetes cluster and namespace for your deployment.</p><p>See <a
    href=\"/article/0ud2ut4vt2-define-your-kubernetes-target-infrastructure\">Define
    Your Kubernetes Target Infrastructure</a>.</p><h3>See Also</h3><ul><li><a href=\"/article/xsla71qg8t-create-a-kubernetes-rolling-deployment\">Create
    a Kubernetes Rolling Deployment</a></li><li><a href=\"/article/i5p4feil89-create-a-kubernetes-canary-deployment\">Create
    a Kubernetes Canary Deployment</a></li><li><a href=\"/article/mog5tnk5pi-create-a-kubernetes-blue-green-deployment\">Create
    a Kubernetes Blue Green Deployment</a></li></ul><p></p>"
  slug: kubernetes-services
  tags: []
  is_live: true
