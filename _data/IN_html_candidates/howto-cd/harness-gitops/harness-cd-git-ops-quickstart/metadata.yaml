type: article
article_id: pptv7t53i9
user_id: znazf3hcp9
category_id: 013h04sxex
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/77114bb5eef5503c5a09ad7655120b17?d=mm&s=150
title: Harness CD GitOps Tutorial
slug: harness-cd-git-ops-quickstart
description: Use Harness GitOps to deploy services by syncing the Kubernetes manifests
  in your source repos with your target clusters.
short_version: Use Harness GitOps to deploy services by syncing the Kubernetes manifests
  in your source repos with your target clusters.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-13T16:59:16.434605Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Harness CD GitOps Tutorial
  description: Use Harness GitOps to deploy services by syncing the Kubernetes manifests
    in your source repos with your target clusters.
  short_version: Use Harness GitOps to deploy services by syncing the Kubernetes manifests
    in your source repos with your target clusters.
  body: '<p>Harness provides native GitOps functionality that lets you deploy services
    by syncing the Kubernetes manifests in your source repos with your target clusters.</p><p><strong>What
    is GitOps?</strong> GitOps automates Kubernetes-based deployments by syncing declarative
    specifications (your manifests) with your target environments. In GitOps, Git
    is the single source of truth for the desired state of a cluster and its applications.
    GitOps continually converges the target state (cluster) in accordance with the
    desired state (manifests). This method turns your deployed applications and infrastructures
    into fully-traceable and fully-versioned artifacts.</p><p>You set up Harness GitOps
    by installing a GitOps Agent in your environment. Next, you define how to manage
    the desired and target state in a GitOps Application in Harness. The GitOps Agent
    performs the sync operations defined in the Application and reacts to events in
    the source and target states.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1644624697994/clean-shot-2022-02-11-at-16-11-17-2-x.png"/></figure><p>This
    quickstart shows you how to set up Harness GitOps using one of your Kubernetes
    clusters.</p><h3>Objectives</h3><p>You&#39;ll learn how to:</p><ul><li>Install
    a Harness GitOps Agent in your target cluster.</li><li>Set up a Harness GitOps
    Cluster to points to the target cluster.</li><li>Set up a Harness GitOps Repository
    that points to the source manifest repo.</li><li>Set up a Harness GitOps Application
    that collects the Agent Cluster, and Repository, and defines the sync policy for
    GitOps.</li><li>Perform GitOps using your Harness GitOps Application.</li></ul><p>For
    a quick summary of Harness GitOps concepts, see <a href="/article/w1vg9l1j7q-harness-git-ops-basics">Harness
    GitOps Basics</a>.</p><h3>Before You Begin</h3><ul><li>(Optional) <strong>GitHub
    and DockerHub account:</strong> this quickstart uses a publicly available manifest
    in GitHub and a public Docker image. You will be using anonymous credentials for
    connection, but you can use your own credentials if you like.<br/>We&#39;ll be
    using public manifests from <a href="https://github.com/argoproj/argocd-example-apps"
    target="_blank">https://github.com/argoproj/argocd-example-apps</a>.</li><li><strong>Target
    Kubernetes cluster:</strong> you can use a cluster in any cloud platform. Harness
    makes a platform-agnostic connection to the cluster.</li></ul><p></p><details><summary>Set
    up your Kubernetes Cluster</summary><div><p>You&#39;ll need a target Kubernetes
    cluster for the Harness GitOps Agent and deployment. Ensure your cluster meets
    the following requirements:</p><ul><li><strong>Number of nodes:</strong> 2.</li><li><strong>vCPUs,
    Memory, Disk Size:</strong> the Harness GitOps Agent only needs 1vCPUs, 2GB memory,
    20GB disk, but you&#39;ll also be running Kubernetes and the deployed service.<br/>A
    cluster with 2vCPUs, 8GB memory, 50GB disk is sufficient. In GKE, the <strong>e2-standard-2</strong>
    machine type is enough for this quickstart.</li><li><strong>Networking:</strong> outbound
    HTTPS for the Harness connection to <strong>app.harness.io</strong>, <strong>github.com</strong>,
    and <strong>hub.docker.com</strong>. Allow TCP port 22 for SSH.</li><li>A <strong>Kubernetes
    service account</strong> with the permissions need to create your desired state.
    The Harness GitOps Agent requires either <code>cluster-admin</code> or admin permissions
    in the target namespace:<ul><li>Create Deployment, Service, StatefulSet, Network
    Policy, Service Account, Role, ClusterRole, RoleBinding, ClusterRoleBinding, ConfigMap,
    Secret.</li><li>Permission to apply CustomResourceDefinition.<br/>For more information,
    see <a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles"
    target="_blank">User-Facing Roles</a> from Kubernetes.</li></ul></li></ul></div></details><p></p><h3>Step
    1: Add a Harness GitOps Agent</h3><p>A Harness GitOps Agent is a worker process
    that runs in your environment and performs GitOps tasks.</p><p>You need to set
    up an Agent before you can set up a Cluster, Repository, or Application, as the
    Agent is selected in all three of these.</p><p>Typically, you install the Agent
    in the target cluster, but you can install it any cluster and it can connect to
    remote clusters using the credentials you provide.</p><p>Ensure your Harness Project
    has the <strong>Continuous Delivery</strong> module enabled.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653598497490/clean-shot-2022-05-26-at-13-54-35-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    your Harness Project, click <strong>GitOps</strong>.</p><p>The Harness GitOps
    <strong>Overview</strong>, <strong>Applications</strong>, and <strong>Settings</strong>
    appear. If this is the first time GitOps has been set up in the Project, the Applications
    will be empty.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653598642506/clean-shot-2022-05-26-at-13-57-06-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>All
    entities other than Applications are in <strong>Settings</strong>.</p><p>Click
    <strong>Settings</strong>. The Harness GitOps settings appear.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653598833856/clean-shot-2022-05-26-at-14-00-23-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>GitOps</strong> <strong>Agents</strong>.</p><p>Click <strong>New GitOps
    Agent</strong>. The Agent wizard appears.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1644623938232/clean-shot-2022-02-11-at-15-58-47-2-x.png"/></figure><p>In
    <strong>Name</strong>, enter the name <strong>example</strong>.</p><p>In <strong>Namespace</strong>,
    enter the namespace where you want to install the Harness GitOps Agent. Typically,
    this is the target namespace for your deployment. For this quickstart, we use
    <strong>default</strong>.</p><p>Click <strong>Next</strong>. The <strong>Review
    YAML</strong> settings appear.</p><p>This is the manifest YAML for the Harness
    GitOps Agent. You will download this YAML file and run it in your Harness GitOps
    Agent cluster.</p><p>Click <strong>Download &amp; Continue</strong>. You are prompted
    to save the YAML file.</p><p>Open a terminal and navigate to the folder where
    you downloaded the YAML file.</p><p>In the same terminal, log into the Kubernetes
    cluster where you want to install the Agent.</p><p>For example, here&#39;s a typical
    GKE login:</p><pre>gcloud container clusters get-credentials &lt;cluster_name&gt;
    --zone us-central1-c --project &lt;project_name&gt;</pre><p></p><p>Run the following
    command to apply the YAML file you downloaded (in this example, <code>default</code>
    was the namespace entered in the <strong>Namespace</strong> setting):</p><pre>kubectl
    apply -f gitops-agent.yaml -n default</pre><p></p><p>In this output example you
    can see all of the Harness GitOps objects created in Kubernetes:</p><pre>% kubectl
    apply -f harness-gitops-agent.yaml -n default<br/>customresourcedefinition.apiextensions.k8s.io/applications.argoproj.io
    created<br/>customresourcedefinition.apiextensions.k8s.io/appprojects.argoproj.io
    created<br/>serviceaccount/argocd-application-controller created<br/>serviceaccount/argocd-redis
    created<br/>serviceaccount/example-agent created<br/>role.rbac.authorization.k8s.io/example-agent
    created<br/>role.rbac.authorization.k8s.io/argocd-application-controller created<br/>clusterrole.rbac.authorization.k8s.io/argocd-application-controller-default
    created<br/>clusterrole.rbac.authorization.k8s.io/example-agent created<br/>rolebinding.rbac.authorization.k8s.io/argocd-application-controller
    created<br/>rolebinding.rbac.authorization.k8s.io/argocd-redis created<br/>clusterrolebinding.rbac.authorization.k8s.io/argocd-application-controller-default
    created<br/>rolebinding.rbac.authorization.k8s.io/example-agent created<br/>clusterrolebinding.rbac.authorization.k8s.io/example-agent
    created<br/>configmap/argocd-cm created<br/>configmap/argocd-cmd-params-cm created<br/>configmap/argocd-gpg-keys-cm
    created<br/>configmap/argocd-rbac-cm created<br/>configmap/argocd-ssh-known-hosts-cm
    created<br/>configmap/argocd-tls-certs-cm created<br/>secret/argocd-secret created<br/>service/argocd-metrics
    created<br/>service/argocd-redis created<br/>service/argocd-repo-server created<br/>deployment.apps/argocd-redis
    created<br/>deployment.apps/argocd-repo-server created<br/>statefulset.apps/argocd-application-controller
    created<br/>networkpolicy.networking.k8s.io/argocd-application-controller-network-policy
    created<br/>networkpolicy.networking.k8s.io/argocd-redis-network-policy created<br/>networkpolicy.networking.k8s.io/argocd-repo-server-network-policy
    created<br/>secret/example-agent created<br/>configmap/example-agent created<br/>deployment.apps/example-agent
    created<br/>configmap/example-agent-upgrader created<br/>role.rbac.authorization.k8s.io/example-agent-upgrader
    created<br/>rolebinding.rbac.authorization.k8s.io/example-agent-upgrader created<br/>serviceaccount/example-agent-upgrader
    created<br/>Warning: batch/v1beta1 CronJob is deprecated in v1.21+, unavailable
    in v1.25+; use batch/v1 CronJob<br/>cronjob.batch/example-agent-upgrader created</pre><p></p><p>Back
    in Harness, click <strong>Continue</strong>.</p><p>Harness indicates that the
    Harness GitOps Agents is registered.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1641859081339/clean-shot-2022-01-10-at-15-57-45.png"/></figure><p>Click
    <strong>Finish</strong>.</p><p>The <strong>Agents</strong> list shows the new
    Agent as <strong>Healthy</strong> and <strong>Connected</strong>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653600658757/clean-shot-2022-05-26-at-14-30-46-2-x.png"/></figure><p>In
    your cloud platform Kubernetes cluster you can see the agent workload:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653600723877/clean-shot-2022-05-26-at-14-31-22-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Now
    that you have the Harness GitOps Agent installed, running, and registered, you
    can configure the remaining components.</p><h3>Step 2: Add a Harness GitOps Repository</h3><p>GitOps
    Repositories store the source manifests you want to sync with destination environments.</p><p>In
    the Repository setup, you will select the Agent to use when synching state.</p><p>You
    will also provide the credentials to use when connecting to the Git repository.</p><p>We&#39;re
    going to use a publicly available GitHub repo and manifests located at <code>https://github.com/argoproj/argocd-example-apps/tree/master/guestbook</code>.
    We&#39;ll make an anonymous connection, so no GitHub credentials are required.</p><p>In
    your Harness Project, click <strong>GitOps</strong>, and then click <strong>Settings</strong>.</p><p>Click
    <strong>Repositories</strong>.</p><p>Click <strong>New Repository</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653601330698/clean-shot-2022-05-26-at-14-42-05-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Specify Repository Type</strong>, click <strong>Git</strong>.</p><p>Enter
    the following.</p><p></p><table><tbody><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653601424269/clean-shot-2022-05-26-at-14-43-36-2-x.png"/></figure></td><td><p>In
    <strong>Repository Name</strong>, enter <strong>guestbook</strong>.</p><p>In <strong>GitOps
    Agent</strong>, select the Agent you just added and click <strong>Apply Selected</strong>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1645141199917/clean-shot-2022-02-17-at-15-39-33-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>For
    this quickstart, we&#39;ll make an anonymous connection to a GitHub repo over
    HTTPS.</p><p>In <strong>Repository URL</strong>, enter the URL: <code>https://github.com/argoproj/argocd-example-apps</code>.</p><p>Click
    <strong>Continue</strong>.</p></td></tr><tr><td><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653601467082/clean-shot-2022-05-26-at-14-44-18-2-x.png"/></figure></td><td><p>In
    <strong>Credentials</strong>, in <strong>Connection Type</strong>, select <strong>HTTPS</strong>.</p><p>In
    <strong>Authentication</strong>, select <strong>Anonymous</strong>.</p><p>Click
    <strong>Save &amp; Continue</strong>. Harness validates the connection.</p></td></tr></tbody></table><p></p><p>The
    connection is verified.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646156675520/clean-shot-2022-03-01-at-09-44-16.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>If
    you encounter errors, check that you have the correct repo URL and selected <strong>HTTPS</strong>.</p><p>Click
    <strong>Finish</strong>. You now have a Harness GitOps Repository added.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653601520040/clean-shot-2022-05-26-at-14-45-12-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><h3>Step
    3: Add a Harness GitOps Cluster</h3><p>Clusters are the target deployment environments
    that are synced with the source manifests you add as GitOps Repositories.</p><p>In
    the Cluster setup, you will select the Harness GitOps Agent to use when synching
    state.</p><p>You will also provide the credentials to use when connecting to the
    target cluster. In this quickstart, we&#39;ll connect using the cluster master
    URL and a Service Account Token for the <strong>default</strong> namespace.</p><p>In
    your Harness Project, click <strong>GitOps</strong>, and then click <strong>Settings</strong>.</p><p>Click
    <strong>Clusters</strong>, and then click <strong>New Cluster</strong>.</p><p>In
    <strong>Name</strong>, enter <strong>example</strong>.</p><p>In <strong>GitOps
    Agent</strong>, select the Agent you added earlier in this quickstart, and then
    click <strong>Continue</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653601754349/clean-shot-2022-05-26-at-14-49-05-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Details</strong>, click <strong>Use the credentials of a specific Harness
    GitOps Agent</strong>. This Cluster will use the Agent&#39;s Kubernetes role permissions
    for connections.</p><p></p><details><summary>Using Specify Kubernetes Cluster
    URL and credentials</summary><div><p>If you want to use <strong>Specify Kubernetes
    Cluster URL and credentials</strong>, do the following:</p><p>In <strong>Master
    URL</strong>, enter the master URL for your cluster. You can just log into your
    cluster and run <code>kubectl cluster-info</code>. Use the URL listed in the output
    <code>Kubernetes master is running at</code>.</p><p>In <strong>Authentication</strong>,
    select <strong>Service Account</strong>.</p><p>In <strong>Service Account Token</strong>,
    paste in the Service Account Token for the cluster&#39;s <strong>default</strong>
    namespace.</p><p>To use a Kubernetes Service Account (SA) and token, you will
    need to either use an <u>existing</u> SA that has <code>cluster-admin</code> or
    <em>admin</em> permissions in the namespace, or create a <u>new</u> SA and grant
    it the permissions. This is described in <a href="/article/1gaud2efd4-add-a-kubernetes-cluster-connector">Add
    a Kubernetes Cluster Connector</a>.</p><p>Here&#39;s an example of a SA and ClusterRoleBinding
    with <code>cluster-admin</code>:</p><pre>apiVersion: rbac.authorization.k8s.io/v1beta1<br/>kind:
    ServiceAccount<br/>metadata:<br/>  name: harness-service-account<br/>  namespace:
    default<br/>---<br/>apiVersion: rbac.authorization.k8s.io/v1beta1<br/>kind: ClusterRoleBinding<br/>metadata:<br/>  name:
    harness-admin<br/>roleRef:<br/>  apiGroup: rbac.authorization.k8s.io<br/>  kind:
    ClusterRole<br/>  name: cluster-admin<br/>subjects:<br/>- kind: ServiceAccount<br/>  name:
    harness-service-account<br/>  namespace: default</pre><p></p><p>To get a list
    of the SAs, run <code>kubectl get serviceAccounts</code>.</p><p>Once you have
    the SA, use the following commands to get its token (replace <code>{SA name}</code>
    with the Service Account name and <code>{target namespace}</code> with the target
    namespace name, such as <strong>default</strong>):</p><pre>SERVICE_ACCOUNT_NAME={SA
    name}<br/><br/>NAMESPACE={target namespace}<br/><br/>SECRET_NAME=$(kubectl get
    sa &#34;${SERVICE_ACCOUNT_NAME}&#34; --namespace &#34;${NAMESPACE}&#34; -o=jsonpath=&#39;{.secrets[].name}&#39;)<br/><br/>TOKEN=$(kubectl
    get secret &#34;${SECRET_NAME}&#34; --namespace &#34;${NAMESPACE}&#34; -o=jsonpath=&#39;{.data.token}&#39;
    | base64 -d)<br/><br/>echo $TOKEN</pre><p></p><p>The token output is decoded and
    ready to be pasted into Harness.</p><p>In <strong>Namespace</strong>, enter <strong>default</strong>.</p></div></details><p>Click
    <strong>Save &amp; Continue</strong>.</p><p>Harness validates the connection to
    the cluster from the Harness GitOps Agent.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646158604072/clean-shot-2022-03-01-at-10-16-33.png"/></figure><p>In
    this quickstart, the Agent is running inside the target cluster, but you might
    use an Agent outside a target cluster in your own scenarios. So long as the Agent
    you select can connect to the target cluster&#39;s master URL, you can add the
    cluster in Harness GitOps.</p><p>Now that you have a Harness GitOps Agent, Repository,
    and Cluster set up, you&#39;re ready to add a Harness GitOps Application.</p><h3>Step
    4: Add a Harness GitOps Application</h3><p>A GitOps Application syncs a source
    manifest with a target cluster using a GitOps Agent.</p><p>In the Application
    setup, you will select the Agent, Repository, and Cluster to use when synching
    state.</p><p>In your Harness Project, click <strong>GitOps</strong>, and then
    click <strong>New Application</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653602547870/clean-shot-2022-05-26-at-15-02-18-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>In
    <strong>Application Name</strong>, enter <strong>example</strong>.</p><p>In <strong>GitOps
    Agent</strong>, select the Agent you added earlier.</p><p>In <strong>Service</strong>,
    click <strong>New Service</strong>, and name the Service <strong>guestbook</strong>.</p><p>In
    <strong>Environment</strong>, click <strong>New Environment</strong>, name the
    Environment <strong>quickstart</strong>, and select <strong>Pre-Production</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653602769070/clean-shot-2022-05-26-at-15-05-51-2-x.png"/></figure><p>Click
    <strong>Continue</strong>.</p><p>In <strong>Sync Policy</strong>, you can define
    the following:</p><ul><li>Sync Options to define how the Application syncs state.</li><li>Prune
    Policy for garbage collection of orphaned resources.</li><li>The Source manifest
    to use (Kubernetes, Helm chart, Kustomization, etc).</li><li>The Destination cluster
    and namespace.</li></ul><p>For this quickstart, we&#39;ll simply select a manual
    sync policy and no other options. You can change any of these settings by editing
    your Application or whenever you sync.</p><p>In <strong>Sync Policy</strong>,
    click <strong>Manual</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>Source</strong>, you specify the source repo to use.</p><p>In <strong>Repository
    Type</strong>, click <strong>Git</strong>.</p><p>Click in <strong>Repository URL</strong>
    and select the URL you entered in your Harness GitOps Repository: <code>https://github.com/argoproj/argocd-example-apps</code>.</p><p>In
    <strong>Revision Type</strong>, select <strong>Branch</strong>.</p><p>In <strong>Revision</strong>,
    select <strong>master</strong>.</p><p>Wait a moment for <strong>Path</strong>
    to populate. Harness will pull the paths from the repo.</p><p>In <strong>Path</strong>,
    select <strong>helm-guestbook</strong>. This is the location of this app in the
    repo: <code>https://github.com/argoproj/argocd-example-apps/tree/master/helm-guestbook</code>.</p><p>In
    <strong>Helm</strong>, in <strong>Values Files</strong>, select <strong>values.yaml</strong>.</p><p>Scroll
    down to see <strong>Parameters</strong>. All of the parameters from values.yaml
    are displayed and can be edited. This lets you modify values.yaml parameters in
    your Harness GitOps Application.</p><p>Do not change the parameters for this quickstart.</p><p>When
    you&#39;re done, <strong>Source</strong> will look like this:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653602935947/clean-shot-2022-05-26-at-15-08-47-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Continue</strong>.</p><p>In <strong>Destination</strong>, click in <strong>Cluster
    URL</strong> and select the Cluster you added earlier. You can see its name and
    master URL. Since a Harness GitOps Cluster contains the authentication settings
    needed to access the cluster, your Harness GitOps Application can select any Cluster.</p><p>In
    <strong>Namespace</strong>, enter <strong>default</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653602965399/clean-shot-2022-05-26-at-15-09-18-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Click
    <strong>Finish</strong>.</p><p>The new Application is created. At first, it will
    be <strong>UNKNOWN</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653603026604/clean-shot-2022-05-26-at-15-10-20-2-x.png"/></figure><p>Now
    we can manually sync the Application.</p><h3>Step 5: Perform GitOps</h3><p>Now
    that you have everything set up, you can sync the source state with the desired
    state.</p><p>In your Application, click <strong>SYNC</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653603052092/clean-shot-2022-05-26-at-15-10-37-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>The
    Synchronize settings appear.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1653604221607/clean-shot-2022-05-26-at-15-29-44-2-x.png"/></figure><p>Here
    you can change any of the <strong>Sync Policy</strong> options you set in the
    Application.</p><p>Click <strong>Synchronize</strong>.</p><p>You will see the
    status <strong>Progressing</strong> and then <strong>HEALTHY</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646268342234/clean-shot-2022-03-02-at-16-45-13.png"/></figure><p>Congratulations!
    You&#39;ve performed GitOps with Harness!</p><p>Let&#39;s look in the cluster
    to verify the deployment.</p><pre>kubectl get pods -n default</pre><p></p><p>You
    will see the example-helm-guestbook Pods running.</p><pre>NAME                                      READY   STATUS    RESTARTS   AGE<br/>...<br/>example-helm-guestbook-74b6547d8c-74ckv   1/1     Running   0          5m22s<br/>...</pre><p></p><p>Here&#39;s
    what the deployment looks like in GCP.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646268811050/clean-shot-2022-03-02-at-16-52-39.png"/></figure><p></p><h3>Step
    6: Using the Application</h3><p>Back in your Harness Application, you can view
    details on sync status, desired and live states, and perform GitOps.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646355606056/clean-shot-2022-03-03-at-16-58-04.png"/></figure><ul><li><strong>Git
    details:</strong> you can see the Git commit used as the source for the sync.
    Clicking the commit Ids opens the commit in the source provider.</li><li><strong>Deployment:</strong>
    the deployments dashboard shows when the Application was deployed (synced).</li><li><strong>Resource
    View:</strong> displays the desired to target state mapping of each Kubernetes
    object. Click any item to see its logs and manifest.<br/>The <strong>Resource
    View</strong> lets you inspect the live target infrastructure by:<ul><li><strong>Name:</strong>
    Kubernetes object names.</li><li><strong>Kind:</strong> Kubernetes object types.</li><li><strong>Health
    Status:</strong> the health status of the Application. For example, is it syncing
    correctly (Healthy)?</li><li><strong>Sync Status:</strong> sort Kubernetes objects
    by their sync status.</li></ul></li><li><strong>App Details:</strong> displays
    the settings of the Application. You can edit the settings and apply your changes,
    including the <strong>Sync Options &amp; Policy</strong>.</li><li><strong>Sync
    Status:</strong> displays all of the sync operations performed by the Application.</li><li><strong>Manifest:</strong>
    displays the manifest of the Application. This is not the same as the source manifest
    in the Git source repo.<br/>You can edit the manifest in <strong>Manifest</strong>
    and the changes are synced in the target infrastructure, but when you do a full
    sync from your source repo the state of the source repo overwrites any changes
    made in <strong>Manifest</strong>.</li><li><strong>App Diff:</strong> displays
    a diff against the live state in the cluster and desired state in Git. Here&#39;s
    an example:<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646782488125/clean-shot-2022-03-08-at-15-34-30-2-x.png"/></figure></li></ul><p>You
    can also initiate a Sync or Refresh from the main GitOps page.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/pptv7t53i9/1646692112875/clean-shot-2022-03-07-at-14-28-04.png"/></figure><p><strong>Refresh</strong>
    will pull the latest commit from Git and display whether the current Sync State
    is <strong>Synced</strong> or <strong>Out of Sync</strong>. It does not sync with
    the live cluster state. You can Refresh, then use App Diff to view the diff between
    the desired Git state with the live cluster state.</p><p><strong>Sync</strong>
    will sync the desired Git state with the live cluster state.</p><p></p><h3>Cleaning
    Up</h3><p>To delete the Harness GitOps Agent from your Kubernetes cluster, you
    delete the StatefulSet for the Agent. Once created, the StatefulSet ensures that
    the desired number of pods are running and available at all times. Deleting the
    pod without deleting the StatefulSet will result in the pod being recreated.</p><p>For
    example, if you have the Agent pod name <code>gitops-agent-6877dbf7bf-wg6xv</code>,
    you can delete the StatefulSet with the following command:</p><p><code>$ kubectl
    delete statefulset -n default gitops-agent-6877dbf7bf</code></p><p>You can also
    simply delete and recreate the namespace which will delete all resources except
    for RoleBindings, ServiceAccounts or NetworkPolicy:</p><pre>kubectl delete namespace
    {namespace}<br/><br/>kubectl create namespace {namespace}</pre><h3>Next Steps</h3><p>In
    this tutorial, you learned how to:</p><ul><li>Install a Harness GitOps Agent in
    your target cluster.</li><li>Set up a Harness GitOps Cluster to points to the
    target cluster.</li><li>Set up a Harness GitOps Repository that points to the
    source manifest repo.</li><li>Set up a Harness GitOps Application that collects
    the Agent Cluster, and Repository, and defines the sync policy for GitOps.</li><li>Perform
    GitOps using your Harness GitOps Application.</li></ul><p>Next, try Harness GitOps
    using one of your own repos and target clusters.</p>'
  slug: harness-cd-git-ops-quickstart
  tags: []
  is_live: true
