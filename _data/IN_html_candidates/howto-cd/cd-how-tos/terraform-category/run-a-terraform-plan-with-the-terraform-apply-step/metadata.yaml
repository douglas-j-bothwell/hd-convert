type: article
article_id: hdclyshiho
user_id: mfr0nxh4be
category_id: jcu7twh2t6
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Provision with the Terraform Apply Step
slug: run-a-terraform-plan-with-the-terraform-apply-step
description: Apply a Terraform plan or script using the Terraform Apply step.
short_version: Apply a Terraform plan or script using the Terraform Apply step.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-14T17:45:31.448349Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Provision with the Terraform Apply Step
  description: Apply a Terraform plan or script using the Terraform Apply step.
  short_version: Apply a Terraform plan or script using the Terraform Apply step.
  body: '<p>You can apply a Terraform plan or script using the Terraform Apply step.
    The Terraform Apply step can apply a Terraform script with or without the Terraform
    Plan step.</p><p>Typically the Terraform Apply step is used with the Terraform
    Plan step to apply a plan. For steps on using the Terraform Plan step, see <a
    href="/article/52n3j0ci72-run-a-terraform-plan-with-the-terraform-plan-step">Plan
    Terraform Provisioning with the Terraform Plan Step</a>.</p><p>The Terraform Apply
    step can provision any resource, including the target infrastructure for a CD
    deployment. For steps on provisioning the target infrastructure for a CD deployment,
    see <a href="/article/uznls2lvod-provision-infra-dynamically-with-terraform">Provision
    Target Deployment Infra Dynamically with Terraform</a>.</p><h3>Before You Begin</h3><ul><li><a
    href="/article/boug6e884h-terraform-provisioning-with-harness">Terraform Provisioning
    with Harness</a></li><li><a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    CD Quickstart</a></li></ul><h3>Important: Install Terraform on Delegates</h3><p>Terraform
    must be installed on the Delegate to use a Harness Terraform Provisioner. You
    can install Terraform manually or use the <code>INIT_SCRIPT</code> environment
    variable in the Delegate YAML.</p><p>See <a href="/article/yte6x6cyhn-run-scripts-on-delegates">Install
    Software on the Delegate with Initialization Scripts</a>.</p><pre class="hljs
    apache"># Install TF<br/>curl -O -L  https://releases.hashicorp.com/terraform/0.12.25/terraform_0.12.25_linux_amd64.zip<br/>unzip
    terraform_0.12.25_linux_amd64.zip<br/>mv ./terraform /usr/bin/<br/># Check TF
    install<br/>terraform --version</pre><h3>Review: Terraform Plan and Apply Steps</h3><p>Typically
    the Terraform Plan step is used with the Terraform Apply step.</p><p>First, you
    add the Terraform Plan step and define the Terraform script for it to use.</p><p>Next,
    you add the Terraform Apply step, select <strong>Inherit from Plan</strong> in
    <strong>Configuration Type</strong>, and reference the Terraform Plan step using
    the same <strong>Provisioner Identifier.</strong></p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/uznls2lvod/1627076789966/clean-shot-2021-07-23-at-14-46-10.png"/></figure><p>For
    steps on using the Terraform Plan with the Apply step, see:</p><ul><li><a href="/article/uznls2lvod-provision-infra-dynamically-with-terraform">Provision
    Target Deployment Infra Dynamically with Terraform</a></li></ul><p>You can also
    simply run the Terraform Apply step without applying the plan from the Terraform
    Plan step.</p><p>In that case, you simply add the Terraform Apply step and select
    the <strong>Inline</strong> option in <strong>Configuration Type</strong>. Next,
    you add the Terraform script and settings in Terraform Apply. This scenario is
    described below.</p><h3>Step 1: Add the Terraform Apply Step</h3><p>When you are
    provisioning the target infrastructure for a deployment, you add the Terraform
    Plan step in the stage&#39;s Infrastructure in <strong>Dynamic Provisioning</strong>.
    Dynamic Provisioning is used to provision the target infrastructure for the stage&#39;s
    deployment. Consequently, if you add Terraform Plan there, you must use a Terraform
    Apply step to apply the plan.</p><p>See <a href="/article/uznls2lvod-provision-infra-dynamically-with-terraform">Provision
    Target Deployment Infra Dynamically with Terraform</a>.</p><p>You can also add
    a Terraform Apply step anywhere in the <strong>Execution</strong> steps for the
    stage. In that case, you can use a Terraform Plan step but it&#39;s not required.</p><p>When
    you use the Terraform Apply step without using the Terraform Plan step, you set
    up the Terraform Apply step to connect Harness to your repo and add Terraform
    scripts.</p><p>The Terraform Apply step has the following settings.</p><h4>Name</h4><p>In
    <strong>Name</strong>, enter a name for the step, for example, <strong>apply</strong>.</p><p>The
    name is very important. You can use the name in <a href="/article/lml71vhsim-harness-variables">expressions</a>
    to refer to settings in this step.</p><p>For example, if the name of the stage
    is <strong>Terraform</strong> and the name of the step is <strong>apply</strong>,
    and you want to echo its timeout setting, you would use:</p><p><code>&lt;+pipeline.stages.Terraform.spec.execution.steps.apply.timeout&gt;</code></p><p>or
    simply <code>&lt;+execution.steps.apply.timeout&gt;</code>.</p><h4>Timeout</h4><p>In
    <strong>Timeout</strong>, enter how long Harness should wait to complete the Terraform
    Apply step before failing the step.</p><h4>Configuration Type</h4><p>In <strong>Configuration
    Type</strong>, select <strong>Inline</strong> or <strong>Inherit from Plan</strong>.</p><p>If
    you select <strong>Inherit from Plan</strong>, you&#39;ll enter the unique Id
    used by a <a href="/article/52n3j0ci72-run-a-terraform-plan-with-the-terraform-plan-step">Terraform
    Plan</a> step in <strong>Provisioner Identifier</strong>.</p><p>If you select
    <strong>Inline</strong>, you&#39;ll configure this Terraform Apply step to use
    a Terraform script without any Terraform Plan step.</p><p>We&#39;ll cover the
    <strong>Inline</strong> settings below.</p><h4>Provisioner Identifier</h4><p>Enter
    a unique value in <strong>Provisioner Identifier</strong>.</p><p>The Provisioner
    Identifier identifies the provisioning done in this step. You use the Provisioner
    Identifier in additional steps to refer to the provisioning done in this step.</p><p>The
    most common use of Provisioner Identifier is between the Terraform Plan and Terraform
    Apply steps. For the Terraform Apply step, to apply the provisioning from the
    Terraform Plan step, you use the same Provisioner Identifier.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/uznls2lvod/1627076789966/clean-shot-2021-07-23-at-14-46-10.png"/></figure><p>You
    also use the same Provisioner Identifier with the <a href="/article/j75xc704c8-remove-provisioned-infra-with-terraform-destroy">Terraform
    Destroy</a> step to remove the provisioned resources.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/j75xc704c8/1627422412989/clean-shot-2021-07-27-at-14-46-40.png"/></figure><p>You
    also use the same Provisioner Identifier with the <a href="/article/jgi6d73noy-rollback-provisioned-infra-with-the-terraform-rollback-step">Terraform
    Rollback</a> step to rollback the provisioned resources.</p><p></p><h5>Provisioner
    Identifier Scope</h5><p>The Provisioner Identifier is a Project-wide setting.
    You can reference it across Pipelines in the same Project.</p><p>For this reason,
    it&#39;s important that all your Project members know the Provisioner Identifiers.
    This will prevent one member building a Pipeline from accidentally impacting the
    provisioning of another member&#39;s Pipeline.</p><h4>Configuration File Repository</h4><p><strong>Configuration
    File Repository</strong> is where the Terraform script and files you want to use
    are located.</p><p>Here, you&#39;ll add a connection to the Terraform script repo.</p><p>Click
    <strong>Specify Config File</strong> or edit icon.</p><p>The <strong>Terraform
    Config File Store</strong> settings appear.</p><p>Click the provider where your
    files are hosted.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/uznls2lvod/1646170907148/clean-shot-2022-03-01-at-13-41-39.png"/></figure><p></p><p>Select
    or create a Connector for your repo. For steps, see <a href="/article/zbhehjzsnv-connect-to-code-repo">Connect
    to a Git Repo</a> or <a href="/article/euueiiai4m-artifactory-connector-settings-reference">Artifactory
    Connector Settings Reference</a> (see <strong>Artifactory with Terraform Scripts
    and Variable Definitions (.tfvars) Files</strong>).</p><p>In <strong>Git Fetch
    Type</strong>, select <strong>Latest from Branch</strong> or <strong>Specific
    Commit ID</strong>. When you run the Pipeline, Harness will fetch the script from
    the repo.</p><div class="note-callout"><strong>Specific Commit ID</strong> also
    supports <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging" target="_blank">Git
    tags</a>.</div><p>If you think the script might change often, you might want to
    use <strong>Specific Commit ID</strong>. For example, if you are going to be fetching
    the script multiple times in your Pipeline, Harness will fetch the script each
    time. If you select <strong>Latest from Branch</strong> and the branch changes
    between fetches, different scripts are run.</p><p>In <strong>Branch</strong>,
    enter the name of the branch to use.</p><p>In <strong>Folder Path</strong>, enter
    the path from the root of the repo to the folder containing the script.</p><p>For
    example, here&#39;s a Terraform script repo, the Harness Connector to the repo,
    and the <strong>Config Files</strong> settings for the branch and folder path:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/uznls2lvod/1627332955547/clean-shot-2021-07-26-at-13-55-35.png"/></figure><p>Click
    <strong>Submit</strong>.</p><p>Your Terraform Apply step is now ready. You can
    now configure a Terraform Destory or Rollback step that can use the Terraform
    script from this Terraform Apply step.</p><p>The following sections cover common
    Terraform Apply step options.</p><h4>Artifactory</h4><p>See <a href="/article/euueiiai4m-artifactory-connector-settings-reference">Artifactory
    Connector Settings Reference</a> (see <strong>Artifactory with Terraform Scripts
    and Variable Definitions (.tfvars) Files</strong>).</p><h4>Source Module</h4><p>When
    you set up the file repo in <strong>Configuration File Repository</strong>, you
    use a Harness Connector to connect to the repo where the Terraform scripts are
    located.</p><p>Some scripts will reference module sources in other repos and Harness
    will pull the source code for the desired child module at runtime (during <code>terraform
    init</code>).</p><p>In <strong>Source Module</strong>, you can select <strong>Use
    Connector credentials</strong> to have Harness use the credentials of the Connector
    to pull the source code for the desired child module(s).</p><p>If you do not select
    <strong>Use Connector credentials</strong>, Terraform will use the credentials
    that have been set up in the system.</p><div class="note-callout">The <strong>Use
    Connector credentials</strong> setting is limited to Harness Git Connectors using
    SSH authentication (not HTTPS) and a token.</div><h3>Option: Workspace</h3><p>Harness
    supports Terraform <a href="https://www.terraform.io/docs/state/workspaces.html">workspaces</a>.
    A Terraform workspace is a logical representation of one your infrastructures,
    such as Dev, QA, Stage, Production.</p><p>Workspaces are useful when testing changes
    before moving to a production infrastructure. To test the changes, you create
    separate workspaces for Dev and Production.</p><p>A workspace is really a different
    state file. Each workspace isolates its state from other workspaces. For more
    information, see <a href="https://www.terraform.io/docs/state/workspaces.html#when-to-use-multiple-workspaces"
    target="_blank">When to use Multiple Workspaces</a> from Hashicorp.</p><p>Here&#39;s
    an example script where a local value names two workspaces, <strong>default</strong>
    and <strong>production</strong>, and associates different instance counts with
    each:</p><pre class="hljs json">locals {<br/>  counts = {<br/>      &#34;default&#34;=1<br/>      &#34;production&#34;=3<br/>  }<br/>}<br/><br/>resource
    &#34;aws_instance&#34; &#34;my_service&#34; {<br/>  ami=&#34;ami-7b4d7900&#34;<br/>  instance_type=&#34;t2.micro&#34;<br/>  count=&#34;${lookup(local.counts,
    terraform.workspace, 2)}&#34;<br/>  tags {<br/>         Name = &#34;${terraform.workspace}&#34;<br/>    }<br/>}</pre><p></p><p>In
    the workspace interpolation sequence, you can see the count is assigned by applying
    it to the Terraform workspace variable (<code>terraform.workspace</code>) and
    that the tag is applied using the variable also.</p><p>Harness will pass the workspace
    name you provide to the <code>terraform.workspace</code> variable, thus determining
    the count. If you provide the name <strong>production</strong>, the count will
    be <strong>3</strong>.</p><p>In the <strong>Workspace</strong> setting, you can
    simply select the name of the workspace to use.</p><p>You can also use a <a href="/article/lml71vhsim-harness-variables">stage
    variable</a> in <strong>Workspace</strong>.</p><p>Later, when the Pipeline is
    deployed, you specify the value for the stage variable and it is used in <strong>Workspace</strong>.</p><p>This
    allows you to specify a different workspace name each time the Pipeline is run.</p><p>You
    can even set a Harness Trigger where you can set the workspace name used in <strong>Workspace</strong>.</p><h3>Option:
    Terraform Var Files</h3><p>The <strong>Terraform Var Files</strong> section is
    for entering and/or linking to Terraform script Input variables.</p><p>You can
    use inline or remote var files.</p><p>Harness supports all <a href="https://www.terraform.io/docs/language/expressions/types.html"
    target="_blank">Terraform input types and values</a>.</p><h4>Inline Variables</h4><p>You
    can add inline variables just like you would in a tfvar file.</p><p>Click <strong>Add
    Terraform Var File</strong>, and then click <strong>Add Inline</strong>.</p><p>The
    <strong>Add Inline Terraform Var File</strong> settings appear.</p><p>In <strong>Identifier</strong>,
    enter an identifier so you can refer to variables using expressions if needed.</p><p>For
    example, if the <strong>Identifier</strong> is <strong>myvars</strong> you could
    refer to its content like this:</p><p><code>&lt;+pipeline.stages.MyStage.spec.infrastructure.infrastructureDefinition.provisioner.steps.plan.spec.configuration.varFiles.myvars.spec.content&gt;</code></p><p>Provide
    the input variables and values for your Terraform script. Harness follows the
    same format as Terraform.</p><p>For example, if your Terraform script has the
    following:</p><pre>variable &#34;region&#34; {<br/>  type = string<br/>}</pre><p></p><p>In
    <strong>Add Inline Terraform Var File</strong>, you could enter:</p><pre>region
    = &#34;asia-east1-a&#34;</pre><p></p><h5>Inline Variable Secrets</h5><p>If you
    are entering secrets (for credentials, etc.), use Harness secret references in
    the value of the variable:</p><pre>secrets_encryption_kms_key = &#34;&lt;+secrets.getValue(&#34;org.kms_key&#34;)&gt;&#34;</pre><p></p><p>See
    <a href="/article/osfw70e59c-add-use-text-secrets">Add Text Secrets</a>.</p><h4>Remote
    Variables</h4><p>You can connect Harness to remote variable files.</p><p>Click
    <strong>Add Terraform Var File</strong>, and then click <strong>Add Remote</strong>.</p><p>Select
    your Git provider (GitHub, etc.) and then select or create a Connector to the
    repo where the files are located. Typically, this is the same repo where your
    Terraform script is located, so you can use the same Connector.</p><p>Click <strong>Continue</strong>.
    The <strong>Var File Details</strong> settings appear.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/uznls2lvod/1627336021033/clean-shot-2021-07-26-at-14-46-52.png"/></figure><p></p><p>In
    <strong>Identifier</strong>, enter an identifier so you can refer to variables
    using expressions if needed.</p><p>In <strong>Git Fetch Type</strong>, select
    <strong>Latest from Branch</strong> or <strong>Specific Commit ID</strong>.</p><p>In
    <strong>Branch</strong>, enter the name of the branch.</p><p>In <strong>File Paths</strong>,
    add one or more file paths from the root of the repo to the variable file.</p><p>Click
    <strong>Submit</strong>. The remote file(s) are added.</p><h5>Artifactory</h5><p>See
    <a href="/article/euueiiai4m-artifactory-connector-settings-reference">Artifactory
    Connector Settings Reference</a> (see <strong>Artifactory with Terraform Scripts
    and Variable Definitions (.tfvars) Files</strong>).</p><h3>Option: Backend Configuration</h3><p>The
    <strong>Backend Configuration</strong> section contains the <a href="https://www.terraform.io/docs/language/state/remote.html">remote
    state</a> values.</p><p>Enter values for each backend config (remote state variable).</p><p>For
    example, if your config.tf file has the following backend:</p><pre class="hljs
    json">terraform {<br/>  backend &#34;gcs&#34; {<br/>    bucket  = &#34;tf-state-prod&#34;<br/>    prefix  =
    &#34;terraform/state&#34;<br/>  }<br/>}</pre><p></p><p>In <strong>Backend Configuration</strong>,
    you provide the required configuration variables for that backend type. See <strong>Configuration
    variables</strong> in Terraform&#39;s <a href="https://www.terraform.io/docs/language/settings/backends/gcs.html#configuration-variables"
    target="_blank">gcs Standard Backend doc</a>.</p><p>You can use Harness secrets
    for credentials. See <a href="/article/osfw70e59c-add-use-text-secrets">Add Text
    Secrets</a>.</p><h3>Option: Targets</h3><p>You can use the <strong>Targets</strong>
    setting to target one or more specific modules in your Terraform script, just
    like using the <code>terraform plan -target</code> command. See <a href="https://www.terraform.io/docs/commands/plan.html#resource-targeting"
    target="_blank">Resource Targeting</a> from Terraform.</p><p>You simply identify
    the module using the standard format <code>module.name</code>, like you would
    using <code>terraform plan -target=&#34;module.s3_bucket&#34;</code>.</p><div
    class="note-callout">If you have multiple modules in your script and you don&#39;t
    select one in <strong>Targets</strong>, all modules are used.</div><p></p><h3>Option:
    Environment Variables</h3><p>If your Terraform script uses <a href="https://www.terraform.io/docs/cli/config/environment-variables.html"
    target="_blank">environment variables</a>, you can provide values for those variables
    here.</p><p>For example:</p><pre>TF_LOG_PATH=./terraform.log<br/>TF_VAR_alist=&#39;[1,2,3]&#39;</pre><p></p><p>You
    can use Harness encrypted text for values. See <a href="/article/osfw70e59c-add-use-text-secrets">Add
    Text Secrets</a>.</p><h3>Option: Advanced Settings</h3><p>In <strong>Advanced</strong>,
    you can use the following options:</p><ul><li><a href="/article/i36ibenkq2-step-skip-condition-settings">Step
    Skip Condition Settings</a></li><li><a href="/article/htrur23poj-step-failure-strategy-settings">Step
    Failure Strategy Settings</a></li><li><a href="/article/nnuf8yv13o-select-delegates-with-selectors">Select
    Delegates with Selectors</a></li></ul><p></p><h3>See Also</h3><ul><li><a href="/article/52n3j0ci72-run-a-terraform-plan-with-the-terraform-plan-step">Plan
    Terraform Provisioning with the Terraform Plan Step</a></li></ul><p></p>'
  slug: run-a-terraform-plan-with-the-terraform-apply-step
  tags: []
  is_live: true
