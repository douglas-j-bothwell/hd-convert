type: article
article_id: boug6e884h
user_id: mfr0nxh4be
category_id: jcu7twh2t6
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Terraform Provisioning with Harness
slug: terraform-provisioning-with-harness
description: Harness lets you use Terraform to provision infrastructure as part of
  your deployment process. Harness can provision any resource that is supported by
  a Terraform provider or plugin. Looking for How-…
short_version: Harness lets you use Terraform to provision infrastructure as part
  of your deployment process. Harness can provision any resource that is supported
  by a Terraform provider or plugin. Looking for How-…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-14T17:44:35.326991Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Terraform Provisioning with Harness
  description: ""
  short_version: ""
  body: '<p>Harness lets you use Terraform to provision infrastructure as part of
    your deployment process. Harness can provision any resource that is supported
    by a Terraform <a href="https://www.terraform.io/docs/configuration/providers.html"
    target="_blank">provider or plugin</a>.</p><div class="note-callout">Looking for
    How-tos? See <a href="/article/w6i5f7cpc9-terraform-how-tos">Terraform How-tos</a>.</div><h3>Terraform
    Provisioning Options</h3><p>You can use Harness with Terraform in two ways:</p><ul><li><strong>Target
    Infra Provisioning:</strong> provision the target infrastructure for a deployment,
    and then deploy to that provisioned infrastructure.</li><li><strong>Non-target
    Provisioning:</strong> provision any resources other than the target infrastructure
    for the deployment.</li></ul><p>You can do both in the same stage if you want.</p><h3>Terraform
    Target Infra Provisioning Summary</h3><p>You set up a Terraform target infrastructure
    provisioning in the following order:</p><ol><li>Select <strong>Dynamic Provisioning</strong>.
    In the Pipeline Infrastructure, you select the <strong>Dynamic Provisioning</strong>
    option and select <strong>Terraform</strong>. Harness automatically adds the Terraform
    Plan, <a href="/article/43pzzhrcbv-using-harness-approval-steps-in-cd-stages">Harness
    Approval</a>, and Terraform Apply steps. You can change these steps, but plan,
    approve, and apply is the most common process. We use that process in our Terraform
    documentation.</li><li>In the <strong>Terraform Plan</strong> step, you link Harness
    to the Terraform scripts you want to use. You add the scripts by connecting to
    a Git repo where the scripts are kept and setting up any inputs and other common
    options.</li><li><strong>Map outputs to the</strong> <strong>target Infrastructure</strong>.
    Harness needs a few script outputs so that it can target the provisioned infrastructure,
    such as namespace. You simply map some script outputs to the required Harness
    target infrastructure settings.</li><li><strong>Deployment</strong>. The Pipeline
    deploys to the provisioned infrastructure defined in its target Infrastructure
    Definition.</li></ol><p>See <a href="/article/uznls2lvod-provision-infra-dynamically-with-terraform">Provision
    Target Deployment Infra Dynamically with Terraform</a>.</p><h4>Limitations</h4><p>Infrastructure
    provisioning is limited to what is available in the target environment.</p><p>For
    example, the cloud-agnostic Kubernetes infrastructure requires that you have an
    existing cluster, so you cannot provision a new cluster. But it does let you provision
    a namespace.</p><p>The Google Kubernetes Engine infrastructure option lets you
    provision a cluster <u>and</u> namespace.</p><h3>Use Terraform for Non-deployment
    Provisioning</h3><p>You can use the Harness Terraform steps to provision any non-target
    resources also. You simply add the steps in the stage Execution.</p><p>See:</p><ul><li><a
    href="https://docs.harness.io/article/52n3j0ci72-run-a-terraform-plan-with-the-terraform-plan-step">Plan
    Terraform Provisioning with the Terraform Plan Step</a></li><li><a href="https://docs.harness.io/article/hdclyshiho-run-a-terraform-plan-with-the-terraform-apply-step">Provision
    with the Terraform Apply Step</a></li><li><a href="https://docs.harness.io/article/j75xc704c8-remove-provisioned-infra-with-terraform-destroy">Remove
    Provisioned Infra with the Terraform Destroy Step</a></li><li><a href="https://docs.harness.io/article/jgi6d73noy-rollback-provisioned-infra-with-the-terraform-rollback-step">Rollback
    Provisioned Infra with the Terraform Rollback Step</a></li></ul><h3>Terraform
    Rollback</h3><p>When rollback happens, Harness rolls back the provisioned infrastructure
    to the previous successful version of the Terraform state.</p><p>Harness won&#39;t
    increment the serial in the state, but perform a hard rollback to the exact version
    of the state provided.</p><p>Harness determines what to rollback using the Provision
    Identifier entered in the Terraform Rollback step.</p><p>If you&#39;ve made these
    settings using Harness expressions, Harness uses the values it obtains at runtime
    when it evaluates the expression.</p><p>See <a href="/article/jgi6d73noy-rollback-provisioned-infra-with-the-terraform-rollback-step">Rollback
    Provisioned Infra with the Terraform Rollback Step</a>.</p><h4 id="undefined">Rollback
    Limitations</h4><p>Let&#39;s say you deployed two modules successfully already:
    module1 and module2. Next, you try to deploy module3, but deployment failed. Harness
    will roll back to the successful state of module1 and module2.</p><p>However,
    let&#39;s look at the situation where module3 succeeds and now you have module1,
    module2, and module3 deployed. If the next deployment fails, the rollback will
    only roll back to the Terraform state with module3 deployed. Module1 and module2
    weren&#39;t in the previous Terraform state, so the rollback excludes them.</p><h3>Important:
    Install Terraform on Delegates</h3><p>Terraform must be installed on the Delegate
    to use a Harness Terraform Provisioner. You can install Terraform manually or
    use the <code>INIT_SCRIPT</code> environment variable in the Delegate YAML.</p><p>See <a
    href="/article/yte6x6cyhn-run-scripts-on-delegates">Install Software on the Delegate
    with Initialization Scripts</a>.</p><pre class="hljs apache"># Install TF<br/>curl
    -O -L  https://releases.hashicorp.com/terraform/0.12.25/terraform_0.12.25_linux_amd64.zip<br/>unzip
    terraform_0.12.25_linux_amd64.zip<br/>mv ./terraform /usr/bin/<br/># Check TF
    install<br/>terraform --version</pre><p></p>'
  slug: terraform-provisioning-with-harness
  tags: []
  is_live: true
