type: article
article_id: 0aiyvs61o5
user_id: mfr0nxh4be
category_id: y6gyszr0kl
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Using HTTP Requests in CD Pipelines
slug: using-http-requests-in-cd-pipelines
description: Use the HTTP step to run HTTP methods containing URLs, methods, headers,
  assertions, and variables.
short_version: Use the HTTP step to run HTTP methods containing URLs, methods, headers,
  assertions, and variables.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-16T19:31:46.064364Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Using HTTP Requests in CD Pipelines
  description: Use the HTTP step to run HTTP methods containing URLs, methods, headers,
    assertions, and variables.
  short_version: Use the HTTP step to run HTTP methods containing URLs, methods, headers,
    assertions, and variables.
  body: '<p>You can use the HTTP step to run HTTP methods containing URLs, methods,
    headers, assertions, and variables. It helps you avoid having script cURL commands
    for simple REST calls.</p><p>The most common use of the HTTP step is to run a
    health check post-deployment. For example, make sure that an HTTP or IP endpoint,
    such as a load balancer, is properly exposed.</p><p>Other common uses are:</p><ul><li>Making
    a call to a third-party system to gather deployment information, such as a Nexus
    IQ scan.</li><li>Open Policy Agent (OPA) policy agent call.</li><li>General HTTP
    testing calls to the deployed application.</li></ul><p>This topic describes how
    to use the HTTP step. For comprehensive details on each setting, see <a href="/article/64hhfpbgbj-http-step">HTTP
    Step Reference</a>.</p><div class="note-callout">Looking for the Harness REST
    API? See <a href="/article/f0aqiv3td7-api-quickstart">API Quickstart</a>.</div><p></p><h3>Before
    You Begin</h3><ul><li><a href="/article/knunou9j30">Kubernetes CD Quickstart</a></li><li><a
    href="/article/0ud2ut4vt2">Define Your Kubernetes Target Infrastructure</a>: You
    can run an HTTP step in a CD stage without specifying specs or artifacts, but
    you do need to set up the Infrastructure Definition.</li></ul><h3>Step 1: Add
    the HTTP step</h3><p>You can add the HTTP step to any CD Pipeline stage independent
    of deployment strategy.</p><p>In your Harness Pipeline stage, in <strong>Execution</strong>,
    click <strong>Add Step</strong>.</p><p>Click <strong>HTTP</strong>. The HTTP step
    appears.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/0aiyvs61o5/1631299966574/clean-shot-2021-09-10-at-11-52-30.png"/></figure><h3>Step
    2: Name and Timeout</h3><p>Enter a name for the step. Harness automatically creates
    an <strong>Id</strong>. You&#39;ll use this Id to reference this step&#39;s settings
    in other steps.</p><p>For example, if the stage name is <strong>dev</strong> and
    the step Id is <strong>HTTP</strong> and you want to reference the URL entered
    in its <strong>URL</strong> setting, you&#39;d use:</p><p><code>&lt;+pipeline.stages.dev.spec.execution.steps.HTTP.spec.url&gt;</code></p><p>In
    Timeout, enter a timeout for this step.You can use:</p><ul><li><code>w</code> for
    weeks</li><li><code>d</code> for days</li><li><code>h</code> for hours</li><li><code>m</code> for
    minutes</li><li><code>s</code> for seconds</li><li><code>ms</code> for milliseconds</li></ul><p>The
    maximum is <code>53w</code>.Timeouts are set at the Pipeline level also.</p><h3>Step
    3: URL for HTTP Call</h3><p>In <strong>URL</strong>, enter a URL for the call.
    It must include the <code>http://</code> scheme.</p><p>You can use a Fixed Value,
    Runtime Input, or Expression.</p><p>You can use <a href="/article/lml71vhsim-harness-variables">Harness
    variables</a>, too. For example, if the Service name matches the domain name of
    the HTTP address, you can use <code>http://&lt;+service.name&gt;/...</code>.</p><h3>Step
    4: HTTP Method</h3><p>In HTTP Method, select the method for the call.</p><p>Harness
    supports the following <a href="https://restfulapi.net/http-methods/#summary"
    target="_blank">HTTP methods</a>:</p><ul><li>GET</li><li>POST</li><li>PUT</li><li>DELETE</li><li>HEAD</li><li>OPTIONS</li></ul><h3>Option:
    Request Body</h3><p>In Request <strong>Body</strong>, you can enter the body of
    the HTTP payload to send to the URL.</p><p>You can use a Fixed Value, Runtime
    Input, or Expression.</p><p>You can use <a href="/article/lml71vhsim-harness-variables">Harness
    variables</a>, too.</p><h3>Option: Assertion</h3><p>The assertion is used to validate
    the incoming response. For example, if you wanted to check the health of an HTTP
    connection, you could use the assertion <code>&lt;+httpResponseCode&gt; == 200</code>.</p><p>The
    expression <code>&lt;+httpResponseCode&gt; == 200</code> will evaluate to true
    if the HTTP call returns a 200 code.</p><p>Expressions can use the following aliases
    to refer to the HTTP responses, URL, and method:</p><ul><li><code>&lt;+httpResponseCode&gt;</code></li><li><code>&lt;+httpUrl&gt;</code></li><li><code>&lt;+httpMethod&gt;</code></li><li><code>&lt;+httpResponseBody&gt;</code></li></ul><p>You
    can use a Fixed Value, Runtime Input, or Expression.</p><p>You can use <a href="/article/lml71vhsim-harness-variables">Harness
    variables</a>, too.</p><h3>Option: Headers</h3><p>Headers are <code>key:value</code>
    pairs. For example:</p><ul><li><code>Content-Type: application/json</code></li><li><code>Content-Type:
    text/html</code></li></ul><p>You can use a Fixed Value, Runtime Input, or Expression.</p><p>You
    can use <a href="/article/lml71vhsim-harness-variables">Harness variables</a>,
    too.</p><p>You can reference <a href="/article/osfw70e59c-add-use-text-secrets">Harness
    secrets</a> in the <strong>Value</strong> setting, too.</p><p>For example, in
    <strong>Key</strong>, enter <code>Token</code> .</p><p>In <strong>Value</strong>,
    enter <code>&lt;+secrets.getValue(&#34;aws-playground_AWS_secret_key&#34;)&gt;</code>.</p><h3>Option:
    Output Variables</h3><p>You can create output variables and reference them in
    other steps in the stage. The <strong>Value</strong> setting can contain any HTTP
    step input, output, or response information.</p><p>To reference the value of the
    output variable in another step using its fully-qualified name (FQN).</p><p>For
    example, here&#39;s a variable <code>example</code> with the value <code>1234</code>.
    The step name is <code>GET</code>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/0aiyvs61o5/1631302361060/clean-shot-2021-09-10-at-12-32-30.png"/></figure><p>Save
    the step and then click <strong>Variables</strong>.</p><p>In the <strong>Variables</strong>
    drawer, copy the <strong>example</strong> variable.</p><p>In another step, like
    a <strong>Shell Script</strong> step, paste the FQN.</p><p>The FQN will resolve
    to the variable value at execution runtime.</p><p>You can also use ​JSON and XML
    functors in the values for the output variable. For example, <code>&lt;+json.select(&#34;data.attributes.version_pins.mvn-service://new-construction-api&#34;,
    httpResponseBody)&gt;</code>.</p><p>See <a href="/article/9ir9geteqc-json-and-xml-functors">JSON
    and XML Functors</a>.</p><h3>Review: Simulate Load by Running Steps in Parallel</h3><p>You
    can use multiple HTTP steps in parallel to simulate load.</p><p>Simply create
    a Step Group and add multiple HTTP steps with the same URL pointing to your service.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/0aiyvs61o5/1631314268220/clean-shot-2021-09-10-at-15-50-39.png"/></figure><p>The
    steps are executed in parallel and simulate load.</p><p>You can add multiple steps
    to the group quickly using YAML. Just paste additional steps into the Step Group.
    Be sure to rename each step. Here&#39;s an example:</p><pre>...<br/>- stepGroup:<br/>  name:
    Simulate Load<br/>  identifier: Simulate_Load<br/>  steps:<br/>      - parallel:<br/>            -
    step:<br/>                  type: Http<br/>                  name: Load 1<br/>                  identifier:
    Load_1<br/>                  spec:<br/>                      url: http://example.com<br/>                      method:
    GET<br/>                      headers: []<br/>                      outputVariables:
    []<br/>                  timeout: 10s<br/>            - step:<br/>                  type:
    Http<br/>                  name: Load 2<br/>                  identifier: Load_2<br/>                  spec:<br/>                      url:
    http://example.com<br/>                      method: GET<br/>                      headers:
    []<br/>                      outputVariables: []<br/>                  timeout:
    10s<br/>            - step:<br/>                  type: Http<br/>                  name:
    Load 3<br/>                  identifier: Load_3<br/>                  spec:<br/>                      url:
    http://example.com<br/>                      method: GET<br/>                      headers:
    []<br/>                      outputVariables: []<br/>                  timeout:
    10s<br/>  failureStrategies: []<br/>  spec: {}<br/>...</pre><p></p><h3>See Also</h3><ul><li><a
    href="/article/k5lu0u6i1i-using-shell-scripts">Using Shell Scripts in CD Stages</a></li></ul><p></p>'
  slug: using-http-requests-in-cd-pipelines
  tags: []
  is_live: true
