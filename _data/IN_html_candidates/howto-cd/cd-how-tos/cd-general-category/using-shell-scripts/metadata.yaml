type: article
article_id: k5lu0u6i1i
user_id: mfr0nxh4be
category_id: y6gyszr0kl
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Using Shell Scripts in CD Stages
slug: using-shell-scripts
description: You can run shell scripts in a CD stage using the Shell Script step.
short_version: Run shell scripts in a CD stage using the Shell Script step.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2022-09-15T00:00:23.798855Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Using Shell Scripts in CD Stages
  description: You can run shell scripts in a CD stage using the Shell Script step.
  short_version: Run shell scripts in a CD stage using the Shell Script step.
  body: '<p>You can run shell scripts in a CD stage using the <strong>Shell Script</strong> step.</p><p>With
    the Shell Script step, you can execute scripts in the shell session of the stage
    in the following ways:</p><ul><li>Execute scripts on the host running a Harness
    Delegate. You can use Delegate Selectors to identify which Harness Delegate to
    use.</li><li>Execute scripts on a remote target host in the deployment Infrastructure
    Definition.</li></ul><p>This topic provides a simple demonstration of how to create
    a script in a Shell Script step, publish its output in a variable, and use the
    published variable in a subsequent step.</p><h3>Before You Begin</h3><ul><li><a
    href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes CD Quickstart</a></li><li><a
    href="/article/0ud2ut4vt2-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a>: You can run a Shell Script step in
    a CD stage without specifying specs or artifacts, but you do need to set up the
    Infrastructure Definition.</li></ul><h3>Limitations</h3><p>See <a href="/article/o0gj1upg2p-shell-script-step">Shell
    Script Step Reference</a>.</p><h3>Step 1: Add Your Script</h3><p>When the script
    in the Shell Script step is run, Harness executes the script on the target host&#39;s
    or Delegate&#39;s operating system. Consequently, the behavior of the script depends
    on their system settings.</p><p>For this reason, you might wish to begin your
    script with a shebang line that identifies the shell language, such as <code>#!/bin/sh</code>
    (shell), <code>#!/bin/bash</code> (bash), or <code>#!/bin/dash</code> (dash).
    For more information, see the <a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents"
    target="_blank">Bash manual</a> from the GNU project.</p><p>To capture the shell
    script output in a variable, do the following:</p><p>In the stage, in <strong>Execution</strong>,
    click <strong>Add Step</strong>.</p><p>Select <strong>Shell Script</strong>.</p><p>Enter
    a name for the step. An Id is generated. This Id identifies the step and is used
    in variable expressions. For example, if the Id is <strong>Shell Script</strong>,
    the expression might be <code>&lt;+steps.Shell_Script.output.outputVariables.myvar&gt;</code>.</p><p>In
    <strong>Script</strong>, enter a bash script. For example, the variable names
    <code>BUILD_NO</code>and <code>LANG</code>:</p><p></p><pre>BUILD_NO=&#34;345&#34;<br/>LANG=&#34;en-us&#34;
    </pre><p></p><div class="note-callout">You don&#39;t need to use <code>export</code>
    for the variables to use them with <strong>Script Output Variables</strong>. You
    can simply declare them, like <code>BUILD_NO=&#34;345&#34;</code>. Export is for
    using the variables in child processes within the script.</div><p>You must use
    quotes around the value because environment variables are Strings.</p><div class="note-callout">If
    you use <a href="/article/lml71vhsim-harness-variables">Harness variable expressions</a>
    in comments in your script, Harness will still try to evaluate and render the
    variable expressions. Don&#39;t use variable expressions that Harness cannot evaluate.</div><h3>Option:
    Specify Input Variables</h3><p>While you can simply declare a variable in your
    script using a Harness expression or string for its value, using Input Variables
    provides some additional benefits:</p><ul><li>You can more easily identify and
    manage the Harness expressions used in your script.</li><li>You can template your
    script.</li></ul><p>You can declare the variable using <strong>Name</strong> and
    <strong>Value</strong> in <strong>Script Input Variables</strong> and then reference
    the variable in the script just as you would any other variable: <code>$var_name</code>.</p><p>You
    can also use expressions in <strong>Value</strong>. For example, if you have an
    Output Variable from a previous Shell Script step, you can copy it from the executed
    step <strong>Outputs</strong>.</p><p>In <strong>Script Input Variables</strong>,
    you simply select <strong>Expression</strong> and paste the expression in <strong>Value</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/k5lu0u6i1i/1620747932278/image.png"/></figure><p>In
    the Script, you declare the variable using the <strong>Name</strong> value:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/k5lu0u6i1i/1620748015988/image.png"/></figure><p>At
    deployment runtime, Harness will evaluate the expression and the variable will
    contain its output.</p><p></p><h3>Option: Specify Output Variables</h3><p>To export
    variables from the script to other steps in the stage, you use the <strong>Script
    Output Variables</strong> option.</p><p>Let&#39;s look at a simple example of
    a script with the variable <strong>name</strong>:</p><pre>name=123</pre><p></p><p>The
    <code>name</code> variable cannot be used outside the script unless you use <strong>Script
    Output Variables</strong>.</p><div class="note-callout">You do not need to use
    <code>export</code> for the variables to use them with <strong>Script Output Variables</strong>.
    You can simply declare them, like <code>name=&#34;123&#34;</code>. Export is for
    using the variables in child processes within the script.</div><p>In <strong>Script
    Output Variables</strong>, in <strong>Value</strong>, you enter the name of the
    script variable you want to output (<code>name</code>).</p><p>In <strong>Name</strong>,
    enter a name to use in other steps that will reference this variable. This is
    the <u>output variable name</u> that will be used in a Harness expression for
    referencing the output variable.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/k5lu0u6i1i/1657301265117/clean-shot-2022-07-08-at-10-27-25.png"/></figure><p>The
    format to reference the output variable can be one of the following:</p><ul><li>Within
    the stage: <ul><li>Referencing the step output:<ul><li><code>&lt;+steps.[step_id].output.outputVariables.[output_variable_name]&gt;</code>.
    </li></ul></li><li>Referencing the step output execution:<ul><li><code>&lt;+execution.steps.[step_id].output.outputVariables.[output_variable_name]&gt;</code></li></ul></li></ul></li><li>Anywhere
    in the Pipeline: <ul><li><code>&lt;+pipeline.stages.[stage_Id].spec.execution.steps.[step_id].output.outputVariables.[output_variable_name]&gt;</code></li></ul></li></ul><p>For
    example, it could be <code>&lt;+steps.Shell_Script.output.outputVariables.newname&gt;</code>.</p><p>Here&#39;s
    an example showing how the <strong>Script Output Variables</strong> references
    the exported variable, and how you reference the output variable name to get that
    value:</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/k5lu0u6i1i/1657301298157/clean-shot-2022-07-08-at-10-28-05.png"/></figure><p>So
    now the result of <code>&lt;+steps.Shell_Script.output.outputVariables.newname&gt;</code>
    is <code>123</code>.</p><p>To find the expression to reference your output variables,
    find the step in the Pipeline execution, and click its <strong>Output</strong>
    tab.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/k5lu0u6i1i/1656456726753/clean-shot-2022-06-28-at-15-51-39-2-x.png"/></figure><p>You
    will get the full path to the variable, like this:<code>&lt;+pipeline.stages.Shell_Script.execution.steps.Shell_Script.outputVariables.newname&gt;</code>.</p><p>If
    you are using it in the same stage, you can remove everything up to <code>steps</code>
    (<code>pipeline.stages.Shell_Script.execution.</code>).</p><p>Now you can use
    <code>&lt;+steps.Shell_Script.output.outputVariables.newname&gt;</code> to reference
    the output variable.</p><h4>Output Variables as Secrets</h4><p>You can select
    String or Secret for your output variable.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/k5lu0u6i1i/1663199673813/image.png"/></figure><p>When
    you select Secret and reference the output variable later in the Pipeline, Harness
    will automatically sanitize the resolved secret value in the logs.</p><p>Let&#39;s
    look at an example. First, you add the output variable as a Secret:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/k5lu0u6i1i/1663199970459/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Next,
    you reference that output variable as a secret, like this:</p><pre>echo &#34;my
    secret: &#34; &lt;+steps.CreateScript.output.outputVariables.myvar&gt;</pre><p></p><p>When
    you run the Pipeline, the resolved output variable expression is sanitized:</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/k5lu0u6i1i/1663199993540/image.png"/></figure><h3>Option:
    Harness Expressions in Variables</h3><p>You can use Harness variable expressions
    in your scripts and in the <strong>Script Input Variables</strong> and <strong>Script
    Output Variables</strong>.</p><p>For <strong>Script Input Variables</strong> and
    <strong>Script Output Variables</strong>, you simply select <strong>Expression</strong>,
    and then paste in the Harness variable expression.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/k5lu0u6i1i/1620171979531/image.png"/></figure><p></p><h3>Step
    2: Specify Where to Run the Script</h3><p>In <strong>Execution Target</strong>,
    select <strong>Specify on</strong> <strong>Target Host</strong> or <strong>On
    Delegate</strong>.</p><p>In you select On Delegate, the script is executed on
    whichever Delegate runs the step. You can use <strong>Delegate Selector</strong>
    in <strong>Advanced</strong> to pick the Delegate(s) if needed.</p><p>See <a href="/article/nnuf8yv13o-select-delegates-with-selectors">Select
    Delegates with Selectors</a>.</p><p>If you select <strong>Target Host</strong>,
    enter the following:</p><ul><li><strong>Target Host:</strong> enter the IP address
    or hostname of the remote host where you want to execute the script. The target
    host must be in the <strong>Infrastructure Definition</strong> selected when you
    created the workflow, and the Harness Delegate must have network access to the
    target host. You can also enter the variable <code>&lt;+instance.name&gt;</code> and
    the script will execute on whichever target host is used during deployment.</li><li><strong>SSH
    Connection Attribute:</strong> select the execution credentials to use for the
    shell session. For information on setting up execution credentials, see <a href="/article/xmp9j0dk8b-add-use-ssh-secrets">Add
    SSH Keys</a>.</li></ul><h3>Option: Advanced Settings</h3><p>See <a href="/article/o0gj1upg2p-shell-script-step">Shell
    Script Step Reference</a>.</p><h3>Notes</h3><h4>Stopping Scripts After Failures</h4><p>The
    Shell Script command will continue to process through the script even if a script
    step fails. To prevent this, you can simply include instructions to stop on failure
    in your script. For example:</p><ul><li><code>set -e</code> - Exit immediately
    when a command fails.</li><li><code>set -o pipefail</code> - Sets the exit code
    of a pipeline to that of the rightmost command to exit with a non-zero status,
    or to a zero status if all commands of the pipeline exit successfully.</li><li><code>set
    -u</code> - Treat unset variables as an error and exit immediately.</li></ul><p>For
    more information, see this article: <a href="https://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing
    Robust Bash Shell Scripts</a>.</p><h4>Published Variables Not Available</h4><p>This
    error happens when you are publishing output via the <strong>Script Output Variables</strong> setting
    and your Shell Script step exits early from its script.</p><p>There are many errors
    that can result from this situation. For example, you might see an error such
    as:</p><pre class="hljs nginx">FileNotFoundException inside shell script execution
    task</pre><p></p><p>If you exit from the script (<code>exit 0</code>), values
    for the context cannot be read.</p><p>Instead, if you publish output variables
    in your Shell Script command, structure your script with <code>if...else</code> blocks
    to ensure it always runs to the end of the script.</p><h4>Using Secrets in Scripts</h4><p>You
    can use Harness secrets in your Shell Script steps.</p><p>See <a href="/article/osfw70e59c-add-use-text-secrets">Add
    Text Secrets</a>.</p><p>Basically, you use <code>&lt;+secrets.getValue(&#34;secret_Id&#34;)&gt;</code>
    to refer to the secret.</p><h4>Shell Scripts and Security</h4><p>Harness assumes
    that you trust your Harness users to add safe scripts to your Shell Script steps.</p><p>Please
    ensure that users adding scripts, as well as executing deployments that run the
    scripts, are trusted.</p><p></p>'
  slug: using-shell-scripts
  tags: []
  is_live: true
