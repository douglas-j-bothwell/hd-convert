type: article
article_id: 7owpxsaqar
user_id: mfr0nxh4be
category_id: xot6u3ge9d
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Deploy Helm Charts
slug: deploy-helm-charts
description: Deploy Helm charts from a remote Git, HTTP Helm Repository, or cloud
  storage service.
short_version: Deploy Helm charts from a remote Git, HTTP Helm Repository, or cloud
  storage service.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-10T22:13:18.260483Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Deploy Helm Charts
  description: Deploy Helm charts from a remote Git, HTTP Helm Repository, or cloud
    storage service.
  short_version: Deploy Helm charts from a remote Git, HTTP Helm Repository, or cloud
    storage service.
  body: '<p>You can deploy Helm charts in standard Helm syntax in YAML from a remote
    Git repo, HTTP Helm Repository, or cloud storage service (Google Cloud Storage,
    AWS S3).</p><p>This process is also covered in the <a href="/article/cifa2yb19a-helm-cd-quickstart">Helm
    CD Quickstart</a>.</p><h3>Before You Begin</h3><ul><li><a href="/article/cifa2yb19a-helm-cd-quickstart">Helm
    CD Quickstart</a></li><li><a href="https://helm.sh/docs/chart_template_guide/"
    target="_blank">The Chart Template Developer&#39;s Guide</a> from Helm.</li><li>The
    <a href="https://github.com/helm/charts" target="_blank">Helm charts repo on GitHub</a>
    has many useful examples.</li></ul><h3>Limitations</h3><ul><li>Harness does not
    support AWS cross-account access for <a href="https://chartmuseum.com/" target="_blank">ChartMuseum</a>
    and AWS S3. For example, if the Harness Delegate used to deploy charts is in AWS
    account A, and the S3 bucket is in AWS account B, the Harness Cloud Provider that
    uses this Delegate in A cannot assume the role for the B account.</li></ul><h3
    id="undefined">Supported Platforms and Technologies</h3><p>See <a href="/article/1e536z41av-supported-platforms-and-technologies">Supported
    Platforms and Technologies</a>.</p><h4>ChartMuseum Binaries</h4><p>Many Helm Chart
    users use ChartMuseum as their Helm Chart Repository server.</p><ul><li><strong>ChartMuseum
    binary v0.8.2:</strong> the <u>default</u> ChartMuseum binary used by Harness
    is v0.8.2.</li><li><strong>ChartMuseum binary v0.12.0:</strong> to use ChartMuseum
    binary v0.12.0 you must enable the feature flag <code>USE_LATEST_CHARTMUSEUM_VERSION</code>.
    Contact <a href="mailto:support@harness.io" target="_blank">Harness Support</a>
    to enable the feature.</li></ul><h3>Visual Summary</h3><p>Here&#39;s a quick video
    showing you how to add different types of manifests. It also describes how to
    add Helm Charts and multiple Values YAML files in the same repo as the chart,
    or in separate repos.</p><p></p><div class="hd--embed" data-provider="YouTube"
    data-thumbnail="https://i.ytimg.com/vi/dVk6-8tfwJc/hqdefault.jpg"><iframe width="200"
    height="150" src="https://www.youtube.com/embed/dVk6-8tfwJc?feature=oembed" frameborder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen=""></iframe></div><h3>Review: Artifacts and Helm Charts</h3><p>Harness
    supports image artifacts with Helm charts in the following ways.</p><h4>Helm Chart
    with Hardcoded Artifact</h4><p>The image artifact is identified in the Helm chart
    values.yaml file. For example:</p><pre class="hljs yaml">...<br/>containers:<br/>  -
    name: nginx<br/>    image: docker.io/bitnami/nginx:1.21.1-debian-10-r0<br/>...</pre><p></p><p>If
    the image is hardcoded then you do not use the <strong>Artifacts</strong> section
    of the Service. Any artifacts added here are ignored.</p><h4>Helm Chart using
    Artifact Added to the Stage</h4><p>You add an image artifact to the <strong>Artifacts</strong>
    section of the Service and then reference it in the Helm chart values.yaml file.</p><p>Artifacts
    in the <strong>Artifacts</strong> section are referenced using the <code>&lt;+artifact.image&gt;</code>
    expression. For example:</p><pre class="hljs yaml">...<br/>image: &lt;+artifact.image&gt;<br/>pullPolicy:
    IfNotPresent<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/>...</pre><p></p><p>This
    is the same method when using Artifacts with standard Kubernetes deployments.
    See <a href="/article/4ifq51cp0i-add-artifacts-for-kubernetes-deployments">Add
    Container Images as Artifacts for Kubernetes Deployments</a>.</p><h3>Step 1: Add
    the Helm Chart</h3><p>Adding a Helm chart is a simple process of connecting Harness
    to the Git or HTTP Helm repo where your chart is located.</p><p>In your CD stage,
    click <strong>Service</strong>.</p><p>In <strong>Service Definition</strong>,
    select <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>, click
    <strong>Add Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select <strong>Helm Chart</strong>, and click <strong>Continue</strong>.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1627674571372/clean-shot-2021-07-30-at-12-49-08.png"/></figure><p>In
    <strong>Specify Helm Chart Store</strong>, select the type of repo or or cloud
    storage service (Google Cloud Storage, AWS S3) you&#39;re using.</p><p>For the
    steps and settings of each option, see the <a href="/article/xxvnk67c5x-connect-to-an-artifact-repo">Connect
    to an Artifact Repo</a> How-tos.</p><p>If you are using Google Cloud Storage or
    Amazon S3, seeÂ <a href="/category/1ehb4tcksy">Cloud Platform Connectors</a>.</p><p>For
    all of the Helm Chart Store types (Git, GitHub, HTTP Helm, OCI, etc), you will
    need to provide the following Helm info:</p><table><tbody><tr><td><p><strong>Setting</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p><strong>Manifest
    Identifier</strong></p></td><td><p>Enter a name that identifies this Helm chart.
    It doesn&#39;t have to be the chart name. It can be the name of the service you
    are deploying or another name.</p></td><td><p><code>helm_chart</code></p></td></tr><tr><td><p><strong>Chart
    Name</strong></p></td><td><p>Enter the name of the Helm chart for Harness to pull.
    Don&#39;t include the chart version. You will add that in the <strong>Chart Version</strong>
    setting.</p></td><td><p><code>todolist</code></p></td></tr><tr><td><p><strong>Chart
    Version</strong></p></td><td><p>Enter the version of the chart you want to deploy.
    This is found in the Chart.yaml <code>version</code> label in your chart.</p><p>You
    can list all available versions of a chart using the <code>search repo</code>
    command with the <code>--versions</code> option. See <a href="https://helm.sh/docs/helm/helm_search_repo"
    target="_blank">helm search repo</a> from Helm.</p><p>If you leave <strong>Chart
    Version</strong> empty Harness gets the latest chart.</p><p>If you are going to
    use a Harness Trigger to run this Pipeline when a new version is added to your
    chart repo, select the <strong>Runtime Input</strong> option. When you set up
    the Trigger, you will select this chart and Harness will listen on the repo for
    new versions. See <a href="/article/54eqk0d1bd-trigger-pipelines-on-new-helm-chart">Trigger
    Pipelines on New Helm Chart</a>.</p></td><td><p><code>1.4.1</code></p></td></tr><tr><td><p><strong>Helm
    Version</strong></p></td><td><p>Select the version of Helm used in your chart.
    See <a href="https://helm.sh/docs/topics/version_skew/" target="_blank">Helm Version
    Support Policy</a> from Helm.</p></td><td><p><code>Version 2</code></p></td></tr><tr><td><p><strong>Values
    YAML</strong></p></td><td><p>Your chart will have a default values.yaml file in
    its root folder.</p><p>If you do not enter a values.yaml in <strong>Values YAML</strong>,
    Harness uses the default values.yaml file in the root of the chart.</p><p>If you
    want to use a different values.yaml file, enter the path to that file.</p><p>For
    example, let&#39;s imagine a Helm Chart with the following Values YAML files:</p><ul><li>dev-values.yaml</li><li>qa-values.yaml</li><li>prod-values.yaml</li><li>sample-chart/test-values.yaml</li></ul><p>You
    can specify the Values YAML file based using a path to the file within the retrieved
    Helm Chart.</p><p>If you have <u>additional</u> values YAML files in the chart,
    and you want to use those to override some settings of the default values.yaml
    file for this deployment, you can enter the addition values YAML file(s) in <strong>Values
    YAML</strong>.</p><p>For each additional values YAML file, specify its location
    within this chart. Enter the location from the root of the chart to the values.yaml
    file.</p><p>If a values YAML file is located in a folder, enter the path from
    the root of the chart to the folder and values.yaml.</p><p>The values YAML file(s)
    must be in this chart. You cannot enter a location to a values YAML file in a
    chart located somewhere else.</p><p>If you use multiple files in <strong>Values
    YAML</strong>, priority is given from the last file to the first file.</p><p>For
    example, let&#39;s say you have 3 files: the default values.yaml, values2.yaml
    added next, and values3.yaml added last.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1654728823185/clean-shot-2022-06-08-at-15-53-36.png"/></figure><p></p><p>All
    files contain the same key:value pair. The values3.yaml key:value pair overrides
    the key:value pair of values2.yaml and values.yaml files.</p><div class="note-callout">You
    can also select <strong>Expression</strong> and use <a href="/article/lml71vhsim-harness-variables">Harness
    expressions</a> in this setting. The resolved expression must be the name of a
    Values YAML file in the chart. For example, you could create a Stage variable
    for <strong>values4.yaml</strong> named <strong>qa</strong> and then reference
    it in <strong>Values YAML</strong> like this: <code>&lt;+stage.variables.qa&gt;</code>.</div></td><td><p><code>values.yaml</code></p></td></tr><tr><td><p><strong>Skip
    Resource Versioning</strong></p></td><td><p>By default, Harness versions ConfigMaps
    and Secrets deployed into Kubernetes clusters.</p><p>In some cases, such as when
    using public manifests or Helm charts, you cannot add the annotation.</p><p>When
    you enable <strong>Skip Resource Versioning</strong>, Harness will not perform
    versioning of ConfigMaps and Secrets for the resource.</p><p>If you have enabled
    <strong>Skip Resource Versioning</strong> for a few deployments and then disable
    it, Harness will start versioning ConfigMaps and Secrets.</p></td><td><p></p></td></tr><tr><td><p><strong>Helm
    Command Flags</strong></p></td><td><p>You can use Helm command flags to extend
    the Helm commands that Harness runs when deploying your Helm chart.</p><p>Harness
    will run Helm-specific Helm commands and their flags as part of preprocessing.
    All the commands you select are run before <code>helm install/upgrade</code>.</p></td><td><p></p></td></tr><tr><td><p><strong>Command
    Type</strong></p></td><td><p>Select the Helm command type you want to use. For
    example:</p><ul><li><a href="https://v2.helm.sh/docs/helm/#helm-template" target="_blank">Template</a>:Â <code>helm
    template</code>Â to render the helm template files.</li><li><a href="https://helm.sh/docs/helm/helm_pull/"
    target="_blank">Pull</a>:Â <a href="https://helm.sh/docs/helm/helm_pull/" target="_blank"><strong><code>helm
    pull</code></strong></a>Â helm pull (v2) to get the Helm chart.</li></ul></td><td><p><code>Template</code></p></td></tr><tr><td><p><strong>Flag</strong></p></td><td><p>Add
    any options for the command.</p></td><td><p><code>--verify</code></p></td></tr></tbody></table><p></p><p>Here&#39;s
    an example:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1654728919327/clean-shot-2022-06-08-at-15-55-02.png"/></figure><p>If
    you haven&#39;t set up a Harness Delegate, you can add one as part of the Connector
    setup. This process is described in <a href="/article/cifa2yb19a-helm-cd-quickstart">Helm
    CD Quickstart</a> and <a href="/article/f9bd10b3nj-install-a-kubernetes-delegate">Install
    a Kubernetes Delegate</a>.</p><p>Once your Helm chart is added, it appears in
    the <strong>Manifests</strong> section. For example:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1627679594793/clean-shot-2021-07-30-at-14-13-01.png"/></figure><p></p><h3>Option:
    Reference the Artifact</h3><p>If the image artifact is not hardcoded in the Helm
    chart, add the artifact in <strong>Artifacts</strong> and use the expression <code>&lt;+artifact.image&gt;</code>
    in your values.yaml. For example:</p><pre class="hljs yaml">...<br/>image: &lt;+artifact.image&gt;<br/>pullPolicy:
    IfNotPresent<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/>...</pre><p></p><p>This
    is the same method when using Artifacts with standard Kubernetes deployments.
    See <a href="/article/4ifq51cp0i-add-artifacts-for-kubernetes-deployments">Add
    Container Images as Artifacts for Kubernetes Deployments</a>.</p><h3>Option: Override
    Chart Values YAML in Service</h3><p>You can override the values YAML in the Helm
    chart by adding multiple Values YAML files when you add the chart.</p><p>If you
    use multiple files, priority is given from the last file to the first file.</p><p>For
    example, let&#39;s say you have 3 files: the default values.yaml, values2.yaml
    added next, and values3.yaml added last.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1654728823185/clean-shot-2022-06-08-at-15-53-36.png"/></figure><p></p><p>All
    files contain the same key:value pair. The values3.yaml key:value pair overrides
    the key:value pair of values2.yaml and values.yaml files.</p><p>Your values.yaml
    file can useÂ <a href="https://godoc.org/text/template" target="_blank">Go templating</a>Â and
    <a href="/article/lml71vhsim-harness-variables">Harness built-in variable expressions</a>.</p><p>SeeÂ <a
    href="https://ngdocs.harness.io/article/qvlmr4plcp-example-kubernetes-manifests-using-go-templating">Example
    Kubernetes Manifests using Go Templating</a>.</p><h3>Option: Override Chart Values
    YAML in Environment</h3><p>You can override the values YAML file for a stage&#39;s
    Environment by mapping the Environment name to the values file or folder. Next,
    you use the <code>&lt;+env.name&gt;</code> Harness expression in the values YAML
    path.</p><p>Let&#39;s look at an example.</p><p>Let&#39;s say there is a repo
    with three values YAML files, dev.yaml, qa.yaml. prod.yaml. In the <strong>Values
    YAML</strong> setting for the values file, you use the <code>&lt;+env.name&gt;</code>
    expression.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/7owpxsaqar/1654730614382/clean-shot-2022-06-08-at-16-23-25.png"/></figure><p>Next,
    in the Environment setting, you add three Environments, one for each YAML file
    name.</p><p>When you select an Environment, such as <strong>qa</strong>, the name
    of the Environment is used in <strong>File Path</strong> and resolves to <strong>qa.yaml</strong>.
    At runtime, the <strong>qa.yaml</strong> values file is used, and it overrides
    the values.yaml file in the chart.</p><p>Instead of selecting the Environment
    in the <strong>Infrastructure</strong> each time, you can set the Environment
    as a <strong>Runtime Input</strong> and then enter <strong>dev</strong>, <strong>qa</strong>,
    or <strong>prod</strong> at runtime.</p><h3>Step 2: Define the Infrastructure
    and Execution</h3><p>There is nothing unique about defining the target cluster
    Infrastructure Definition for a Helm chart deployment. It is the same process
    as a typical Harness Kubernetes deployment.</p><p>See <a href="/article/0ud2ut4vt2-define-your-kubernetes-target-infrastructure">Define
    Your Kubernetes Target Infrastructure</a>.</p><p>Helm charts can be deployed using
    any of the Execution steps and deployment strategies used in other Kubernetes
    deployments. See <a href="/category/qfj6m1k2c4">Kubernetes How-tos</a>.</p><h3>Step
    3: Deploy</h3><p>Each Helm chart deployment is treated as a release. During deployment,
    when Harness detects that there is a previous release for the chart, it upgrades
    the chart to the new release.</p><p>In your Pipeline, click <strong>Run</strong>.</p><p>The
    Helm chart deployment runs.</p><p>You will see Harness fetch the Helm chart. Here
    is an example:</p><pre>Helm repository: Bitnami Helm Repo<br/><br/>Chart name:
    nginx<br/><br/>Chart version: 9.4.1<br/><br/>Helm version: V3<br/><br/>Repo url:
    https://charts.bitnami.com/bitnami<br/><br/>Successfully fetched values.yaml<br/><br/>Fetching
    files from helm chart repo<br/><br/>Helm repository: Bitnami Helm Repo<br/><br/>Chart
    name: nginx<br/><br/>Helm version: V3<br/><br/>Repo url: https://charts.bitnami.com/bitnami<br/><br/>Successfully
    fetched following files:<br/><br/>- nginx/.helmignore<br/>- nginx/charts/common/.helmignore<br/>-
    nginx/charts/common/templates/validations/_postgresql.tpl<br/>- nginx/charts/common/templates/validations/_cassandra.tpl<br/>-
    nginx/charts/common/templates/validations/_mongodb.tpl<br/>- nginx/charts/common/templates/validations/_mariadb.tpl<br/>-
    nginx/charts/common/templates/validations/_validations.tpl<br/>- nginx/charts/common/templates/validations/_redis.tpl<br/>-
    nginx/charts/common/templates/_ingress.tpl<br/>- nginx/charts/common/templates/_names.tpl<br/>-
    nginx/charts/common/templates/_affinities.tpl<br/>- nginx/charts/common/templates/_storage.tpl<br/>-
    nginx/charts/common/templates/_utils.tpl<br/>- nginx/charts/common/templates/_errors.tpl<br/>-
    nginx/charts/common/templates/_capabilities.tpl<br/>- nginx/charts/common/templates/_secrets.tpl<br/>-
    nginx/charts/common/templates/_warnings.tpl<br/>- nginx/charts/common/templates/_tplvalues.tpl<br/>-
    nginx/charts/common/templates/_images.tpl<br/>- nginx/charts/common/templates/_labels.tpl<br/>-
    nginx/charts/common/Chart.yaml<br/>- nginx/charts/common/values.yaml<br/>- nginx/charts/common/README.md<br/>-
    nginx/Chart.lock<br/>- nginx/templates/svc.yaml<br/>- nginx/templates/health-ingress.yaml<br/>-
    nginx/templates/ldap-daemon-secrets.yaml<br/>- nginx/templates/tls-secrets.yaml<br/>-
    nginx/templates/NOTES.txt<br/>- nginx/templates/pdb.yaml<br/>- nginx/templates/ingress.yaml<br/>-
    nginx/templates/server-block-configmap.yaml<br/>- nginx/templates/serviceaccount.yaml<br/>-
    nginx/templates/hpa.yaml<br/>- nginx/templates/servicemonitor.yaml<br/><br/>Done.</pre><p></p><p>Next,
    Harness will initialize and prepare the workloads, apply the Kubernetes manifests,
    and wait for steady state.</p><p>In <strong>Wait for Steady State</strong> you
    will see the workloads deployed and the pods scaled up and running (the release
    name has been shortened for readability):</p><pre>kubectl --kubeconfig=config
    get events --namespace=default --output=custom-columns=KIND:involvedObject.kind,NAME:.involvedObject.name,NAMESPACE:.involvedObject.namespace,MESSAGE:.message,REASON:.reason
    --watch-only<br/><br/>kubectl --kubeconfig=config rollout status Deployment/release-e008...ee-nginx
    --namespace=default --watch=true<br/><br/>Status : release-e008...ee-nginx   Waiting
    for deployment spec update to be observed...<br/><br/>Event  : release-e008...ee-nginx   Deployment   release-e008...ee-nginx   default     Scaled
    up replica set release-e008...ee-nginx-779cd786f6 to 1   ScalingReplicaSet<br/><br/>Status
    : release-e008...ee-nginx   Waiting for deployment spec update to be observed...<br/><br/>Status
    : release-e008...ee-nginx   Waiting for deployment &#34;release-e008...ee-nginx&#34;
    rollout to finish: 0 out of <br/><br/>Event  : release-e008...ee-nginx   ReplicaSet   release-e008...ee-nginx-779cd786f6   default   Created
    pod: release-e008...ee-nginx-779n765l   SuccessfulCreate<br/><br/>Status : release-e008...ee-nginx   Waiting
    for deployment &#34;release-e008...ee-nginx&#34; rollout to finish: 0 of 1 updated
    replicas are available...<br/><br/>Event  : release-e008...ee-nginx   Pod   release-e008...ee-nginx-779n765l   default   Successfully
    assigned default/release-e008...ee-nginx-779n765l to gke-doc-account-default-pool-d910b20f-argz   Scheduled<br/><br/>Event  :
    release-e008...ee-nginx   Pod   release-e008...ee-nginx-779n765l   default   Pulling
    image &#34;docker.io/bitnami/nginx:1.21.1-debian-10-r0&#34;   Pulling<br/><br/>Event  :
    release-e008...ee-nginx   Pod   release-e008...ee-nginx-779n765l   default   Successfully
    pulled image &#34;docker.io/bitnami/nginx:1.21.1-debian-10-r0&#34; in 3.495150157s   Pulled<br/><br/>Event  :
    release-e008...ee-nginx   Pod   release-e008...ee-nginx-779n765l   default   Created
    container nginx   Created<br/><br/>Event  : release-e008...ee-nginx   Pod   release-e008...ee-nginx-779n765l   default   Started
    container nginx   Started<br/><br/>Status : release-e008...ee-nginx   deployment
    &#34;release-e008...ee-nginx&#34; successfully rolled out<br/><br/>Done.</pre><p></p><p>You
    deployment is successful.</p><h4>Versioning and Rollback</h4><p>Helm chart deployments
    support versioning and rollback in the same way as standard Kubernetes deployments.</p><p>See
    <a href="/article/rt449t1xhy-kubernetes-rollback">Kubernetes Rollback</a>.</p><h3>Option:
    Trigger the Pipeline on a New Chart Version</h3><p>You can set up a Harness Trigger
    to listen on the chart repo and execute the Pipeline when a new chart version
    appears. See <a href="/article/54eqk0d1bd-trigger-pipelines-on-new-helm-chart">Trigger
    Pipelines on New Helm Chart</a>.</p>'
  slug: deploy-helm-charts
  tags: []
  is_live: true
