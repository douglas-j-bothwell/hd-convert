type: article
article_id: fjee1zl72m
user_id: aira2g6l6r
category_id: qfj6m1k2c4
author:
  name: Lavanya Mandavilli
  profile_image: https://www.gravatar.com/avatar/63349f0ac17fcc0d20247e1cac23e461?d=mm&s=150
title: Add a Custom Remote Script and Manifests
slug: add-a-custom-remote-script-and-manifests
description: Currently, this feature is behind the feature flag NG_CUSTOM_REMOTE_MANIFEST.
  Contact Harness Support to enable the feature. You can use Kubernetes manifests
  and configuration files in Git repos or i…
short_version: Currently, this feature is behind the feature flag NG_CUSTOM_REMOTE_MANIFEST.
  Contact Harness Support to enable the feature. You can use Kubernetes manifests
  and configuration files in Git repos or i…
tags: []
show_toc: true
is_private: true
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-09T20:57:11.516051Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Add a Custom Remote Script and Manifests
  description: ""
  short_version: ""
  body: '<div class="note-callout">Currently, this feature is behind the feature flag
    <code>NG_CUSTOM_REMOTE_MANIFEST</code>. Contact Harness Support to enable the
    feature.</div><p>You can use Kubernetes manifests and configuration files in Git
    repos or in the Harness File Store. If you use a Git repo with custom scripts
    in that remote location, Harness fetches files from the remote repo during deployment
    runtime.</p><p>By default, you add Kubernetes and OpenShift files to a Harness
    Kubernetes Service inline or from a repo as files.</p><p>In some cases, your manifests,
    templates, etc are in a packaged archive and you simply wish to extract and use
    them at runtime.</p><p>You can use a packaged archive with the Custom Remote Manifests
    setting in a Harness Kubernetes Service. You add a script to the Service that
    pulls the package and extracts its contents. Next, you supply the path to the
    manifest, template, etc.</p><p>Custom Remote Manifests are supported for:</p><ul><li>Kubernetes</li><li>HelmChart</li><li>OpenShift
    </li></ul><p>Looking for other methods? See <a href="https://docs.harness.io/article/ssbq0xh0hx-define-kubernetes-manifests">Add
    Kubernetes Manifests</a>.</p><ul><li><a href="#before_you_begin">Before You Begin</a></li><li><a
    href="https://docs.harness.io/article/fjee1zl72m-cds-41183-add-packaged-ku#supported_platforms_and_technologies">Supported
    Platforms and Technologies</a></li><li><a href="#limitations">Limitations</a></li><li><a
    href="#option_add_secrets_for_script">Option: Add Secrets for Script</a></li><li><a
    href="#start_a_pipeline">Start a Pipeline</a></li><li><a href="#add_deploy_stage">Add
    Deploy Stage</a></li><li><a href="#create_a_harness_kubernetes_service">Create
    a Harness Kubernetes Service</a></li><li><a href="https://docs.harness.io/article/fjee1zl72m-cds-4118#add_the_remote_script_and_kubernetes_manifests">Add
    the Remote Script and Kubernetes Manifests</a></li></ul><h3>Before You Begin</h3><ul><li><a
    href="https://docs.harness.io/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    Deployment Tutorial</a></li><li><a href="https://docs.harness.io/article/u29v1uc1mh-kubernetes-deployments-overview">Kubernetes
    Deployment Basics</a></li></ul><h3>Supported Platforms and Technologies</h3><p>See
    <a href="https://docs.harness.io/article/1e536z41av">Supported Platforms and Technologies</a></p><h3>Limitations</h3><ul><li>Custom
    Remote Manifests scripts use Bash only.</li><li>The Delegate that runs the script
    must have all the software needed for the scripts to execute.</li><li>Currently,
    you cannot select a specific Delegate to execute the Custom Remote Manifests script.
    Harness selects the Delegate based on <a href="https://docs.harness.io/article/2k7lnc7lvl-delegates-overview">its
    standard methods.<br/></a>If you select a Delegate in the Kubernetes Cluster Cloud
    Provider used by the Workflow&#39;s Infrastructure Definition, then the script
    is run on that Delegate.</li></ul><h3>Option: Add Secrets for Script</h3><p>Typically,
    your script to pull the remote package will use a user account. For example:</p><pre>curl
    -sSf -u &#34;johndoe:mypwd&#34; -O &#39;https://mycompany.jfrog.io/module/example/manifest.zip&#39;</pre><p>You
    can use Harness secrets for the username and password in your script. For example:</p><pre>curl
    -sSf -u &#34;${secrets.getValue(&#34;username&#34;)}:${secrets.getValue(&#34;password&#34;)}&#34;
    -O &#39;https://mycompany.jfrog.io/module/example/manifest.zip&#39;</pre><p></p><p>For
    more information, see <a href="https://docs.harness.io/article/osfw70e59c-add-use-text-secrets">Add
    and Reference Text Secrets</a>.</p><h3>Start a Pipeline</h3><p>This topic assumes
    you have a Harness Project set up. If not, see <a href="https://docs.harness.io/article/36fw2u92i4-create-an-organization">Create
    Organizations and Projects</a>.</p><p>You can create a Pipeline from any module
    in your Project, or in the <strong>Project Overview</strong>, and then add stages
    for any module.</p><p>Enter a name for the Pipeline and click <strong>Start</strong>.
    Now you&#39;re ready to add a stage.</p><h3>Add Deploy Stage</h3><p>For steps
    on adding a stage, see <a href="https://docs.harness.io/article/2chyf1acil-add-a-stage">Add
    a Stage</a>.</p><ol><li>Name the stage, and select what you&#39;d like to deploy.
    For example, select Service.</li><li>Click <strong>Set Up Stage</strong>.</li><li>The
    new stage&#39;s settings appear.</li><li>Click <strong>Next</strong> or <strong>Service</strong>.</li></ol><h3>Create
    a Harness Kubernetes Service</h3><p>In Service, you can define/select the Service
    and Service Definition.</p><p>Let&#39;s take a moment and review Harness Services
    and Service Definitions (which are explained below). Harness Services represent
    your microservices/apps logically.</p><p>You can add the same Service to as many
    stages as you need. Service Definitions represent your artifacts, manifests, and
    variables physically. They are the actual files and variable values.</p><p>By
    separating Services and Service Definitions, you can propagate the same Service
    across stages and change artifacts, manifests, and variables with each stage.</p><p>Select
    or create the Service.</p><p>To add your manifests, go to <strong>Manifests</strong>
    in the <strong>Service Definition</strong>.</p><h3>Add the Remote Script and Kubernetes
    Manifests</h3><p>You can use your Git repo for the remote script and manifests
    in Manifests and Harness will use them at runtime.</p><p>If you are adding the
    image location to Harness as an Artifact in the Service Definition, see <a href="https://docs.harness.io/article/4ifq51cp0i-add-artifacts-for-kubernetes-deployments">Add
    Container Images as Artifacts for Kubernetes Deployments</a>.</p><ol><li>In your
    Harness Kubernetes Service, in <strong>Manifests</strong>, click <strong>Add Manifest</strong>.</li><li>In
    <strong>Specify Manifest Type</strong>, select <strong>K8s Manifest</strong>,
    and then click <strong>Next</strong>.</li><li>In <strong>Specify K8s Manifest
    Store</strong>, click <strong>Custom Remote.</strong></li></ol><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/fjee1zl72m/1660071162906/cds-41183-specify-k-8-s-manifest-store.png"/></figure><ol><li>Click
    <strong>Continue</strong>. The Manifest Details appear. Now you can add your script
    to pull the package containing your manifests and specify the folder path for
    the manifests.</li></ol><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/fjee1zl72m/1660071222453/cds-41183-manifest-details.png"/></figure><ol><li>Enter
    the name in <strong>Manifest Name</strong>.</li><li>In the <strong>Custom Remote
    Manifest Extraction Script</strong>, enter the path to the Git repo where your
    remote manifest script is available. This script runs on the Harness Delegate
    selected for the deployment.</li><li>In <strong>Extracted Manifest File Location</strong>,
    enter the folder path for the manifests.</li><li>In <strong>Define Delegate Selector</strong>,
    Harness selects the best Delegate. See <a href="https://docs.harness.io/article/nnuf8yv13o-select-delegates-with-selectors">Select
    Delegates with Delegate Selectors and Tags</a>. Select a specific delegate from
    the list of tags available for delegates or leave this blank and allow Harness
    to select a delegate.</li><li>In the <strong>Values.yaml</strong>, the field is
    populated with the folder path for the values.yaml.</li><li>Click <strong>Submit</strong>.
    The new manifest is created and added to <strong>Manifests</strong> in Harness.</li></ol><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/fjee1zl72m/1660071375731/cds-41183-manifests-display.png"/></figure><h3>View
    the Harness Delegate Selected for the Deployment</h3><p>The custom script runs
    on the Harness Delegate selected for deployment. If you selected a Delegate in
    the Kubernetes Cluster Cloud Provider used by the Workflow&#39;s Infrastructure
    Definition, then the script is run on that Delegate.</p><p>Harness creates a temporary
    working directory on the Delegate host for the downloaded package. You can reference
    the working directory in your script with <code>WORKING_DIRECTORY=$(pwd)</code> or <code>cd
    $(pwd)/some/other/directory</code></p><p>After deploying your Workflow, you can
    view the Delegate that was selected for the deployment.</p><p>Click on <strong>Execution
    Summary</strong>, and then click on <strong>Custom Manifest Values Fetch Task</strong>
    in the console to view the selected Delegate.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/fjee1zl72m/1660071325599/cds-41183-delegate-selected.png"/></figure><h3>Kubernetes
    YAML</h3><p>You can enter the path to a manifests folder.</p><p>For example, if
    your expanded package has this folder structure:</p><pre>manifest:<br/> - values.yaml<br/>
    - templates<br/>     - deployment.yaml<br/>     - service.yaml</pre><p></p><p>In
    this example, you can enter manifest and Harness automatically detects the values.yaml
    and the other file (for example, deployment.yaml and service.yaml). If no values.yaml
    file is present, Harness will simply use the other files.</p><p>That&#39;s all
    the setup required. You can now deploy the Service and the script is executed
    at runtime.</p><h3>OpenShift Manifest</h3><p>Provide the path to the OpenShift
    template, Kubernetes manifest, or Helm file. For example, manifest/template.yaml.</p><p>Do
    not enter a folder. Harness requires a direct path to the file.</p><p>That&#39;s
    all the setup required. You can now deploy the Service and the script is executed
    at runtime.</p><h3>Option: Delegate Selector</h3><p>In Delegate Selector, select
    the Selector for the Delegate(s) you want to use. You add Selectors to Delegates
    to make sure that they&#39;re used to execute the command.</p><p>Harness will
    use Delegates matching the Selectors you add.</p><p>If you use one Selector, Harness
    will use any Delegate that has that Selector.</p><p>If you select two Selectors,
    a Delegate must have both Selectors to be selected. </p><div class="note-callout">You
    can use expressions for Harness built-in variables or Account Default variables
    in Delegate Selectors. When the variable expression is resolved at deployment
    runtime, it must match an existing Delegate Selector.</div><div class="note-callout">For
    example, if you have a Delegate Selector prod and the Workflow is using an Environment
    also named prod, the Delegate Selector can be ${env.name}. This is very useful
    when you match Delegate Selectors to Application component names such as Environments,
    Services, etc. It&#39;s also a way to template the Delegate Selector setting.</div><h3>Notes</h3><p>You
    can use Go templating in your Kubernetes resource files, just as you would for
    files stored in Git or inline. See <a href="https://docs.harness.io/article/qvlmr4plcp-example-kubernetes-manifests-using-go-templating">Example
    Kubernetes Manifests Using Go Templating</a>. For OpenShift, you must use OpenShift
    templating.</p><p>If the artifact you are deploying with your manifest is public
    (DockerHub) and does not require credentials, you can use the standard public
    image reference, such as <code>image: harness/todolist-sample:11</code>.</p><h3>Configure
    as Code</h3><p>To see how to configure the settings in this topic using YAML,
    configure the settings in the UI first, and then click the YAML editor button
    (&lt;/&gt;).</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>'
  slug: add-a-custom-remote-script-and-manifests
  tags: []
  is_live: true
