type: article
article_id: o1gf8jslsq
user_id: znazf3hcp9
category_id: qfj6m1k2c4
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/77114bb5eef5503c5a09ad7655120b17?d=mm&s=150
title: Pull an Image from a Private Registry for Kubernetes
slug: pull-an-image-from-a-private-registry-for-kubernetes
description: Import the credentials from the Docker credentials file.
short_version: Import the credentials from the Docker credentials file.
tags:
- dockerconfig
- artifact.source.dockerconfig
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: Article updated
  source: API
  triggered_at: 2021-04-30T21:03:57.594559Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Pull an Image from a Private Registry for Kubernetes
  description: Import the credentials from the Docker credentials file.
  short_version: Import the credentials from the Docker credentials file.
  body: '<p>Typically, if the Docker image you are deploying is in a private registry,
    Harness has access to that registry using the credentials set up in the Harness
    <a href="/category/o1zhrfo8n5">Connector</a>.</p><p>If some cases, your Kubernetes
    cluster might not have the permissions needed to access a private Docker registry.
    For these cases, the values.yaml or manifest file in Service Definition <strong>Manifests</strong>
    section must use the <code>dockercfg</code> parameter.</p><p>If the Docker image
    is added in the Service Definition <strong>Artifacts</strong> section, then you
    reference it like this: <code>dockercfg: &lt;+artifact.imagePullSecret&gt;</code>.</p><p>This
    key will import the credentials from the Docker credentials file in the artifact.</p><p>In
    this topic:</p><ul><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#before_you_begin">Before
    You Begin</a></li><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#review_private_repo_authentication_for_container_instances">Review:
    Private Repo Authentication for Container Instances</a></li><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#step_1_use_dockercfg_in_values_yaml">Step
    1: Use dockercfg in values.yaml</a></li><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#step_2_reference_dockercfg_in_kubernetes_objects">Step
    2: Reference dockercfg in Kubernetes Objects</a></li><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#example_values_yaml_and_manifests">Example:
    Values YAML and Manifests</a><ul><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#values_yaml">values.yaml</a></li><li><a
    href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#deployment_yaml">deployment.yaml</a></li><li><a
    href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#namespace_yaml_and_service_yaml">namespace.yaml
    and service.yaml</a></li></ul></li><li><a href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#notes">Notes</a></li><li><a
    href="https://ngdocs.harness.io/article/o1gf8jslsq-pull-an-image-from-a-private-registry-for-kubernetes#next_steps">Next
    Steps</a></li></ul><h3>Before You Begin</h3><p>Ensure you have reviewed and set
    up the following:</p><ul><li><a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    CD Quickstart</a></li><li><a href="/article/u29v1uc1mh-kubernetes-deployments-overview">Kubernetes
    Deployments Overview</a></li><li><a href="/article/4ifq51cp0i-add-artifacts-for-kubernetes-deployments">Add
    Container Images as Artifacts for Kubernetes Deployments</a></li></ul><h3>Review:
    Private Repo Authentication for Container Instances</h3><p>When you are using
    private Docker images, you must authenticate with the repo to pull the image.
    The encrypted dockercfg file provides the credentials needed to authenticate.</p><p>The
    dockercfg file is located in the Docker image artifact. You reference this file
    in your values.yaml or manifests. Harness imports the credentials from the file
    to access the private repo.</p><p></p><h3>Step 1: Use dockercfg in values.yaml</h3><p>Open
    the values.yaml file you are using for deployment.</p><p>Verify that <code>dockercfg</code>
    key exists, and uses the <code>&lt;+artifact.imagePullSecret&gt;</code> expression
    to obtain the credentials:</p><pre>name: &lt;+stage.variables.name&gt;<br/>replicas:
    2<br/><br/>image: &lt;+artifact.image&gt;<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace:
    true<br/>namespace: &lt;+infra.namespace&gt;<br/>...</pre><p></p><h3>Step 2: Reference
    dockercfg in Kubernetes Objects</h3><p>For example, verify that the Deployment
    and Secret objects reference <code>dockercfg</code>: (<code>{{.Values.dockercfg}}</code>).</p><p></p><pre>...<br/>{{-
    if .Values.dockercfg}}<br/>apiVersion: v1<br/>kind: Secret<br/>metadata:<br/>  name:
    {{.Values.name}}-dockercfg<br/>  annotations:<br/>    harness.io/skip-versioning:
    true<br/>data:<br/>  .dockercfg: {{.Values.dockercfg}}<br/>type: kubernetes.io/dockercfg<br/>---<br/>{{-
    end}}<br/><br/>apiVersion: apps/v1<br/>kind: Deployment<br/>metadata:<br/>  name:
    {{.Values.name}}-deployment<br/>spec:<br/>  replicas: {{int .Values.replicas}}<br/>  selector:<br/>    matchLabels:<br/>      app:
    {{.Values.name}}<br/>  template:<br/>    metadata:<br/>      labels:<br/>        app:
    {{.Values.name}}<br/>    spec:<br/>      {{- if .Values.dockercfg}}<br/>      imagePullSecrets:<br/>      -
    name: {{.Values.name}}-dockercfg<br/>      {{- end}}<br/>      containers:<br/>      -
    name: {{.Values.name}}<br/>        image: {{.Values.image}}<br/>...</pre><p></p><p>With
    these requirements met, the cluster imports the credentials from the Docker credentials
    file in the artifact.</p><h3>Example: Values YAML and Manifests</h3><p>This is
    a simple example using the Artifact <code>&lt;+artifact.image&gt;</code> and <code>dockercfg</code>
    references.</p><p>We use Go templating with a values.yaml file and manifests for
    deployment, namespace, and service. The manifests for deployment, namespace, and
    service are in a <strong>templates</strong> folder that is a peer of the values.yaml
    file.</p><h4>values.yaml</h4><p>In addition to <code>&lt;+artifact.image&gt;</code>
    and <code>dockercfg</code> , this file also uses <code>name: &lt;+stage.variables.name&gt;</code> to
    reference a Stage variable <code>name</code> and <code>namespace: &lt;+infra.namespace&gt;</code> to
    reference the namespace entered in the Stage&#39;s <strong>Infrastructure Definition</strong>.
    Service type and ports are hardcoded.</p><p></p><pre>name: &lt;+stage.variables.name&gt;<br/>replicas:
    2<br/><br/>image: &lt;+artifact.image&gt;<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace:
    true<br/>namespace: &lt;+infra.namespace&gt;<br/><br/># Service Type allow you
    to specify what kind of service you want.<br/># Possible values for ServiceType
    are:<br/># ClusterIP | NodePort | LoadBalancer | ExternalName<br/>serviceType:
    LoadBalancer<br/><br/># A Service can map an incoming port to any targetPort.<br/>#
    targetPort is where application is listening on inside the container.<br/>servicePort:
    80<br/>serviceTargetPort: 80<br/><br/># Specify all environment variables to be
    added to the container.<br/># The following two maps, config and secrets, are
    put into a ConfigMap<br/># and a Secret, respectively.<br/># Both are added to
    the container environment in podSpec as envFrom source.<br/>env:<br/>  config:<br/>    key1:
    value10<br/>  secrets:<br/>    key2: value2</pre><h4>deployment.yaml</h4><pre>{{-
    if .Values.env.config}}<br/>apiVersion: v1<br/>kind: ConfigMap<br/>metadata:<br/>  name:
    {{.Values.name}}<br/>data:<br/>{{.Values.env.config | toYaml | indent 2}}<br/>---<br/>{{-
    end}}<br/><br/>{{- if .Values.env.secrets}}<br/>apiVersion: v1<br/>kind: Secret<br/>metadata:<br/>  name:
    {{.Values.name}}<br/>stringData:<br/>{{.Values.env.secrets | toYaml | indent 2}}<br/>---<br/>{{-
    end}}<br/><br/>{{- if .Values.dockercfg}}<br/>apiVersion: v1<br/>kind: Secret<br/>metadata:<br/>  name:
    {{.Values.name}}-dockercfg<br/>  annotations:<br/>    harness.io/skip-versioning:
    true<br/>data:<br/>  .dockercfg: {{.Values.dockercfg}}<br/>type: kubernetes.io/dockercfg<br/>---<br/>{{-
    end}}<br/><br/>apiVersion: apps/v1<br/>kind: Deployment<br/>metadata:<br/>  name:
    {{.Values.name}}-deployment<br/>spec:<br/>  replicas: {{int .Values.replicas}}<br/>  selector:<br/>    matchLabels:<br/>      app:
    {{.Values.name}}<br/>  template:<br/>    metadata:<br/>      labels:<br/>        app:
    {{.Values.name}}<br/>    spec:<br/>      {{- if .Values.dockercfg}}<br/>      imagePullSecrets:<br/>      -
    name: {{.Values.name}}-dockercfg<br/>      {{- end}}<br/>      containers:<br/>      -
    name: {{.Values.name}}<br/>        image: {{.Values.image}}<br/>        {{- if
    or .Values.env.config .Values.env.secrets}}<br/>        envFrom:<br/>        {{-
    if .Values.env.config}}<br/>        - configMapRef:<br/>            name: {{.Values.name}}<br/>        {{-
    end}}<br/>        {{- if .Values.env.secrets}}<br/>        - secretRef:<br/>            name:
    {{.Values.name}}<br/>        {{- end}}<br/>        {{- end}}</pre><h4>namespace.yaml
    and service.yaml</h4><p>These files doe not use <code>dockercfg</code> but are
    included here because they are needed for the deployment.</p><p>namespace.yaml:</p><pre>{{-
    if .Values.createNamespace}}<br/>apiVersion: v1<br/>kind: Namespace<br/>metadata:<br/>  name:
    {{.Values.namespace}}<br/>{{- end}}</pre><p></p><p>service.yaml:</p><pre>apiVersion:
    v1<br/>kind: Service<br/>metadata:<br/>  name: {{.Values.name}}-svc<br/>spec:<br/>  type:
    {{.Values.serviceType}}<br/>  ports:<br/>  - port: {{.Values.servicePort}}<br/>    targetPort:
    {{.Values.serviceTargetPort}}<br/>    protocol: TCP<br/>  selector:<br/>    app:
    {{.Values.name}}</pre><h3>Notes</h3><ul><li>When you are using a public repo,
    the <code>dockercfg: &lt;+artifact.imagePullSecret&gt;</code> in values.yaml is
    ignored by Harness. You do not need to remove it.</li><li>If you want to use a
    private repo and no imagePullSecret, then set <code>dockercfg</code> to empty
    in values.yaml.</li></ul><h3>Next Steps</h3><ul><li><a href="/article/ssbq0xh0hx-define-kubernetes-manifests">Add
    Kubernetes Manifests</a></li></ul><p></p>'
  slug: pull-an-image-from-a-private-registry-for-kubernetes
  tags:
  - dockerconfig
  - artifact.source.dockerconfig
  is_live: true
