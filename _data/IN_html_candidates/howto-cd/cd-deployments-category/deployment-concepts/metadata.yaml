type: article
article_id: 0zsf97lo3c
user_id: znazf3hcp9
category_id: etz0u5kujd
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/77114bb5eef5503c5a09ad7655120b17?d=mm&s=150
title: Deployment Concepts and Strategies
slug: deployment-concepts
description: Quick overview of deployment strategies.
short_version: Quick overview of deployment strategies.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-18T21:27:26.171298Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Deployment Concepts and Strategies
  description: Quick overview of deployment strategies.
  short_version: Quick overview of deployment strategies.
  body: '<p>You have likely heard terms like <em>blue/green</em> and <em>canary</em>
    when it comes to deploying code and applications into production. These are common
    deployment strategies, available in Harness CD as stage strategies, along with
    others.</p><p>This topic will explain these strategies to give you an idea of
    how to approach deployments in Harness, and to help you decide what strategy is
    best for you.</p><h3>Rolling Deployment</h3><p>With a Rolling Deployment, all
    nodes within a single environment are incrementally added one-by-one or in N batches
    (as defined by a window size) with a new service/artifact version.</p><p></p><figure><img
    src="https://files.helpdocs.io/kw8ldg1itf/articles/0zsf97lo3c/1658179599026/clean-shot-2022-07-18-at-14-26-19.png"/></figure><h4>When
    to use Rolling Deployments</h4><ul><li>When you need to support both new and old
    deployments.</li><li>Load balancing scenarios that require reduced downtime.</li></ul><p>One
    use of Rolling deployments is as the stage following a Canary deployment in a
    deployment pipeline. For example, in the first stage you can perform a Canary
    deployment to a QA environment and verify each group of nodes and, once successful,
    you perform a Rolling to production.</p><h5>Pros</h5><ul><li>Simple, relatively
    simple to rollback, less risk than Basic deployment.</li><li>Gradual app rollout
    with increasing traffic.</li></ul><h5>Cons</h5><ul><li>Verification gates between
    nodes difficult and slow.</li><li>App/DB needs to support both new and old artifacts.
    Manual checks/verification at each increment could take a long time.</li><li>Lost
    transactions and logged-off users are also something to take into consideration.</li></ul><figure><img
    src="https://harnessio.wpengine.com/wp-content/uploads/2018/02/Rolling2.png"/></figure><p>See
    <a href="/article/xsla71qg8t-create-a-kubernetes-rolling-deployment">Create a
    Kubernetes Rolling Deployment</a>.</p><h3>Blue/Green Deployment</h3><p>With Blue/Green
    Deployment, two identical environments for staging and production traffic run
    simultaneously with different versions of the service.</p><p>QA and UAT are typically
    done on the stage environment. When satisfied, traffic is flipped (via a load
    balancer) from the prod environment (current version) to the stage environment
    (new version).</p><p>You can then decommission the old environment once deployment
    is successful.</p><div class="note-callout">Some vendors call this a red/black
    deployment.</div><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/0zsf97lo3c/1658179619345/clean-shot-2022-07-18-at-14-26-44.png"/></figure><h4>When
    to use Blue/Green Deployments</h4><ul><li>When you want to perform verification
    in a full production environment.</li><li>When you want zero downtime.</li></ul><h5>Pros</h5><ul><li>Simple,
    fast, well understood, and easy to implement: the switch is almost instantaneous.</li><li>Less
    risk relative to other deployment strategies.</li><li>Rapid rollback (flip traffic
    back to old environment)</li></ul><h5>Cons</h5><ul><li>Replicating a production
    environment can be complex and expensive (i.e. microservice downstream dependencies).</li><li>QA/UAT
    test coverage may not identify all anomalies &amp; regressions in blue environment.</li><li>An
    outage or SPOF could have wide-scale business impact before rollback kicks in.</li><li>Current
    transactions and sessions will be lost due to the physical switch from one machine
    serving the traffic to another one.</li><li>Database compatibility (schema changes,
    backward compatibility).</li></ul><figure><img src="https://harnessio.wpengine.com/wp-content/uploads/2018/02/BlueGreen2.png"/></figure><p>See:</p><ul><li><a
    href="/article/mog5tnk5pi-create-a-kubernetes-blue-green-deployment">Create a
    Kubernetes Blue Green Deployment</a></li></ul><h3>Canary Deployment</h3><p>With
    Canary Deployment, all nodes in a single environment are incrementally updated
    in small phases, with each phase requiring a verification/gate to proceed to the
    next phase.</p><p></p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/0zsf97lo3c/1658179637200/clean-shot-2022-07-18-at-14-27-04.png"/></figure><h4>When
    to use Canary Deployments</h4><p>When you want to verify whether the new version
    of the application is working correctly in your production environment.</p><p>This
    is currently the most common way to deploy apps/services into production.</p><p><strong>Pros:</strong></p><ul><li>Deploy
    in small phases (e.g. 2%, 10%, 25%, 50,%, 75%, 100%).</li><li>Lowest risk relative
    to all other deployment strategies (reduce business exposure).</li><li>Test in
    production with real users &amp; use cases.</li><li>Run &amp; compare two service
    versions side-by-side.</li><li>Cheaper than blue/green, because there is no need
    to have two production environments.</li><li>Fast and safe rollback.</li></ul><p><strong>Cons:</strong></p><ul><li>Scripting
    canary deployments can be complex (Harness automates this process).</li><li>Manual verification
    can take time (Harness automates this process with Continuous Verification).</li><li>Required
    monitoring and instrumentation for testing in production (APM, Log, Infra, End
    User, etc).</li><li>Database compatibility (schema changes, backward compatibility).</li></ul><figure><img
    src="https://harnessio.wpengine.com/wp-content/uploads/2018/02/Canary2.png"/></figure><p>For
    Kubernetes, Harness does this a little different.</p><p>In Phase 1 we do a canary
    to the same group but we leave the production version alone. We just use other
    instances. Then we delete our canary version in Phase 1.</p><p>In Phase 2 we do
    a rolling deployment with the production version and scale down the older version.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/0zsf97lo3c/1617401117642/image.png"/></figure><p>See:</p><ul><li><a
    href="/article/i5p4feil89-create-a-kubernetes-canary-deployment">Create a Kubernetes
    Canary Deployment</a></li></ul><h3>Which Deployment Strategy Should I Use?</h3><p>It
    depends entirely on the type of application/service and environment. Most Harness
    customers are currently using blue/green or canary deployments for mission-critical
    applications.</p><p>In many cases, customers are migrating from blue/green to
    canary so they can test in production with minimal business impact.</p><p>You
    can also combine many of the above deployment strategies into a single strategy.</p><h3>Next
    Steps</h3><ul><li>Harness <a href="/article/u8lgzsi7b3-quickstarts">Quickstarts</a>.</li></ul><p></p>'
  slug: deployment-concepts
  tags: []
  is_live: true
