type: article
article_id: ltvkgcwpum
user_id: mfr0nxh4be
category_id: c9j6jejsws
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Harness Community Edition Deployment Tutorial
slug: harness-community-edition-quickstart
description: Set up Harness CD Community Edition locally and create and deploy a CD
  Pipeline.
short_version: Set up Harness CD Community Edition locally and create and deploy a
  CD Pipeline.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-07-06T17:26:28.956971Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Harness Community Edition Deployment Tutorial
  description: Set up Harness CD Community Edition locally and create and deploy a
    CD Pipeline.
  short_version: Set up Harness CD Community Edition locally and create and deploy
    a CD Pipeline.
  body: '<p>This quickstart shows you how to set up Harness CD Community Edition locally
    and create a CD Pipeline that deploys a public NGINX image to a local cluster.</p><p>Harness
    CD Community Edition is a lightweight version of Harness that you can download
    and run on your laptop or any VM with 3GB RAM and 2 CPUs. Harness CD Community
    Edition is intended to get devs started with Harness quickly without having to
    sign up for a Harness SaaS account.</p><div class="note-callout">For an overview,
    see <a href="/article/yhyyq0v0y4-harness-community-edition-overview">Harness CD
    Community Edition Overview</a>.</div><h3>Objectives</h3><p>You&#39;ll learn how
    to:</p><ol><li>Install and run Harness CD Community Edition locally.</li><li>Create
    and deploy a CD Pipeline in Harness CD Community Edition using a public Docker
    image and a local Kubernetes cluster.</li></ol><h3>Requirements</h3><ul><li>Harness
    CD Community Edition:<ul><li>Docker Desktop minimum version 4.3.1 (72247)<ul><li>3GB
    RAM and 2 CPUs is the minimum.</li><li>Docker Compose (included in Docker Desktop).</li></ul></li><li>20GB
    of free disk space.</li></ul></li><li>Quickstart:<ul><li>GitHub account. You will
    use your GitHub account to pull a publicly available manifest (<code>https://github.com/kubernetes/website/blob/main/content/en/examples/application/nginx-app.yaml</code>).</li><li>Docker
    Compose Kubernetes is installed and running in Docker Desktop (a new installation
    of Docker Desktop might need to have Kubernetes enabled in its <strong>Settings</strong>).<br/>Docker
    Compose Kubernetes should have at least 2GB memory and 1 CPU. That will bring
    the total Docker Desktop resources up to a <u>minimum</u> of <strong>5GB and 3
    CPUs</strong>.</li></ul><div class="note-callout">If you want to use Minikube
    instead of Docker Desktop Kubernetes, use Minikube minimum version v1.22.0 or
    later installed locally. Minikube needs 4GB and 4 CPUs:<code>minikube start --memory
    4g --cpus 4</code></div><ul><li>Kubernetes cluster. This is the target cluster
    for the deployment you will set up in this quickstart. When Docker Compose Kubernetes
    is installed it comes with a cluster and the <strong>default</strong> namespace.
    You don&#39;t need to make any changes to Docker Compose Kubernetes.<div class="note-callout">Don&#39;t
    have a cluster? See <a href="#notes">Notes</a>.</div></li><li>Review <a href="/article/yhyyq0v0y4-harness-community-edition-overview">Harness
    CD Community Edition Overview</a> and <a href="https://docs.harness.io/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a> to establish a general understanding of Harness.</li></ul></li></ul><div
    class="tip-callout">The Docker Compose installer is described below, but Harness
    also supports a <a href="https://github.com/harness/harness-cd-community/blob/main/helm/README.md"
    target="_blank">Helm installer</a>.</div><details><summary>Completely New to Continuous
    Delivery (CD)?</summary><div><p>Simply put, CD is the automation of a software
    release process. In Harness, you model this process as a Pipeline.</p><p><strong>What
    do I need for a CD Pipeline?</strong></p><ol><li>An artifact to deploy: an artifact
    is the application or microservice you are deploying. It can be a Docker image,
    a zip file, etc.</li><li>A deployment method: this is whatever specification or
    manifest is needed by the deployment platform you are using, such as a Kubernetes
    manifest.</li><li>A place to deploy it: this is your target environment, such
    as a Kubernetes cluster.</li></ol><p>Harness takes care of the rest.</p></div></details><h3>Architecture
    Summary</h3><p>Harness CD Community Edition has two main components:</p><ul><li><strong>Harness
    Manager:</strong> the Harness Manager is where your CD configurations are stored
    and your pipelines are managed. After you install Harness, you sign up in the
    Manager at <a href="http://localhost/#/signup">http://localhost/#/signup</a>.
    Pipelines are triggered manually in the Harness Manager or automatically in response
    to Git events, schedules, new artifacts, and so on.</li><li><strong>Harness Delegate:</strong> the
    Harness Delegate is a software service you install in your environment that connects
    to the Harness Manager and performs tasks using your container orchestration platforms,
    artifact repositories, etc. You can install a Delegate inline when setting up
    connections to your resources or separately as needed. This guide will walk you
    through setting up a Harness Delegate inline.</li></ul><h3>Step 1: Installation</h3><div
    class="note-callout">Installation and deployment should take about 10 minutes.</div><div
    class="tip-callout">The Docker Compose installer is described below, but Harness
    also supports a <a href="https://github.com/harness/harness-cd-community/blob/main/helm/README.md"
    target="_blank">Helm installer</a>.</div><p>Make sure your system meets the <strong>Requirements</strong> above.</p><p>Ensure
    Docker Desktop is running and Docker Desktop Kubernetes is running with it.</p><p>Clone
    the Harness Git repo into your local directory:</p><pre>git clone https://github.com/harness/harness-cd-community</pre><p></p><p>The
    output will look something like this:</p><pre>Cloning into &#39;harness-cd-community&#39;...<br/>remote:
    Enumerating objects: 793, done.<br/>remote: Counting objects: 100% (793/793),
    done.<br/>remote: Compressing objects: 100% (371/371), done.<br/>remote: Total
    793 (delta 497), reused 592 (delta 339), pack-reused 0<br/>Receiving objects:
    100% (793/793), 116.39 KiB | 2.42 MiB/s, done.<br/>Resolving deltas: 100% (497/497),
    done.</pre><p></p><p>Change directory to the <strong>harness</strong> folder:</p><pre>cd
    harness-cd-community/docker-compose/harness</pre><p></p><p>Build and run Harness
    using Docker Compose:</p><pre>docker-compose up -d</pre><p></p><div class="tip-callout">Do
    not try to bring up containers one by one. Harness CD Community Edition is a distributed
    system with dependencies. The only way to bring it up is using <code>docker-compose
    up -d</code>.</div><div class="note-callout">The first download can take 3–12
    mins (downloading images and starting all containers) depending on the speed of
    your Internet connection. You won&#39;t be able to sign up until all the required
    containers are up and running.</div><p>The output will look something like this:</p><pre>[+]
    Running 13/13<br/> ⠿ Network harness_harness-network       Created                                                                                                                                                  0.1s<br/>
    ⠿ Container harness_log-service_1       Started                                                                                                                                                  2.9s<br/>
    ⠿ Container harness_redis_1             Started                                                                                                                                                  2.7s<br/>...</pre><p></p><p>Run
    the following command to ensure all services are running:</p><pre>docker-compose
    ps</pre><p></p><p>All services should show <code>running (healthy)</code>. If
    any show <code>running (starting)</code>, wait a minute, and run <code>docker-compose
    ps</code> again until they are all <code>running (healthy)</code>.</p><p>Run the
    following command to start the Harness Manager (it will wait until all services
    are healthy):</p><pre>docker-compose run --rm proxy wait-for-it.sh ng-manager:7090
    -t 180</pre><p></p><p>The output will look like this:</p><pre>[+] Running 6/0<br/>
    ⠿ Container harness_platform-service_1  Running                                                                                                                                                  0.0s<br/>
    ⠿ Container harness_pipeline-service_1  Running                                                                                                                                                  0.0s<br/>
    ⠿ Container harness_manager_1           Running                                                                                                                                                  0.0s<br/>
    ⠿ Container harness_delegate-proxy_1    Running                                                                                                                                                  0.0s<br/>
    ⠿ Container harness_ng-manager_1        Running                                                                                                                                                  0.0s<br/>
    ⠿ Container harness_ng-ui_1             Running                                                                                                                                                  0.0s<br/>wait-for-it.sh:
    waiting 180 seconds for ng-manager:7090<br/>wait-for-it.sh: ng-manager:7090 is
    available after 0 seconds</pre><p></p><p>Wait until you see that <code>ng-manager</code>
    is available:</p><pre>wait-for-it.sh: ng-manager:7090 is available after 0 seconds</pre><p></p><p>In
    your browser, go to the URL <a href="http://localhost/#/signup" target="_blank">http://localhost/#/signup</a>.</p><div
    class="note-callout">If you see a 403 error, that just means the Harness Manager
    service isn&#39;t up and running yet. Make sure you ran the wait-for-it.sh script
    earlier and wait a few minutes: <code>docker-compose run --rm proxy wait-for-it.sh
    ng-manager:7090 -t 180</code>.</div><p>Enter an email address and password and
    click <strong>Sign up</strong>.</p><p>You&#39;ll see the CD page:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641424613930/clean-shot-2022-01-05-at-15-15-59-2-x.png"/></figure><p>You&#39;re
    now using Harness!</p><p>The next section walks you through setting up and running
    a simple CD Pipeline using a public manifest and Docker image.</p><h3>Step 2:
    Create Pipeline</h3><p>We&#39;ll create a quick CD Pipeline that deploys a public
    manifest and image to a local Kubernetes cluster. The following steps are similar
    to the <a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes CD Quickstart</a>.</p><p>In
    Harness, click <strong>Create Project</strong>.</p><p>In <strong>About the Project</strong>,
    in <strong>Name</strong>, enter <strong>Quickstart</strong>, and then click <strong>Save
    and Continue</strong>.</p><p>In <strong>Invite Collaborators</strong>, click <strong>Save
    and Continue</strong>. Your new project appears. Let&#39;s add a CD Pipeline.</p><p>In
    <strong>Setup Pipeline</strong>, enter the name <strong>quickstart</strong>, and
    then click <strong>Start</strong>. Your new Pipeline is started!</p><p>Now let&#39;s
    jumpstart your Pipeline setup by pasting in the YAML for a Pipeline. Once it&#39;s
    pasted in, we&#39;ll update a few placeholders and then deploy.</p><p>Copy the
    following YAML:</p><pre>pipeline:<br/>    name: quickstart<br/>    identifier:
    quickstart<br/>    projectIdentifier: Quickstart<br/>    orgIdentifier: default<br/>    tags:
    {}<br/>    stages:<br/>        - stage:<br/>              name: demo<br/>              identifier:
    demo<br/>              description: &#34;&#34;<br/>              type: Deployment<br/>              spec:<br/>                  serviceConfig:<br/>                      serviceRef:
    &lt;+input&gt;<br/>                      serviceDefinition:<br/>                          type:
    Kubernetes<br/>                          spec:<br/>                              variables:
    []<br/>                              manifests:<br/>                                  -
    manifest:<br/>                                        identifier: nginx<br/>                                        type:
    K8sManifest<br/>                                        spec:<br/>                                            store:<br/>                                                type:
    Github<br/>                                                spec:<br/>                                                    connectorRef:
    &lt;+input&gt;<br/>                                                    gitFetchType:
    Branch<br/>                                                    paths:<br/>                                                        -
    content/en/examples/application/nginx-app.yaml<br/>                                                    repoName:
    &lt;+input&gt;<br/>                                                    branch:
    main<br/>                                            skipResourceVersioning: false<br/>                  infrastructure:<br/>                      environmentRef:
    &lt;+input&gt;<br/>                      infrastructureDefinition:<br/>                          type:
    KubernetesDirect<br/>                          spec:<br/>                              connectorRef:
    &lt;+input&gt;<br/>                              namespace: &lt;+input&gt;<br/>                              releaseName:
    release-&lt;+INFRA_KEY&gt;<br/>                      allowSimultaneousDeployments:
    false<br/>                  execution:<br/>                      steps:<br/>                          -
    step:<br/>                                type: K8sRollingDeploy<br/>                                name:
    Rollout Deployment<br/>                                identifier: Rollout_Deployment<br/>                                spec:<br/>                                    skipDryRun:
    false<br/>                                timeout: 10m<br/>                      rollbackSteps:
    []<br/>                  serviceDependencies: []<br/>              tags: {}<br/>              failureStrategies:<br/>                  -
    onFailure:<br/>                        errors:<br/>                            -
    AllErrors<br/>                        action:<br/>                            type:
    StageRollback</pre><p></p><p>In the Pipeline Studio, click <strong>YAML</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641247166665/clean-shot-2022-01-03-at-13-57-45.png"/></figure><p>Click
    <strong>Edit YAML</strong>.</p><p>Replace all of the YAML with the YAML you copied
    above.</p><p>Click <strong>Save</strong>.</p><p>Click <strong>Visual</strong>.
    The new Pipeline is created.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641247411462/clean-shot-2022-01-03-at-14-03-19.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><details><summary>Let&#39;s
    quickly review some key Pipeline concepts:</summary><div><ul><li><strong>Harness
    Delegate:</strong> the Harness Delegate is a software service you install in your
    environment that connects to the Harness Manager and performs tasks using your
    container orchestration platforms, artifact repositories, monitoring systems,
    etc.</li><li><strong>Pipelines:</strong> A CD Pipeline is a series of Stages where
    each Stage deploys a Service to an Environment.</li><li><strong>Stages:</strong>
    A CD Stage is a subset of a Pipeline that contains the logic to perform one major
    segment of the deployment process.</li><li><strong>Services:</strong> A Service
    represents your microservices and other workloads logically. A Service is a logical
    entity to be deployed, monitored, or changed independently.</li><li><strong>Service
    Definition:</strong> Service Definitions represent the real artifacts, manifests,
    and variables of a Service. They are the actual files and variable values.</li><li><strong>Environments:</strong>
    Environments represent your deployment targets logically (QA, Prod, etc).</li><li><strong>Infrastructure
    Definition:</strong> Infrastructure Definitions represent an Environment&#39;s
    infrastructure physically. They are the actual target clusters, hosts, etc.</li><li><strong>Execution
    Steps:</strong> Execution steps perform the CD operations like applying a manifest,
    asking for approval, rollback, and so on. Harness automatically adds the steps
    you need for the deployment strategy you select. You can then add additional steps
    to perform many other operations.</li><li><strong>Connectors:</strong> Connectors
    contain the information necessary to integrate and work with 3rd party tools such
    as Git providers and artifact repos. Harness uses Connectors at Pipeline runtime
    to authenticate and perform operations with a 3rd party tool.</li></ul></div></details><p></p><p>You&#39;ll
    notice a Runtime Input expression <code>&lt;+input&gt;</code> for most of the
    settings. These are placeholders we&#39;ll replace when we run the Pipeline.</p><p>Click
    <strong>Run</strong>. The <strong>Run Pipeline</strong> settings appear.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641247607216/clean-shot-2022-01-03-at-14-06-38.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Now
    let&#39;s update the placeholders.</p><p></p><p></p><table><tbody><tr><td><p><strong>Placeholder</strong></p></td><td><p><strong>Steps</strong></p></td></tr><tr><td><p><strong>Specify
    Service</strong></p></td><td><p>Click <strong>New Service</strong>.</p><p>In <strong>Name</strong>,
    enter <strong>nginx</strong>.</p><p>Click <strong>Save</strong>.</p></td></tr><tr><td><p><strong>Manifests</strong></p></td><td><p>Here
    you&#39;ll add a Connector to Github using your personal GitHub credentials.</p><p>Credentials
    are encrypted and stored locally in the MongoDB service installed as part of Harness
    CE.</p><p>You&#39;ll also install a Harness Kubernetes Delegate in your local
    Kubernetes cluster. This Delegate will perform all operations at runtime.</p></td></tr><tr><td><p><strong>Connector</strong></p></td><td><p>Click
    the <strong>Connector</strong> dropdown menu.</p><p>Click <strong>New Connector</strong>.</p><p>In
    <strong>Name</strong>, enter <strong>GitHub</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>URL Type</strong>, select <strong>Repository</strong>.</p><p>In <strong>Connection
    Type</strong>, select <strong>HTTP</strong>.</p><p>In <strong>GitHub Repository
    URL</strong>, enter <code>https://github.com/kubernetes/website</code>.</p><p>Click
    <strong>Continue</strong>.</p><p>In <strong>Username</strong>, enter your GitHub
    account username.</p><p>In <strong>Personal Access Token</strong>, click <strong>Create
    or Select a Secret</strong>.</p><p>Click <strong>New Secret Text</strong>.</p><p>In
    <strong>Secret Name</strong>, enter the name <strong>github-pat</strong>.</p><p>In
    <strong>Secret Value</strong>, paste in a GitHub Personal access token.</p><p>When
    you&#39;re logged into GitHub, these are typically listed at <a href="https://github.com/settings/tokens"
    target="_blank">https://github.com/settings/tokens</a>. For steps on setting up
    a GitHub PAT, see <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
    target="_blank">Creating a personal access token</a> from GitHub.</p><p>Ensure
    you PAT has the <strong>repo</strong> scope selected:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641249477112/image.png"/></figure><p>Click
    <strong>Save</strong>, and then click <strong>Continue</strong>.</p><p>In <strong>Connect
    to the provider</strong>, click <strong>Connect through a Harness Delegate</strong>,
    and then <strong>Continue</strong>.</p><p>In <strong>Delegates Setup</strong>,
    click <strong>Install a New Delegate</strong>.</p><p>Click <strong>Kubernetes</strong>,
    and then click <strong>Continue</strong>.</p><p>Enter a name <strong>quickstart</strong>
    for the Delegate, click the <strong>Laptop</strong> size, and then click <strong>Continue</strong>.</p><p>Click
    <strong>Download YAML file</strong>.</p><p>The YAML file for the Kubernetes Delegate
    will download to your computer.</p><p>Open a terminal and navigate to where the
    Delegate file is located.</p><div class="note-callout">If you&#39;re using a remote
    Kubernetes cluster, see <a href="#notes">Notes</a>.</div><p>In the terminal, run
    this command:</p><pre>kubectl apply -f harness-delegate.yaml</pre><p></p><p>This
    installs the Delegate into the default cluster that comes with Docker Desktop
    Kubernetes. It can take a few minutes for the Delegate pod to run.</p><p>Run <code>kubectl
    get pods -n harness-delegate-ng</code> to verify that it is <strong>Ready: 1/1</strong>
    and <strong>Status: Running</strong>.</p><p>Back in Harness, click <strong>Continue</strong>.</p><p>Once
    the Delegate registers, click <strong>Done</strong>.</p><p>In <strong>Delegates
    Setup</strong>, click <strong>Connect only via Delegates which has all of the
    following tags</strong>, and then select the tag for your new Delegate (<strong>quickstart</strong>).</p><p>Click
    <strong>Save and Continue</strong>.</p><p>The <strong>Connection Test</strong>
    should prove successful. If not, review your credentials.</p><p>Click <strong>Finish</strong>.</p></td></tr><tr><td><p><strong>Repository
    Name</strong></p></td><td><p>Enter <code>https://github.com/kubernetes/website</code>.</p></td></tr><tr><td><p><strong>Infrastructure</strong></p></td><td><p>Here
    you&#39;ll create a connection to the target cluster for this CD stage.</p></td></tr><tr><td><p><strong>Specify
    Environment</strong></p></td><td><p>Click <strong>New Environment</strong>.</p><p>In
    <strong>Name</strong>, enter <strong>quickstart</strong>, select <strong>Non-Production</strong>,
    and click <strong>Save</strong>.</p></td></tr><tr><td><p><strong>Connector</strong></p></td><td><p>Click
    the <strong>Connector</strong> dropdown menu, and then click <strong>New Connector</strong>.</p><p>In
    <strong>Name</strong>, enter <strong>localK8s</strong>, and then click <strong>Continue</strong>.</p><p>In
    <strong>Details</strong>, click <strong>Use the credentials of a specific Harness
    Delegate</strong>, and then click <strong>Continue</strong>.</p><div class="note-callout">If
    you are running a local Delegate but using a target cluster that does not have
    a Delegate installed in it, select <strong>Specify master URL and credentials</strong>,
    and then see <a href="#notes" target="_blank">Notes</a>.</div><p>In <strong>Delegates
    Setup</strong>, select <strong>Connect only via Delegates which has all of the
    following tags</strong>, and then enter and select <strong>quickstart</strong>.
    The Delegate you added earlier is selected.</p><p>Click <strong>Save and Continue</strong>.</p><p>In
    <strong>Connection Test</strong>, click <strong>Finish</strong>.</p></td></tr><tr><td><p><strong>Namespace</strong></p></td><td><p>Enter
    <strong>default</strong>.</p><p>If you are using a different namespace, such as
    a namespace given to you by someone in your company, enter that namespace instead.</p></td></tr></tbody></table><p></p><p>Now
    that the placeholders are configured, you can deploy the Pipeline.</p><p>If you
    want to save these settings, you can click <strong>Save as Input Set</strong>.
    Then you can use them whenever you run this Pipeline.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641600116675/clean-shot-2022-01-07-at-16-01-05.png"/></figure><h3>Step
    3: Deploy</h3><p>In <strong>Run Pipeline</strong>, click <strong>Run Pipeline</strong>.</p><p>You
    can see the Pipeline fetch the manifest and deploy the NGINX artifact to your
    local cluster.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641600282269/clean-shot-2022-01-07-at-16-03-47.png"/></figure><p>Click
    <strong>Console View</strong> to see more of the logs and watch the deployment
    in realtime.</p><p>In the <strong>Rollout Deployment</strong> step, in Wait for
    Steady State, you&#39;ll see that NGINX was deployed successfully:</p><pre class="hljs
    bash">Status : my-nginx   deployment &#34;my-nginx&#34; successfully rolled out</pre><p></p><p>Congratulations!
    You have a successful local deployment using Harness CD Community Edition!</p><p>Now
    you can use Harness to deploy remotely. Simply follow the same steps but use a
    remote target cluster.</p><h3>Clean Up</h3><p>To clean up your environment, do
    the following.</p><p>To delete the Delegate, run the following:</p><pre>kubectl
    delete statefulset -n harness-delegate-ng quickstart</pre><p></p><p>To remove
    Harness CD Community Edition, run the following:</p><pre>docker-compose down -v</pre><p></p><p>To
    remove the Harness images, use <code>docker rmi</code> to removes images by their
    ID.</p><p>To remove the image, you first need to list all the images to get the
    Image IDs, Image name and other details. Run <code>docker images -a</code> or
    <code>docker images</code>.</p><p>Note the images you want to remove, and then
    run</p><pre>docker rmi &lt;image-id&gt; &lt;image-id&gt; ...</pre><p></p><p>To
    remove all images at once, run:</p><pre>docker rmi $(docker images -q)</pre><h3>Community
    and Support</h3><p>Use the following resources to ask questions, find answers,
    and give feedback:</p><ul><li>Community Forum. Use the <a href="https://community.harness.io/"
    target="_blank">Harness Community Forum</a> to ask questions and get answers from
    Harness experts.</li><li>Community on Slack. Join <a href="https://join.slack.com/t/harnesscommunity/shared_invite/zt-y4hdqh7p-RVuEQyIl5Hcx4Ck8VCvzBw"
    target="_blank">here</a>.</li></ul><h3>Upgrades</h3><p>We are updating builds
    on a daily basis to fix issues and add features. To upgrade your setup, do the
    following:</p><ol><li>Navigate to the <strong>harness-cd-community</strong> folder
    in your terminal.</li><li>Run <code>git pull</code> in a terminal in the <strong>harness-cd-community</strong>
    folder.</li><li>Run <code>docker-compose down</code> in the <strong>harness-cd-community/docker-compose/harness</strong>
    folder.</li><li>Run <code>docker-compose up -d</code> in the <strong>harness-cd-community/docker-compose/harness</strong>
    folder.</li></ol><p></p><h3>Next Steps</h3><p>In this tutorial, you learned how
    to:</p><ol><li>Install and run Harness CD Community Edition locally.</li><li>Create
    and deploy CD Pipeline in Harness CD Community Edition using a public Docker image
    and a local Kubernetes cluster.</li></ol><p>Try some other tutorials to learn
    more about Harness CD:</p><ul><li><a href="/article/knunou9j30-kubernetes-cd-quickstart">Kubernetes
    CD Quickstart</a></li><li><a href="/article/cifa2yb19a-helm-cd-quickstart">Helm
    Chart CD Quickstart</a></li><li><a href="/article/uiqe6jz9o1-kustomize-quickstart">Kustomize
    Quickstart</a></li><li><a href="/article/1eishcolt3-harness-yaml-quickstart">Harness
    YAML Quickstart</a></li></ul><h3>Notes</h3><p>The following notes will help you
    if your set up is different from the general steps in this quickstart.</p><h4>Harness
    Docker Delegate and the M1 Processor</h4><p>This quickstart uses the Harness Kubernetes
    Delegate. If you decide to use the Harness <u>Docker</u> Delegate and your laptop
    uses an M1 processor, edit the Docker Delegate YAML <code>cpus</code> to use <code>1</code>
    before installation:</p><pre>version: &#34;3.7&#34;<br/>services:<br/>  harness-ng-delegate:<br/>    restart:
    unless-stopped<br/>    deploy:<br/>      resources:<br/>        limits:<br/>          cpus:
    &#34;1&#34;<br/>          memory: 2048M<br/>...</pre><p></p><p>This is a temporary
    change. In the next release of Harness CD Community Edition, the Docker Delegate
    YAML will use <code>cpus: &#34;1&#34;</code> by default.</p><h4>What if I don&#39;t
    have my own Kubernetes cluster?</h4><p>You have a few Kubernetes cluster options.</p><h5>Docker
    Compose Kubernetes</h5><p>When Docker Compose Kubernetes is installed it comes
    with a cluster and the <strong>default</strong> namespace. You don&#39;t need
    to make any changes to Docker Compose Kubernetes. This is recommended.</p><h5>Free-tier
    account Kubernetes cluster on AWS, GCP, Azure</h5><p>The popular cloud providers
    offer free-tier accounts that include their Kubernetes services. You can create
    a cluster in these accounts.</p><h5>Use one of your company&#39;s Kubernetes clusters</h5><p>If
    your company uses Kubernetes, they likely have dev or QA accounts on a cloud platform.
    If you have access to those environments, you can add a cluster there.</p><p>If
    you don&#39;t have access, you can request access to a namespace in an existing
    cluster. Just ask for access to a namespace and a service account with permission
    to create entities in the target namespace.</p><p>The YAML provided for the Harness
    Delegate defaults to the <code>cluster-admin</code> role because that ensures
    anything could be applied. If you can&#39;t use <code>cluster-admin</code> because
    you are using a cluster in your company, you&#39;ll need to edit the Delegate
    YAML.</p><p>The set of permissions should include <code>list</code>, <code>get</code>, <code>create</code>, <code>watch</code> (to
    fetch the pod events), and <code>delete</code> permissions for each of the entity
    types Harness uses.</p><p>If you don’t want to use <code>resources: [“*”]</code> for
    the Role, you can list out the resources you want to grant. Harness needs <code>configMap</code>, <code>secret</code>, <code>event</code>, <code>deployment</code>,
    and <code>pod</code> at a minimum for deployments, as stated above.</p><h4>What
    if I have a local cluster for the Delegate but want to deploy to a remote cluster?</h4><p>If
    you can&#39;t use a local or remote cluster for both the Harness Delegate and
    the deployment, you&#39;ll be fine.</p><p>Install the Delegate locally and then
    when you set up the Harness Kubernetes Cluster Connector, select <strong>Specify
    master URL and credentials</strong> and use the target cluster master URL and
    a Kubernetes service account token from the target cluster to connect.</p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1648679882751/clean-shot-2022-03-30-at-15-37-03-2-x.png"/></figure><p>You
    can get the master URL by connecting to the cluster and running <code>kubectl
    cluster-info</code>.</p><p>To use a Kubernetes Service Account (SA) and token,
    you will need to either use an <u>existing</u> SA that has the <code>cluster-admin</code> permission
    (or namespace-level admin permissions) or create a new SA and grant it the <code>cluster-admin</code> permission
    (or namespace-level admin permissions).</p><p>For example, here&#39;s a manifest
    that creates a new SA named <code>harness-service-account</code> in the <code>harness</code> namespace.</p><pre
    class="hljs properties"># harness-service-account.yml<br/>apiVersion: v1<br/>kind:
    ServiceAccount<br/>metadata:<br/>  name: harness-service-account<br/>  namespace:
    harness</pre><p>Next, you apply the SA.</p><pre class="hljs nginx">kubectl apply
    -f harness-service-account.yml</pre><p>Next, grant the SA the <code>cluster-admin</code> permission.</p><pre
    class="hljs yaml"># harness-clusterrolebinding.yml<br/>apiVersion: rbac.authorization.k8s.io/v1beta1<br/>kind:
    ClusterRoleBinding<br/>metadata:<br/>  name: harness-admin<br/>roleRef:<br/>  apiGroup:
    rbac.authorization.k8s.io<br/>  kind: ClusterRole<br/>  name: cluster-admin<br/>subjects:<br/>-
    kind: ServiceAccount<br/>  name: harness-service-account<br/>  namespace: harness</pre><p>Next,
    apply the ClusterRoleBinding.</p><pre class="hljs nginx">kubectl apply -f harness-clusterrolebinding.yml</pre><p>Once
    you have the SA added, you can gets its token using the following commands.</p><pre
    class="hljs bash">SERVICE_ACCOUNT_NAME={SA name}<br/><br/>NAMESPACE={target namespace}<br/><br/>SECRET_NAME=$(kubectl
    get sa &#34;${SERVICE_ACCOUNT_NAME}&#34; --namespace &#34;${NAMESPACE}&#34; -o=jsonpath=&#39;{.secrets[].name}&#39;)<br/><br/>TOKEN=$(kubectl
    get secret &#34;${SECRET_NAME}&#34; --namespace &#34;${NAMESPACE}&#34; -o=jsonpath=&#39;{.data.token}&#39;
    | base64 -d)<br/><br/>echo $TOKEN</pre><p></p><p>The <code>| base64 -d</code> piping
    decodes the token. You can now enter it into the Harness Kubernetes Cluster Connector
    <strong>Service Account Token</strong> using a Harness secret.</p><h4> How do
    I connect to a remote Kubernetes cluster?</h4><p>If you are using a remote Kubernetes
    cluster, you must log into it before you can install the Harness Kubernetes Delegate
    and deploy to that cluster.</p><p>How you connect to the remote cluster depends
    on the provider. Typically, you will need to install the provider&#39;s CLI locally
    and then use the CLI to connect to the cluster and run the kubectl command to
    install the Harness Delegate. See the following:</p><h5>Azure AKS</h5><p>See the
    Azure doc <a href="https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough"
    target="_blank">Quickstart: Deploy an Azure Kubernetes Service cluster using the
    Azure CLI</a> for a good overview.</p><p>The commands will look something like
    this.</p><p>Install the Azure CLI</p><pre>az aks install-cli</pre><p></p><p>Set
    the Azure subscription to use.</p><pre>az account set --subscription [subscription-id]</pre><p></p><p>Connect
    to the cluster:</p><pre>az aks get-credentials --resource-group [resource-group-name]
    --name [cluster-name]</pre><p></p><p>Test the connection:</p><pre>kubectl get
    nodes</pre><p></p><p>Next, you simply run the command to install the Delegate:</p><pre>kubectl
    apply -f harness-delegate.yaml</pre><h5>AWS EKS</h5><p>See the AWS doc <a href="https://docs.aws.amazon.com/eks/latest/userguide/connecting-cluster.html"
    target="_blank">Connecting a cluster</a> for a good overview.</p><p>Once you&#39;re
    connected, you simply run the command to install the Delegate:</p><pre>kubectl
    apply -f harness-delegate.yaml</pre><h5>GCP GKE</h5><p>See the GCP doc <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl"
    target="_blank">Install kubectl and configure cluster access</a> for a good overview.</p><p>Basically,
    you just need to install the gcloud CLI as described in <a href="https://cloud.google.com/sdk/docs/install"
    target="_blank">Installing the gcloud CLI</a> from GCP.</p><p>Once gcloud is installed
    you can connect to the remote cluster.</p><p>The command will look something like
    this.</p><pre>gcloud container clusters get-credentials [cluster-name] --zone
    [zone-name] --project [project-name]</pre><p></p><p>Once you&#39;re connected,
    you simply run the command to install the Delegate:</p><pre>kubectl apply -f harness-delegate.yaml</pre><p></p><p></p><p></p><p></p><p></p>'
  slug: harness-community-edition-quickstart
  tags: []
  is_live: true
