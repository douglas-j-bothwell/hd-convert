type: article
article_id: m7nkbph0ac
user_id: mfr0nxh4be
category_id: c9j6jejsws
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: Azure ACR to AKS Deployment Tutorial
slug: azure-cd-quickstart
description: Harness Azure ACR to AKS Quickstart.
short_version: Harness Azure ACR to AKS Quickstart.
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-29T19:11:22.108203Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Azure ACR to AKS Deployment Tutorial
  description: Harness Azure ACR to AKS Quickstart.
  short_version: Harness Azure ACR to AKS Quickstart.
  body: '<p>This quickstart deploys a Docker image in <u>your</u> Azure Container
    Registry (ACR) repo to <u>your</u> Azure Kubernetes Service (AKS) cluster. Once
    you&#39;ve completed this quickstart, you&#39;ll be able to easily set up Harness
    for your own Azure dev, qa, and production deployments.</p><h3>Objectives</h3><p>You&#39;ll
    learn how to:</p><ul><li>Set up an ACR to AKS Kubernetes Pipeline in Harness.</li><li>Install
    and launch a Harness Kubernetes Delegate in your target AKS cluster.</li><li>Connect
    Harness to your Azure account using a Harness Azure Connector.</li><li>Run the
    new Kubernetes Pipeline and deploy a Docker image to your target cluster.</li></ul><p></p><h3>Before
    You Begin</h3><div class="note-callout">Review <a href="https://docs.harness.io/article/4o7oqwih6h-harness-key-concepts">Harness
    Key Concepts</a> to establish a general understanding of Harness.</div><p>Make
    sure you have the following set up before you begin this quickstart:</p><ul><li><strong>GitHub
    account:</strong> this quickstart uses publicly available manifests and values
    YAML files, but GitHub requires that you use a GitHub account for fetching files.</li><li><strong>Azure
    ACR and AKS Permissions:</strong> make sure you have a Service Principal or Managed
    Identity you can use to connect Harness to your Azure App registration, and that
    it has the required permissions:<ul><li><strong>ACR:</strong> the <strong>Reader</strong>
    role must be assigned.</li><li><strong>AKS:</strong> the <strong>Owner</strong>
    role must be assigned.</li><li>For a custom role, see the permissions in <a href="/article/9epdx5m9ae-add-a-microsoft-azure-connector">Add
    a Microsoft Azure Cloud Connector</a>.</li></ul></li></ul><details><summary>AKS
    Cluster</summary><div><p>You&#39;ll need a target AKS cluster for the deployment.
    Ensure your cluster meets the following requirements:</p><ul><li><strong>Number
    of nodes:</strong> 2.</li><li><strong>vCPUs, Memory, Disk Size:</strong> 4vCPUs,
    16GB memory, 100GB disk. In AKS, the <strong>Standard DS2 v2</strong> machine
    type is enough for this quickstart.</li><li><strong>Networking:</strong> <u>outbound</u>
    HTTPS for the Harness connection to <strong>app.harness.io</strong>, <strong>github.com</strong>,
    and <strong>hub.docker.com</strong>. Allow TCP port 22 for SSH.</li></ul></div></details><p></p><h3>Step
    1: Create the Deploy Stage</h3><p>Pipelines are collections of stages. For this
    quickstart, we&#39;ll create a new Pipeline and add a single stage.</p><div class="note-callout"><strong>Create
    a Project for your new CD Pipeline:</strong> if you don&#39;t already have a Harness
    Project, create a Project for your new CD Pipeline. Ensure that you add the <strong>Continuous
    Delivery</strong> module to the Project. See <a href="https://ngdocs.harness.io/article/36fw2u92i4-create-an-organization">Create
    Organizations and Projects</a>.</div><p>In your Harness Project, click <strong>Deployments</strong>,
    and then click <strong>Create a</strong> <strong>Pipeline</strong>.</p><p>Enter
    the name <strong>Azure Quickstart</strong> and click <strong>Start</strong>.</p><p>Your
    Pipeline appears.</p><p>Do the following:</p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652902727729/clean-shot-2022-05-18-at-12-37-17.png"/></figure></td><td><p>Click
    <strong>Add Stage</strong> and select <strong>Deploy</strong>.</p><p>Enter the
    name <strong>Deploy Service</strong>, make sure <strong>Service</strong> is selected,
    and then click <strong>Set Up Stage</strong>.</p><p>The new stage settings appear.</p><p>In
    <strong>About the</strong> <strong>Service</strong>, click <strong>New Service</strong>.</p><p>Give
    the Service the name <strong>quickstart</strong> and click <strong>Save</strong>.</p></td></tr></tbody></table><p></p><div
    class="note-callout">Let&#39;s take a moment and review Harness Services and Service
    Definitions (which are explained below). Harness Services represent your microservices/apps
    logically. You can add the same Service to as many stages as you need. Service
    Definitions represent your artifacts, manifests, and variables physically. They
    are the actual files and variable values.<br/><br/>By separating Services and
    Service Definitions, you can propagate the same Service across stages while changing
    the artifacts, manifests, and variables with each stage.</div><p></p><p>Once you
    have created a Service, it is persistent and can be used throughout the stages
    of this or any other Pipeline in the Project.</p><h3>Step 2: Add the Manifest
    and Values YAML</h3><p>Next, we can add a Kubernetes manifest for our deployment.
    We&#39;ll use <a href="https://github.com/wings-software/harness-docs/tree/main/default-k8s-manifests/Manifests/Files"
    target="_blank">publicly-available manifests and a values file</a> available from
    Harness.</p><p>In <strong>Service Definition</strong>, in <strong>Deployment Type</strong>,
    click <strong>Kubernetes</strong>.</p><p>In <strong>Manifests</strong>, click
    <strong>Add Manifest</strong>.</p><p>Select <strong>K8s Manifest</strong>, and
    click <strong>Continue</strong>.</p><p>In <strong>Select K8sManifest Store</strong>,
    click <strong>GitHub</strong>, and then click <strong>New GitHub Connector</strong>.</p><p>The
    <strong>Git Connector</strong> settings appear. Enter the following settings.</p><p></p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652823939252/clean-shot-2022-05-17-at-14-45-32-2-x.png"/></figure></td><td><p><strong>Name:</strong>
    enter a name for the Connector, like <strong>Quickstart</strong>.</p><p><strong>URL
    Type:</strong> select <strong>Repository</strong>.</p><p><strong>Connection Type:</strong>
    select <strong>HTTP</strong>.</p><p><strong>Git Repository URL:</strong> enter
    <code>https://github.com/wings-software/harness-docs.git</code>.</p></td></tr><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1641331143037/clean-shot-2022-01-04-at-13-18-45.png"/></figure></td><td><p><strong>Username
    and Token:</strong></p><p>Enter the username and a Github Personal Access Token
    for your Github account. You&#39;ll have to create a Harness secret for the password.</p><p>In
    <strong>Personal Access Token</strong>, click <strong>Create or Select a Secret</strong>.</p><p>Click
    <strong>New Secret Text</strong>.</p><p>In <strong>Secret Name</strong>, enter
    a name for the secret like <strong>github-pat</strong>.</p><p>In <strong>Secret
    Value</strong>, paste in a GitHub Personal access token.</p><p>When you&#39;re
    logged into GitHub, these are typically listed at <a href="https://github.com/settings/tokens"
    target="_blank">https://github.com/settings/tokens</a>. For steps on setting up
    a GitHub PAT, see <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
    target="_blank">Creating a personal access token</a> from GitHub.</p><p>Ensure
    you PAT has the <strong>repo</strong> scope selected:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/ltvkgcwpum/1641249477112/image.png"/></figure></td></tr></tbody></table><p></p><p>Click
    <strong>Continue</strong>.</p><p>In <strong>Connect to the provider</strong>,
    select <strong>Connect through a Harness Delegate</strong>, and click <strong>Continue</strong>.</p><p>Now
    we&#39;ll add a Harness Delegate to your Environment.</p><div class="note-callout">The
    Harness Delegate is a software service you install in your environment that connects
    to the Harness Manager and performs tasks using your container orchestration platforms,
    artifact repositories, monitoring systems, etc.</div><p>In <strong>Delegates Setup</strong>,
    click <strong>Install new Delegate</strong>.</p><p>The Delegate wizard appears.</p><figure><a
    href="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1612826342571/image.png"><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1612826342571/image.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></a></figure><p>Click <strong>Kubernetes</strong>,
    and then click <strong>Continue</strong>.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1625011757330/clean-shot-2021-06-29-at-17-09-10.png"/></figure><p>Enter
    a name for the Delegate, like <strong>quickstart</strong>, click the <strong>Small</strong> size.</p><p>Click <strong>Continue</strong>.</p><p>Click <strong>Download
    YAML file</strong>. The YAML file for the Kubernetes Delegate will download to
    your computer.</p><p>Open a terminal and navigate to where the Delegate file is
    located.</p><p>You will connect to your cluster using the terminal so you can
    simply run the YAML file on the cluster.</p><p>In the same terminal, log into
    your Kubernetes cluster. In most platforms, you select the cluster, click <strong>Connect</strong>,
    and copy the access command.</p><p>Next, install the Harness Delegate using the <strong>harness-delegate.yaml</strong> file
    you just downloaded. In the terminal connected to your cluster, run this command:</p><pre
    class="hljs cs">kubectl apply -f harness-delegate.yml</pre><p></p><p>You can find
    this command in the Delegate wizard:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1625006899148/clean-shot-2021-06-29-at-15-48-13.png"/></figure><p>The
    successful output is something like this:</p><pre class="hljs cpp">% kubectl apply
    -f harness-delegate.yaml<br/>namespace/harness-delegate unchanged<br/>clusterrolebinding.rbac.authorization.k8s.io/harness-delegate-cluster-admin
    unchanged<br/>secret/k8s-quickstart-proxy unchanged<br/>statefulset.apps/k8s-quickstart-sngxpn
    created<br/>service/delegate-service unchanged</pre><p></p><p>In Harness, click
    <strong>Verify</strong>. It will take a few minutes to verify the Delegate. Once
    it is verified, close the wizard.</p><p>Back in <strong>Set Up Delegates</strong>,
    you can select the new Delegate.</p><p>In the list of Delegates, you can see your
    new Delegate and its tags.</p><p>Select the <strong>Connect using Delegates with
    the following Tags</strong> option.</p><p>Enter the tag of the new Delegate and
    click <strong>Save and Continue</strong>.</p><p>In <strong>Connection Test</strong>,
    you can see that the connection is successful. Click <strong>Finish</strong>.</p><p>Back
    in <strong>Specify K8s Manifest Store</strong>, click <strong>Continue</strong>.</p><p>In
    <strong>Manifest Details</strong>, enter the following settings, test the connection,
    and click <strong>Submit</strong>.</p><div class="note-callout">We are going to
    provide connection and path information for a manifest located at <code>https://github.com/wings-software/harness-docs/tree/main/default-k8s-manifests/Manifests/Files/templates</code>.</div><p></p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652824714309/clean-shot-2022-05-17-at-14-58-22-2-x.png"/></figure></td><td><p><strong>Manifest
    Identifier:</strong> enter <strong>manifests</strong>.</p><p><strong>Git Fetch
    Type</strong><strong>:</strong> select <strong>Latest from Branch</strong>.</p><p><strong>Branch:</strong>
    enter <strong>main</strong>.</p><p><strong>File/Folder path:</strong></p><p><code>default-k8s-manifests/Manifests/Files/templates</code></p><p>This
    is the path from the repo root.</p></td></tr></tbody></table><p></p><p>The manifest
    is now listed.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652824765393/clean-shot-2022-05-17-at-14-59-14-2-x.png"/></figure><p>Next,
    let&#39;s add the values.yaml file for the deployment.</p><div class="note-callout">Harness
    supports Go templating with a Values YAML file by default so you can template
    your manifests. Also, you can use <a href="/article/lml71vhsim-harness-variables">Harness
    expressions</a> in your values.yaml file. We will use a <a href="https://github.com/wings-software/harness-docs/blob/main/default-k8s-manifests/Manifests/Files/ng_values_dockercfg.yaml"
    target="_blank">values.yaml file</a> that uses the <code>&lt;+artifact.image&gt;</code>
    expression to reference the artifact you will add later in <strong>Artifacts</strong>.</div><details><summary>The
    values file looks like this:</summary><div><pre>name: harness-quickstart<br/>replicas:
    1<br/><br/>image: &lt;+artifact.image&gt;<br/>dockercfg: &lt;+artifact.imagePullSecret&gt;<br/><br/>createNamespace:
    true<br/>namespace: &lt;+infra.namespace&gt;<br/><br/># Service Type allow you
    to specify what kind of service you want.<br/># Possible values for ServiceType
    are:<br/># ClusterIP | NodePort | LoadBalancer | ExternalName<br/>serviceType:
    LoadBalancer<br/><br/># A Service can map an incoming port to any targetPort.<br/>#
    targetPort is where application is listening on inside the container.<br/>servicePort:
    80<br/>serviceTargetPort: 80<br/><br/># Specify all environment variables to be
    added to the container.<br/># The following two maps, config and secrets, are
    put into a ConfigMap<br/># and a Secret, respectively.<br/># Both are added to
    the container environment in podSpec as envFrom source.<br/>env:<br/>  config:<br/>    key1:
    value1<br/>  secrets:<br/>    key2: value2</pre></div></details><p></p><p>Click
    <strong>Add Manifest</strong>.</p><p>In <strong>Specify Manifest Type</strong>,
    select <strong>Values YAML</strong>, and click <strong>Continue</strong>.</p><p>In
    <strong>Specify Values YAML Store</strong>, select the same GitHub Connector you
    used for your manifests, and then click <strong>Continue</strong>.</p><p>In <strong>Manifest
    Details</strong>, enter the following and click <strong>Submit</strong>.</p><p></p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652825248991/clean-shot-2022-05-17-at-15-07-22-2-x.png"/></figure></td><td><p><strong>Manifest
    Identifier:</strong> <code>values</code>.</p><p><strong>Git Fetch Type:</strong>
    <code>Latest from Branch</code>.</p><p><strong>Branch:</strong> <code>main</code>.</p><p><strong>File
    Path:</strong> <code>default-k8s-manifests/Manifests/Files/ng_values_dockercfg.yaml</code></p></td></tr></tbody></table><p></p><p>The
    values file is listed.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652825632685/clean-shot-2022-05-17-at-15-13-45-2-x.png"/></figure><p>Next,
    let&#39;s add your artifact from ACR.</p><h3>Step 3: Add the Artifact</h3><p>Now
    you can add an artifact from your ACR repo. We&#39;ll create a Harness Azure Connector
    to connect Harness with your ACR repo.</p><p>In <strong>Artifacts</strong>, click <strong>Add
    Primary</strong> <strong>Artifact.</strong></p><p>In <strong>Artifact Repository
    Type</strong>, click <strong>ACR</strong>, and then click <strong>Continue</strong>.</p><p>In <strong>ACR
    Repository</strong>, click <strong>New Azure Connector</strong>.</p><p>Enter a
    name for the Connector, such as <strong>Azure Quickstart</strong>, and click <strong>Continue</strong>.</p><p>In
    <strong>Details</strong>, click <strong>Specify credentials here</strong>.</p><p>Enter
    the credentials for the Azure App registration you want to use. Here&#39;s an
    example of how App registration settings map to the Connector&#39;s <strong>Details</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652826880249/image.png"/></figure><p></p><p><strong>Azure
    ACR and AKS Permissions:</strong> make sure the Service Principal or Managed Identity
    has the <a href="https://ngdocs.harness.io/article/9epdx5m9ae-add-a-microsoft-azure-connector">required
    permissions</a>:</p><ul><li><strong>ACR:</strong> the <strong>Reader</strong>
    role must be assigned.</li><li><strong>AKS:</strong> the <strong>Owner</strong>
    role must be assigned.</li><li>For a custom role, see the permissions in <a href="/article/9epdx5m9ae-add-a-microsoft-azure-connector">Add
    a Microsoft Azure Cloud Connector</a>.</li></ul><p>Click <strong>Continue</strong>.</p><p>In
    <strong>Delegates Setup</strong>, click <strong>Only use Delegates with all of
    the following tags</strong>, and then select the Delegate you added earlier.</p><p>Click
    <strong>Save and Continue</strong>.</p><p>The Connection Test is performed. Once
    it&#39;s completed, you&#39;ll be back in <strong>ACR Repository</strong>. Click
    <strong>Continue</strong>.</p><p>In <strong>Artifact Details</strong>, select
    the Subscription Id where the artifact source is located.</p><p>In <strong>Registry</strong>,
    select the ACR registry to use.</p><p>In <strong>Repository</strong>, select the
    repo to use.</p><p>In <strong>Tag</strong>, enter or select the tag for the image.</p><p>Here&#39;s
    an example of how ACR settings map to <strong>Artifact Details</strong>:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652903063082/clean-shot-2022-05-18-at-12-44-03.png"/></figure><p>Click
    <strong>Submit</strong>. The Artifact is added to the Service Definition.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652827734308/clean-shot-2022-05-17-at-15-48-38-2-x.png"/></figure><p>Now
    that the artifact and manifest are defined, you can define the target cluster
    for your deployment.</p><p>Click <strong>Next</strong> at the bottom of the <strong>Service</strong>
    tab.</p><h3>Step 4: Define Your Target Cluster</h3><p>The target cluster is your
    own AKS cluster, hosted in your Azure cloud. This is where we will deploy your
    ACR image using the manifest you selected.</p><p>In <strong>Infrastructure Details</strong>,
    in <strong>Specify your environment</strong>, click <strong>New Environment</strong>.
    Just like with a Service, you can create a new Environment or selecting an existing
    one. We&#39;ll create a new one.</p><p>In <strong>New Environment</strong>, enter
    a name, select <strong>Pre-Production</strong>, and click <strong>Save</strong>.
    The new Environment appears.</p><p>In <strong>Infrastructure Definition</strong>,
    click <strong>Microsoft</strong> <strong>Azure</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652827866497/clean-shot-2022-05-17-at-15-50-53-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><div
    class="note-callout">Let&#39;s take a moment and review Harness Environments and
    Infrastructure Definitions. Harness Environments represent your deployment targets
    logically (QA, Prod, etc). You can add the same Environment to as many stages
    as you need. Infrastructure Definitions represent your target infrastructure physically.
    They are the actual clusters, hosts, etc.<br/><br/>By separating Environments
    and Infrastructure Definitions, you can use the same Environment in multiple stages
    while changing the target infrastructure settings with each stage.</div><p>An
    <strong>Infrastructure Definition</strong> is where you specify the target for
    your deployment. In this case, your Kubernetes cluster and namespace.</p><p>In
    <strong>Cluster details</strong>, enter the following.</p><p></p><table><tbody><tr><td><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652828108323/clean-shot-2022-05-17-at-15-54-49-2-x.png"/></figure></td><td><p>In
    <strong>Connector</strong>, click <strong>Select a connector</strong>.</p><p>Select
    the Azure Connector you added earlier, and then click <strong>Apply Selected</strong>.</p><p>In
    <strong>Subscription Id</strong>, select the Subscription where you AKS cluster
    is located.</p><p>In <strong>Resource Group</strong>, enter the resource group
    for your AKS cluster.</p><p>In <strong>Cluster</strong>, select the cluster name.</p><p>In
    <strong>Namespace</strong>, enter an existing namespace, such as <strong>default</strong>.</p></td></tr></tbody></table><p></p><p>Now
    that the Stage&#39;s Infrastructure is complete, you can select the <a href="/article/0zsf97lo3c-deployment-concepts">deployment
    strategy</a> for this stage of the Pipeline.</p><h3>Step 5: Add a Rollout Deployment
    Step</h3><p>Click <strong>Continue</strong>.</p><p>In <strong>Execution Strategies</strong>,
    select <strong>Rolling</strong>, and then click <strong>Use Strategy</strong>.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652828627506/clean-shot-2022-05-17-at-16-03-28-2-x.png"/></figure><p>The
    <strong>Rollout Deployment</strong> step is added.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/m7nkbph0ac/1652828670426/clean-shot-2022-05-17-at-16-04-21-2-x.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>This
    is a standard <a href="https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/"
    target="_blank">Kubernetes rolling update</a>. By default, Harness uses a <code>25%
    max unavailable, 25% max surge</code> strategy.</p><p>That&#39;s it. Now the Pipeline
    stage is complete and you can deploy.</p><h3>Step 6: Deploy and Review</h3><p>Click
    <strong>Save &gt; Save Pipeline</strong> and then <strong>Run</strong>.</p><p>Click
    <strong>Run Pipeline</strong>. Harness will verify the Pipeline and then run it.</p><p>You
    can see the status of the deployment, and pause or abort it.</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/knunou9j30/1613156994742/image.png"/></figure><div
    class="note-callout">Toggle <strong>Console View</strong> to watch the deployment
    with more detailed logging.</div><p>Click the <strong>Rollout Deployment</strong>
    step and expand <strong>Wait for Steady State</strong>.</p><p>You can see <code>deployment
    &#34;[name]&#34; successfully rolled out</code>.</p><p>Congratulations! The deployment
    was successful.</p><h3>Clean Up</h3><p>To delete the Harness Delegate from your
    Kubernetes cluster, you delete the StatefulSet for the Delegate. Once created,
    the StatefulSet ensures that the desired number of pods are running and available
    at all times. Deleting the pod without deleting the StatefulSet will result in
    the pod being recreated.</p><p>For example, if you have the Delegate pod name <code>quickstart-vutpmk-0</code>,
    you can delete the StatefulSet with the following command:</p><p><code>$ kubectl
    delete statefulset -n harness-delegate quickstart-vutpmk</code></p><p>Note that
    the <code>-0</code> suffix in the pod name is removed for the StatefulSet name.</p><h3>Next
    Steps</h3><p>See <a href="https://ngdocs.harness.io/category/qfj6m1k2c4">Kubernetes
    How-tos</a> for other deployment features.</p>'
  slug: azure-cd-quickstart
  tags: []
  is_live: true
