type: article
article_id: 6qt2v8g92m
user_id: vt9reb71i4
category_id: y1oewjcb0q
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: iOS SDK Reference
slug: ios-sdk-reference
description: This topic explains how to use the Continuous Features (CF) SDK in your
  iOS application.
short_version: This topic explains how to use the Continuous Features (CF) SDK in
  your iOS application.
tags:
- Continuous features
- SDK
- iOS SDK
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-17T15:31:12.590187Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: iOS SDK Reference
  description: This topic explains how to use the Continuous Features (CF) SDK in
    your iOS application.
  short_version: This topic explains how to use the Continuous Features (CF) SDK in
    your iOS application.
  body: "<p>This topic describes how to use the Harness Feature Flags iOS SDK for
    your iOS application. </p><p>For getting started quickly, you can use our <a href=\"https://github.com/harness/ff-ios-client-sdk/blob/main/README.md\"
    target=\"_blank\">sample code from the SDK README</a>. You can also <a href=\"https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository\">clone</a>
    and run a sample application from the <a href=\"https://github.com/harness/ff-ios-client-sdk\"
    target=\"_blank\">iOS SDK GitHub Repository.</a></p><div class=\"note-callout\">The
    SDK caches your Feature Flags. If the cache can&#39;t be accessed, the <code>defaultValue</code>
    is used.</div><h3>Before you begin</h3><p>Make sure you read and understand:</p><ul><li><a
    href=\"/article/7n9433hkc0-cf-feature-flag-overview\" target=\"_blank\">Feature
    Flags Overview</a></li><li><a href=\"/article/0a2u2ppp8s-getting-started-with-continuous-features\"
    target=\"_blank\">Getting Started with Feature Flags</a></li><li><a href=\"/article/rvqprvbq8f-client-side-and-server-side-sdks\"
    target=\"_blank\">Client-Side and Server-Side SDKs</a></li><li><a href=\"/article/7ikyqtmjce-communication-sdks-harness-feature-flags\"
    target=\"_blank\">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class=\"note-callout\">The current version of this SDK is <strong>1</strong><strong>.0.3.</strong></div><h3>Requirements</h3><ul><li><a
    href=\"https://github.com/harness/ff-ios-client-sdk\" target=\"_blank\">Download
    the SDK from our GitHub repository</a></li><li>Create an iOS application, or <a
    href=\"https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository\">clone</a>
    our <a href=\"https://github.com/harness/ff-ios-client-sdk\" target=\"_blank\">sample
    application</a>.</li><li><a href=\"/article/1j7pdkqh7j-create-a-feature-flag\"
    target=\"_blank\">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called <code>harnessappdemodarkmode</code>.</li><li><a
    href=\"/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key\" target=\"_blank\">Create
    an SDK key and make a copy of it</a>.</li></ul><h3>Install the SDK</h3><p>You
    can install the iOS SDK using the following dependency managers:</p><ul><li>Swift
    Package Manager (SPM)</li><li>CocoaPods</li><li>Carthage</li></ul><h4>Install
    using SwiftPM</h4><p>If you are using <a href=\"https://swift.org/package-manager/\"
    target=\"_blank\">Swift Package Manager</a>, you can add the SDK as a dependency
    in either an Xcode project or in a Package.swift file:</p><p><strong>Xcode</strong>:</p><p>Select
    <strong>File &gt; Swift Packages &gt; Add Package Dependency</strong> and enter
    the <a href=\"https://github.com/harness/ff-ios-client-sdk\" target=\"_blank\">iOS
    SDK repository clone URL</a>, then select your desired version constraints.</p><p><strong>Package.swift:</strong></p><p>Add
    <code>ff-ios-client-sdk</code> to the dependencies section of your <code>Package.swift</code>
    file, for example:</p><pre>dependencies: [<br/>      .package(url: &#34;https://github.com/drone/ff-ios-client-sdk.git&#34;,
    .upToNextMinor(from: &#34;1.0.3&#34;))<br/>]</pre><h4>Install using CocoaPods</h4><div
    class=\"note-callout\">CocoaPods is built with Ruby and can be installed with
    the default Ruby on macOS. You can use a Ruby Version manager, however, we recommend
    that you use the standard Ruby available on macOS.</div><p>To install the iOS
    using <a href=\"https://cocoapods.org//\" target=\"_blank\">CocoaPods</a>, complete
    the following steps:</p><ol><li>To install CocoaPods using the default Ruby available
    on macOS, use the <code>sudo</code> command when installing the gems, for example:<pre>$
    sudo gem install cocoapods</pre></li><li>Once Cocoapods is installed, create a <code>Podfile</code>
    in your root project folder:<pre>$ pod init</pre></li><li>Import the <code>ff-ios-client-sdk</code> to
    your <code>.xcproject</code>. To do this,  add <code>ff-ios-client-sdk</code>
    to your newly created Podfile, for example:<pre>platform :ios, &#39;10.0&#39;<br/>use_frameworks!<br/><br/>target
    &#39;MyApp&#39; do<br/>  pod &#39;ff-ios-client-sdk&#39;<br/>end<br/></pre>Then,
    save the changes.</li><li> Use the install command to install the packages:<pre>$
    pod install</pre><div class=\"warning-callout\">Make sure that you are using <code>.xcworkspace</code> 
    instead of your <code>.xcodeproj</code>  to utilize the imported Pods.</div></li></ol><h4>Install
    using Carthage</h4><p>To integrate your application using Carthage, complete the
    following step:</p><ol><li>Go to the root folder of your project and create a <code>Cartfile</code>.
    This where you put all the dependencies that you use with Carthage:<pre>$ touch
    Cartfile</pre></li><li>Add the following line to your <code>Cartfile</code>:<pre>github
    &#34;drone/ff-ios-client-sdk&#34;</pre></li><li>Fetch the source for <code>ff-ios-client-sdk</code> from
    the repository specified in the <code>Cartfile</code>:<pre>$ carthage update --no-build</pre>A
    new folder <code>Carthage</code> is created at the same location as <code>Cartfile</code> and
    <code>.xcodeproj</code>. In the <code>Carthage</code> folder, another folder called <code>Checkout</code>
    is created, this folder contains the source code.</li><li>Create a project for <code>ff-ios-client-sdk</code> dependency.<ol><li>Run
    the following command from your project&#39;s root folder:<pre>//From your project&#39;s
    root folder<br/>$ cd Carthage/Checkouts/ff-ios-client-sdk</pre></li><li>Then run
    the following command:<pre>$ swift package generate-xcodeproj</pre></li><li>Or,
    you can enter it all on the same line:<pre>//From your project&#39;s root folder<br/>$
    cd Carthage/Checkouts/ff-ios-client-sdk &amp;&amp; swift package generate-xcodeproj</pre></li></ol></li><li>Build
    the project and place it in the <code>Build</code> folder next to <code>Checkouts</code>.
    Run the following command from your project&#39;s root folder:<pre>$ carthage
    build --use-xcframeworks --platform iOS</pre></li><li>In your application targets’
    <strong>General</strong> tab, in the <strong>Frameworks</strong>, <strong>Libraries</strong>,
    and <strong>Embedded Content</strong>, drag and drop the <code>.xcframework</code> file
    from the <code>Carthage/Build</code> folder.</li><li>In <strong>Embed</strong>,
    select <strong>Embed &amp; Sign</strong>.</li><li>Import the <code>ff_ios_client_sdk</code>.</li><li>(Optional) When
    a new version of <code>ff-ios-client-sdk</code> is available and you want to update
    this dependency, run:<pre>$ carthage update --use-xcframeworks --platform iOS</pre></li></ol><h3>Import
    the SDK</h3><p>To import the SDK, use the following command:</p><pre>import ff_ios_client_sdk</pre><h3
    id=\"undefined\">Initialize the SDK</h3><p>To initialize the iOS SDK, you need
    to:</p><ol><li>Add your Client SDK key to connect to your Harness Environment.</li><li>Add
    a Target that you want to Evaluate against a Feature Flag.</li><li>(Optional)
    Configure the SDK options.</li><li>Complete the initialization with the SDK using
    the Client SDK Key, Target, and Configuration parameters you set.</li></ol><h4>Add
    your Client SDK Key</h4><p>To connect to the correct Environment that you set
    up on the Harness Platform, you need to add the Client SDK Key from that Environment.
    Input the Client SDK Key into the <code>apiKey</code> parameter.</p><h4>Add a
    Target</h4><div class=\"tip-callout\"><strong>What is a Target?</strong><br/>Targets
    are used to control which users see which Variation of a Feature Flag, for example,
    if you want to do internal testing, you can enable the Flag for some users and
    not others. When creating a Target, you give it a name and a unique identifier.
    Often Targets are users but you can create a Target from anything that can be
    uniquely identified, such as an app or a machine.<br/><br/>For more information
    about Targets, go to <a href=\"/article/xf3hmxbaji-targeting-users-with-flags\"
    target=\"_blank\">Targeting Users With Flags</a>.</div><p>To add a Target, build
    it using <code>CfTarget.builder</code> and pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p>identifier</p></td><td><p>ID
    of the Target.</p><p>Read <strong>Regex requirements for Target names and identifiers</strong>
    below for accepted characters.</p></td><td><p>Required</p></td><td><p><code>.identifier(&#34;HT_1&#34;)</code></p></td></tr></tbody></table><p></p><details><summary>Regex
    requirements for Target names and identifiers</summary><div><strong>Identifier<br/></strong>Regex:
    <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/><br/>The characters can be lowercase or uppercase but cannot
    include accented letters, for example <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex:
    <code>^[\\\\p{L}\\\\d .@_-]*$<br/></code><br/>Must consist of only alphabetical
    characters, numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>-
    (dash)<br/>_ (underscore)<br/> (space)<br/><br/>The characters can be lowercase
    or uppercase and can include accented letters, for example <code>Café_123</code>.</div></details><p></p><p>For
    example:</p><pre>let target = CfTarget.builder().setIdentifier(&#34;HT_1&#34;).build()</pre><h4>Configure
    the SDK</h4><p>You can configure the following features of the SDK:</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p>The URL used to
    fetch Feature Flag Evaluations. When using the Relay Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventUrl</p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>pollInterval</p></td><td><p>The
    interval <strong>in seconds</strong> that we poll for changes when you are using
    stream mode.</p></td><td><p><code>60</code> (seconds)</p></td></tr><tr><td><p>streamEnabled</p></td><td><p>Set
    to <code>true</code> to enable streaming mode.</p><p>Set to <code>false</code> to
    disable streaming mode.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>analyticsEnabled</p></td><td><p>Set
    to <code>true</code> to enable analytics.</p><p>Set to <code>false</code> to disable
    analytics.</p><p><strong>Note</strong>: When enabled, analytics data is posted
    every 60 seconds.</p></td><td><p><code>true</code></p></td></tr></tbody></table><p></p><p>Use <code>cfConfiguration.builder</code> to
    declare the configuration options you want to use, for example:</p><pre>let configuration
    = CfConfiguration.builder().setStreamEnabled(true).build()</pre><h4>Complete the
    initialization</h4><p>Complete the initialization using the <code>apiKey</code>,
    <code>configuration</code>, and <code>target</code> variables, for example:</p><pre>CfClient.sharedInstance.initialize(apiKey:
    &#34;YOUR_API_KEY&#34;, configuration: configuration, target: target)</pre><p></p><p>Additionally,
    you can also pass in a <code>cache:onCompletion</code> object that adopts the <code>StorageRepositoryProtocol</code>.
    This is optional, if you choose not to use it the internal built-in cache will
    be used instead.</p><h4>Sample of initializing the SDK</h4><p>initialize(apiKey:configuration:cache:onCompletion:)</p><pre>let
    configuration = CfConfiguration.builder().setStreamEnabled(true).build()<br/>let
    target = CfTarget.builder().setIdentifier(&#34;Harness_Target_1&#34;).build()<br/>CfClient.sharedInstance.initialize(apiKey:
    &#34;YOUR_API_KEY&#34;, configuration: configuration, target: target) { (result)
    in<br/>\tswitch result {<br/>\t\tcase .failure(let error):<br/>\t\t\t//Do something
    to gracefully handle initialization/authorization failure<br/>\t\tcase .success:<br/>\t\t\t//Continue
    to the next step after successful initialization/authorization  <br/>\t}<br/>}</pre><p></p><h3>Evaluate
    a Flag</h3><p>Evaluating a Flag is when the SDK processes all Flag rules and returns
    the correct Variation of that Flag for the Target you provide. </p><p>If a matching
    Flag can’t be found, or the SDK can’t remotely fetch flags, the default value
    is returned. </p><p>There are different methods for the different Variation types
    and for each method you need to pass in:</p><ul><li>Identifier of the Flag you
    want to evaluate</li><li>The default Variation</li></ul><div class=\"note-callout\">The
    Flag is evaluated against the Target you pass in when initializing the SDK.</div><h4>Evaluate
    a string Variation</h4><pre>CfClient.sharedInstance.stringVariation(&#34;your_evaluation_id&#34;,
    defaultValue: String?) { (evaluation) in<br/>\t//Make use of the fetched `String`
    Evaluation<br/>}</pre><p></p><h4>Evaluate a boolean Variation</h4><pre>CfClient.sharedInstance.boolVariation(&#34;your_evaluation_id&#34;,
    defaultValue: Bool?) { (evaluation) in<br/>\t//Make use of the fetched `Bool`
    Evaluation<br/>}</pre><p></p><h4>Evaluate a number Variation</h4><pre>CfClient.sharedInstance.numberVariation(&#34;your_evaluation_id&#34;,
    defaultValue: Int?) { (evaluation) in<br/>\t//Make use of the fetched `Int` Evaluation<br/>}</pre><p></p><h4>Evaluate
    a JSON Variation</h4><pre>CfClient.sharedInstance.jsonVariation(&#34;your_evaluation_id&#34;,
    defaultValue: [String:ValueType]?) { (evaluation) in<br/>\t//Make use of the fetched
    `[String:ValueType]` Evaluation<br/>}</pre><p></p><p><code>ValueType</code> can
    be one of the following:</p><ul><li>ValueType.bool(Bool)</li><li>ValueType.string(String)</li><li>ValueType.int(Int)</li><li>ValueType.object([String:ValueType])</li></ul><h3>Listen
    for events</h3><p>The following allows you to listen for the different events
    triggered by SDK and deal with them as needed, for example:</p><pre>CfClient.sharedInstance.registerEventsListener()
    { (result) in<br/>\tswitch result {<br/>\t\tcase .failure(let error):<br/>\t\t\t//Gracefully
    handle error<br/>\t\tcase .success(let eventType):<br/>\t\t\tswitch eventType
    {<br/>\t\t\t\tcase .onPolling(let evaluations):<br/>\t\t\t\t\t//Received all evaluation
    flags -&gt; [Evaluation]<br/>\t\t\t\tcase .onEventListener(let evaluation):<br/>\t\t\t\t\t//Received
    an evaluation flag -&gt; Evaluation<br/>\t\t\t\tcase .onComplete:<br/>\t\t\t\t\t//Received
    a completion event, meaning that the <br/>\t\t\t\t\t//SSE has been disconnected<br/>\t\t\t\tcase
    .onOpen(_):<br/>\t\t\t\t\t//SSE connection has been established and is active<br/>\t\t\t\tcase
    .onMessage(let messageObj):<br/>\t\t\t\t\t//An empty Message object has been received<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>}</pre><h3>Test
    your app is connected to Harness</h3><p>When you receive a response showing the
    current status of your Feature Flag, go to the Harness Platform and toggle the
    Flag on and off. Then, check your app to verify if the Flag Variation displayed
    is updated with the Variation you toggled.</p><h3>Close the SDK</h3><p>To avoid
    memory leaks, we recommend closing your application when it&#39;s not in use:</p><pre>CfClient.sharedInstance.destroy()
    </pre><p></p><div class=\"warning-callout\">You also need to call this method
    when changing accounts on the <code>CfTarget</code> object to re-initialize and
    fetch Evaluations for the correct Target.</div><h3>Additional options</h3><h4>Using
    our public API methods</h4><p>You can also use the public API methods to initialize
    and implement the Feature Flag iOS SDKs. All the below methods are called on <code>CfClient.sharedInstance</code>.</p><p>The
    Public API exposes the following methods that you can utilize:</p><pre>public
    func initialize(apiKey:configuration:target:cache:onCompletion:)</pre><p></p><pre>public
    func stringVariation(evaluationId:defaultValue:completion:)</pre><p></p><pre>public
    func boolVariation(evaluationId:defaultValue:completion:)</pre><p></p><pre>public
    func numberVariation(evaluationId:defaultValue:completion:)</pre><p></p><pre>public
    func jsonVariation(evaluationId:defaultValue:completion:)</pre><p></p><pre>public
    func registerEventsListener(events:onCompletion:)</pre><p></p><pre>public func
    destroy()</pre><h3>Sample code for an iOS application</h3><p>Here is a sample
    code for using the Harness iOS SDK with an iOS application:</p><pre>import UIKit<br/>import
    ff_ios_client_sdk<br/>class ViewController: UIViewController {<br/>  override
    func viewDidLoad() {<br/>    super.viewDidLoad()<br/>    NSLog(&#34;Start&#34;)<br/>
    \   let config = CfConfiguration.builder()<br/>      .setStreamEnabled(true)<br/>
    \     .build()<br/>    let target = CfTarget.builder().setIdentifier(&#34;Harness&#34;).build()<br/>
    \   CfClient.sharedInstance.initialize(<br/>      apiKey: &#34;YOUR_API_KEY,<br/>
    \     configuration:config,<br/>      target: target<br/>    ) { [weak self] result
    in<br/>      switch result {<br/>        case .failure(let error):<br/>          NSLog(&#34;End:
    Error \\(error)&#34;)<br/>        case .success():<br/>          NSLog(&#34;Init:
    Ok&#34;)<br/>          CfClient.sharedInstance.boolVariation(evaluationId: &#34;EVALUATION_ID&#34;,
    { (eval) in<br/>            print(&#34;Value: \\(eval!)&#34;)<br/>          })<br/>
    \         CfClient.sharedInstance.registerEventsListener() { (result) in<br/>
    \           switch result {<br/>              case .failure(let error):<br/>                print(error)<br/>
    \             case .success(let eventType):<br/>                switch eventType
    {<br/>                  case .onPolling:<br/>                    print(&#34;Event:
    Received all evaluation flags&#34;)<br/>                  case .onEventListener(let
    evaluation):<br/>                    print(&#34;Event: Received an evaluation
    flag, \\(evaluation!)&#34;)<br/>                  case .onComplete:<br/>                    print(&#34;Event:
    SSE stream has completed&#34;)<br/>                  case .onOpen:<br/>                    print(&#34;Event:
    SSE stream has been opened&#34;)<br/>                  case .onMessage(let messageObj):<br/>
    \                   print(messageObj?.event ?? &#34;Event: Message received&#34;)<br/>
    \               }<br/>            }<br/>          }<br/>      }<br/>    }<br/>
    \ }<br/>  override func viewWillDisappear(_ animated: Bool) {<br/>    CfClient.sharedInstance.destroy()<br/>
    \   NSLog(&#34;End: Ok&#34;)<br/>    super.viewWillDisappear(animated)<br/>  }<br/>}<br/></pre><p></p>"
  slug: ios-sdk-reference
  tags:
  - Continuous features
  - SDK
  - iOS SDK
  is_live: true
