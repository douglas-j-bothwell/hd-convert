type: article
article_id: hwoxb6x2oe
user_id: vt9reb71i4
category_id: kkiqy1f6d7
author:
  name: Clare Wilkinson
  email: clare.wilkinson@harness.io
  profile_image: https://www.gravatar.com/avatar/0ff8d5897ddf326bd94ba0e62e7d2841?d=mm&s=150
title: Python SDK Reference
slug: python-sdk-reference
description: This topic explains how to use the Harness Feature Flags SDK in your
  Python application.
short_version: This topic explains how to use the Harness Feature Flags SDK in your
  Python application.
tags:
- SDK
- feature flag
- Python
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-08T13:27:44.893135Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Python SDK Reference
  description: This topic explains how to use the Harness Feature Flags SDK in your
    Python application.
  short_version: This topic explains how to use the Harness Feature Flags SDK in your
    Python application.
  body: '<p>This topic describes how to use the Harness Feature Flags Java SDK for
    your Java application.</p><p>For getting started quickly, you can use our <a href="https://github.com/harness/ff-python-server-sdk/blob/main/README.md"
    target="_blank">sample code from the Python SDK README</a>. You can also <a href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> and run a sample application from the <a href="https://github.com/harness/ff-python-server-sdk"
    target="_blank">Python SDK GitHub Repository.</a></p><h3>Before You Begin</h3><p>You
    should read and understand the following:</p><ul><li><a href="/article/7n9433hkc0-cf-feature-flag-overview"
    target="_blank">Feature Flags Overview</a></li><li><a href="/article/0a2u2ppp8s-getting-started-with-continuous-features"
    target="_blank">Getting Started with Feature Flags</a></li><li><a href="/article/rvqprvbq8f-client-side-and-server-side-sdks"
    target="_blank">Client-Side and Server-Side SDKs</a></li><li><a href="/article/7ikyqtmjce-communication-sdks-harness-feature-flags"
    target="_blank">Communication Strategy Between SDKs and Harness Feature Flags</a></li></ul><h3>Version</h3><div
    class="note-callout">The current version of this SDK is <strong>1</strong><strong>.1.2.</strong></div><h3>Requirements</h3><p>To
    use this SDK, make sure you:  </p><ul><li>Install <a href="https://www.python.org/downloads/">Python
    3.7</a> or newer</li><li>Install <a href="https://packaging.python.org/en/latest/tutorials/installing-packages/#id12">pip</a> </li><li><a
    href="https://github.com/harness/ff-python-server-sdk" target="_blank">Download
    the SDK from our GitHub repository</a></li><li>Create a Java application, or <a
    href="https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository"
    target="_blank">clone</a> our <a href="https://github.com/harness/ff-python-server-sdk"
    target="_blank">sample application</a>.</li><li><a href="/article/1j7pdkqh7j-create-a-feature-flag"
    target="_blank">Create a Feature Flag on the Harness Platform</a>. If you are
    following along with the SDK README sample code, make sure your flag is called <code>harnessappdemodarkmode</code></li><li><a
    href="/article/1j7pdkqh7j-create-a-feature-flag#step_3_create_an_sdk_key" target="_blank">Create
    an SDK key and make a copy of it</a></li></ul><h3>Install the SDK</h3><p>Install
    the python SDK using pip</p><pre>python -m pip install harness-featureflags</pre><h3>Initialize
    the SDK</h3><p>To initialize the Python SDK, you need to:</p><ol><li>Add your
    Server SDK Key to connect to your Harness Environment.</li><li>Add a Target that
    you want to Evaluate against a Feature Flag.</li><li>(Optional) Configure the
    SDK options. For more details on what features you can configure for this SDK,
    go to <a href="/article/hwoxb6x2oe-python-sdk-reference#configure_the_sdk">Configure
    the SDK</a>.</li></ol><h4>Add the Server SDK Key</h4><p>To connect to the correct
    Environment that you set up on the Harness Platform, you need to add the Server
    SDK Key from that Environment. Input the Server SDK Key into the <code>api_key</code>
    parameter. For example:</p><pre>&#34;&#34;&#34;<br/>Put the API Key here from
    your environment<br/>&#34;&#34;&#34;<br/>api_key = &#34;YOUR_API_KEY&#34;;<br/><br/>cf
    = CfClient(api_key);</pre><h4>Add a Target</h4><div class="note-callout"><strong>What
    is a Target?<br/></strong>Targets are used to control which users see which Variation
    of a Feature Flag, for example, if you want to do internal testing, you can enable
    the Flag for some users and not others. When creating a Target, you give it a
    name and a unique identifier. Often Targets are users but you can create a Target
    from anything that can be uniquely identified, such as an app or a machine.<br/>For
    more information about Targets, go to <a href="https://docs.harness.io/article/xf3hmxbaji-targeting-users-with-flags"
    target="_blank">Targeting Users With Flags</a>. </div><p>To add a Target, build
    it and pass in arguments for the following:</p><table><tbody><tr><td><p><strong>Parameter</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Required?</strong></p></td><td><p><strong>Example</strong></p></td></tr><tr><td><p><code>identifier</code></p></td><td><p>Unique
    ID for the Target.</p><p>Read <strong>Regex requirements for Target names and
    identifiers</strong> below for accepted characters.</p></td><td><p>Required</p></td><td><p
    style="box-sizing:border-box;font-family:ui-monospace, SFMono-Regular, &#34;SF
    Mono&#34;, Menlo, Consolas, &#34;Liberation Mono&#34;, monospace;font-size:13.6px;margin-top:0px;margin-bottom:0px;overflow-wrap:normal;padding:16px;overflow:auto;line-height:1.45;background-color:var(--color-canvas-subtle);border-radius:6px;word-break:normal;color:rgb(36,
    41, 47);font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;webkit-text-stroke-width:0px;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"><code>identifier=&#39;HT_1&#39;</code></p></td></tr><tr><td><p><code>name</code></p></td><td><p>Name
    for this Target. This does not have to be unique. </p><p><strong>Note</strong>:
    If you don’t provide a value, the name will be the same as the identifier.</p><p>Read
    <strong>Regex requirements for Target names and identifiers</strong> below for
    accepted characters.</p></td><td><p>Optional</p><p><strong>Note</strong>: If you
    don&#39;t want to send a name, don&#39;t send the parameter. Sending an empty
    argument will cause an error.</p></td><td><p style="box-sizing:border-box;font-family:ui-monospace,
    SFMono-Regular, &#34;SF Mono&#34;, Menlo, Consolas, &#34;Liberation Mono&#34;,
    monospace;font-size:13.6px;margin-top:0px;margin-bottom:0px;overflow-wrap:normal;padding:16px;overflow:auto;line-height:1.45;background-color:var(--color-canvas-subtle);border-radius:6px;word-break:normal;color:rgb(36,
    41, 47);font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;webkit-text-stroke-width:0px;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"><code>name=&#34;Harness_Target_1&#34;</code></p></td></tr><tr><td><p><code>attributes</code></p></td><td><p>Additional
    data you can store for a Target, such as email addresses or location.</p></td><td><p>Optional</p></td><td><p
    style="box-sizing:border-box;font-family:ui-monospace, SFMono-Regular, &#34;SF
    Mono&#34;, Menlo, Consolas, &#34;Liberation Mono&#34;, monospace;font-size:13.6px;margin-top:0px;margin-bottom:0px;overflow-wrap:normal;padding:16px;overflow:auto;line-height:1.45;background-color:var(--color-canvas-subtle);border-radius:6px;word-break:normal;color:rgb(36,
    41, 47);font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;orphans:2;text-align:start;text-indent:0px;text-transform:none;widows:2;word-spacing:0px;webkit-text-stroke-width:0px;text-decoration-thickness:initial;text-decoration-style:initial;text-decoration-color:initial"><code>attributes={&#34;email&#34;:
    &#34;demo@harness.io&#34;}</code></p></td></tr></tbody></table><p></p><details><summary>Regex
    requirements for Target names and identifiers</summary><div><strong>Identifier<br/></strong>Regex:
    <code>^[A-Za-z0-9.@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/><br/>The characters can be lowercase or uppercase but cannot
    include accented letters, for example <code>Cafe_789</code>.<br/><br/><strong>Name<br/></strong>Regex:
    <code>^[\\p{L}\\d .@_-]*$<br/></code><br/>Must consist of only alphabetical characters,
    numbers, and the following symbols:<br/>. (period)<br/>@ (at sign)<br/>- (dash)<br/>_
    (underscore)<br/> (space)<br/><br/>The characters can be lowercase or uppercase
    and can include accented letters, for example <code>Café_123</code>.</div></details><p>For
    example:</p><pre> target = Target(identifier=&#39;HT_1&#39;, name=&#34;Harness_Target_1&#34;,
    attributes={&#34;email&#34;: &#34;demo@harness.io&#34;})</pre><p></p><h4>Configure
    the SDK</h4><p>You can configure the following features of the SDK:</p><table><tbody><tr><td><p><strong>Name</strong></p></td><td><p><strong>Example</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Default
    Value</strong></p></td></tr><tr><td><p>baseUrl</p></td><td><p><code>with_base_url(&#34;https://config.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL used to fetch Feature Flag Evaluations. When using the Relay Proxy, change
    this to: <code>http://localhost:7000</code></p></td><td><p><code>https://config.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>eventUrl</p></td><td><p><code>with_events_url(&#34;https://events.ff.harness.io/api/1.0&#34;)</code></p></td><td><p>The
    URL for posting metrics data to the Feature Flag service. When using the Relay
    Proxy, change this to: <code>http://localhost:7000</code></p></td><td><p><code>https://events.ff.harness.io/api/1.0</code></p></td></tr><tr><td><p>pollInterval</p></td><td><p><code>Config(pull_interval=60)</code></p></td><td><p>The
    interval <strong>in seconds</strong> that we poll for changes when you are using
    stream mode.</p></td><td><p><code>60</code> (seconds)</p></td></tr><tr><td><p>streamEnabled</p></td><td><p><code>with_stream_enabled(True)</code></p></td><td><p>Set
    to <code><code>True</code></code> to enable streaming mode.</p><p>Set to <code>False</code>
    to disable streaming mode.</p></td><td><p><code>True</code></p></td></tr><tr><td><p>analyticsEnabled</p></td><td><p><code>with_analytics_enabled(True)</code></p></td><td><p>Set
    to <code>True</code> to enable analytics.</p><p>Set to <code>False</code> to disable
    analytics.</p><p><strong>Note</strong>: When enabled, analytics data is posted
    every 60 seconds.</p></td><td><p><code>True</code></p></td></tr></tbody></table><p></p><p>For
    example:</p><pre># Create a Feature Flag Client<br/>    client = CfClient(apiKey,<br/>                      with_base_url(&#34;https://config.ff.harness.io/api/1.0&#34;),<br/>                      with_events_url(&#34;https://events.ff.harness.io/api/1.0&#34;),<br/>                      with_stream_enabled(True),<br/>                      with_analytics_enabled(True),<br/>                      Config(pull_interval=60))</pre><p></p><h3>Evaluate
    a Flag</h3><p>Evaluating a Flag is when the SDK processes all Flag rules and returns
    the correct Variation of that Flag for the Target you provide. </p><p>If a matching
    Flag can’t be found, or the SDK can’t remotely fetch flags, the default value
    is returned. </p><p>There are different methods for the different Variation types
    and for each method you need to pass in:</p><ul><li>Identifier of the Flag you
    want to evaluate</li><li>The Target object you want to evaluate against</li><li>The
    default Variation</li></ul><p>For example:</p><h4>Evaluate a boolean Variation</h4><pre
    class="hljs sql">result = cf.bool_variation(&#34;identifier_of_your_bool_flag&#34;,
    target, False);  </pre><h4>Evaluate a string Variation</h4><pre>result = client.string_variation(&#39;identifier_of_your_string_flag&#39;,
    target, &#34;&#34;)</pre><h4>Evaluate a number Variation</h4><pre>result = client.number_variation(&#39;identifier_of_your_number_flag&#39;,
    target, -1)</pre><h4>Evaluate a JSON Variation</h4><pre>client.json_variation(&#39;identifier_of_your_json_flag&#39;,
    target, {})</pre><h3 id="undefined">Test your app is connected to Harness</h3><p>When
    you receive a response showing the current status of your Feature Flag, go to
    the Harness Platform and toggle the Flag on and off. Then, check your app to verify
    if the Flag Variation displayed is updated with the Variation you toggled.</p><h3
    id="undefined">Close the SDK</h3><p>To help prevent memory leaks, we recommend
    closing the SDK when it’s not in use. To do this, run the following command: </p><pre>client.close()</pre><h3
    id="undefined">Additional options</h3><h4 id="undefined">Configure your logger</h4><p>The
    SDK provides a logger that wraps the standard Python logging package. You can
    import and use it with the following:</p><pre>from featureflags.util import log<br/>log.info(&#34;Hello,
    World!&#34;)</pre><p></p><p>To change the default log level, you can use the standard
    logging levels</p><pre>from featureflags.util import log<br/>import logging<br/><br/>log.setLevel(logging.WARN)</pre><h4
    id="undefined">Use the Relay Proxy</h4><p>When using your Feature Flag SDKs with
    a <a href="/article/q0kvq8nd2o-relay-proxy" target="_blank">Harness Relay Proxy</a> you
    need to change the default URL and events URL to <code>http://localhost:7000</code> when
    initializing the SDK. To do this:</p><ol><li>Import the URL helper functions,
    for example:<pre>from featureflags.config import with_base_url<br/>from featureflags.config
    import with_events_url</pre></li><li>Pass the new URLs in when initializing the
    SDK, for example:<pre>    client = CfClient(api_key,<br/>                      with_base_url(&#34;https://config.feature-flags.uat.harness.io/api/1.0&#34;),<br/>                      with_events_url(&#34;https://event.feature-flags.uat.harness.io/api/1.0&#34;))</pre></li></ol><h3>Sample
    code for a Python application</h3><p>Here is a sample code for integrating with
    the Python SDK:</p><pre>import time<br/><br/>from featureflags.evaluations.auth_target
    import Target<br/>from featureflags.client import CfClient<br/>from featureflags.util
    import log<br/>from featureflags.config import with_base_url<br/>from featureflags.config
    import with_events_url<br/><br/><br/>def main():<br/>    log.debug(&#34;Starting
    example&#34;)<br/>    api_key = &#34;Your API key&#34;<br/>    client = CfClient(api_key,<br/>                      with_base_url(&#34;https://config.ff.harness.io/api/1.0&#34;),<br/>                      with_events_url(&#34;https://events.ff.harness.io/api/1.0&#34;))<br/><br/>    target
    = Target(identifier=&#39;harness&#39;)<br/><br/>    while True:<br/>        result
    = client.bool_variation(&#39;your_flag_identifier&#39;, target, False)<br/>        log.debug(&#34;Result
    %s&#34;, result)<br/>        time.sleep(10)<br/><br/>if __name__ == &#34;__main__&#34;:<br/>    main()</pre><p></p>'
  slug: python-sdk-reference
  tags:
  - SDK
  - feature flag
  - Python
  is_live: true
