type: article
article_id: z56wmnris8
user_id: c5pqxi9gu9
category_id: rg8mrhqm95
author:
  name: Manish Jaiswal
  profile_image: https://www.gravatar.com/avatar/a690002c3812e556fec2f79f91e5715e?d=mm&s=150
title: Define an AWS VM Build Infrastructure
slug: set-up-an-aws-vm-build-infrastructure
description: Set up a CI Build Infrastructure using AWS VMs
short_version: Set up a CI Build Infrastructure using AWS VMs
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-17T13:37:02.809321Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: Define an AWS VM Build Infrastructure
  description: Set up a CI Build Infrastructure using AWS VMs
  short_version: Set up a CI Build Infrastructure using AWS VMs
  body: '<div class="note-callout">Currently, this feature is behind the Feature Flag
    <code>CI_VM_INFRASTRUCTURE</code>. Contact <a href="mailto:support@harness.io"
    target="_blank">Harness Support</a> to enable the feature.</div><p>This topic
    describes how to set up and use AWS VMs as build infrastructures for running builds
    and tests in a CI Stage. You will create an Ubuntu VM and install a Delegate on
    it. This Delegate will create new VMs dynamically in response to CI build requests.
    You can also configure the Delegate to hibernate AWS Linux and Windows VMs when
    they aren&#39;t needed. </p><p>Running builds in your infrastructure, rather than
    in a vendor&#39;s cloud, has significant benefits. Vendor clouds often experience
    outages that can result in backlogs and delayed builds. AWS has been battle-tested
    for large container workloads. You can build software and run tests, repeatedly
    and automatically, on a scalable platform with no outages or backlogs.</p><div
    class="note-callout">For information on using Kubernetes as a build farm, see
    <a href="/article/x7aedul8qs-kubernetes-cluster-build-infrastructure-setup">Define
    Kubernetes Cluster Build Infrastructure</a>.</div><p>The following diagram illustrates
    an AWS build farm. The <a href="/article/cya29w2b99-install-a-docker-delegate">​Harness
    Docker Delegate</a> communicates directly with your Harness instance. The <a href="https://docs.drone.io/runner/vm/overview/"
    target="_blank">VM Runner</a> maintains a pool of VMs for running builds. When
    the Delegate receives a build request, it forwards the request to the Runner,
    which runs the build on an available VM.</p><figure><img src="https://files.helpdocs.io/kw8ldg1itf/articles/qfq7fy4cz6/1657373921894/aws-build-farm-simplified.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure><h3>Before
    You Begin</h3><p>This topic assumes you&#39;re familiar with the following:</p><ul><li><a
    href="https://ngdocs.harness.io/article/x0d77ktjw8-ci-pipeline-quickstart">CI
    Pipeline Quickstart</a></li><li><a href="https://ngdocs.harness.io/article/2k7lnc7lvl-delegates-overview">Delegates
    Overview</a></li><li><a href="https://ngdocs.harness.io/article/yn4x8vzw3q-ci-stage-settings">CI
    Stage Settings</a></li><li><a href="https://ngdocs.harness.io/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a></li><li><a href="https://docs.drone.io/runner/vm/overview/"
    target="_blank">VM Runner</a></li></ul><h3>Alternate Workflow: Set Up using Terraform</h3><p>If
    you have Terraform and Go installed on your EC2, you set up your build infrastructure
    as described in the Harness GitHub repo <a href="https://github.com/harness/cie-vm-delegate"
    target="_blank">cie-vm-delegate</a>.</p><h3>Prerequisites</h3><ul><li>AWS EC2
    configuration:<ul><li>For the Delegate VM, use an Ubuntu t2.large (or higher)
    AMI.</li><li>Build VMs can be Ubuntu, AWS Linux, or Windows Server 2019 (or higher).</li><li>Authentication
    requirements:<ul><li>You can use an access key and access secret (<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey">AWS
    secret</a>) for configuration of the Runner.<br/>For Windows instances, you need
    to add the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html">AdministratorAccess
    policy</a> to the IAM role associated with the access key and access secret <a
    href="https://console.aws.amazon.com/iamv2/home#/users">IAM</a>.</li><li>You can
    also use IAM profiles instead of access and secret keys.<br/>You need to run the
    Delegate VM with an IAM role that has CRUD permissions on EC2. This role will
    provide the Runner with temporary security credentials to create VMs and manage
    the build pool.</li></ul></li><li>Set up VPC firewall rules for the build instances
    on EC2.<ul><li>For information on creating a Security Group, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/authorizing-access-to-an-instance.html">Authorize
    inbound traffic for your Linux instances</a> in the AWS docs.</li><li>You also
    need to allow ingress access to ports 22 and 9079. Open port 3389 as well if you
    want to run Windows builds and be able to RDP into your build VMs.</li><li>Once
    completed, you&#39;ll have a Security Group ID, which is needed for the configuration
    of the Runner.</li></ul></li></ul></li></ul><h3>Step 1: Set Up the Delegate VM</h3><ol><li>Log
    into the <a href="https://console.aws.amazon.com/ec2/">EC2 Console</a> and launch
    the VM instance where the Harness Delegate will be installed.</li><li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker"
    target="_blank">Install Docker</a> on the instance.</li><li><a href="https://docs.docker.com/compose/install/">Install
    Docker Compose</a> on your instance. You must have <a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-37">Docker
    Compose version 3.7</a> or higher installed.</li><li>If you are using an IAM role,
    attach the role to the VM. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#attach-iam-role"
    target="_blank">Attach an IAM Role to an Instance</a> in the AWS docs.</li><li>Create
    a <code>/runner</code> folder on your VM and <code>cd</code> into it:<pre>mkdir
    /runner<br/>cd /runner</pre></li></ol><h3>Step 2: Configure the Drone Pool on
    the AWS VM</h3><p>The <strong>.drone_pool.yml</strong> file defines the VM spec
    and pool size for the VM instances used to run the Pipeline. A pool is a group
    of instantiated VM that are immediately available to build CI Pipelines. To avoid
    unnecessary costs, you can configure AWS Linux and Windows VMs to hibernate when
    not in use.</p><ol><li>In the <code>/runner</code> folder, create a new <strong>.drone_pool.yml</strong>
    file.</li><li>Set up the file as described in the following example. Note the
    following:<ol><li>To avoid latency issues, set up your build pool in the same
    Availability Zone as the Delegate VM.</li><li>Search for AMIs in your Availability
    Zone for supported models (Unbuntu, AWS Linux, Windows 2019+). AMI Ids differ
    depending on the Availability Zone.</li><li>See <a href="https://docs.harness.io/article/qfq7fy4cz6-draft-define-an-aws-vm-build-infrastructure-simplified#pool_yml_settings_references">pool.yml
    Settings Reference</a> below for details on specific settings. See also <a href="https://docs.drone.io/runner/vm/configuration/pool/"
    target="_blank">Drone Pool</a> and <a href="https://docs.drone.io/runner/vm/drivers/amazon/"
    target="_blank">Amazon Runner</a> in the Drone docs.</li></ol></li></ol><p>The
    following <strong>.drone_pool.yml</strong> example defines an Ubuntu and a Windows
    pool.</p><details><summary>Example pool.yaml</summary><div><pre class="hljs yaml">version:
    &#34;1&#34;<br/>instances:<br/>  - name: ubuntu-test-pool-july-five<br/>    default:
    true<br/>    type: amazon<br/>    pool: 1    <br/>    limit: 4   <br/>    platform:<br/>      os:
    linux<br/>      arch: amd64<br/>    spec:<br/>      account:<br/>        region:
    us-east-2<br/>        availability_zone: us-east-2c<br/>        access_key_id:
    XXXXXXXXXXXXXXXXX<br/>        access_key_secret: XXXXXXXXXXXXXXXXXXX <br/>      ami:
    ami-051197ce9cbb023ea<br/>      size: t2.nano<br/>      network:<br/>        security_groups:<br/>        -
    sg-XXXXXXXXXXX<br/>  - name: windows-test-pool-july-six<br/>    default: true<br/>    type:
    amazon<br/>    pool: 1<br/>    limit: 4<br/>    platform:<br/>      os: windows<br/>    spec:<br/>      account:<br/>        region:
    us-east-2<br/>        availability_zone: us-east-2c<br/>        access_key_id:
    XXXXXXXXXXXXXXXXXXXXXX<br/>        access_key_secret: XXXXXXXXXXXXXXXXXXXXXX<br/>      ami:
    ami-088d5094c0da312c0<br/>      size: t3.large<br/>      hibernate: true<br/>      network:<br/>        security_groups:<br/>        -
    sg-XXXXXXXXXXXXXX<br/>  </pre></div></details><div class="note-callout">Later
    in this workflow, you&#39;ll reference the pool identifier in the Harness Manager
    to map the pool with a Stage Infrastructure in a CI Pipeline. This is described
    later in this topic.</div><h3>Step 3: Create the Docker-Compose YAML</h3><ol><li>Navigate
    to the Delegates page for your Harness account, organization, or project.</li><li>Click
    <strong>New Delegate</strong> and select <strong>Docker</strong>.</li><li>Follow
    the steps in <a href="/article/cya29w2b99-install-a-docker-delegate">Install the
    Docker Delegate</a> and download the <strong>docker-compose.yaml</strong> file
    to your local machine.</li></ol><h3>Step 4: Configure the Docker Compose File</h3><p>The
    Harness Delegate and Runner run on the same VM. The Runner communicates with the
    Harness Delegate on localhost and port 3000 of your VM. </p><p>In this step, you
    will add the Runner spec to the new Delegate definition. </p><ol><li>Copy your
    local <strong>docker-compose.yaml</strong> to the <code>/runner</code> folder
    on the AWS VM. This folder should now have <strong>docker-compose.yaml</strong>
    and <strong>.drone_pool.yml</strong>.</li><li>Append the following to <strong>docker-compose.yaml</strong>.<pre
    class="hljs yaml">drone-runner-aws:<br/>    restart: unless-stopped<br/>    image:
    image: drone/drone-runner-aws<br/>    volumes:<br/>      - ./runner:/runner<br/>    entrypoint:
    [&#34;/bin/drone-runner-aws&#34;, &#34;delegate&#34;, &#34;--pool&#34;, &#34;pool.yml&#34;]<br/>    working_dir:
    /runner<br/>    ports:<br/>      - &#34;3000:3000&#34;</pre></li><li>In the <strong>docker-compose.yaml</strong>
    file, add the following under <code>services: harness-ng-delegate: restart: unless-stopped</code>:<pre>network_mode:
    &#34;host&#34;</pre></li></ol><p></p><p>Your Docker Compose file now looks something
    like this:</p><details><summary>Updated docker-compose.yml</summary><div><pre>version:
    &#34;3.7&#34;<br/>services:<br/>  harness-ng-delegate:<br/>    restart: unless-stopped<br/>    network_mode:
    &#34;host&#34;<br/>    deploy:<br/>      resources:<br/>        limits:<br/>          cpus:
    &#34;0.5&#34;<br/>          memory: 2048M<br/>    image: harness/delegate:latest<br/>    environment:<br/>      -
    ACCOUNT_ID=XXXXXXXXXXXXXXXX<br/>      - ACCOUNT_SECRET=XXXXXXXXXXXXXXXX<br/>      -
    MANAGER_HOST_AND_PORT=https://qa.harness.io<br/>      - WATCHER_STORAGE_URL=https://app.harness.io/public/qa/premium/watchers<br/>      -
    WATCHER_CHECK_LOCATION=current.version<br/>      - REMOTE_WATCHER_URL_CDN=https://app.harness.io/public/shared/watchers/builds<br/>      -
    DELEGATE_STORAGE_URL=https://app.harness.io<br/>      - DELEGATE_CHECK_LOCATION=delegateqa.txt<br/>      -
    USE_CDN=true<br/>      - CDN_URL=https://app.harness.io<br/>      - DEPLOY_MODE=KUBERNETES<br/>      -
    DELEGATE_NAME=qwerty<br/>      - NEXT_GEN=true<br/>      - DELEGATE_DESCRIPTION=<br/>      -
    DELEGATE_TYPE=DOCKER<br/>      - DELEGATE_TAGS=<br/>      - DELEGATE_TASK_LIMIT=50<br/>      -
    DELEGATE_ORG_IDENTIFIER=<br/>      - DELEGATE_PROJECT_IDENTIFIER=<br/>      -
    PROXY_MANAGER=true<br/>      - VERSION_CHECK_DISABLED=false<br/>      - INIT_SCRIPT=echo
    &#34;Docker delegate init script executed.&#34;<br/>  drone-runner-aws:<br/>    restart:
    unless-stopped<br/>    image: drone/drone-runner-aws:1.0.0-rc.2<br/>    volumes:<br/>      -
    .:/runner<br/>    entrypoint: [&#34;/bin/drone-runner-aws&#34;, &#34;delegate&#34;,
    &#34;--pool&#34;, &#34;pool.yml&#34;]<br/>    working_dir: /runner<br/>    ports:<br/>      -
    &#34;3000:3000&#34;</pre></div></details><p></p><h3>Step 5: Install the Delegate
    and Runner</h3><ol><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html"
    target="_blank">SSH</a> into the Delegate VM and <strong><code>cd</code></strong>
    to <code>/runner</code>.</li><li>Confirm that the folder has both setup files:<pre
    class="hljs bash">$ ls -a<br/>.  ..  docker-compose.yml  .drone_pool.yml </pre></li><li>Install
    the Delegate and Runner:<pre class="hljs bash">$ docker-compose -f docker-compose.yml
    up -d</pre></li><li>Verify that both containers are running correctly. (you might
    need to wait a few minutes for both processes to start.)<pre class="hljs bash">$
    docker ps<br/>$ docker logs &lt;delegate-container-id&gt;<br/>$ docker logs &lt;runner-container-id&gt;</pre></li><li>In
    the Harness UI, verify that the Delegate appears in the Delegates list. This might
    take two or three minutes. You should see Connected next to the Delegate listing.<figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643917936569/clean-shot-2022-02-03-at-11-51-24.png"/></figure></li><li>If
    you see <strong>Not Connected</strong>, make sure the Docker host can connect
    to <strong>https://app.harness.io</strong>.</li></ol><p>The Delegate and Runner
    have now been successfully installed, registered, and connected.</p><div class="note-callout">For
    details on the environment variables of the Harness Docker Delegate, see <a href="https://ngdocs.harness.io/article/cya29w2b99-install-a-docker-delegate#harness_docker_delegate_environment_variables">Harness
    Docker Delegate Environment Variables</a>.</div><h3>Step 6: Run a CI Build</h3><ol><li>In
    the Harness CI Stage, in <strong>Infrastructure</strong>, select <strong>AWS VMs</strong>.<figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759775208/clean-shot-2022-02-01-at-15-56-02.png"/></figure></li><li>In
    the <strong>Pool ID</strong>, enter the pool name <code>&lt;pool_id&gt;</code>
    that you added in <a href="https://docs.harness.io/article/qfq7fy4cz6-draft-define-an-aws-vm-build-infrastructure-simplified#step_2_configure_the_drone_pool_on_the_aws_vm">Step
    2: Configure the Drone Pool on the AWS VM</a>.<figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/z56wmnris8/1643759913082/clean-shot-2022-02-01-at-15-58-24.png"
    style="display:block;margin-left:0;margin-right:auto" data-hd-align="left"/></figure></li><li>Your
    AWS build infrastructure is now set up. You can now run your Build Stages on AWS
    VMs.</li></ol><h3>Pool Settings Reference</h3><p>You can configure the following
    settings in your pool.yml file.</p><table><tbody><tr><td><p><strong>Subfields</strong></p></td><td><p><strong>Examples</strong></p></td><td><p><strong>Description</strong></p></td></tr><tr><td><p><code>name</code>
    (String)</p></td><td><p>NA | <code>name: windows_pool</code></p></td><td><p>Unique
    identifier of the pool. You will be referencing this pool name in the Harness
    Manager in later steps while setting up the CI Stage Infrastructure.</p></td></tr><tr><td><p><code>min_pool_size</code>
    (Integer)</p></td><td><p>NA | <code>min_pool_size: 1</code></p></td><td><p>Minimum
    pool size number. Denotes the minimum number of cached VMs in ready state to be
    used by the Runner.</p></td></tr><tr><td><p><code>max_pool_size</code> (Integer)</p></td><td><p>NA
    | <code>max_pool_size: 3</code></p></td><td><p>Maximum pool size number. Denotes
    the maximum number of cached VMs in ready state to be used by the Runner.</p></td></tr><tr><td><p><code>hibernate</code>
    (boolean)</p></td><td><p><code>hibernate: true</code></p></td><td><p>When set
    to <code>true</code> (the default), VMs are set to hibernate after startup. When
    <code>false</code>, VMs are always in a running state.</p><p>This option is supported
    for AWS Linux and Windows VMs. Hibernation for Ubuntu VMs is not currently supported.
    </p><p>See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html"
    target="_blank">Hibernate your On-Demand Linux instance</a> in the AWS docs.</p></td></tr><tr><td><p><code>platform</code></p></td><td><p>os
    (String) |</p><p> <code>platform: os: windows</code></p><p>arch (String) |</p><p><code>platform:
    arch:</code>  </p><p>variant (String) |</p><p><code>platform: variant:</code> </p><p>version
    (String) |</p><p><code>platform: version:</code> </p></td><td><p>Configure the
    details of your VM platform. By default, the platform is set to Linux OS and AMD64
    architecture.</p></td></tr><tr><td><p><code>instance</code></p></td><td><p>ami
    (String) |</p><pre>instance:<br/>  ami: ami-092f63f22143765a3</pre><p>tags (String)
    |</p><pre>instance:<br/>  tags: 285</pre><p>type (String) |</p><pre>instance:<br/>  type:
    t2.micro</pre><p>disk </p><ul><li>size (Integer)</li></ul><pre>disk:<br/>  size:</pre><ul><li>type
    (String)</li></ul><pre>disk:<br/>  type:</pre><ul><li>iops (String)</li></ul><pre>disk:<br/> 
    iops:</pre><p>Network</p><ul><li>vpc (Integer) |</li></ul><pre>network:<br/>  vpc:</pre><ul><li>vpc_security_groups
    ([ ] String) |</li></ul><pre>network:<br/>  vpc_security_groups:<br/>  - sg-0ad8xxxx511b0</pre><ul><li>security_groups
    ([ ] String) |</li></ul><pre>network:<br/>  security_groups:<br/>    - sg-06dcxxxx9811b0</pre><ul><li>Subnet_id
    (String) |</li></ul><pre>network:<br/>  subnet_id:<br/>  subnet-0ab15xxxx07b53</pre><ul><li>private_ip
    (boolean) |</li></ul><pre>network:<br/>  private_ip:</pre></td><td><p>Configure
    the settings of your AWS instance.</p><p>Disk contains AWS block information.</p><p>Network
    contains AWS network information.</p><p>For more information on these attributes,
    refer to the AWS doc <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-a-base-security-group">Create
    a security group</a>.</p></td></tr></tbody></table><p></p><h3>Runner Settings Reference
    (Advanced)</h3><p>You can set the following Runner options your docker-compose.yml
    file. These can be useful for advanced use cases such as troubleshooting the Runner.</p><p>Here&#39;s
    an example:</p><details><summary>docker-compose.yml with Drone Environment Settings</summary><div><pre>version:
    &#34;3.7&#34;<br/>services:<br/>  harness-ng-delegate:<br/>    restart: unless-stopped<br/>    network_mode:
    &#34;host&#34;<br/>    deploy:<br/>      resources:<br/>        limits:<br/>          cpus:
    &#34;0.5&#34;<br/>          memory: 2048M<br/>    image: harness/delegate:latest<br/>    environment:<br/>      -
    MANAGER_HOST_AND_PORT=https://qa.harness.io<br/>      - WATCHER_STORAGE_URL=https://app.harness.io/public/qa/premium/watchers<br/>      -
    WATCHER_CHECK_LOCATION=current.version<br/>      - REMOTE_WATCHER_URL_CDN=https://app.harness.io/public/shared/watchers/builds<br/>      -
    DELEGATE_STORAGE_URL=https://app.harness.io<br/>      - DELEGATE_CHECK_LOCATION=delegateqa.txt<br/>      -
    USE_CDN=true<br/>      - CDN_URL=https://app.harness.io<br/>      - DEPLOY_MODE=KUBERNETES<br/>      -
    DELEGATE_NAME=qwerty<br/>      - NEXT_GEN=true<br/>      - DELEGATE_DESCRIPTION=<br/>      -
    DELEGATE_TYPE=DOCKER<br/>      - DELEGATE_TAGS=<br/>      - DELEGATE_TASK_LIMIT=50<br/>      -
    DELEGATE_ORG_IDENTIFIER=<br/>      - DELEGATE_PROJECT_IDENTIFIER=<br/>      -
    PROXY_MANAGER=true<br/>      - DRONE_SETTINGS_AWS_ACCESS_KEY_ID=&#34;&lt;access_key&gt;&#34;<br/>      -
    DRONE_SETTINGS_AWS_ACCESS_KEY_SECRET=&#34;&lt;secret_key&gt;&#34;<br/>      -
    DRONE_SETTINGS_AWS_REGION=&#34;us-east-2&#34;<br/>      - DRONE_SETTINGS_REUSE_POOL=false<br/>      -
    DRONE_SETTINGS_LITE_ENGINE_PATH=https://github.com/harness/lite-engine/releases/download/v0.0.1.12<br/>      -
    DRONE_DEBUG=true<br/>      - DRONE_TRACE=true<br/>      - DRONE_SETTINGS_KEY_PAIR_NAME=&#34;&lt;name_of_key_pair&gt;&#34;<br/>      -
    VERSION_CHECK_DISABLED=false<br/>      - INIT_SCRIPT=echo &#34;Docker delegate
    init script executed.&#34;<br/>  drone-runner-aws:<br/>    restart: unless-stopped<br/>    image:
    drone/drone-runner-aws:1.0.0-rc.2<br/>    volumes:<br/>      - .:/runner<br/>    entrypoint:
    [&#34;/bin/drone-runner-aws&#34;, &#34;delegate&#34;, &#34;--pool&#34;, &#34;pool.yml&#34;]<br/>    working_dir:
    /runner<br/>    ports:<br/>      - &#34;3000:3000&#34;</pre></div></details><p>Configure
    the following fields in the <strong>.env</strong> file to allow Runner to access
    and launch your AWS VM.</p><p></p><table><tbody><tr><td><p><strong>Fields</strong></p></td><td><p><strong>Description</strong></p></td><td><p><strong>Value</strong></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_ACCESS_KEY_ID</p></td><td><p>Enter
    your AWS Access Key ID.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_ACCESS_KEY_SECRET</p></td><td><p>Enter
    your AWS access key secret.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_REGION</p></td><td><p>Enter
    your AWS region.</p></td><td><p></p></td></tr><tr><td><p>DRONE_SETTINGS_REUSE_POOL</p></td><td><p>Reuse
    existing EC2 instances on restart of the Runner.</p></td><td><p><code>false</code></p></td></tr><tr><td><p>DRONE_SETTINGS_LITE_ENGINE_PATH</p></td><td><p>This
    variable contains the release information for the Lite Engine. The Lite Engine
    is a binary that is injected into the VMs with which the Runner interacts. It
    is responsible for coordinating the execution of the steps.</p></td><td><p><code>https://github.com/harness/lite-engine/releases/download/v0.0.1.12</code></p></td></tr><tr><td><p>DRONE_TRACE</p></td><td><p>Optional
    boolean value. Enables trace-level logging.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>DRONE_DEBUG</p></td><td><p>Optional
    boolean value. Enables debug-level logging.</p></td><td><p><code>true</code></p></td></tr><tr><td><p>DRONE_SETTINGS_AWS_KEY_PAIR_NAME</p></td><td><p>Enter
    the name of the key pair.</p><p>The Runner allows you to specify a key pair to
    use in case you want to connect to your Windows VM via RDP.</p><p>This is highly
    recommended for troubleshooting.</p><p>SSH is installed via a cloud-init script,
    so in case something goes wrong, connecting via RDP will always be possible.</p><p>For
    details, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">AWS
    EC2 Key pairs</a>. </p></td><td><p></p></td></tr></tbody></table><p></p><h3>See
    Also</h3><ul><li><a href="/article/ia5dwx5ya8-set-up-a-kubernetes-cluster-build-infrastructure">Set
    Up a Kubernetes Cluster Build Infrastructure</a></li><li>For more details on VM
    Runner, visit this <a href="https://github.com/drone-runners/drone-runner-aws">GitHub</a>
    page.</li></ul><p></p>'
  slug: set-up-an-aws-vm-build-infrastructure
  tags: []
  is_live: true
