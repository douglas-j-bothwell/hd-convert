type: article
article_id: 3amcd8hn53
user_id: xwmdbyp4x8
category_id: pjovrkldfq
author:
  name: Doug Bothwell
  profile_image: https://www.gravatar.com/avatar/120de2cc624d7903cf3d83b86d0f1b5e?d=mm&s=150
title: CI Pipeline Basics
slug: ci-pipeline-basics
description: This topic covers CI Pipeline basics to get you ready to start building
  Pipelines easily. For details on Harness' Key Concepts, see Learn Harness' Key Concepts.
  Pipelines. A CI Pipeline is an end-to-…
short_version: This topic covers CI Pipeline basics to get you ready to start building
  Pipelines easily. For details on general Harness concepts, see Learn Harness' Key
  Concepts. Pipelines. A CI Pipeline is an end-…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-08-15T12:39:08.070301Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: CI Pipeline Basics
  description: This topic covers CI Pipeline basics to get you ready to start building
    Pipelines easily. For details on Harness' Key Concepts, see Learn Harness' Key
    Concepts. Pipelines. A CI Pipeline is an end-to-…
  short_version: ""
  body: '<p>This topic covers CI Pipeline basics to get you ready to start building
    Pipelines easily.</p><p>For details on general Harness concepts, see <a href="/article/hv2758ro4e-learn-harness-key-concepts">Learn
    Harness&#39; Key Concepts</a>.</p><h3>Pipelines</h3><p>A CI Pipeline is an end-to-end
    integration workflow that pulls a codebase, builds an artifact, and then uploads
    the artifact to storage or a registry such as Docker Hub, Google Cloud Registry,
    JFrog Artifactory, and many others.</p><p>You can run a Pipeline manually or set
    up Triggers to automatically run it on a schedule or when an event occurs, like
    a Git merge in your codebase.</p><h3>Stages</h3><p>A CI Stage is a subset of a
    Pipeline that performs one major segment of the CI workflow. A Build Stage includes
    Steps for building, pushing, and testing your code. The first Stage in a Pipeline
    includes the default Codebase for the Pipeline and shares it with later stages.
    See <a href="https://ngdocs.harness.io/article/yn4x8vzw3q-ci-stage-settings">CI
    Stage Settings</a>.</p><h3>Steps</h3><p>A Stage contains one or more Steps. Each
    Step is a series of commands that perform a task. A Build and Push Step builds
    an image and pushes it to a cloud repo, a Run Step runs a series of shell commands,
    and so on.</p><p>When a Pipeline runs, it creates a temporary volume called a
    <em>Workspace</em>. The Build Stage clones your codebase to the root of the Workspace
    and runs Steps inside the root. The Workspace persists for the lifetime of the
    Stage and enables individual Steps to communicate and share state information.</p><p>Harness
    CI includes an extensive Step Library for common CI tasks: building artifacts,
    uploading to cloud repos, running tests, and so on.</p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/qr4h6kn6yd/1632730923440/j-zhbga-hi-0-ozkc-g-4-d-8-b-qh-0-trfl-hsjxx-0-a-w-4-q-3-umnc-omcn-2-b-jb-ll-sw-1-ie-jw-hl-abaf-5-z-seq-6-g-04-nw-02-pva-wy-simv-igej-dcf-evxa-zjq-qhp-31-h-6-nbxpr-te-l-phdh-iwtytds-lg-1-n-1-a-s-0"
    style="max-height:60%;max-width:70%;display:block;margin-left:0;margin-right:auto"
    data-hd-height="60%" data-hd-width="70%" data-hd-align="left"/></figure><h3>Shared
    Path</h3><p>You can use Shared Paths in a Stage to share data across Steps. By
    default, all Steps in a Stage use the same Workspace to share data. By default,
    <code>/harness</code> is the shared working directory for a Stage. For example,
    the Maven m2 repo is stored in <code>/root/.m2</code> by default. You can specify
    this same path in later Stages.</p><p>If you need to share additional volumes,
    you can add Shared Paths.</p><h3>Service Dependencies</h3><p>A Service Dependency
    enables multiple Stages to access the same service. For example, your Pipeline
    might include unit tests that require a running Redis server. Service Dependencies
    run in an isolated container, so you don&#39;t need to handle dependencies. See
    <a href="https://ngdocs.harness.io/article/vo4sjbd09g-configure-service-dependency-step-settings">Configure
    Service Dependency</a>.</p><h3>Plugins</h3><p>Plugins are Docker containers that
    perform predefined tasks and are configured as Steps in your Stage. You can use
    Plugins to deploy code, publish artifacts, send notifications, and more.</p><p>The
    Drone community maintains an <a href="https://plugins.drone.io/" target="_blank">extensive
    library</a> of plugins for specific CI workflows. You can customize and extend
    your build processes using existing plugins or <a href="https://harness.io/blog/continuous-integration/write-first-plugin-for-cie/"
    target="_blank">write your own</a>.</p><p>See <a href="https://ngdocs.harness.io/article/8r5c3yvb8k-plugin-step-settings-reference">Plugin
    Step Settings</a> and <a href="https://ngdocs.harness.io/article/fjagoj8mez-run-a-drone-plugin-in-ci">Run
    a Drone Plugin in CI</a>.</p><h3>Caching</h3><p>Caching ensures faster job execution
    by reusing data from expensive fetch operations in previous jobs. You can use
    Save Cache and Restore Cache steps to save a cache to a cloud storage bucket and
    restore it later. See <a href="https://ngdocs.harness.io/category/01tyeraya4-caching-ci-data">Cache
    CI Data</a>.</p><h3>Remote Docker Layer Caching</h3><p>Harness enables remote
    Docker Layer Caching where each Docker layer is uploaded as an image to a Docker
    repo you identify. If the same layer is used in subsequent builds, Harness downloads
    the layer from the Docker repo.</p><p>This is different from other CI vendors
    that are limited to local caching and persistent volumes.</p><p>You can also specify
    the same Docker repo for multiple Build and Push steps, enabling them to share
    the same remote cache.</p><p>Remote Docker Layer Caching can dramatically improve
    build time by sharing layers across Pipelines, Stages, and steps.</p><h3>Artifact
    Repos</h3><p>Harness CIE offers popular object storage options such as JFrog,
    Amazon S3, and Google GCS where you can push your artifacts. Object storage repos
    are set up as Pipeline Steps by using the Upload Artifacts step from the Step
    library.</p><h3><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Services</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">A Service represents your microservices,
    Serverless functions, and other workloads logically. You can deploy, monitor,
    or change each Service independently.</span></p><h3><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">Service Definition</span></h3><p><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">When you add a Service to a Stage, the Service Definition
    represents the real artifacts, manifests, and variable settings of that Service.
    You can propagate or override a Service in later Stages of the Pipeline.</span></p><h3><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Infrastructure Definition</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Infrastructure Definitions represent
    the Kubernetes build infrastructure used by a CI pipeline: the target clusters,
    hosts, and so on.</span></p><h3><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Connectors</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Connectors contain the information
    necessary to integrate and work with third-party tools such as Git providers and
    artifact repos. For example, a GitHub Connector authenticates with a GitHub account
    and repo and fetches files as part of a deploy Stage. Harness uses Connectors
    at Pipeline runtime to authenticate and run operations in external tools.</span></p><h3><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Permissions</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Connectors require different permissions
    depending on your build environment and the tasks your Pipeline performs.</span></p><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">For example, if your Pipeline builds
    and pushes an image to Docker Hub, you need a Connector that can connect to the
    Docker Hub repo and push images.</span></p><h3><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Delegates</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">The Harness Delegate is a software
    service you install in your environment that connects to the Harness Manager and
    performs tasks using your container orchestration platforms, artifact repositories,
    monitoring systems, and so on.</span></p><h3><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Credentials
    and Permissions</span></h3><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">The
    Delegate uses the credentials set up in the Connectors used by the Pipeline to
    perform deployment tasks.</span></p><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">The
    Delegate also needs permissions in the target environment to execute build tasks.
    These permissions are granted in the Delegate config file or the environment account
    you use when installing the Delegate.</span></p><h3><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">Variables</span></h3><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">You
    can add and reference custom variables in Pipelines and Stages. They&#39;re available
    across the Pipeline. You can propagate and override their values in later stages.</span></p><h3><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Triggers</span></h3><p><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">You can run your Pipelines manually or use triggers to
    initiate their execution. You can trigger a Pipeline based on Git commits and
    pull requests, schedules, and so on.</span></p><h3>Test Intelligence</h3><p>Test
    Intelligence speeds up your test cycles by running only the tests required to
    confirm the quality of the code changes that triggered a build. You can easily
    see the code changes and gaps in the test plan. Test Intelligence also identifies
    negative trends and provides actionable insights to improve quality.</p><h3>CI
    Overview</h3><p>The CI Overview provides a bird&#39;s-eye view of all your Builds
    — successful, failed, aborted, and expired — and the percentage of successful
    builds for individual codebases. You can easily see where your builds have failed
    and drill down into specific builds to troubleshoot and analyze the root causes.</p><h3><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Advanced Settings</span></h3><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Pipelines, Stages, and Steps have
    advanced settings to control the flow of operations.</span></p><h4><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">Inputs and Overlays</span></h4><p><span style="color:#4d4d4d"
    data-hd-color="#4d4d4d">Harness Input Sets are collections of Runtime Inputs for
    a Pipeline run. Overlays are groups of Input Sets. Overlays enable you to provide
    several Input Sets when you run a Pipeline. With Input Sets and Overlays, you
    can make one Pipeline template and use it for multiple scenarios. Each scenario
    can be defined in an Input Set or Overlay and simply selected at runtime.</span></p><h4><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">Conditional Executions</span></h4><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">You can set conditions on when you
    run Stages and Steps. For example, <code>Execute This Stage Only if Prior Pipeline
    or Stage Failed</code>.</span></p><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">The
    stage Conditional Execution applies to all steps that don&#39;t have their own
    Conditional Execution. A step&#39;s Conditional Execution overrides its stage&#39;s
    Conditional Execution.</span></p><h4><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Failure
    Strategies</span></h4><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">A
    failure strategy defines how your Stages and Steps handle different failure conditions.</span></p><p><span
    style="color:#4d4d4d" data-hd-color="#4d4d4d">The failure strategy contains error
    conditions that must occur for the strategy to apply, and actions to take when
    the conditions occur.</span></p><p><span style="color:#4d4d4d" data-hd-color="#4d4d4d">Failure
    strategies are a critical pipeline design component that determine what fails
    a step or stage and what to do when the failure occurs.</span></p><p></p>'
  slug: ci-pipeline-basics
  tags: []
  is_live: true
