type: article
article_id: 1i1ttvftm4
user_id: mfr0nxh4be
category_id: 4xo13zdnfx
author:
  name: Michael Cretzman
  profile_image: https://www.gravatar.com/avatar/2e8616837f4ee92be5d19ffe9b9ccba9?d=mm&s=150
title: CI Run Step Settings
slug: run-step-settings
description: This topic provides settings and permissions for the Harness CI Run step.
  The Build stage Run step can be used to run scripts in your CI stages. The Run step
  pulls in a Docker image, like the Docker…
short_version: This topic provides settings and permissions for the Harness CI Run
  step. The Build stage Run step can be used to run scripts in your CI stages. The
  Run step pulls in a Docker image, like the Docker…
tags: []
show_toc: true
is_private: false
is_published: true
is_featured: false
stale_status:
  is_stale: false
  reason: ""
  source: API
  triggered_at: 2022-09-06T01:15:30.839811Z
  expires_at: null
permission_groups: []
multilingual:
- language_code: en
  title: CI Run Step Settings
  description: ""
  short_version: ""
  body: '<p>This topic provides settings and permissions for the Harness CI Run step.</p><p>The
    Build stage <strong>Run</strong> step can be used to run scripts in your CI stages.</p><p>The
    <strong>Run</strong> step pulls in a Docker image, like the Docker image for Maven,
    and then you run a script with the tool, like <code>mvn clean install</code>.
    You can use any Docker image from any public or private Docker registry.</p><h3>Name</h3><p>The
    unique name for this step.</p><h3>ID</h3><p>See <a href="/article/li0my8tcz3-entity-identifier-reference">Entity
    Identifier Reference</a>.</p><h3>Description</h3><p>Text string.</p><h3>Container
    Registry</h3><p>The Harness Connector for a container registry. This is the container
    registry for the image Harness will use run build commands on, such as DockerHub.</p><h3>Image</h3><p>The
    FQN (fully-qualified name) of the Docker image to use when running build commands.
    For example: <code>us.gcr.io/playground-123/quickstart-image</code>.</p><p>The
    image name should include the tag and will default to the latest tag if unspecified.
    You can use any Docker image from any D registry, including Docker images from
    private registries.</p><p>Different container registries require different name
    formats:</p><ul><li><strong>Docker Registry:</strong> enter the name of the artifact
    you want to deploy, such as <strong>library/tomcat</strong>. Wildcards are not
    supported.</li><li><strong>GCR:</strong> enter the FQN (fully-qualified name)
    of the artifact you want to deploy. Images in repos need to reference a path,
    for example: <strong>us.gcr.io/playground-123/quickstart-image:latest</strong>.</li></ul><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1628031232587/clean-shot-2021-08-03-at-15-53-30.png"/></figure><ul><li><strong>ECR:</strong>
    enter the FQN (fully-qualified name) of the artifact you want to deploy. Images
    in repos need to reference a path, for example: <strong>40000005317.dkr.ecr.us-east-1.amazonaws.com/todolist:0.2</strong>.</li></ul><h3>Commands</h3><p><a
    href="https://www.grymoire.com/Unix/Sh.html" target="_blank">POSIX</a> shell script
    executed inside the container. In the Shell setting, you can select <strong>Bash</strong>
    or <strong>Shell</strong>.</p><p>The script is invoked as if it were the container’s
    entry point.</p><h3>Optional Configuration</h3><p>Configure the following options
    to add additional configuration for the Step.</p><h4>Privileged</h4><p>Enable
    this option to run the container with escalated privileges. This is the equivalent
    of running a container with the Docker <code>--privileged</code> flag.</p><h4>Report
    Paths</h4><p>The path to the file(s) that store results in the JUnit XML format.</p><p>Regex
    is supported.</p><div class="note-callout">This variable must be set for the Step
    to publish test results.</div><h4>Environment Variables</h4><p>Environment variables
    injected into the container and used in the script in <strong>Command</strong>.</p><p>Enter
    a <strong>Name</strong> and <strong>Value</strong> for each variable.</p><p>You
    reference the environment variables in the script by their name, just like in
    Bash ( <code>$var_name</code> or <code>${var_name}</code>) or Windows PowerShell
    (<code>$Env:varName</code>).</p><p>For <strong>Value</strong>, you can enter <a
    href="/article/f6yobn7iq0-runtime-inputs">Fixed Values, Runtime Inputs, and Expressions</a>.</p><p>For
    example, you can set <strong>Value</strong> as an expression and reference the
    value of some other setting in the Stage or Pipeline.</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1644602120778/clean-shot-2022-02-11-at-09-55-12.png"/></figure><p>See
    <a href="/article/lml71vhsim-harness-variables">Built-in Harness Variables Reference</a>.</p><h4>Output
    Variables</h4><p>Output variables expose Environment Variables for use by other
    steps/stages of the Pipeline.</p><p>You reference the output variable of a step
    using the step ID and the name of the variable in Output Variables.</p><p>Let&#39;s
    look at a simple example.</p><p>In the <strong>Command</strong> in a step, export
    a new variable using the following syntax:</p><pre>export myVar=varValue</pre><p></p><p>In
    the <strong>Output Variables</strong>, list the exported variable name:</p><p></p><figure><img
    src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1611947065452/image.png"/></figure><p>In
    a later <strong>Run</strong> step, in <strong>Command</strong>, reference the
    output variable:</p><pre>echo &lt;+steps.S1.output.outputVariables.myVar&gt;</pre><p></p><p>Here&#39;s
    how the S1 step&#39;s output variable is referenced:</p><p></p><figure><img src="https://files.helpdocs.io/i5nl071jo5/articles/1i1ttvftm4/1626099541575/2021-06-28-17-45-23.png"
    style="max-height:50%;max-width:50%" data-hd-height="50%" data-hd-width="50%"/></figure><p>Syntax
    for referencing output variables between steps in the same stage:</p><p><code>&lt;+[stepID].output.outputVariables.[varName]&gt;</code></p><p>Syntax
    for referencing output variables between steps in different stages:</p><p><code>&lt;+stages.[stageID].execution.steps.[stepID].output.outputVariables.[varName]&gt;</code></p><div
    class="note-callout">The subsequent build job fails when exit 0 is present along
    with output variables.</div><h4>Image Pull Policy</h4><p>Select an option to set
    the pull policy for the image.</p><ul><li><strong>Always</strong>: the kubelet
    queries the container image registry to resolve the name to an image digest every
    time the kubelet launches a container. If the kubelet encounters an exact digest
    cached locally, it uses its cached image; otherwise, the kubelet downloads (pulls)
    the image with the resolved digest, and uses that image to launch the container.</li><li><strong>If
    Not Present</strong>: the image is pulled only if it is not already present locally.</li><li><strong>Never</strong>:
    the image is assumed to exist locally. No attempt is made to pull the image.</li></ul><h4>Shell</h4><p>Select
    the shell script. If a Run Step includes commands that aren’t supported for the
    selected shell type, the build will fail.</p><p>You can run PowerShell Core (pwsh)
    commands in pods or containers that have pwsh installed. You can run PowerShell
    commands on Windows VMs running in AWS build farms.</p><h4>Run as User</h4><p>Set
    the value to specify the user id for all processes in the pod, running in containers.
    See <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod">Set
    the security context for a pod</a>.</p><h4>Set container resources</h4><p>Maximum
    resources limit values for the resources used by the container at runtime.</p><h5>Limit
    Memory</h5><p>Maximum memory that the container can use. You can express memory
    as a plain integer or as a fixed-point number using the suffixes <code>G</code> or <code>M</code>.
    You can also use the power-of-two equivalents <code>Gi</code> and <code>Mi</code>.</p><h5
    id="undefined">Limit CPU</h5><p>The maximum number of cores that the container
    can use. CPU limits are measured in cpu units. Fractional requests are allowed:
    you can specify one hundred millicpu as <code>0.1</code> or <code>100m</code>.
    See <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-units-in-kubernetes"
    target="_blank">Resource units in Kubernetes</a>.</p><h5>Timeout</h5><p>Timeout
    for the step. Once the timeout is reached, the step fails, and the Pipeline execution
    continues.</p><h3>See Also</h3><ul><li><a href="/article/i36ibenkq2-step-skip-condition-settings">Step
    Skip Condition Settings</a></li><li><a href="/article/htrur23poj-step-failure-strategy-settings">Step
    Failure Strategy Settings</a></li></ul><p></p>'
  slug: run-step-settings
  tags: []
  is_live: true
